{"version":3,"file":"78.bundle.97bb7a30546f6ad5a730.js","mappings":"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AAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CA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","sources":["webpack:///../../../../cornerstone3D/packages/tools/src/enums/ToolBindings.ts","webpack:///../../../../cornerstone3D/packages/tools/src/enums/ToolModes.ts","webpack:///../../../../cornerstone3D/packages/tools/src/enums/AnnotationStyleStates.ts","webpack:///../../../../cornerstone3D/packages/tools/src/enums/Events.ts","webpack:///../../../../cornerstone3D/packages/tools/src/enums/SegmentationRepresentations.ts","webpack:///../../../../cornerstone3D/packages/tools/src/enums/Touch.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/annotationLocking.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/annotationSelection.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/annotationVisibility.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/svgNodeCache.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/state.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/addTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/mouse/getMouseEventPoints.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/mouse/mouseDoubleClickListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/mouse/mouseMoveListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/mouse/mouseDownListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/mouse/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/touch/preventGhostClick.js","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/touch/getTouchEventPoints.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/touch/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/touch/touchStartListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/touch/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/wheel/normalizeWheel.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/wheel/wheelListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/wheel/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/keyboard/keyDownListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/keyboard/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/constants/COLOR_LUT.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/contourConfig.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Labelmap/labelmapConfig.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/SegmentationStateManager.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/triggerSegmentationEvents.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/helpers/normalizeSegmentationInput.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/segmentationState.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/config/segmentationConfig.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Labelmap/addLabelmapToElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Labelmap/removeLabelmapFromElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Labelmap/labelmapDisplay.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/utils.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/contourConfigCache.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/addContourSetsToElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/updateContourSets.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/removeContourFromElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/contourDisplay.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Contour/addOrUpdateContourSets.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/removeSegmentationsFromToolGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/Labelmap/validateRepresentationData.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/helpers/validateSegmentationInput.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/addSegmentations.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/addSegmentationRepresentations.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/activeSegmentation.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/segmentLocking.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/config/segmentationColor.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/config/segmentationVisibility.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/segmentation/segmentIndex.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/base/BaseTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/getSvgDrawingHelper.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/draw.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/_getHash.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/_setAttributesIfNecessary.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/_setNewAttributesIfValid.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawCircle.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawEllipse.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawHandles.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawLine.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawPolyline.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawTextBox.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/vec2/findClosestPoint.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawLink.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawLinkedTextBox.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawRect.ts","webpack:///../../../../cornerstone3D/packages/tools/src/drawingSvg/drawArrow.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/getToolsWithModesForElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/triggerAnnotationRender.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planar/filterAnnotationsWithinSlice.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planar/filterAnnotationsForDisplay.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/config/ToolStyle.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/config/helpers.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/config/getState.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/config/getFont.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/base/AnnotationDisplayTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/base/AnnotationTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/displayTools/SegmentationDisplayTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/triggerSegmentationRender.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/segmentation/segmentationRepresentationModifiedEventListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/segmentation/segmentationDataModifiedEventListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/segmentation/segmentationRepresentationRemovedEventListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/segmentation/segmentationModifiedEventListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/getAnnotationNearPoint.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/isObject.js","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/debounce.js","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/throttle.js","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/clip.js","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/calibrateImageSpacing.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/triggerAnnotationRenderForViewportIds.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/scroll.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/viewport/jumpToSlice.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/pointInShapeCallback.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/boundingBox/extend2DBoundingBoxInViewAxis.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/boundingBox/getBoundingBoxAroundShape.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/pointInSurroundingSphereCallback.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/sphere/pointInSphere.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/roundNumber.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/fillSphere.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/eraseSphere.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/ellipse/pointInEllipse.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/ellipse/getCanvasEllipseCorners.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/fillCircle.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/eraseCircle.ts","webpack:///../../../../cornerstone3D/packages/tools/src/cursors/MouseCursor.ts","webpack:///../../../../cornerstone3D/packages/tools/src/cursors/ImageMouseCursor.ts","webpack:///../../../../cornerstone3D/packages/tools/src/cursors/SVGCursorDescriptor.ts","webpack:///../../../../cornerstone3D/packages/tools/src/cursors/SVGMouseCursor.ts","webpack:///../../../../cornerstone3D/packages/tools/src/cursors/setCursorForElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/cursors/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/cursors/elementCursor.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/BrushTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/utilities.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/thresholdVolumeByRange.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/PanTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/TrackballRotateTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/WindowLevelTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/StackScrollTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/angle/angleBetweenLines.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/PlanarRotateTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/StackScrollToolMouseWheelTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/ZoomTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/VolumeRotateMouseWheelTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planar/getWorldWidthAndHeightFromCorners.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planar/getPointInLineOfSightWithCriteria.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planar/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/viewport/jumpToWorld.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/MIPJumpToClickTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/viewportFilters/filterViewportsWithFrameOfReferenceUID.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/viewportFilters/filterViewportsWithToolEnabled.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/viewportFilters/filterViewportsWithParallelNormals.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/viewportFilters/getViewportIdsWithToolToRender.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/vec2/liangBarksyClip.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/line/distanceToPointSquared.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/line/distanceToPoint.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/line/intersectLine.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/CrosshairsTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/MagnifyTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/ReferenceLinesTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/getCalibratedUnits.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/drawing/getTextBoxCoordsCanvas.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/BidirectionalTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/LengthTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/getModalityUnit.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/viewport/isViewportPreScaled.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/ProbeTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/DragProbeTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/rectangle/distanceToPoint.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/RectangleROITool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planar/getWorldWidthAndHeightFromTwoPoints.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/EllipticalROITool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/point/distanceToPoint.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/circle/getCanvasCircleRadius.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/circle/getCanvasCircleCorners.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/CircleROITool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/polyline/getIntersectionWithPolyline.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/polyline/getSubPixelSpacingAndXYDirections.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/polyline/pointsAreWithinCloseContourProximity.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/polyline/addCanvasPointsToArray.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/polyline/pointCanProjectOnLine.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/polyline/calculateAreaOfPoints.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planarFreehandROITool/interpolation/algorithms/bspline.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planarFreehandROITool/interpolatePoints.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/planarFreehandROITool/findOpenUShapedContourVectorToPeak.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/planarFreehandROITool/drawLoop.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/planarFreehandROITool/editLoopCommon.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/planarFreehandROITool/closedContourEditLoop.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/planarFreehandROITool/openContourEditLoop.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/planarFreehandROITool/openContourEndEditLoop.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/planarFreehandROITool/renderMethods.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/PlanarFreehandROITool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/ArrowAnnotateTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/AngleTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/math/midPoint.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/annotation/CobbAngleTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/ReferenceCursors.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/ScaleOverlayTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/fillRectangle.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/strategies/eraseRectangle.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/RectangleScissorsTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/CircleScissorsTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/SphereScissorsTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/RectangleROIThresholdTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/RectangleROIStartEndThresholdTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/floodFill.ts","webpack:///../../../../cornerstone3D/packages/tools/src/tools/segmentation/PaintFillTool.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/rectangleROITool/getBoundsIJKFromRectangleAnnotations.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/rectangleROIThresholdVolumeByRange.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/createMergedLabelmapForIndex.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/isValidRepresentationConfig.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/getDefaultRepresentationConfig.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/createLabelmapVolumeForViewport.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/brushSizeForToolGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/brushThresholdForToolGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/segmentation/thresholdSegmentationByRange.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/orientation/getOrientationStringLPS.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/orientation/invertOrientationStringLPS.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/cine/events.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/cine/state.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/cine/playClip.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planarFreehandROITool/interpolateAnnotation.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/planarFreehandROITool/index.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/stackPrefetch/state.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/stackPrefetch/stackPrefetch.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/dynamicVolume/getDataInTime.ts","webpack:///../../../../cornerstone3D/packages/tools/src/utilities/dynamicVolume/generateImageFromTimeData.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/annotations/annotationSelectionListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventListeners/annotations/annotationModifiedListener.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/imageRenderedEventDispatcher.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/customCallbackHandler.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseClick.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseDoubleClick.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/filterToolsWithMoveableHandles.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/filterToolsWithAnnotationsForElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/filterMoveableAnnotationTools.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/getMouseModifier.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/getActiveToolForMouseEvent.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/getToolsWithModesForMouseEvent.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseDown.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseDownActivate.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseDrag.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseMove.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseUp.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseEventHandlers/mouseWheel.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/mouseToolEventDispatcher.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/getActiveToolForKeyboardEvent.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/keyboardEventHandlers/keyDown.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/keyboardEventHandlers/keyUp.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/keyboardToolEventDispatcher.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/cameraModifiedEventDispatcher.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/imageSpacingCalibratedEventDispatcher.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/getActiveToolForTouchEvent.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/shared/getToolsWithModesForTouchEvent.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/touchEventHandlers/touchStart.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/touchEventHandlers/touchStartActivate.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/touchEventHandlers/touchDrag.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/touchEventHandlers/touchEnd.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/touchEventHandlers/touchTap.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/touchEventHandlers/touchPress.ts","webpack:///../../../../cornerstone3D/packages/tools/src/eventDispatchers/touchToolEventDispatcher.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/addEnabledElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/SynchronizerManager/getSynchronizersForViewport.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/getToolGroupForViewport.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/removeEnabledElement.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/cancelActiveManipulations.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/SynchronizerManager/Synchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/SynchronizerManager/createSynchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/SynchronizerManager/destroy.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/SynchronizerManager/getSynchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/SynchronizerManager/getAllSynchronizers.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/SynchronizerManager/destroySynchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/ToolGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/createToolGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/destroyToolGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/destroy.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/getToolGroup.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/getAllToolGroups.ts","webpack:///../../../../cornerstone3D/packages/tools/src/store/ToolGroupManager/getToolGroupsWithToolName.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/annotationState.ts","webpack:///../../../../cornerstone3D/packages/tools/src/stateManagement/annotation/helpers/state.ts","webpack:///../../../../cornerstone3D/packages/tools/src/init.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/callbacks/cameraSyncCallback.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/synchronizers/createCameraPositionSynchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/callbacks/voiSyncCallback.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/synchronizers/createVOISynchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/callbacks/zoomPanSyncCallback.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/synchronizers/createZoomPanSynchronizer.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/callbacks/stackImageSyncCallback.ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/callbacks/areViewportsCoplanar .ts","webpack:///../../../../cornerstone3D/packages/tools/src/synchronizers/synchronizers/createStackImageSynchronizer.ts"],"sourcesContent":["/**\n * Mouse This enum enumerates the different buttons returned by `.buttons` on the mouse event.\n * These values are used when setting a tool active in a tool group.\n *\n * See also: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n */\nenum MouseBindings {\n  /** usually the left button */\n  Primary = 1,\n  /** usually the right button */\n  Secondary = 2,\n  Primary_And_Secondary = 3,\n  /** usually mouse wheel button */\n  Auxiliary = 4,\n  Primary_And_Auxiliary = 5,\n  Secondary_And_Auxiliary = 6,\n  Primary_And_Secondary_And_Auxiliary = 7,\n  /** usually \"Browser Back\" button */\n  Fourth_Button = 8,\n  /** usually \"Browser Forward\" button */\n  Fifth_Button = 16,\n}\n\nenum KeyboardBindings {\n  Shift = 16,\n  Ctrl = 17,\n  Alt = 18,\n  Meta = 91,\n  ShiftCtrl = 1617,\n  ShiftAlt = 1618,\n  ShiftMeta = 1691,\n  CtrlAlt = 1718,\n  CtrlMeta = 1791,\n  AltMeta = 1891,\n}\n\nexport { MouseBindings, KeyboardBindings };\n","/**\n * ToolModes - This enum defines the 4 tool states which are available.\n */\nenum ToolModes {\n  /**\n   * Active:\n   * - Can be actively used by mouse/touch events mapped to its `ToolBinding`s.\n   * - Can add data if an annotation tool.\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   */\n  Active = 'Active',\n  /**\n   * Passive:\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   */\n  Passive = 'Passive',\n  /**\n   * Enabled:\n   * - Renders data if the tool has a `renderAnnotation` method.\n   */\n  Enabled = 'Enabled',\n  /**\n   * Disabled:\n   * - Annotation does not render.\n   */\n  Disabled = 'Disabled',\n}\n\nexport default ToolModes;\n","/**\n * AnnotationStyleStates - This enum defines the 4 possible states available for\n *  a Annotation instance.\n *\n * Default:\n *   The default state for the annotation instance\n * Highlighted:\n *   The annotation should be rendered in \"highlighted\" mode in response to\n *   direct user interaction;\n * Selected:\n *   The annotation has been selected by the user;\n * Locked:\n *   The annotation has been locked;\n */\nenum AnnotationStyleStates {\n  Default = '',\n  Highlighted = 'Highlighted',\n  Selected = 'Selected',\n  Locked = 'Locked',\n}\n\nexport default AnnotationStyleStates;\n","/**\n *  The events for cornerstoneTools3D Tools. Native Mouse and Keyboard events are\n *  captured, normalized, and re-triggered with a `CORNERSTONE_TOOLS` prefix. This\n *  allows us to handle events consistently across different browsers.\n *\n */\nenum Events {\n  ///////////////////////////////////////\n  //            Tools\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a new tools is activated.\n   *\n   * Make use of {@link EventTypes.ToolActivatedEventType | Tool Activated Event Type  }\n   * for typing your event listeners for this tool activated event, and see what event\n   * detail is included in {@link EventTypes.ToolActivatedEventDetail | Tool Activated Event Detail}.\n   */\n  TOOL_ACTIVATED = 'CORNERSTONE_TOOLS_TOOL_ACTIVATED',\n\n  ///////////////////////////////////////\n  //            Annotations\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a new annotation is added to the state.\n   *\n   * Make use of {@link EventTypes.AnnotationAddedEventType | Annotation Added Event Type  }\n   * for typing your event listeners for this annotation added event, and see what event\n   * detail is included in {@link EventTypes.AnnotationAddedEventDetail | Annotation Added Event Detail}.\n   */\n  ANNOTATION_ADDED = 'CORNERSTONE_TOOLS_ANNOTATION_ADDED',\n\n  /**\n   * Triggers on the eventTarget when a new annotation is completed its drawing\n   * Make use of {@link EventTypes.AnnotationCompletedEventType | Annotation Completed Event Type }\n   * for typing your event listeners for this annotation completed event, and see what event\n   * detail is included in {@link EventTypes.AnnotationCompletedEventDetail | Annotation Completed Event Detail}.\n   */\n  ANNOTATION_COMPLETED = 'CORNERSTONE_TOOLS_ANNOTATION_COMPLETED',\n\n  /**\n   * Triggers on the eventTarget when an annotation is modified (e.g. a handle is modified).\n   * Make use of {@link EventTypes.AnnotationModifiedEventType | Annotation Modified Event Type}\n   * for typing your event listeners for this annotation modified event, and see what\n   * event detail is included in {@link EventTypes.AnnotationModifiedEventDetail | Annotation Modified Event Detail}.\n   */\n  ANNOTATION_MODIFIED = 'CORNERSTONE_TOOLS_ANNOTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when an annotation is removed from the annotations manager.\n   * Make use of {@link EventTypes.AnnotationRemovedEventType | Annotation Removed Event Type}\n   * for typing your event listeners for this annotation removed event, and see what\n   * event detail is included in {@link EventTypes.AnnotationRemovedEventDetail | Annotation Removed Event Detail}.\n   */\n  ANNOTATION_REMOVED = 'CORNERSTONE_TOOLS_ANNOTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when an annotation selection status is changed.\n   * Make use of {@link EventTypes.AnnotationSelectionChangeEventType | Annotation Selection Change Event Type}\n   * for typing your event listeners for this annotation selection change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationSelectionChangeEventDetail | Annotation Selection Change Event Detail}.\n   */\n  ANNOTATION_SELECTION_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation locked status is changed.\n   * Make use of {@link EventTypes.AnnotationLockChangeEventType | Annotation Lock Change Event Type}\n   * for typing your event listeners for this annotation lock change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationLockChangeEventDetail | Annotation Lock Change Event Detail}.\n   */\n  ANNOTATION_LOCK_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation visible status is changed.\n   * Make use of {@link EventTypes.AnnotationVisibilityChangeEventType | Annotation Visible Change Event Type}\n   * for typing your event listeners for this annotation Hide change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationVisibilityChangeEventDetail | Annotation Visible Change Event Detail}.\n   */\n  ANNOTATION_VISIBILITY_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation is rendered.\n   * Make use of {@link EventTypes.AnnotationRenderedEventType | Annotation Rendered Event Type}\n   * for typing your event listeners for this annotation rendered event, and see what\n   * event detail is included in {@link EventTypes.AnnotationRenderedEventDetail | Annotation Rendered Event Detail}.\n   */\n  ANNOTATION_RENDERED = 'CORNERSTONE_TOOLS_ANNOTATION_RENDERED',\n\n  ///////////////////////////////////////\n  //        Segmentations Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is updated in the state manager.\n   * Make use of {@link EventTypes.SegmentationModifiedEventType | Segmentation Modified Event Type}\n   * for typing your event listeners for this segmentation modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationModifiedEventDetail | Segmentation Modified Event Detail}.\n   */\n  SEGMENTATION_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is rendered by the Segmentation Rendering Engine.\n   * Make use of {@link EventTypes.SegmentationRenderedEventType | Segmentation Rendered Event Type}\n   * for typing your event listeners for this segmentation rendered event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRenderedEventDetail | Segmentation Rendered Event Detail}.\n   */\n  SEGMENTATION_RENDERED = 'CORNERSTONE_TOOLS_SEGMENTATION_RENDERED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation representation of a toolGroup is modified in the state manager.\n   * Make use of {@link EventTypes.SegmentationRepresentationModifiedEventType | Segmentation Representation Modified Event Type}\n   * for typing your event listeners for this segmentation representation modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRepresentationModifiedEventDetail | Segmentation Representation Modified Event Detail}.\n   */\n  SEGMENTATION_REPRESENTATION_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is removed from the state manager.\n   * Make use of {@link EventTypes.SegmentationRemovedEventType | Segmentation Removed Event Type}\n   * for typing your event listeners for this segmentation removed event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRemovedEventDetail | Segmentation Removed Event Detail}.\n   */\n  SEGMENTATION_REMOVED = 'CORNERSTONE_TOOLS_SEGMENTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation representation of a toolGroup is removed in the state manager.\n   * Make use of {@link EventTypes.SegmentationRepresentationRemovedEventType | Segmentation Representation Removed Event Type}\n   * for typing your event listeners for this segmentation representation removed event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRepresentationRemovedEventDetail | Segmentation Representation Removed Event Detail}.\n   */\n  SEGMENTATION_REPRESENTATION_REMOVED = 'CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation data is modified (e.g., by brush tool).\n   * Make use of {@link EventTypes.SegmentationDataModifiedEventType | Segmentation Data Modified Event Type}\n   * for typing your event listeners for this segmentation data modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationDataModifiedEventDetail | Segmentation Data Modified Event Detail}.\n   */\n  SEGMENTATION_DATA_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED',\n\n  ///////////////////////////////////////\n  //         Keyboard Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a key on the keyboard is pressed.\n   * Make use of {@link EventTypes.KeyDownEventType | Key Down Event Type}\n   * for typing your event listeners for this key down event, and see what\n   * event detail is included in {@link EventTypes.KeyDownEventDetail | Key Down Event Detail}.\n   */\n  KEY_DOWN = 'CORNERSTONE_TOOLS_KEY_DOWN',\n\n  /**\n   * Triggers on the eventTarget when a key on the keyboard is released.\n   * Make use of {@link EventTypes.KeyUpEventType | Key Up Event Type}\n   * for typing your event listeners for this key up event, and see what\n   * event detail is included in {@link EventTypes.KeyUpEventDetail | Key Up Event Detail}.\n   */\n  KEY_UP = 'CORNERSTONE_TOOLS_KEY_UP',\n\n  ///////////////////////////////////////\n  //      Mouse Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when the mouse is pressed down, it is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseDownEventType | Mouse Down Event Type}\n   * for typing your event listeners for this mouse down event, and see what\n   * event detail is included in {@link EventTypes.MouseDownEventDetail | Mouse Down Event Detail}.\n   */\n  MOUSE_DOWN = 'CORNERSTONE_TOOLS_MOUSE_DOWN',\n\n  /**\n   * Triggers on the eventTarget when the mouse is released, it is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseUpEventType | Mouse Up Event Type}\n   * for typing your event listeners for this mouse up event, and see what\n   * event detail is included in {@link EventTypes.MouseUpEventDetail | Mouse Up Event Detail}.\n   */\n  MOUSE_UP = 'CORNERSTONE_TOOLS_MOUSE_UP',\n\n  /**\n   * Triggers on the eventTarget when a handled `MOUSE_DOWN` event does not `stopPropagation`. The hook\n   * we use to create new annotation for mouse events.\n   * Make use of {@link EventTypes.MouseDownActivateEventType | Mouse Down Activate Event Type}\n   * for typing your event listeners for this mouse down activate event, and see what\n   * event detail is included in {@link EventTypes.MouseDownActivateEventDetail | Mouse Down Activate Event Detail}.\n   */\n  MOUSE_DOWN_ACTIVATE = 'CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE',\n\n  /**\n   * Triggers on the event target when mouse is dragging an annotation or textBox.\n   * Make use of {@link EventTypes.MouseDragEventType | Mouse Drag Event Type}\n   * for typing your event listeners for this mouse drag event, and see what\n   * event detail is included in {@link EventTypes.MouseDragEventDetail | Mouse Drag Event Detail}.\n   */\n  MOUSE_DRAG = 'CORNERSTONE_TOOLS_MOUSE_DRAG',\n\n  /**\n   * Triggers on the eventTarget, when the mouse is moved, it is CornerstoneTools normalized event.\n   * It can be just a mouse move or when double click is performed and annotation\n   * drawing can be performed with just mouse move.\n   * Make use of {@link EventTypes.MouseMoveEventType | Mouse Move Event Type}\n   * for typing your event listeners for this mouse move event, and see what\n   * event detail is included in {@link EventTypes.MouseMoveEventDetail | Mouse Move Event Detail}.\n   */\n  MOUSE_MOVE = 'CORNERSTONE_TOOLS_MOUSE_MOVE',\n\n  /**\n   * Triggers on the eventTarget when a mouse click is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseClickEventType | Mouse Click Event Type}\n   * for typing your event listeners for this mouse click event, and see what\n   * event detail is included in {@link EventTypes.MouseClickEventDetail | Mouse Click Event Detail}.\n   */\n  MOUSE_CLICK = 'CORNERSTONE_TOOLS_MOUSE_CLICK',\n\n  /**\n   * Triggers on the eventTarget when a mouse double click is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseDoubleClickEventType | Mouse Double Click Event Type}\n   * for typing your event listeners for this mouse double click event, and see what\n   * event detail is included in {@link EventTypes.MouseDoubleClickEventDetail | Mouse Double Click Event Detail}.\n   */\n  MOUSE_DOUBLE_CLICK = 'CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK',\n\n  /**\n   * Triggers on the eventTarget when a mouse wheel event is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseWheelEventType | Mouse Wheel Event Type}\n   * for typing your event listeners for this mouse wheel event, and see what\n   * event detail is included in {@link EventTypes.MouseWheelEventDetail | Mouse Wheel Event Detail}.\n   */\n  MOUSE_WHEEL = 'CORNERSTONE_TOOLS_MOUSE_WHEEL',\n\n  // Todo: not being fired as of now\n  // ANNOTATION_COMPLETED = 'CORNERSTONE_TOOLS_ANNOTATION_COMPLETED',\n  // Todo: not implemented yet\n  // KEY_PRESS = 'CORNERSTONE_TOOLS_KEY_PRESS',\n\n  //////////////////////\n  //   Touch Events   //\n  //////////////////////\n  // The event flow looks like the following\n  // Touch Start -> (optional) Touch Press -> Touch Drag -> (optional) Touch Swipe -> Touch End\n  // Touch Tap\n  // mousedown\n  // mousedown, Touch Start, and Tap are mutually exclusive events\n  TOUCH_START = 'CORNERSTONE_TOOLS_TOUCH_START',\n  TOUCH_START_ACTIVATE = 'CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE',\n  TOUCH_PRESS = 'CORNERSTONE_TOOLS_TOUCH_PRESS',\n  TOUCH_DRAG = 'CORNERSTONE_TOOLS_TOUCH_DRAG',\n  TOUCH_END = 'CORNERSTONE_TOOLS_TOUCH_END',\n  TOUCH_TAP = 'CORNERSTONE_TOOLS_TAP',\n  TOUCH_SWIPE = 'CORNERSTONE_TOOLS_SWIPE',\n}\n\nexport default Events;\n","/**\n * Segmentations on viewports can be visualized in different ways. This enum\n * defines the different ways of visualizing segmentations. Currently, only\n * labelmap is supported.\n */\nenum SegmentationRepresentations {\n  Labelmap = 'LABELMAP',\n  Contour = 'CONTOUR',\n  // Todo: add more representations\n}\n\nexport default SegmentationRepresentations;\n","enum Swipe {\n  UP = 'UP',\n  DOWN = 'DOWN',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}\n\nexport { Swipe };\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { Annotation } from '../../types';\nimport { AnnotationLockChangeEventDetail } from '../../types/EventTypes';\n\n/*\n * Constants\n */\nconst globalLockedAnnotationsSet: Set<Annotation> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set the \"Locked\" state of a given annotation instance.\n *\n * @triggers ANNOTATION_LOCK_CHANGE\n *\n * @param annotation - The annotation instance which will have\n * its locked state changed. An event will only be triggered if the locked state\n * of the given annotation instance changed.\n * @param locked - A boolean value indicating if the instance should\n * be locked (true) or not (false)\n */\nfunction setAnnotationLocked(annotation: Annotation, locked = true): void {\n  const detail = makeEventDetail();\n  if (annotation) {\n    if (locked) {\n      lock(annotation, globalLockedAnnotationsSet, detail);\n    } else {\n      unlock(annotation, globalLockedAnnotationsSet, detail);\n    }\n  }\n  publish(detail, globalLockedAnnotationsSet);\n}\n\n/**\n * Clears all the locked annotation\n *\n */\nfunction unlockAllAnnotations(): void {\n  const detail = makeEventDetail();\n  clearLockedAnnotationsSet(globalLockedAnnotationsSet, detail);\n  publish(detail, globalLockedAnnotationsSet);\n}\n\n/**\n * Returns an array of all the annotation that is currently locked\n * @returns An array of tool specific annotation objects.\n *\n */\nfunction getAnnotationsLocked(): Array<Annotation> {\n  return Array.from(globalLockedAnnotationsSet);\n}\n\n/**\n * Given a Annotation object, return true if it is locked.\n * @param annotation - Annotation\n * @returns A boolean value.\n */\nfunction isAnnotationLocked(annotation: Annotation): boolean {\n  return globalLockedAnnotationsSet.has(annotation);\n}\n\n/**\n * Get the number of locked annotation objects in the global set of locked annotation\n * objects.\n * @returns The number of locked annotation objects.\n *\n */\nfunction getAnnotationsLockedCount(): number {\n  return globalLockedAnnotationsSet.size;\n}\n\n/**\n * Properly initialize the isLocked on annotation, and set it as locked if\n * isLocked is true.\n * @param annotation - The annotation object to be checked.\n */\nfunction checkAndDefineIsLockedProperty(annotation: Annotation): void {\n  if (annotation) {\n    const isLocked = !!annotation.isLocked;\n    if (shouldDefineIsLockedProperty(annotation)) {\n      Object.defineProperty(annotation, 'isLocked', {\n        configurable: false,\n        enumerable: true,\n        set: setIsLocked,\n        get: getIsLocked,\n      });\n    }\n    setAnnotationLocked(annotation, isLocked);\n  }\n}\n\n/*\n * Private Helpers\n */\n\nfunction makeEventDetail(): AnnotationLockChangeEventDetail {\n  return Object.freeze({\n    added: [],\n    removed: [],\n    locked: [],\n  });\n}\n\nfunction lock(\n  annotation: Annotation,\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  if (!lockedAnnotationsSet.has(annotation)) {\n    lockedAnnotationsSet.add(annotation);\n    detail.added.push(annotation);\n  }\n}\n\nfunction unlock(\n  annotation: Annotation,\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  if (lockedAnnotationsSet.delete(annotation)) {\n    detail.removed.push(annotation);\n  }\n}\n\nfunction clearLockedAnnotationsSet(\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  lockedAnnotationsSet.forEach((annotation) => {\n    unlock(annotation, lockedAnnotationsSet, detail);\n  });\n}\n\nfunction publish(\n  detail: AnnotationLockChangeEventDetail,\n  lockedAnnotationsSet: Set<Annotation>\n) {\n  if (detail.added.length > 0 || detail.removed.length > 0) {\n    lockedAnnotationsSet.forEach((item) => void detail.locked.push(item));\n    triggerEvent(eventTarget, Events.ANNOTATION_LOCK_CHANGE, detail);\n  }\n}\n\nfunction shouldDefineIsLockedProperty(annotation: Annotation): boolean {\n  const descriptor = Object.getOwnPropertyDescriptor(annotation, 'isLocked');\n  if (descriptor) {\n    return (\n      descriptor.configurable &&\n      (descriptor.set !== setIsLocked || descriptor.get !== getIsLocked)\n    );\n  }\n  return Object.isExtensible(annotation);\n}\n\nfunction setIsLocked(locked: boolean) {\n  setAnnotationLocked(this as Annotation, locked);\n}\n\nfunction getIsLocked() {\n  return isAnnotationLocked(this as Annotation);\n}\n\n/*\n * Exports\n */\n\nexport {\n  setAnnotationLocked,\n  getAnnotationsLocked,\n  getAnnotationsLockedCount,\n  unlockAllAnnotations,\n  isAnnotationLocked,\n  checkAndDefineIsLockedProperty,\n};\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { AnnotationSelectionChangeEventDetail } from '../../types/EventTypes';\nimport { getAnnotation } from './annotationState';\n\n/*\n * Constants\n */\n\nconst selectedAnnotationUIDs: Set<string> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set a given annotationUID as selected or deselected based on the provided\n * selected value.\n *\n * @param annotationUID - The annotation UID to be selected\n * @param selected - When true, the annotation is selected. When false, the annotation is deselected.\n * @param preserveSelected - When true, preserves existing\n *  selections (i.e., the given annotation is appended to the selection set).\n *  When false (the default behavior) the currently selected items are discarded\n *  (i.e., the given annotation instance replaces the currently selected ones).\n */\nfunction setAnnotationSelected(\n  annotationUID: string,\n  selected = true,\n  preserveSelected = false\n): void {\n  if (selected) {\n    selectAnnotation(annotationUID, preserveSelected);\n  } else {\n    deselectAnnotation(annotationUID);\n  }\n}\n\n/**\n * Set a given annotation as selected.\n *\n * @param annotationUID - The annotation UID to be selected\n * @param preserveSelected - When true, preserves existing\n *  selections (i.e., the given annotation is appended to the selection set).\n *  When false (the default behavior) the currently selected items are discarded\n *  (i.e., the given annotation instance replaces the currently selected ones).\n */\nfunction selectAnnotation(\n  annotationUID: string,\n  preserveSelected = false\n): void {\n  const detail = makeEventDetail();\n  if (!preserveSelected) {\n    clearSelectionSet(selectedAnnotationUIDs, detail);\n  }\n  if (annotationUID && !selectedAnnotationUIDs.has(annotationUID)) {\n    selectedAnnotationUIDs.add(annotationUID);\n    detail.added.push(annotationUID);\n  }\n  publish(detail, selectedAnnotationUIDs);\n}\n\n/**\n * Deselect one or all annotations.\n *\n * @param annotationUID - If an annotation is provided that instance will be removed from\n * the internal selection set. If none is given, ALL selections will be cleared.\n */\nfunction deselectAnnotation(annotationUID?: string): void {\n  const detail = makeEventDetail();\n  if (annotationUID) {\n    if (selectedAnnotationUIDs.delete(annotationUID)) {\n      detail.removed.push(annotationUID);\n    }\n  } else {\n    clearSelectionSet(selectedAnnotationUIDs, detail);\n  }\n  publish(detail, selectedAnnotationUIDs);\n}\n\n/**\n * Return an array of ALL the selected annotationUIDs\n * @returns An array of Annotation UIDs\n */\nfunction getAnnotationsSelected(): Array<string> {\n  return Array.from(selectedAnnotationUIDs);\n}\n\n/**\n * Given a tool name, return ALL the annotationUIDs for that tool that are selected\n * @param toolName - The name of the tool you want to get the selected annotation for\n * @returns An array of annotationUIDs\n */\nfunction getAnnotationsSelectedByToolName(toolName: string): Array<string> {\n  return getAnnotationsSelected().filter((annotationUID) => {\n    const annotation = getAnnotation(annotationUID);\n    return annotation.metadata.toolName === toolName;\n  });\n}\n\n/**\n * Given an annotationUID, return true if it is selected, false\n * otherwise.\n * @param annotationUID - Annotation UID\n * @returns A boolean value.\n */\nfunction isAnnotationSelected(annotationUID: string): boolean {\n  return selectedAnnotationUIDs.has(annotationUID);\n}\n\n/**\n * Return the number of the selected annotation\n * @returns The size of the selected annotation set\n */\nfunction getAnnotationsSelectedCount(): number {\n  return selectedAnnotationUIDs.size;\n}\n\n/*\n * Private Helpers\n */\n\nfunction makeEventDetail(): AnnotationSelectionChangeEventDetail {\n  return Object.freeze({\n    added: [],\n    removed: [],\n    selection: [],\n  });\n}\n\nfunction clearSelectionSet(\n  selectionSet: Set<string>,\n  detail: AnnotationSelectionChangeEventDetail\n): void {\n  selectionSet.forEach((value) => {\n    if (selectionSet.delete(value)) {\n      detail.removed.push(value);\n    }\n  });\n}\n\nfunction publish(\n  detail: AnnotationSelectionChangeEventDetail,\n  selectionSet: Set<string>\n) {\n  if (detail.added.length > 0 || detail.removed.length > 0) {\n    selectionSet.forEach((item) => void detail.selection.push(item));\n    triggerEvent(eventTarget, Events.ANNOTATION_SELECTION_CHANGE, detail);\n  }\n}\n\n/*\n * Exports\n */\n\nexport {\n  setAnnotationSelected,\n  getAnnotationsSelected,\n  getAnnotationsSelectedByToolName,\n  getAnnotationsSelectedCount,\n  deselectAnnotation,\n  isAnnotationSelected,\n};\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { getAnnotation } from './annotationState';\nimport { Events } from '../../enums';\nimport { Annotation } from '../../types';\nimport { AnnotationVisibilityChangeEventDetail } from '../../types/EventTypes';\nimport {\n  isAnnotationSelected,\n  deselectAnnotation,\n} from './annotationSelection';\n\n/*\n * It stores all hidden annotation uids.\n */\nconst globalHiddenAnnotationUIDsSet: Set<string> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set the \"visible\" state of a given annotation instance.\n *\n * @event ANNOTATION_VISIBILITY_CHANGE\n *\n * @param annotationUID - The annotation uid which will have\n * its visible state changed. An event will only be triggered if the visible state\n * of the given annotation instance changed.\n * @param visible - A boolean value indicating if the instance should\n * be visible (true) or not (false)\n */\nfunction setAnnotationVisibility(annotationUID: string, visible = true): void {\n  const detail = makeEventDetail();\n  if (annotationUID) {\n    if (visible) {\n      show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n    } else {\n      hide(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n    }\n  }\n  publish(detail);\n}\n\n/**\n * Clears all the hidden annotations.\n *\n */\nfunction showAllAnnotations(): void {\n  const detail = makeEventDetail();\n  globalHiddenAnnotationUIDsSet.forEach((annotationUID) => {\n    show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n  });\n  publish(detail);\n}\n\n/**\n * Given an annotation UID, return true if it is visible, false if hidden and undefined if does not exist.\n * @param annotationUID - The annotation uid to tell if is visible or not.\n * @returns A boolean value or value if does not exist.\n */\nfunction isAnnotationVisible(annotationUID: string): boolean | undefined {\n  const annotation = getAnnotation(annotationUID);\n\n  if (annotation) {\n    return !globalHiddenAnnotationUIDsSet.has(annotationUID);\n  }\n}\n/**\n * It decorates given annotation with isVisible property.\n * It properly initializes the isVisible on annotation(the property will be create if does not exist yet)\n *\n * @param annotation - The annotation object to be checked.\n */\nfunction checkAndDefineIsVisibleProperty(annotation: Annotation): void {\n  if (annotation) {\n    const isVisible = annotation.isVisible ?? true;\n    if (shouldDefineIsVisibleProperty(annotation)) {\n      Object.defineProperty(annotation, 'isVisible', {\n        configurable: false,\n        enumerable: true,\n        set: setIsVisible,\n        get: getIsVisible,\n      });\n    }\n    setAnnotationVisibility(annotation.annotationUID, isVisible);\n  }\n}\n\n/*\n * Private Helpers\n */\nfunction makeEventDetail(): AnnotationVisibilityChangeEventDetail {\n  return Object.freeze({\n    lastVisible: [],\n    lastHidden: [],\n    hidden: [],\n  });\n}\n\nfunction show(\n  annotationUID: string,\n  annotationUIDsSet: Set<string>,\n  detail: AnnotationVisibilityChangeEventDetail\n): void {\n  if (annotationUIDsSet.delete(annotationUID)) {\n    detail.lastVisible.push(annotationUID);\n  }\n}\n\nfunction hide(\n  annotationUID: string,\n  annotationUIDsSet: Set<string>,\n  detail: AnnotationVisibilityChangeEventDetail\n): void {\n  if (!annotationUIDsSet.has(annotationUID)) {\n    annotationUIDsSet.add(annotationUID);\n    if (isAnnotationSelected(annotationUID)) {\n      deselectAnnotation(annotationUID);\n    }\n    detail.lastHidden.push(annotationUID);\n  }\n}\n\nfunction publish(detail: AnnotationVisibilityChangeEventDetail) {\n  if (detail.lastHidden.length > 0 || detail.lastVisible.length > 0) {\n    globalHiddenAnnotationUIDsSet.forEach(\n      (item) => void detail.hidden.push(item)\n    );\n    triggerEvent(eventTarget, Events.ANNOTATION_VISIBILITY_CHANGE, detail);\n  }\n}\n\nfunction shouldDefineIsVisibleProperty(annotation: Annotation): boolean {\n  const descriptor = Object.getOwnPropertyDescriptor(annotation, 'isVisible');\n  if (descriptor) {\n    return (\n      descriptor.configurable &&\n      (descriptor.set !== setIsVisible || descriptor.get !== getIsVisible)\n    );\n  }\n  return Object.isExtensible(annotation);\n}\n\nfunction setIsVisible(hidden: boolean) {\n  setAnnotationVisibility((this as Annotation).annotationUID, hidden);\n}\n\nfunction getIsVisible() {\n  return isAnnotationVisible((this as Annotation).annotationUID);\n}\n\nexport {\n  setAnnotationVisibility,\n  showAllAnnotations,\n  isAnnotationVisible,\n  checkAndDefineIsVisibleProperty,\n};\n","import cloneDeep from 'lodash.clonedeep';\nimport {\n  Annotation,\n  Annotations,\n  AnnotationState,\n  GroupSpecificAnnotations,\n} from '../../types/AnnotationTypes';\n\nimport { AnnotationGroupSelector, IAnnotationManager } from '../../types';\n\nimport {\n  Enums,\n  eventTarget,\n  getEnabledElement,\n  Types,\n  utilities,\n} from '@cornerstonejs/core';\n\nimport { checkAndDefineIsLockedProperty } from './annotationLocking';\nimport { checkAndDefineIsVisibleProperty } from './annotationVisibility';\n\n/**\n * This is the default annotation manager. It stores annotations by default\n * based on the FrameOfReferenceUID. However, it is possible to override the\n * getAnnotationStateKey function to store annotations based on any other\n * property of the element. When you write your custom annotation manager, you\n * can use the setAnnotationManager function to set your custom annotation.\n *\n * Note that this class is a singleton and should not be instantiated directly.\n * To get the stored annotations information you can use ToolState helpers.\n */\nclass FrameOfReferenceSpecificAnnotationManager implements IAnnotationManager {\n  private annotations: AnnotationState;\n  public readonly uid: string;\n\n  /**\n   * @param uid - The uid of the state manager. If omitted it is autogenerated.\n   */\n  constructor(uid?: string) {\n    if (!uid) {\n      uid = utilities.uuidv4();\n    }\n    this.annotations = {};\n    this.uid = uid;\n\n    // Listen to the IMAGE_VOLUME_MODIFIED event to invalidate data.\n    eventTarget.addEventListener(\n      Enums.Events.IMAGE_VOLUME_MODIFIED,\n      this._imageVolumeModifiedHandler\n    );\n  }\n\n  /**\n   * Default annotation manager works with FrameOfReferenceUID as the key. The\n   * manager adds them under the FrameOfReferenceUID for the element being\n   * annotated.\n   *\n   * @param annotationGroupSelector - element or a string that is provided\n   * to the annotation manager to get the key.\n   * @returns - The annotation state key for the element.\n   */\n  getGroupKey = (annotationGroupSelector: AnnotationGroupSelector): string => {\n    if (typeof annotationGroupSelector === 'string') {\n      return annotationGroupSelector;\n    }\n\n    const element = annotationGroupSelector;\n    const enabledElement = getEnabledElement(element);\n\n    if (!enabledElement) {\n      throw new Error(\n        'Element not enabled, you must have an enabled element if you are not providing a FrameOfReferenceUID'\n      );\n    }\n\n    return enabledElement.FrameOfReferenceUID;\n  };\n\n  /**\n   * When a volume is modified we invalidate all of the `annotations` on the\n   * volume's `FrameOfReferenceUID`. This is mainly to update statistics calculations\n   * when an annotation is drawn whilst data is still loading.\n   *\n   * @param evt - The IMAGE_VOLUME_MODIFIED rendering event.\n   */\n  _imageVolumeModifiedHandler = (\n    evt: Types.EventTypes.ImageVolumeModifiedEvent\n  ) => {\n    const eventDetail = evt.detail;\n    const { FrameOfReferenceUID } = eventDetail;\n\n    const annotations = this.annotations;\n    const frameOfReferenceSpecificAnnotations =\n      annotations[FrameOfReferenceUID];\n\n    if (!frameOfReferenceSpecificAnnotations) {\n      return;\n    }\n\n    Object.keys(frameOfReferenceSpecificAnnotations).forEach((toolName) => {\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[toolName];\n\n      toolSpecificAnnotations.forEach((annotation) => {\n        const invalidated = annotation.invalidated;\n\n        if (invalidated !== undefined) {\n          annotation.invalidated = true;\n        }\n      });\n    });\n  };\n\n  /**\n   * Returns all the available frameOfReferences inside the state manager\n   * @returns - All the added frames of references inside the manager\n   */\n  getFramesOfReference = (): Array<string> => {\n    return Object.keys(this.annotations);\n  };\n\n  /**\n   * Returns the annotations associated with the specified frameOfReference and tool, or\n   * all annotations for the group if the tool name is not provided.\n   *\n   * @param groupKey - The annotation group key to retrieve annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - Optional. The name of the tool to retrieve annotations for.\n   * @returns The annotations associated with the specified group (default FrameOfReferenceUID) and tool,\n   * or all annotations for the group (FrameOfReferenceUID) if the tool name is not provided.\n   */\n  getAnnotations = (\n    groupKey: string,\n    toolName?: string\n  ): GroupSpecificAnnotations | Annotations => {\n    const annotations = this.annotations;\n\n    if (!annotations[groupKey]) {\n      return [];\n    }\n\n    if (toolName) {\n      return annotations[groupKey][toolName];\n    }\n\n    return annotations[groupKey];\n  };\n\n  /**\n   * Given the unique identified for the some `annotation`, returns the `annotation`\n   * from the `annotations`. Each `annotation` has a unique identifier.\n   *\n   * @param annotationUID - The unique identifier of the `annotation`.\n   * @returns The retrieved `annotation`.\n   */\n  getAnnotation = (annotationUID: string): Annotation | undefined => {\n    const annotations = this.annotations;\n\n    for (const frameOfReferenceUID in annotations) {\n      const frameOfReferenceAnnotations = annotations[frameOfReferenceUID];\n\n      for (const toolName in frameOfReferenceAnnotations) {\n        const toolSpecificAnnotations = frameOfReferenceAnnotations[toolName];\n\n        for (const annotation of toolSpecificAnnotations) {\n          if (annotationUID === annotation.annotationUID) {\n            return annotation;\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * A function that returns the number of annotations for a given tool in the\n   * specific group (default FrameOfReferenceUID) IF no groupKey (FrameOfReferenceUID) is provided,\n   * it will return the number of annotations for the tool in all groups (FrameOfReferenceUIDs)\n   *\n   * @param groupKey - The annotation group key to retrieve annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - The name of the tool to retrieve data for.\n   *\n   * @returns The number of annotations for a given tool in the state\n   */\n  getNumberOfAnnotations = (groupKey: string, toolName?: string): number => {\n    const annotations = this.getAnnotations(groupKey, toolName);\n\n    if (!annotations.length) {\n      return 0;\n    }\n\n    if (toolName) {\n      return (annotations as Annotations).length;\n    }\n\n    let total = 0;\n\n    for (const toolName in annotations) {\n      total += annotations[toolName].length;\n    }\n\n    return total;\n  };\n\n  /**\n   * Adds an instance of `Annotation` to the `annotations`.\n   *\n   * @param annotation - The annotation to add.\n   * @param groupKey - The annotation group key to add the annotation to (in default manager it is FrameOfReferenceUID).\n   */\n  addAnnotation = (annotation: Annotation, groupKey?: string): void => {\n    const { metadata } = annotation;\n    const { FrameOfReferenceUID, toolName } = metadata;\n\n    groupKey = groupKey || FrameOfReferenceUID;\n\n    const annotations = this.annotations;\n\n    let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n    if (!frameOfReferenceSpecificAnnotations) {\n      annotations[groupKey] = {};\n\n      frameOfReferenceSpecificAnnotations = annotations[groupKey];\n    }\n\n    let toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n\n    if (!toolSpecificAnnotations) {\n      frameOfReferenceSpecificAnnotations[toolName] = [];\n\n      toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n    }\n\n    toolSpecificAnnotations.push(annotation);\n    checkAndDefineIsLockedProperty(annotation);\n    checkAndDefineIsVisibleProperty(annotation);\n  };\n\n  /**\n   * Given the unique identified for the some `annotation`, removes the `annotation`\n   * from the `annotations`.\n   *\n   * @param annotationUID - The unique identifier of the `annotation` to remove.\n   */\n  removeAnnotation = (annotationUID: string): void => {\n    const { annotations } = this;\n\n    for (const groupKey in annotations) {\n      const groupAnnotations = annotations[groupKey];\n\n      for (const toolName in groupAnnotations) {\n        const toolAnnotations = groupAnnotations[toolName];\n\n        const index = toolAnnotations.findIndex(\n          (annotation) => annotation.annotationUID === annotationUID\n        );\n\n        if (index !== -1) {\n          toolAnnotations.splice(index, 1);\n\n          if (toolAnnotations.length === 0) {\n            delete groupAnnotations[toolName];\n          }\n        }\n      }\n\n      if (Object.keys(groupAnnotations).length === 0) {\n        delete annotations[groupKey];\n      }\n    }\n  };\n\n  /**\n   * Removes all annotations associated with the specified group (FrameOfReferenceUID) and tool, or\n   * all annotations for the group (FrameOfReferenceUID) if the tool name is not provided.\n   *\n   * @param groupKey - The group key to remove annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - Optional. The name of the tool to remove annotations for.\n   */\n  removeAnnotations = (groupKey: string, toolName?: string): void => {\n    const annotations = this.annotations;\n    if (annotations[groupKey]) {\n      if (toolName) {\n        delete annotations[groupKey][toolName];\n      } else {\n        delete annotations[groupKey];\n      }\n    }\n  };\n\n  /**\n   * Returns a section of the annotations. Useful for serialization.\n   * If both groupKey (default manager is FrameOfReferenceUID) and toolName are provided, returns the corresponding Annotations instance\n   * for that groupKey (FrameOfReferenceUID) and toolName.\n   * If only groupKey is provided, returns the corresponding FrameOfReferenceSpecificAnnotations instance\n   * for that groupKey.\n   * If neither groupKey nor toolName is provided, returns the entire AnnotationState object.\n   * @param groupKey - Optional. The group key (e.g. FrameOfReferenceUID) to retrieve annotations for.\n   * @param toolName - Optional. The name of the tool to retrieve annotations for.\n   * @returns A section of the annotations.\n   */\n  saveAnnotations = (\n    groupKey?: string,\n    toolName?: string\n  ): AnnotationState | GroupSpecificAnnotations | Annotations => {\n    const annotations = this.annotations;\n\n    if (groupKey && toolName) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      if (!frameOfReferenceSpecificAnnotations) {\n        return;\n      }\n\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[toolName];\n\n      return cloneDeep(toolSpecificAnnotations);\n    } else if (groupKey) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      return cloneDeep(frameOfReferenceSpecificAnnotations);\n    }\n\n    return cloneDeep(annotations);\n  };\n\n  /**\n   * Restores a section of the `annotations`. Useful for loading in serialized data.\n   *\n   * - If no arguments are given, the entire `AnnotationState` instance is restored.\n   * - If the `FrameOfReferenceUID` is given, the corresponding\n   * `FrameOfReferenceSpecificAnnotations` instance is restored.\n   * - If both the `FrameOfReferenceUID` and the `toolName` are are given, the\n   * corresponding `Annotations` instance is restored.\n   *\n   * @param groupKey - A filter string for restoring only the `annotations` of a specific frame of reference.\n   * @param toolName - A filter string for restoring `annotation` for a specific tool on a specific frame of reference.\n   */\n  restoreAnnotations = (\n    state: AnnotationState | GroupSpecificAnnotations | Annotations,\n    groupKey?: string,\n    toolName?: string\n  ): void => {\n    const annotations = this.annotations;\n\n    if (groupKey && toolName) {\n      // Set Annotations for FrameOfReferenceUID and toolName.\n\n      let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      if (!frameOfReferenceSpecificAnnotations) {\n        annotations[groupKey] = {};\n\n        frameOfReferenceSpecificAnnotations = annotations[groupKey];\n      }\n\n      frameOfReferenceSpecificAnnotations[toolName] = <Annotations>state;\n    } else if (groupKey) {\n      // Set FrameOfReferenceSpecificAnnotations for FrameOfReferenceUID.\n\n      annotations[groupKey] = <GroupSpecificAnnotations>state;\n    } else {\n      // Set entire annotations\n      this.annotations = <AnnotationState>cloneDeep(state);\n    }\n  };\n\n  /**\n   * A function that returns the number of all annotations in the annotation state\n   *\n   * @returns The number of all annotations in the state\n   */\n  getNumberOfAllAnnotations = (): number => {\n    let count = 0;\n    const annotations = this.annotations;\n    for (const groupKey in annotations) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n      for (const toolName in frameOfReferenceSpecificAnnotations) {\n        const toolSpecificAnnotations =\n          frameOfReferenceSpecificAnnotations[toolName];\n        count += toolSpecificAnnotations.length;\n      }\n    }\n    return count;\n  };\n\n  /**\n   * Removes all annotations in the annotation state.\n   */\n  removeAllAnnotations = (): void => {\n    this.annotations = {};\n  };\n}\n\nconst defaultFrameOfReferenceSpecificAnnotationManager =\n  new FrameOfReferenceSpecificAnnotationManager('DEFAULT');\n\nexport { defaultFrameOfReferenceSpecificAnnotationManager };\nexport default FrameOfReferenceSpecificAnnotationManager;\n","let svgNodeCache = {};\n\nexport function resetSvgNodeCache(): void {\n  svgNodeCache = {};\n}\n\nexport default svgNodeCache;\n","import _cloneDeep from 'lodash.clonedeep';\n\nimport { IToolGroup, IToolClassReference } from '../types';\nimport Synchronizer from './SynchronizerManager/Synchronizer';\nimport svgNodeCache, { resetSvgNodeCache } from './svgNodeCache';\n\ninterface ICornerstoneTools3dState {\n  isInteractingWithTool: boolean;\n  isMultiPartToolActive: boolean;\n  tools: Record<\n    string,\n    {\n      toolClass: IToolClassReference;\n    }\n  >;\n  toolGroups: Array<IToolGroup>;\n  synchronizers: Array<Synchronizer>;\n  svgNodeCache: Record<string, unknown>;\n  enabledElements: Array<unknown>;\n  handleRadius: number;\n}\n\nconst defaultState: ICornerstoneTools3dState = {\n  isInteractingWithTool: false,\n  isMultiPartToolActive: false,\n  tools: {},\n  toolGroups: [],\n  synchronizers: [],\n  svgNodeCache: svgNodeCache,\n  // Should this be named... canvases?\n  enabledElements: [], // switch to Uids?\n  handleRadius: 6,\n};\n\nlet state: ICornerstoneTools3dState = {\n  isInteractingWithTool: false,\n  isMultiPartToolActive: false,\n  tools: {},\n  toolGroups: [],\n  synchronizers: [],\n  svgNodeCache: svgNodeCache,\n  // Should this be named... canvases?\n  enabledElements: [], // switch to Uids?\n  handleRadius: 6,\n};\n\nfunction resetCornerstoneToolsState(): void {\n  resetSvgNodeCache();\n  state = _cloneDeep(defaultState);\n}\n\nexport {\n  ICornerstoneTools3dState,\n  resetCornerstoneToolsState,\n  state,\n  state as default,\n};\n","import { state } from './state';\n\n/**\n * Adds the tool class to the cornerstoneTools to be used later. This function\n * should be called before creating the toolGroups and adding tools and setting their mode.\n * The flow is:\n * - addTool(ToolClass) // where ToolClass is the tool constructor imported from CornerstoneTools or created by a 3rd party\n * - createToolGroup(toolGroupId)\n * - toolGroup.addTool(${toolName}) // NOT THE TOOL CLASS\n * - toolGroup.setToolActive(${toolName})\n *\n * @param ToolClass - A tool calls to instantiate.\n * @param toolOptions - The tool-specific configuration options for the tool.\n * @returns\n */\nexport function addTool(ToolClass): void {\n  // Check if tool exists and name is not undefined\n  const toolName = ToolClass.toolName;\n  const toolAlreadyAdded = state.tools[toolName] !== undefined;\n\n  if (!toolName) {\n    throw new Error(`No Tool Found for the ToolClass ${ToolClass.name}`);\n  }\n\n  if (toolAlreadyAdded) {\n    throw new Error(`${toolName} has already been added globally`);\n  }\n\n  // Stores the toolNames and ToolClass to be instantiated in the toolGroup on toolGroup.addTool\n  state.tools[toolName] = {\n    toolClass: ToolClass,\n  };\n}\n\n/**\n * Removes the tool class from the cornerstoneTools.\n *\n * @param ToolClass - A tool calls to instantiate.\n */\nexport function removeTool(ToolClass): void {\n  const toolName = ToolClass.toolName;\n\n  if (!toolName) {\n    throw new Error(`No tool found for: ${ToolClass.name}`);\n  }\n\n  if (!state.tools[toolName] !== undefined) {\n    delete state.tools[toolName];\n  } else {\n    throw new Error(\n      `${toolName} cannot be removed because it has not been added`\n    );\n  }\n}\n\nexport default addTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { IPoints } from '../../types';\n\n/**\n * Given a native mouse event, get the associated cornerstone3D enabled element\n * and derive a set of coordinates useful for tools.\n * @param evt - The Mouse event.\n * @param element - The DOM HTMLDivElement that the event was triggered on.\n * @returns The points related to the event in the form of a `IPoints` object containing\n * the following properties: `page`, `client`, `canvas`, and `world` details of the event.\n */\nexport default function getMouseEventPoints(\n  evt: MouseEvent,\n  element?: HTMLDivElement\n): IPoints {\n  const elementToUse = element || (evt.currentTarget as HTMLDivElement);\n  const { viewport } = getEnabledElement(elementToUse);\n  const clientPoint = _clientToPoint(evt);\n  const pagePoint = _pageToPoint(evt);\n  const canvasPoint = _pagePointsToCanvasPoints(elementToUse, pagePoint);\n  const worldPoint = viewport.canvasToWorld(canvasPoint);\n\n  return {\n    page: pagePoint,\n    client: clientPoint,\n    canvas: canvasPoint,\n    world: worldPoint,\n  };\n}\n\n/**\n * Converts point from page coordinates to canvas coordinates.\n * @param element - HTMLDivElement\n * @param pagePoint - Point in page coordinates pageX and pageY\n *\n * @returns The canvas coordinate points\n */\nfunction _pagePointsToCanvasPoints(\n  element: HTMLDivElement,\n  pagePoint: Types.Point2\n): Types.Point2 {\n  const rect = element.getBoundingClientRect();\n  return [\n    pagePoint[0] - rect.left - window.pageXOffset,\n    pagePoint[1] - rect.top - window.pageYOffset,\n  ];\n}\n\n/**\n * Converts the event's `pageX` and `pageY` properties to Types.Point2 format\n *\n * @param evt - The Mouse `Event`\n */\nfunction _pageToPoint(evt: MouseEvent): Types.Point2 {\n  return [evt.pageX, evt.pageY];\n}\n\n/**\n * Converts the event's `clientX` and `clientY` properties to Types.Point2 format\n * @param evt - The Mouse `Event`\n */\nfunction _clientToPoint(evt: MouseEvent): Types.Point2 {\n  return [evt.clientX, evt.clientY];\n}\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport getMouseEventPoints from './getMouseEventPoints';\nimport { EventTypes, IPoints } from '../../types';\n\n/**\n * Captures and normalizes the double click event. Emits as a cornerstoneTools3D\n * double click event.\n *\n * @param evt - The mouse event.\n */\nfunction mouseDoubleClickListener(evt: MouseEvent): void {\n  const element = <HTMLDivElement>evt.currentTarget;\n\n  const { viewportId, renderingEngineId } = getEnabledElement(element);\n\n  const startPoints = getMouseEventPoints(evt, element);\n  const deltaPoints: IPoints = {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  };\n\n  const eventDetail: EventTypes.MouseDoubleClickEventDetail = {\n    event: evt,\n    eventName: Events.MOUSE_DOUBLE_CLICK,\n    viewportId,\n    renderingEngineId,\n    camera: {},\n    element,\n    startPoints,\n    lastPoints: startPoints,\n    currentPoints: startPoints,\n    deltaPoints,\n  };\n\n  const consumed = !triggerEvent(\n    element,\n    Events.MOUSE_DOUBLE_CLICK,\n    eventDetail\n  );\n\n  if (consumed) {\n    // The Events.MOUSE_DOUBLE_CLICK was consumed, thus no other listener should handle this 'dblclick' event.\n\n    // Use stopImmediatePropagation to lessen the possibility that a third party 'dblclick'\n    // listener receives this event. However, there still is no guarantee\n    // that any third party listener has not already handled the event.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  }\n}\n\nexport default mouseDoubleClickListener;\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport getMouseEventPoints from './getMouseEventPoints';\nimport { MouseMoveEventDetail } from '../../types/EventTypes';\n\nconst eventName = Events.MOUSE_MOVE;\n\n/**\n * Captures and normalizes the mouse move event. Emits as a cornerstoneTools3D\n * mouse move event.\n *\n * @param evt - The mouse event.\n */\nfunction mouseMoveListener(evt: MouseEvent) {\n  const element = <HTMLDivElement>evt.currentTarget;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  const currentPoints = getMouseEventPoints(evt);\n  const eventDetail: MouseMoveEventDetail = {\n    renderingEngineId,\n    viewportId,\n    camera: {},\n    element,\n    currentPoints,\n    eventName,\n    event: evt,\n  };\n\n  triggerEvent(element, eventName, eventDetail);\n}\n\nexport default mouseMoveListener;\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport Events from '../../enums/Events';\nimport mouseMoveListener from './mouseMoveListener';\nimport { EventTypes, IPoints } from '../../types';\nimport getMouseEventPoints from './getMouseEventPoints';\n\nconst { MOUSE_DOWN, MOUSE_DOWN_ACTIVATE, MOUSE_CLICK, MOUSE_UP, MOUSE_DRAG } =\n  Events;\n\n// The amount of time in milliseconds within which a browser 'dblclick' event has to occur.\n// Any mouse down, up, down and up sequence taking longer than this time is considered to\n// NOT be a double click and any browser 'dblclick' event that subsequently occurs as a result\n// of such a sequence will be ignored. It is best to set this to a value that is less\n// than the system value for detecting a double click. Setting something too large\n// might detect a double click that does not constitute a browser 'dblclick' and thus\n// no mouse events for the sequence will get fired at all.\n//\n// TODO This module should detect and fire 'dblclick' events at its discretion and\n// ignore all those generated by the browser.\n//\nconst DOUBLE_CLICK_TOLERANCE_MS = 400;\n\n// This tolerance is how long to accept a secondary button down\nconst MULTI_BUTTON_TOLERANCE_MS = 150;\n\n// A drag (projected distance) during the double click timeout that is greater than this\n// value will cancel the timeout and suppress any double click that might occur.\n// This tolerance is particularly important on touch devices where some movement\n// might occur between the two clicks.\n//\n// TODO revisit this value for touch devices\n//\nconst DOUBLE_CLICK_DRAG_TOLERANCE = 3;\n\ninterface IMouseDownListenerState {\n  mouseButton: number;\n  element: HTMLDivElement;\n  renderingEngineId: string;\n  viewportId: string;\n  isClickEvent: boolean;\n  clickDelay: number;\n  preventClickTimeout: ReturnType<typeof setTimeout>;\n  startPoints: IPoints;\n  lastPoints: IPoints;\n}\n\ninterface IDoubleClickState {\n  doubleClickTimeout: ReturnType<typeof setTimeout>;\n  mouseDownEvent: MouseEvent;\n  mouseUpEvent: MouseEvent;\n  ignoreDoubleClick: boolean;\n}\n\n// STATE\nconst defaultState: IMouseDownListenerState = {\n  mouseButton: undefined,\n  //\n  element: null,\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  isClickEvent: true,\n  clickDelay: 200,\n  preventClickTimeout: null,\n  startPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n  lastPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n};\n\nlet state: IMouseDownListenerState = {\n  mouseButton: undefined,\n  //\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  isClickEvent: true,\n  clickDelay: 200,\n  element: null,\n  preventClickTimeout: null,\n  startPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n  lastPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n};\n\nconst doubleClickState: IDoubleClickState = {\n  doubleClickTimeout: null,\n  mouseDownEvent: null,\n  mouseUpEvent: null,\n  ignoreDoubleClick: false,\n};\n\n/**\n * Listens to mouse down events from the DOM and depending on interaction and further\n * interaction can emit the following mouse events:\n *\n * - MOUSE_DOWN\n * - MOUSE_DOWN_ACTIVATE\n * - MOUSE_DRAG (move while down)\n * - MOUSE_UP\n * - MOUSE_CLICK\n *\n * The mouse down is NOT handled immediately. Instead, a timeout is started to\n * determine if this mouse down is the first in a sequence that constitutes a\n * double click.\n *\n * @param evt - The Mouse event.\n * @private\n */\nfunction mouseDownListener(evt: MouseEvent) {\n  if (doubleClickState.doubleClickTimeout) {\n    // A second identical click will be a double click event, so ignore it\n    if (evt.buttons === doubleClickState.mouseDownEvent.buttons) return;\n\n    // Record the second button or the changed button event as the initial\n    // button down state so that the multi-button event can be detected\n    doubleClickState.mouseDownEvent = evt;\n\n    // If second button is added, then ensure double click timeout is terminated\n    // and do not handle three or more button gestures.\n    _doStateMouseDownAndUp();\n    return;\n  }\n\n  // Handle multi-button clicks by adding a delay before handling them.\n  // Double clicks (left button only) physically take the user longer, so\n  // use a longer timeout, and for multi-button at the same time, the clicks\n  // are done at the same time by the user, just the system perceives them\n  // separately, so have a short timeout to allow catching both buttons.\n  doubleClickState.doubleClickTimeout = setTimeout(\n    _doStateMouseDownAndUp,\n    evt.buttons === 1 ? DOUBLE_CLICK_TOLERANCE_MS : MULTI_BUTTON_TOLERANCE_MS\n  );\n\n  // First mouse down of a potential double click. So save it and start\n  // a timeout to determine a double click.\n  doubleClickState.mouseDownEvent = evt;\n  doubleClickState.ignoreDoubleClick = false;\n\n  state.element = <HTMLDivElement>evt.currentTarget;\n\n  state.mouseButton = evt.buttons;\n\n  const enabledElement = getEnabledElement(state.element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  state.renderingEngineId = renderingEngineId;\n  state.viewportId = viewportId;\n\n  state.preventClickTimeout = setTimeout(\n    _preventClickHandler,\n    state.clickDelay\n  );\n\n  // Prevent CornerstoneToolsMouseMove while mouse is down\n  state.element.removeEventListener('mousemove', mouseMoveListener);\n\n  const startPoints = getMouseEventPoints(evt, state.element);\n  state.startPoints = _copyPoints(startPoints);\n  state.lastPoints = _copyPoints(startPoints);\n\n  document.addEventListener('mouseup', _onMouseUp);\n  document.addEventListener('mousemove', _onMouseDrag);\n}\n\n/**\n * Does the actual mouse down logic if the double click timer has expired or\n * a mouse drag has started.\n * @param evt the mouse down event\n * @private\n */\nfunction _doMouseDown(evt: MouseEvent) {\n  const deltaPoints = _getDeltaPoints(state.startPoints, state.startPoints);\n\n  const eventDetail: EventTypes.MouseDownEventDetail = {\n    event: evt,\n    eventName: MOUSE_DOWN,\n    element: state.element,\n    mouseButton: state.mouseButton,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    startPoints: state.startPoints,\n    lastPoints: state.startPoints,\n    currentPoints: state.startPoints,\n    deltaPoints,\n  };\n\n  state.lastPoints = _copyPoints(eventDetail.lastPoints);\n\n  // by triggering MOUSE_DOWN it checks if this is toolSelection, handle modification etc.\n  // of already existing tools\n  const notConsumed = triggerEvent(\n    eventDetail.element,\n    MOUSE_DOWN,\n    eventDetail\n  );\n\n  // if no tools responded to this event and prevented its default behavior,\n  // create a new tool\n  if (notConsumed) {\n    triggerEvent(eventDetail.element, MOUSE_DOWN_ACTIVATE, eventDetail);\n  }\n}\n\n/**\n *_onMouseDrag - Handle emission of drag events whilst the mouse is depressed.\n *\n * @private\n * @param evt - The mouse event.\n */\nfunction _onMouseDrag(evt: MouseEvent) {\n  const currentPoints = getMouseEventPoints(evt, state.element);\n  const lastPoints = _updateMouseEventsLastPoints(\n    state.element,\n    state.lastPoints\n  );\n\n  const deltaPoints = _getDeltaPoints(currentPoints, lastPoints);\n\n  if (doubleClickState.doubleClickTimeout) {\n    if (_isDragPastDoubleClickTolerance(deltaPoints.canvas)) {\n      // Dragging past the tolerance means no double click should occur.\n      _doStateMouseDownAndUp();\n    } else {\n      return;\n    }\n  }\n\n  const eventDetail: EventTypes.MouseDragEventDetail = {\n    event: evt,\n    eventName: MOUSE_DRAG,\n    mouseButton: state.mouseButton,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    startPoints: _copyPoints(state.startPoints),\n    lastPoints: _copyPoints(lastPoints),\n    currentPoints,\n    deltaPoints,\n  };\n\n  triggerEvent(state.element, MOUSE_DRAG, eventDetail);\n\n  // Update the last points\n  state.lastPoints = _copyPoints(currentPoints);\n}\n\n/**\n *_onMouseUp - Handle emission of mouse up events, and re-enabling mouse move events.\n *\n * If the mouse up event occurs during a double click timeout, it is either the first or\n * second mouse up of a potential double click sequence. If the first, then it\n * is saved in case the double click timeout expires and a simple mouse down and\n * up have to get executed. If the second, then the latest mouse down, up, down and\n * up constitute a double click and the mouseDoubleClickListener needs to execute.\n *\n * If the mouse up event comes after the double click timeout, then it is simply\n * handled as the up of a mouse down and up sequence.\n *\n * @private\n * @param evt - The mouse event.\n */\nfunction _onMouseUp(evt: MouseEvent): void {\n  // Cancel the timeout preventing the click event from triggering\n  clearTimeout(state.preventClickTimeout);\n\n  if (doubleClickState.doubleClickTimeout) {\n    // received a mouse up while waiting for a double click (via a timeout)\n\n    if (!doubleClickState.mouseUpEvent) {\n      // this is the first mouse up during the double click timeout; we'll need it later if the timeout expires\n      doubleClickState.mouseUpEvent = evt;\n\n      state.element.addEventListener('mousemove', _onMouseMove);\n    } else {\n      // this is the second mouse up of a double click!\n      _cleanUp();\n    }\n  } else {\n    // Handle the actual mouse up. Note that it may have occurred during the double click timeout or\n    // after it expired. In either case this block is being executed after the time out has expired\n    // or after a drag started.\n\n    const eventName = state.isClickEvent ? MOUSE_CLICK : MOUSE_UP;\n\n    const currentPoints = getMouseEventPoints(evt, state.element);\n    const deltaPoints = _getDeltaPoints(currentPoints, state.lastPoints);\n    const eventDetail:\n      | EventTypes.MouseUpEventDetail\n      | EventTypes.MouseClickEventType = {\n      event: evt,\n      eventName,\n      mouseButton: state.mouseButton,\n      element: state.element,\n      renderingEngineId: state.renderingEngineId,\n      viewportId: state.viewportId,\n      camera: {},\n      startPoints: _copyPoints(state.startPoints),\n      lastPoints: _copyPoints(state.lastPoints),\n      currentPoints,\n      deltaPoints,\n    };\n\n    triggerEvent(eventDetail.element, eventName, eventDetail);\n\n    _cleanUp();\n  }\n\n  // Remove the drag as soon as we get the mouse up because either we have executed\n  // the mouse up logic, or we have not even handled the mouse down logic yet\n  // - either way no drag should/can occur.\n  document.removeEventListener('mousemove', _onMouseDrag);\n}\n\n/**\n * Handles a mouse move on the state element after a mouse down AND up AND\n * while the double click timeout is still running.\n * @private\n * @param evt - The mouse event.\n */\nfunction _onMouseMove(evt: MouseEvent) {\n  const currentPoints = getMouseEventPoints(evt, state.element);\n  const lastPoints = _updateMouseEventsLastPoints(\n    state.element,\n    state.lastPoints\n  );\n\n  const deltaPoints = _getDeltaPoints(currentPoints, lastPoints);\n\n  if (!_isDragPastDoubleClickTolerance(deltaPoints.canvas)) {\n    return;\n  }\n\n  _doStateMouseDownAndUp();\n\n  // Do the move again because during the timeout the global mouse move listener was removed.\n  // Now it is back.\n  mouseMoveListener(evt);\n}\n\n/**\n * Determines if the given delta is past the double click, (projected) drag distance\n * tolerance.\n * @param delta the delta\n * @returns true iff the delta is past the tolerance\n */\nfunction _isDragPastDoubleClickTolerance(delta: Types.Point2): boolean {\n  return Math.abs(delta[0]) + Math.abs(delta[1]) > DOUBLE_CLICK_DRAG_TOLERANCE;\n}\n\nfunction _preventClickHandler() {\n  state.isClickEvent = false;\n}\n\n/**\n * Do a mouse down and potential mouse up using each of the events in the double click state.\n * The events were stored in the state during the timeout to determine a double click.\n *\n * This function should be invoked whenever it is determined that the latest\n * sequence of mouse down(s) and up(s) is NOT a double click. Examples of this include\n * - the expiration of the double click timeout\n * - a mouse drag/move beyond the DOUBLE_CLICK_DRAG_TOLERANCE\n *\n * This function sets the doubleClickState.ignoreDoubleClick flag in case our timeout value\n * or mouse move/drag tolerance is inaccurate and we do indeed get a double click event from\n * the browser later. The flag will be cleared in the mouseDoubleClickIgnoreListener should a\n * double click event get fired. If there is no eventual double click for the latest sequence,\n * the flag spills into the next sequence where it will get cleared at the beginning of that next\n * sequence in mouseDownListener. It is perfectly safe for the flag to be\n * left true when no double click actually occurs because any future double click must start with\n * a mouse down that is handled in this module.\n *\n * @private\n */\nfunction _doStateMouseDownAndUp() {\n  doubleClickState.ignoreDoubleClick = true;\n\n  const mouseDownEvent = doubleClickState.mouseDownEvent;\n  const mouseUpEvent = doubleClickState.mouseUpEvent;\n\n  _clearDoubleClickTimeoutAndEvents();\n\n  _doMouseDown(mouseDownEvent);\n\n  if (mouseUpEvent) {\n    _onMouseUp(mouseUpEvent);\n  }\n}\n\n/**\n * Clears the mouse events and double click timeout id in the double click state object.\n * The timeout itself is also cleared so that no callback is invoked.\n */\nfunction _clearDoubleClickTimeoutAndEvents() {\n  if (doubleClickState.doubleClickTimeout) {\n    clearTimeout(doubleClickState.doubleClickTimeout);\n    doubleClickState.doubleClickTimeout = null;\n  }\n\n  doubleClickState.mouseDownEvent = null;\n  doubleClickState.mouseUpEvent = null;\n}\n\nfunction _cleanUp() {\n  document.removeEventListener('mouseup', _onMouseUp);\n  state.element?.removeEventListener('mousemove', _onMouseMove);\n\n  // Restore our global mousemove listener\n  state.element?.addEventListener('mousemove', mouseMoveListener);\n\n  _clearDoubleClickTimeoutAndEvents();\n\n  state = JSON.parse(JSON.stringify(defaultState));\n}\n\n/**\n * Copies a set of points.\n * @param points - The `IPoints` instance to copy.\n *\n * @returns A copy of the points.\n */\nfunction _copyPoints(points: IPoints): IPoints {\n  return JSON.parse(JSON.stringify(points));\n}\n\n/**\n * Recalculates the last world coordinate, as the linear transform from client\n * to world could be different if the camera was updated.\n * @param element - The HTML element\n * @param lastPoints - The last points\n */\nfunction _updateMouseEventsLastPoints(\n  element: HTMLDivElement,\n  lastPoints: IPoints\n): IPoints {\n  const { viewport } = getEnabledElement(element);\n  // Need to update the world point to be calculated from the current reference frame,\n  // Which might have changed since the last interaction.\n  const world = viewport.canvasToWorld(lastPoints.canvas);\n\n  return {\n    page: lastPoints.page,\n    client: lastPoints.client,\n    canvas: lastPoints.canvas,\n    world,\n  };\n}\n\n/**\n * Returns the difference between two `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints -- The last points, to be subtracted from the `currentPoints`.\n *\n * @returns The difference in IPoints format\n */\nfunction _getDeltaPoints(currentPoints: IPoints, lastPoints: IPoints): IPoints {\n  return {\n    page: _subtractPoints2D(currentPoints.page, lastPoints.page),\n    client: _subtractPoints2D(currentPoints.client, lastPoints.client),\n    canvas: _subtractPoints2D(currentPoints.canvas, lastPoints.canvas),\n    world: _subtractPoints3D(currentPoints.world, lastPoints.world),\n  };\n}\n\n/**\n * _subtractPoints - Subtracts `point1` from `point0`.\n * @param point0 - The first point.\n * @param point1 - The second point to subtract from the first.\n *\n * @returns The difference.\n */\nfunction _subtractPoints2D(\n  point0: Types.Point2,\n  point1: Types.Point2\n): Types.Point2 {\n  return [point0[0] - point1[0], point0[1] - point1[1]];\n}\n\nfunction _subtractPoints3D(\n  point0: Types.Point3,\n  point1: Types.Point3\n): Types.Point3 {\n  return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\n\nexport function getMouseButton(): number {\n  return state.mouseButton;\n}\n\n/**\n * Handles a dblclick event to determine if it should be ignored based on the\n * double click state's ignoreDoubleClick flag. stopImmediatePropagation and\n * preventDefault are used to ignore the event.\n * @param evt browser dblclick event\n */\nexport function mouseDoubleClickIgnoreListener(evt: MouseEvent) {\n  if (doubleClickState.ignoreDoubleClick) {\n    doubleClickState.ignoreDoubleClick = false;\n\n    // Use stopImmediatePropagation to lessen the possibility that a third party 'dblclick'\n    // listener receives this event. However, there still is no guarantee\n    // that any third party listener has not already handled the event.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  } else {\n    // If the embedding application blocked the first mouse down and up\n    // of a double click sequence from reaching this module, then this module\n    // has handled the second mouse down and up and thus needs to clean them up.\n    // Doing a clean up here for the typical double click case is harmless.\n    _cleanUp();\n  }\n}\n\nexport default mouseDownListener;\n","import mouseDoubleClickListener from './mouseDoubleClickListener';\nimport mouseDownListener, {\n  mouseDoubleClickIgnoreListener,\n} from './mouseDownListener';\nimport mouseMoveListener from './mouseMoveListener';\n\n/**\n * Removes mouse event listeners for native mouse event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to remove event listeners from.\n */\nfunction disable(element: HTMLDivElement): void {\n  element.removeEventListener('dblclick', mouseDoubleClickListener);\n  element.removeEventListener('mousedown', mouseDownListener);\n  element.removeEventListener('mousemove', mouseMoveListener);\n  // The mouseDoubleClickIgnoreListener prevents those browser 'dblclick'\n  // events that cornerstone has determined are single clicks from propagating\n  // to other (3rd party) listeners. A capture phase listener is used so that\n  // the 'dblclick' event can be ignored and not propagated ASAP.\n  element.removeEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n    capture: true,\n  });\n}\n\n/**\n * Registers mouse event listeners for native mouse event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to register event listeners on.\n */\nfunction enable(element: HTMLDivElement): void {\n  // Prevent handlers from being attached multiple times\n  disable(element);\n\n  element.addEventListener('dblclick', mouseDoubleClickListener);\n  element.addEventListener('mousedown', mouseDownListener);\n  element.addEventListener('mousemove', mouseMoveListener);\n  // The mouseDoubleClickIgnoreListener prevents those browser 'dblclick'\n  // events that cornerstone has determined are single clicks from propagating\n  // to other (3rd party) listeners. A capture phase listener is used so that\n  // the 'dblclick' event can be ignored and not propagated ASAP.\n  element.addEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n    capture: true,\n  });\n}\n\nexport default {\n  enable,\n  disable,\n};\n","// Functions to prevent ghost clicks following a touch\n// Since the event lifecycle is touchstart, mousedown, touchend, mouseup\n// we want to prevent mousedown and mouseup events after touch events\n// All credit to @kosich\n// https://gist.github.com/kosich/23188dd86633b6c2efb7\n\nconst antiGhostDelay = 2000,\n  pointerType = {\n    mouse: 0,\n    touch: 1,\n  };\n\nlet lastInteractionType, lastInteractionTime;\n\nfunction handleTap(type, e) {\n  const now = Date.now();\n\n  if (type !== lastInteractionType) {\n    if (now - lastInteractionTime <= antiGhostDelay) {\n      e.preventDefault();\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n\n      return false;\n    }\n\n    lastInteractionType = type;\n  }\n\n  lastInteractionTime = now;\n}\n\n// Cacheing the function references\n// Necessary because a new function reference is created after .bind() is called\n// http://stackoverflow.com/questions/11565471/removing-event-listener-which-was-added-with-bind\nconst handleTapMouse = handleTap.bind(null, pointerType.mouse);\nconst handleTapTouch = handleTap.bind(null, pointerType.touch);\n\nfunction attachEvents(element, eventList, interactionType) {\n  const tapHandler = interactionType ? handleTapMouse : handleTapTouch;\n\n  eventList.forEach(function (eventName) {\n    element.addEventListener(eventName, tapHandler, { passive: false });\n  });\n}\n\nfunction removeEvents(element, eventList, interactionType) {\n  const tapHandler = interactionType ? handleTapMouse : handleTapTouch;\n\n  eventList.forEach(function (eventName) {\n    element.removeEventListener(eventName, tapHandler);\n  });\n}\n\nconst mouseEvents = ['mousedown', 'mouseup', 'mousemove'];\nconst touchEvents = ['touchstart', 'touchend'];\n\nfunction disable(element) {\n  removeEvents(element, mouseEvents, pointerType.mouse);\n  removeEvents(element, touchEvents, pointerType.touch);\n}\n\nfunction enable(element) {\n  disable(element);\n  attachEvents(element, mouseEvents, pointerType.mouse);\n  attachEvents(element, touchEvents, pointerType.touch);\n}\n\nexport default {\n  enable,\n  disable,\n};\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { ITouchPoints } from '../../types';\n\n/**\n * Given a native touch event, get the associated cornerstone3D enabled element\n * and derive a set of coordinates useful for tools.\n * @param evt - The Touch event.\n * @param element - The DOM HTMLDivElement that the event was triggered on.\n * @returns The points related to the event in the form of a `IPoints` object containing\n * the following properties: `page`, `client`, `canvas`, and `world` details of the event.\n */\nexport default function getTouchEventPoints(\n  evt: TouchEvent,\n  element?: HTMLDivElement\n): ITouchPoints[] {\n  const elementToUse = element || (evt.currentTarget as HTMLDivElement);\n  const touches = evt.type === 'touchend' ? evt.changedTouches : evt.touches;\n  return Object.keys(touches).map((i) => {\n    const clientPoint = _clientToPoint(touches[i]);\n    const pagePoint = _pageToPoint(touches[i]);\n    const canvasPoint = _pagePointsToCanvasPoints(elementToUse, pagePoint);\n    const { viewport } = getEnabledElement(elementToUse);\n    const worldPoint = viewport.canvasToWorld(canvasPoint);\n    return {\n      page: pagePoint,\n      client: clientPoint,\n      canvas: canvasPoint,\n      world: worldPoint,\n      touch: {\n        identifier: i,\n        radiusX: touches[i].radiusX,\n        radiusY: touches[i].radiusY,\n        force: touches[i].force,\n        rotationAngle: touches[i].rotationAngle,\n      },\n    };\n  });\n}\n\n/**\n * Converts point from page coordinates to canvas coordinates.\n * @param element - HTMLDivElement\n * @param pagePoint - Point in page coordinates pageX and pageY\n *\n * @returns The canvas coordinate points\n */\nfunction _pagePointsToCanvasPoints(\n  element: HTMLDivElement,\n  pagePoint: Types.Point2\n): Types.Point2 {\n  const rect = element.getBoundingClientRect();\n  return [\n    pagePoint[0] - rect.left - window.pageXOffset,\n    pagePoint[1] - rect.top - window.pageYOffset,\n  ];\n}\n\n/**\n * Converts the event's `pageX` and `pageY` properties to Types.Point2 format\n *\n * @param touch - The Touch\n */\nfunction _pageToPoint(touch: Touch): Types.Point2 {\n  return [touch.pageX, touch.pageY];\n}\n\n/**\n * Converts the event's `clientX` and `clientY` properties to Types.Point2 format\n * @param evt - The Touch `Event`\n */\nfunction _clientToPoint(touch: Touch): Types.Point2 {\n  return [touch.clientX, touch.clientY];\n}\n","import { IDistance, IPoints, ITouchPoints } from '../../types';\nimport { Types } from '@cornerstonejs/core';\n\n/**\n * Returns the difference between multiple `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints - The last points, to be subtracted from the `currentPoints`.\n *\n * @returns The difference in IPoints format\n */\nfunction getDeltaPoints(\n  currentPoints: IPoints[],\n  lastPoints: IPoints[]\n): IPoints {\n  const curr = getMeanPoints(currentPoints);\n  const last = getMeanPoints(lastPoints);\n  return {\n    page: _subtractPoints2D(curr.page, last.page),\n    client: _subtractPoints2D(curr.client, last.client),\n    canvas: _subtractPoints2D(curr.canvas, last.canvas),\n    world: _subtractPoints3D(curr.world, last.world),\n  };\n}\n\n/**\n * Returns the distance between multiple `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints - The last points, to be subtracted from the `currentPoints`.\n *\n * @returns The distance difference in IDistance format\n */\nfunction getDeltaDistance(\n  currentPoints: IPoints[],\n  lastPoints: IPoints[]\n): IDistance {\n  const curr = getMeanPoints(currentPoints);\n  const last = getMeanPoints(lastPoints);\n  return {\n    page: _getDistance2D(curr.page, last.page),\n    client: _getDistance2D(curr.client, last.client),\n    canvas: _getDistance2D(curr.canvas, last.canvas),\n    world: _getDistance3D(curr.world, last.world),\n  };\n}\n\nfunction getDeltaRotation(\n  currentPoints: ITouchPoints[],\n  lastPoints: ITouchPoints[]\n) {\n  // TODO\n}\n\n/**\n * Returns the distance difference between multiple `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints -- The last points.\n *\n * @returns The difference in IPoints format\n */\nfunction getDeltaDistanceBetweenIPoints(\n  currentPoints: IPoints[],\n  lastPoints: IPoints[]\n): IDistance {\n  const currentDistance = _getMeanDistanceBetweenAllIPoints(currentPoints);\n  const lastDistance = _getMeanDistanceBetweenAllIPoints(lastPoints);\n  const deltaDistance = {\n    page: currentDistance.page - lastDistance.page,\n    client: currentDistance.client - lastDistance.client,\n    canvas: currentDistance.canvas - lastDistance.canvas,\n    world: currentDistance.world - lastDistance.world,\n  };\n  return deltaDistance;\n}\n\n/**\n * Copies a set of points.\n * @param points - The `IPoints` instance to copy.\n *\n * @returns A copy of the points.\n */\nfunction copyPointsList(points: ITouchPoints[]): ITouchPoints[] {\n  return JSON.parse(JSON.stringify(points));\n}\n\nfunction copyPoints(points: ITouchPoints): ITouchPoints {\n  return JSON.parse(JSON.stringify(points));\n}\n\nfunction getMeanPoints(points: IPoints[]): IPoints {\n  return points.reduce(\n    (prev, curr) => {\n      return {\n        page: [\n          prev.page[0] + curr.page[0] / points.length,\n          prev.page[1] + curr.page[1] / points.length,\n        ],\n        client: [\n          prev.client[0] + curr.client[0] / points.length,\n          prev.client[1] + curr.client[1] / points.length,\n        ],\n        canvas: [\n          prev.canvas[0] + curr.canvas[0] / points.length,\n          prev.canvas[1] + curr.canvas[1] / points.length,\n        ],\n        world: [\n          prev.world[0] + curr.world[0] / points.length,\n          prev.world[1] + curr.world[1] / points.length,\n          prev.world[2] + curr.world[2] / points.length,\n        ],\n      };\n    },\n    {\n      page: [0, 0],\n      client: [0, 0],\n      canvas: [0, 0],\n      world: [0, 0, 0],\n    }\n  );\n}\n\nfunction getMeanTouchPoints(points: ITouchPoints[]): ITouchPoints {\n  return points.reduce(\n    (prev, curr) => {\n      return {\n        page: [\n          prev.page[0] + curr.page[0] / points.length,\n          prev.page[1] + curr.page[1] / points.length,\n        ],\n        client: [\n          prev.client[0] + curr.client[0] / points.length,\n          prev.client[1] + curr.client[1] / points.length,\n        ],\n        canvas: [\n          prev.canvas[0] + curr.canvas[0] / points.length,\n          prev.canvas[1] + curr.canvas[1] / points.length,\n        ],\n        world: [\n          prev.world[0] + curr.world[0] / points.length,\n          prev.world[1] + curr.world[1] / points.length,\n          prev.world[2] + curr.world[2] / points.length,\n        ],\n        touch: {\n          identifier: null,\n          radiusX: prev.touch.radiusX + curr.touch.radiusX / points.length,\n          radiusY: prev.touch.radiusY + curr.touch.radiusY / points.length,\n          force: prev.touch.force + curr.touch.force / points.length,\n          rotationAngle:\n            prev.touch.rotationAngle + curr.touch.rotationAngle / points.length,\n        },\n      };\n    },\n    {\n      page: [0, 0],\n      client: [0, 0],\n      canvas: [0, 0],\n      world: [0, 0, 0],\n      touch: {\n        identifier: null,\n        radiusX: 0,\n        radiusY: 0,\n        force: 0,\n        rotationAngle: 0,\n      },\n    }\n  );\n}\n/**\n * _subtractPoints - Subtracts `point1` from `point0`.\n * @param point0 - The first point.\n * @param point1 - The second point to subtract from the first.\n *\n * @returns The difference.\n */\nfunction _subtractPoints2D(\n  point0: Types.Point2,\n  point1: Types.Point2\n): Types.Point2 {\n  return [point0[0] - point1[0], point0[1] - point1[1]];\n}\n\nfunction _subtractPoints3D(\n  point0: Types.Point3,\n  point1: Types.Point3\n): Types.Point3 {\n  return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\n\nfunction _getMeanDistanceBetweenAllIPoints(points: IPoints[]): IDistance {\n  // get mean distance between all unordered pairs of points\n  const pairedDistance: IDistance[] = [];\n  for (let i = 0; i < points.length; i++) {\n    for (let j = 0; j < points.length; j++) {\n      if (i < j) {\n        pairedDistance.push({\n          page: _getDistance2D(points[i].page, points[j].page),\n          client: _getDistance2D(points[i].client, points[j].client),\n          canvas: _getDistance2D(points[i].canvas, points[j].canvas),\n          world: _getDistance3D(points[i].world, points[j].world),\n        });\n      }\n    }\n  }\n\n  // take the average distance\n  return pairedDistance.reduce(\n    (prev, curr) => {\n      return {\n        page: prev.page + curr.page / pairedDistance.length,\n        client: prev.client + curr.client / pairedDistance.length,\n        canvas: prev.canvas + curr.canvas / pairedDistance.length,\n        world: prev.world + curr.world / pairedDistance.length,\n      };\n    },\n    {\n      page: 0,\n      client: 0,\n      canvas: 0,\n      world: 0,\n    }\n  );\n}\n\nfunction _getDistance2D(point0: Types.Point2, point1: Types.Point2): number {\n  return Math.sqrt(\n    Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2)\n  );\n}\n\nfunction _getDistance3D(point0: Types.Point3, point1: Types.Point3): number {\n  return Math.sqrt(\n    Math.pow(point0[0] - point1[0], 2) +\n      Math.pow(point0[1] - point1[1], 2) +\n      Math.pow(point0[2] - point1[2], 2)\n  );\n}\n\nexport {\n  getMeanPoints,\n  getMeanTouchPoints,\n  copyPoints,\n  copyPointsList,\n  getDeltaDistanceBetweenIPoints,\n  getDeltaPoints,\n  getDeltaDistance,\n  getDeltaRotation,\n};\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport { Swipe } from '../../enums/Touch';\n\nimport { EventTypes, ITouchPoints, IPoints, IDistance } from '../../types';\n\nimport getTouchEventPoints from './getTouchEventPoints';\nimport {\n  copyPoints,\n  copyPointsList,\n  getDeltaDistanceBetweenIPoints,\n  getDeltaDistance,\n  getDeltaPoints,\n  getMeanTouchPoints,\n  // getRotation\n} from '../../utilities/touch';\nimport { Settings } from '@cornerstonejs/core';\n\nconst runtimeSettings = Settings.getRuntimeSettings();\n\nconst {\n  TOUCH_START,\n  TOUCH_START_ACTIVATE,\n  TOUCH_PRESS,\n  TOUCH_DRAG,\n  TOUCH_END,\n  TOUCH_TAP,\n  TOUCH_SWIPE,\n} = Events;\n\ninterface ITouchTapListnenerState {\n  element: HTMLDivElement;\n  renderingEngineId: string;\n  viewportId: string;\n  startPointsList: ITouchPoints[];\n  tapMaxDistance: number;\n  tapTimeout: ReturnType<typeof setTimeout>;\n  taps: number;\n  tapToleranceMs: number;\n}\n\ninterface ITouchStartListenerState {\n  element: HTMLDivElement;\n  renderingEngineId: string;\n  viewportId: string;\n  startPointsList: ITouchPoints[];\n  lastPointsList: ITouchPoints[];\n\n  // only trigger one touch event in the case the user puts down multiple fingers\n  isTouchStart: boolean;\n  startTime: Date;\n\n  // handle long press\n  pressTimeout: ReturnType<typeof setTimeout>;\n  pressDelay: number;\n  pressMaxDistance: number;\n  accumulatedDistance: IDistance;\n\n  // handle swipes\n  swipeDistanceThreshold: number;\n  swiped: boolean;\n  swipeToleranceMs: number;\n}\n\nconst zeroIPoint: IPoints = {\n  page: [0, 0],\n  client: [0, 0],\n  canvas: [0, 0],\n  world: [0, 0, 0],\n};\n\nconst zeroIDistance: IDistance = {\n  page: 0,\n  client: 0,\n  canvas: 0,\n  world: 0,\n};\n\n// STATE\nconst defaultState: ITouchStartListenerState = {\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  element: null,\n  startPointsList: [\n    {\n      ...zeroIPoint,\n      touch: null,\n    },\n  ],\n  lastPointsList: [\n    {\n      ...zeroIPoint,\n      touch: null,\n    },\n  ],\n  isTouchStart: false,\n  startTime: null,\n\n  pressTimeout: null,\n  pressDelay: 700,\n  pressMaxDistance: 5,\n  accumulatedDistance: zeroIDistance,\n\n  swipeDistanceThreshold: 48,\n  swiped: false,\n  swipeToleranceMs: 300, // user has 300ms to swipe after touch start or no swipe will trigger\n};\n\n// TODO: these values should be configurable to handle different use cases such\n// as pen, left/right handed, index finger vs thumb, etc. These current values\n// assume thumb usage for single finger and index/middle finger for two finger\n// gestures in an attempt to cover the 90% use case.\nconst defaultTapState: ITouchTapListnenerState = {\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  element: null,\n  startPointsList: [\n    {\n      ...zeroIPoint,\n      touch: null,\n    },\n  ],\n  taps: 0,\n  tapTimeout: null,\n  tapMaxDistance: 24,\n  tapToleranceMs: 300,\n};\n\nlet state: ITouchStartListenerState = JSON.parse(JSON.stringify(defaultState));\nlet tapState: ITouchTapListnenerState = JSON.parse(\n  JSON.stringify(defaultTapState)\n);\n\nfunction triggerEventCallback(ele, name, eventDetail) {\n  if (runtimeSettings.get('debug')) {\n    if (name === 'CORNERSTONE_TOOLS_TOUCH_DRAG') {\n      console.debug(name);\n    } else {\n      console.debug(name, eventDetail);\n    }\n  }\n  return triggerEvent(ele, name, eventDetail);\n}\n\n/**\n * Listens to touch events from the DOM (touchstart, touchmove, touchend)\n * and depending on interaction and further interaction can emit the\n * following touch events:\n *\n * - TOUCH_START\n * - TOUCH_START_ACTIVATE\n * - TOUCH_PRESS\n * - TOUCH_DRAG (move while down)\n * - TOUCH_SWIPE\n * - TOUCH_END (also an end for multi touch)\n *\n * - TOUCH_TAP\n *\n * @param evt - The Touch event (touchstart).\n * @private\n */\nfunction touchStartListener(evt: TouchEvent) {\n  // if a user adds an extra finger when a touch/multi touch has already started\n  // don't trigger another touch.\n  state.element = <HTMLDivElement>evt.currentTarget;\n  const enabledElement = getEnabledElement(state.element);\n  const { renderingEngineId, viewportId } = enabledElement;\n  state.renderingEngineId = renderingEngineId;\n  state.viewportId = viewportId;\n  // this prevents multiple start firing\n  if (state.isTouchStart) return;\n  // this will clear on touchstart and touchend\n  clearTimeout(state.pressTimeout);\n  state.pressTimeout = setTimeout(() => _onTouchPress(evt), state.pressDelay);\n\n  _onTouchStart(evt);\n  document.addEventListener('touchmove', _onTouchDrag); // also checks for swipe\n  document.addEventListener('touchend', _onTouchEnd); // also checks for tap\n}\n\n/**\n * _onTouchPress - Handle emission of touchstart events which are held down for a longer\n * period of time\n *\n * @private\n * @param evt - The touch event (touchstart)\n */\nfunction _onTouchPress(evt: TouchEvent) {\n  const totalDistance = state.accumulatedDistance.canvas;\n  if (totalDistance > state.pressMaxDistance) return;\n  const eventDetail: EventTypes.TouchPressEventDetail = {\n    event: evt, // touchstart native event\n    eventName: TOUCH_PRESS,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    startPointsList: copyPointsList(state.startPointsList),\n    lastPointsList: copyPointsList(state.lastPointsList),\n    startPoints: copyPoints(getMeanTouchPoints(state.startPointsList)),\n    lastPoints: copyPoints(getMeanTouchPoints(state.lastPointsList)),\n  };\n  triggerEventCallback(eventDetail.element, TOUCH_PRESS, eventDetail);\n}\n\n/**\n * _onTouchStart - Handle emission of touchstart events.\n *\n * @private\n * @param evt - The touch event (touchstart)\n */\nfunction _onTouchStart(evt: TouchEvent) {\n  state.isTouchStart = true;\n  state.startTime = new Date();\n  const startPointsList = getTouchEventPoints(evt, state.element);\n  const startPoints = getMeanTouchPoints(startPointsList);\n  const deltaPoints = zeroIPoint;\n  const deltaDistance = zeroIDistance;\n  // deltaRotation same as deltaDistance but values are theta\n  const eventDetail: EventTypes.TouchStartEventDetail = {\n    event: evt,\n    eventName: TOUCH_START,\n    element: state.element,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    startPointsList: startPointsList,\n    lastPointsList: startPointsList,\n    currentPointsList: startPointsList,\n    startPoints: startPoints,\n    lastPoints: startPoints,\n    currentPoints: startPoints,\n    deltaPoints,\n    deltaDistance,\n    // deltaRotation\n  };\n\n  state.startPointsList = copyPointsList(eventDetail.startPointsList);\n  state.lastPointsList = copyPointsList(eventDetail.lastPointsList);\n  // by triggering TOUCH_START it checks if this is toolSelection, handle modification etc.\n  // of already existing tools\n  const eventDidPropagate = triggerEventCallback(\n    eventDetail.element,\n    TOUCH_START,\n    eventDetail\n  );\n\n  // if no tools responded to this event and prevented its default propagation behavior,\n  // create a new tool\n  if (eventDidPropagate) {\n    triggerEventCallback(\n      eventDetail.element,\n      TOUCH_START_ACTIVATE,\n      eventDetail\n    );\n  }\n}\n\n/**\n * _onTouchDrag - Handle emission of drag events whilst the touch is depressed.\n *\n * @private\n * @param evt - The touch event (touchmove)\n */\nfunction _onTouchDrag(evt: TouchEvent) {\n  const currentPointsList = getTouchEventPoints(evt, state.element);\n  const lastPointsList = _updateTouchEventsLastPoints(\n    state.element,\n    state.lastPointsList\n  );\n\n  const deltaPoints =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaPoints(currentPointsList, lastPointsList)\n      : zeroIPoint;\n\n  const deltaDistance =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaDistanceBetweenIPoints(currentPointsList, lastPointsList)\n      : zeroIDistance;\n\n  const totalDistance =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaDistance(currentPointsList, state.lastPointsList)\n      : zeroIDistance;\n\n  state.accumulatedDistance = {\n    page: state.accumulatedDistance.page + totalDistance.page,\n    client: state.accumulatedDistance.client + totalDistance.client,\n    canvas: state.accumulatedDistance.canvas + totalDistance.canvas,\n    world: state.accumulatedDistance.world + totalDistance.world,\n  };\n\n  /**\n   * this is can be uncommented to make dragging smoother. In the future, these values\n   * should be in a configuration file. There may also need to be different\n   * profiles for left handed and right handed thumb use. These values\n   * are currently optimized for left handed use.\n   *\n   * const clamp = (num) => Math.min(Math.max(num, -15), 10);\n   * const deltaDistanceClamped = \\{\n   *     page: clamp(deltaDistance.page),\n   *     client: clamp(deltaDistance.client),\n   *     canvas: clamp(deltaDistance.canvas),\n   *     world: clamp(deltaDistance.world),\n   * \\};\n   */\n\n  const eventDetail: EventTypes.TouchDragEventDetail = {\n    event: evt,\n    eventName: TOUCH_DRAG,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    startPoints: getMeanTouchPoints(state.startPointsList),\n    lastPoints: getMeanTouchPoints(lastPointsList),\n    currentPoints: getMeanTouchPoints(currentPointsList),\n    startPointsList: copyPointsList(state.startPointsList),\n    lastPointsList: copyPointsList(lastPointsList),\n    currentPointsList,\n    deltaPoints: deltaPoints,\n    deltaDistance: deltaDistance,\n  };\n\n  triggerEventCallback(state.element, TOUCH_DRAG, eventDetail);\n\n  // check for swipe events\n  _checkTouchSwipe(evt, deltaPoints);\n\n  // Update the last points\n  state.lastPointsList = copyPointsList(currentPointsList);\n}\n\n/**\n * _onTouchEnd - Handle emission of touch end events\n *\n * @private\n * @param evt - The touch event.\n */\nfunction _onTouchEnd(evt: TouchEvent): void {\n  // in case it was a tap event we don't want to fire the cornerstone normalized\n  // touch end event if the touch start never happend\n  clearTimeout(state.pressTimeout);\n  const currentPointsList = getTouchEventPoints(evt, state.element);\n  const lastPointsList = _updateTouchEventsLastPoints(\n    state.element,\n    state.lastPointsList\n  );\n  const deltaPoints =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaPoints(currentPointsList, lastPointsList)\n      : getDeltaPoints(currentPointsList, currentPointsList);\n  const deltaDistance =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaDistanceBetweenIPoints(currentPointsList, lastPointsList)\n      : getDeltaDistanceBetweenIPoints(currentPointsList, currentPointsList);\n  const eventDetail: EventTypes.TouchEndEventDetail = {\n    event: evt,\n    eventName: TOUCH_END,\n    element: state.element,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    startPointsList: copyPointsList(state.startPointsList),\n    lastPointsList: copyPointsList(lastPointsList),\n    currentPointsList,\n    startPoints: getMeanTouchPoints(state.startPointsList),\n    lastPoints: getMeanTouchPoints(lastPointsList),\n    currentPoints: getMeanTouchPoints(currentPointsList),\n    deltaPoints,\n    deltaDistance,\n  };\n\n  triggerEventCallback(eventDetail.element, TOUCH_END, eventDetail);\n  _checkTouchTap(evt);\n\n  // reset to default state\n  state = JSON.parse(JSON.stringify(defaultState));\n  document.removeEventListener('touchmove', _onTouchDrag);\n  document.removeEventListener('touchend', _onTouchEnd);\n}\n\nfunction _checkTouchTap(evt: TouchEvent): void {\n  const currentTime = new Date().getTime();\n  const startTime = state.startTime.getTime();\n  if (currentTime - startTime > tapState.tapToleranceMs) return;\n\n  // first tap, initialize the state\n  if (tapState.taps === 0) {\n    tapState.element = state.element;\n    tapState.renderingEngineId = state.renderingEngineId;\n    tapState.viewportId = state.viewportId;\n    tapState.startPointsList = state.startPointsList;\n  }\n\n  // subsequent tap is on a different element\n  if (\n    tapState.taps > 0 &&\n    !(\n      tapState.element == state.element &&\n      tapState.renderingEngineId == state.renderingEngineId &&\n      tapState.viewportId == state.viewportId\n    )\n  ) {\n    return;\n  }\n\n  const currentPointsList = getTouchEventPoints(evt, tapState.element);\n  const distanceFromStart = getDeltaDistance(\n    currentPointsList,\n    tapState.startPointsList\n  ).canvas;\n\n  // if the tap is too far from starting tap, we can ignore it.\n  // TODO: in the case the user means to tap in two separate areas within the\n  // tapTolerance (300ms), the second tap will not trigger. This is because it\n  // is ignored below for simplicity to track multiple taps (double, triple etc)\n  // in order to support two separate single taps that occur < 300ms on the\n  // screen. One can create the concept of \"TapChains\". Our current implementation\n  // only supports a single tap chain on the screen. You can think of it as a\n  // region where the user has the option to perform unlimited multitaps as long\n  // as they are < the tapToleranceMs value. So a tap somewhere else on the screen\n  // that is > the tapMaxDistance will start a separate and new \"TapChain\".\n  if (distanceFromStart > tapState.tapMaxDistance) return;\n\n  clearTimeout(tapState.tapTimeout);\n  tapState.taps += 1;\n\n  tapState.tapTimeout = setTimeout(() => {\n    const eventDetail: EventTypes.TouchTapEventDetail = {\n      event: evt,\n      eventName: TOUCH_TAP,\n      element: tapState.element,\n      renderingEngineId: tapState.renderingEngineId,\n      viewportId: tapState.viewportId,\n      camera: {},\n      currentPointsList,\n      currentPoints: getMeanTouchPoints(currentPointsList),\n      taps: tapState.taps,\n    };\n    triggerEventCallback(eventDetail.element, TOUCH_TAP, eventDetail);\n    tapState = JSON.parse(JSON.stringify(defaultTapState));\n  }, tapState.tapToleranceMs);\n}\n\nfunction _checkTouchSwipe(evt: TouchEvent, deltaPoints: IPoints) {\n  const currentTime = new Date().getTime();\n  const startTime = state.startTime.getTime();\n  if (state.swiped || currentTime - startTime > state.swipeToleranceMs) return;\n  const [x, y] = deltaPoints.canvas;\n  const eventDetail: EventTypes.TouchSwipeEventDetail = {\n    event: evt,\n    eventName: TOUCH_SWIPE,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    swipe: null,\n  };\n  if (Math.abs(x) > state.swipeDistanceThreshold) {\n    eventDetail.swipe = x > 0 ? Swipe.RIGHT : Swipe.LEFT;\n    triggerEventCallback(eventDetail.element, TOUCH_SWIPE, eventDetail);\n    state.swiped = true;\n  }\n\n  if (Math.abs(y) > state.swipeDistanceThreshold) {\n    eventDetail.swipe = y > 0 ? Swipe.DOWN : Swipe.UP;\n    triggerEventCallback(eventDetail.element, TOUCH_SWIPE, eventDetail);\n    state.swiped = true;\n  }\n}\n\n/**\n * Recalculates the last world coordinate, as the linear transform from client\n * to world could be different if the camera was updated.\n * @param element - The HTML element\n * @param lastPoints - The last points\n */\nfunction _updateTouchEventsLastPoints(\n  element: HTMLDivElement,\n  lastPoints: ITouchPoints[]\n): ITouchPoints[] {\n  const { viewport } = getEnabledElement(element);\n  // Need to update the world point to be calculated from the current reference frame,\n  // Which might have changed since the last interaction.\n  return lastPoints.map((lp) => {\n    const world = viewport.canvasToWorld(lp.canvas);\n    return {\n      page: lp.page,\n      client: lp.client,\n      canvas: lp.canvas,\n      world,\n      touch: lp.touch,\n    };\n  });\n}\n\nexport default touchStartListener;\n","import preventGhostClick from './preventGhostClick';\nimport touchStartListener from './touchStartListener';\n\n/**\n * Removes touch event listeners for native touch event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to remove event listeners from.\n */\nfunction disable(element: HTMLDivElement): void {\n  preventGhostClick.disable(element);\n  element.removeEventListener('touchstart', touchStartListener);\n}\n\n/**\n * Registers touch event listeners for native touch event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to register event listeners on.\n */\nfunction enable(element: HTMLDivElement): void {\n  // Prevent handlers from being attached multiple times\n  disable(element);\n  preventGhostClick.enable(element);\n  element.addEventListener('touchstart', touchStartListener, {\n    passive: false,\n  });\n}\n\nexport default {\n  enable,\n  disable,\n};\n","// Reasonable defaults\nconst PIXEL_STEP = 10;\nconst LINE_HEIGHT = 40;\nconst PAGE_HEIGHT = 800;\n\n/**\n * Normalizes wheel events and provides properties that are more\n * consistent and helpful across different browsers\n *\n * @param event - the original mouse event\n * @returns a normalized eventDetail\n */\nexport default function normalizeWheel(event) {\n  let spinX = 0,\n    spinY = 0,\n    pixelX = 0,\n    pixelY = 0;\n\n  // Legacy\n  if ('detail' in event) {\n    spinY = event.detail;\n  }\n  if ('wheelDelta' in event) {\n    spinY = -event.wheelDelta / 120;\n  }\n  if ('wheelDeltaY' in event) {\n    spinY = -event.wheelDeltaY / 120;\n  }\n  if ('wheelDeltaX' in event) {\n    spinX = -event.wheelDeltaX / 120;\n  }\n\n  pixelX = spinX * PIXEL_STEP;\n  pixelY = spinY * PIXEL_STEP;\n\n  if ('deltaY' in event) {\n    pixelY = event.deltaY;\n  }\n  if ('deltaX' in event) {\n    pixelX = event.deltaX;\n  }\n\n  if ((pixelX || pixelY) && event.deltaMode) {\n    if (event.deltaMode === 1) {\n      // Delta in LINE units\n      pixelX *= LINE_HEIGHT;\n      pixelY *= LINE_HEIGHT;\n    } else {\n      // Delta in PAGE units\n      pixelX *= PAGE_HEIGHT;\n      pixelY *= PAGE_HEIGHT;\n    }\n  }\n\n  // Fall-back if spin cannot be determined\n  if (pixelX && !spinX) {\n    spinX = pixelX < 1 ? -1 : 1;\n  }\n  if (pixelY && !spinY) {\n    spinY = pixelY < 1 ? -1 : 1;\n  }\n\n  return {\n    spinX,\n    spinY,\n    pixelX,\n    pixelY,\n  };\n}\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport normalizeWheel from './normalizeWheel';\nimport Events from '../../enums/Events';\n// ~~ VIEWPORT LIBRARY\nimport getMouseEventPoints from '../mouse/getMouseEventPoints';\nimport { MouseWheelEventDetail } from '../../types/EventTypes';\n\n/**\n * wheelListener - Captures and normalizes mouse wheel events. Emits as a\n * cornerstoneTools3D mouse wheel event.\n * @param evt - The mouse wheel event.\n */\nfunction wheelListener(evt: WheelEvent) {\n  const element = <HTMLDivElement>evt.currentTarget;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  // Prevent triggering MouseWheel events that are not real scroll events:\n  // E.g. when clicking the MiddleMouseWheelButton, a deltaY of 0 is emitted.\n  // See https://github.com/cornerstonejs/cornerstoneTools/issues/935\n  if (evt.deltaY > -1 && evt.deltaY < 1) {\n    return;\n  }\n\n  evt.preventDefault();\n\n  const { spinX, spinY, pixelX, pixelY } = normalizeWheel(evt);\n  const direction = spinY < 0 ? -1 : 1;\n\n  const eventDetail: MouseWheelEventDetail = {\n    event: evt,\n    eventName: Events.MOUSE_WHEEL,\n    renderingEngineId,\n    viewportId,\n    element,\n    camera: {},\n    detail: evt,\n    wheel: {\n      spinX,\n      spinY,\n      pixelX,\n      pixelY,\n      direction,\n    },\n    points: getMouseEventPoints(evt),\n  };\n\n  triggerEvent(element, Events.MOUSE_WHEEL, eventDetail);\n}\n\nexport default wheelListener;\n","import wheelListener from './wheelListener';\n\n/**\n * Listens for the wheel event, and handles it. Handled event\n * will be \"normalized\" and re-emitted as `Events.MOUSE_WHEEL`\n *\n * @param element - The HTML element\n */\nfunction enable(element: HTMLDivElement) {\n  disable(element);\n  element.addEventListener('wheel', wheelListener, { passive: false });\n}\n\n/**\n * Removes listener and handler for wheel event. `Events.MOUSE_WHEEL`\n * will no longer be emitted.\n *\n * @param element - THe HTML element\n */\nfunction disable(element: HTMLDivElement) {\n  element.removeEventListener('wheel', wheelListener);\n}\n\nexport default {\n  enable,\n  disable,\n};\n","import _cloneDeep from 'lodash.clonedeep';\nimport { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport { KeyDownEventDetail, KeyUpEventDetail } from '../../types/EventTypes';\n\ninterface IKeyDownListenerState {\n  renderingEngineId: string;\n  viewportId: string;\n  key: string | null;\n  keyCode: number | null;\n  element: HTMLDivElement;\n}\n\nconst defaultState: IKeyDownListenerState = {\n  //\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  key: undefined,\n  keyCode: undefined,\n  element: null,\n};\n\nlet state: IKeyDownListenerState = {\n  //\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  key: undefined,\n  keyCode: undefined,\n  element: null,\n};\n\n/**\n * Normalizes the keyboard event and triggers KEY_DOWN event from CornerstoneTools3D events\n * @param evt - DOM Keyboard event\n */\nfunction keyListener(evt: KeyboardEvent): void {\n  state.element = <HTMLDivElement>evt.currentTarget;\n\n  const enabledElement = getEnabledElement(state.element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  state.renderingEngineId = renderingEngineId;\n  state.viewportId = viewportId;\n  state.key = evt.key;\n  state.keyCode = evt.keyCode;\n\n  evt.preventDefault();\n  const eventDetail: KeyDownEventDetail = {\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    element: state.element,\n    key: state.key,\n    keyCode: state.keyCode,\n\n    // detail: evt,\n    // Todo: mouse event points can be used later for placing tools with a key\n    // e.g., putting an arrow/probe/etc. on the mouse position. Another use case\n    // hovering and deleting the tool\n    // points: getMouseEventPoints(evt),\n  };\n\n  triggerEvent(eventDetail.element, Events.KEY_DOWN, eventDetail);\n\n  document.addEventListener('keyup', _onKeyUp);\n\n  // Todo: handle combination of keys\n  state.element.removeEventListener('keydown', keyListener);\n}\n\nfunction _onKeyUp(evt: KeyboardEvent): void {\n  const eventDetail: KeyUpEventDetail = {\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    element: state.element,\n    key: state.key,\n    keyCode: state.keyCode,\n    // detail: evt,\n  };\n\n  // Remove our temporary handlers\n  document.removeEventListener('keyup', _onKeyUp);\n  state.element.addEventListener('keydown', keyListener);\n\n  // Restore `state` to `defaultState`\n  state = _cloneDeep(defaultState);\n  triggerEvent(eventDetail.element, Events.KEY_UP, eventDetail);\n}\n\nexport function getModifierKey(): number | undefined {\n  return state.keyCode;\n}\n\nexport function resetModifierKey(): void {\n  state.keyCode = undefined;\n}\n\nexport default keyListener;\n","import keyDownListener, { getModifierKey } from './keyDownListener';\n\nfunction enable(element: HTMLDivElement): void {\n  disable(element);\n  element.addEventListener('keydown', keyDownListener);\n}\n\nfunction disable(element: HTMLDivElement): void {\n  element.removeEventListener('keydown', keyDownListener);\n}\n\nexport default {\n  enable,\n  disable,\n  getModifierKey,\n};\n","/**\n * Cornerstone Color LUT used for Segmentations\n */\nconst CORNERSTONE_COLOR_LUT = [\n  [0, 0, 0, 0],\n  [221, 84, 84, 255],\n  [77, 228, 121, 255],\n  [166, 70, 235, 255],\n  [189, 180, 116, 255],\n  [109, 182, 196, 255],\n  [204, 101, 157, 255],\n  [123, 211, 94, 255],\n  [93, 87, 218, 255],\n  [225, 128, 80, 255],\n  [73, 232, 172, 255],\n  [181, 119, 186, 255],\n  [176, 193, 112, 255],\n  [105, 153, 200, 255],\n  [208, 97, 120, 255],\n  [90, 215, 101, 255],\n  [135, 83, 222, 255],\n  [229, 178, 76, 255],\n  [122, 183, 181, 255],\n  [190, 115, 171, 255],\n  [149, 197, 108, 255],\n  [100, 118, 205, 255],\n  [212, 108, 93, 255],\n  [86, 219, 141, 255],\n  [183, 79, 226, 255],\n  [233, 233, 72, 255],\n  [118, 167, 187, 255],\n  [194, 111, 146, 255],\n  [116, 201, 104, 255],\n  [115, 96, 209, 255],\n  [216, 147, 89, 255],\n  [82, 223, 188, 255],\n  [230, 75, 224, 255],\n  [163, 184, 121, 255],\n  [114, 143, 191, 255],\n  [198, 107, 114, 255],\n  [99, 206, 122, 255],\n  [153, 92, 213, 255],\n  [220, 192, 85, 255],\n  [78, 215, 227, 255],\n  [234, 71, 173, 255],\n  [141, 188, 117, 255],\n  [110, 113, 195, 255],\n  [202, 128, 103, 255],\n  [95, 210, 157, 255],\n  [195, 88, 217, 255],\n  [206, 224, 81, 255],\n  [74, 166, 231, 255],\n  [185, 120, 139, 255],\n  [113, 192, 113, 255],\n  [133, 106, 199, 255],\n  [207, 162, 98, 255],\n  [91, 214, 198, 255],\n  [221, 84, 198, 255],\n  [159, 228, 77, 255],\n  [70, 111, 235, 255],\n  [189, 119, 116, 255],\n  [109, 196, 138, 255],\n  [165, 101, 204, 255],\n  [211, 201, 94, 255],\n  [87, 191, 218, 255],\n  [225, 80, 153, 255],\n  [106, 232, 73, 255],\n  [124, 119, 186, 255],\n  [193, 142, 112, 255],\n  [105, 200, 168, 255],\n  [203, 97, 208, 255],\n  [184, 215, 90, 255],\n  [83, 147, 222, 255],\n  [229, 76, 101, 255],\n  [122, 183, 130, 255],\n  [146, 115, 190, 255],\n  [197, 171, 108, 255],\n  [100, 205, 205, 255],\n  [212, 93, 177, 255],\n  [141, 219, 86, 255],\n  [79, 97, 226, 255],\n  [233, 99, 72, 255],\n  [118, 187, 150, 255],\n  [173, 111, 194, 255],\n  [197, 201, 104, 255],\n  [96, 171, 209, 255],\n  [216, 89, 137, 255],\n  [94, 223, 82, 255],\n  [107, 75, 230, 255],\n  [184, 153, 121, 255],\n  [114, 191, 175, 255],\n  [198, 107, 191, 255],\n  [166, 206, 99, 255],\n  [92, 132, 213, 255],\n  [220, 85, 91, 255],\n  [78, 227, 115, 255],\n  [159, 71, 234, 255],\n  [188, 176, 117, 255],\n  [110, 185, 195, 255],\n  [202, 103, 161, 255],\n  [129, 210, 95, 255],\n  [88, 88, 217, 255],\n  [224, 123, 81, 255],\n  [74, 231, 166, 255],\n  [177, 120, 185, 255],\n  [179, 192, 113, 255],\n  [106, 156, 199, 255],\n  [207, 98, 125, 255],\n  [91, 214, 96, 255],\n  [130, 84, 221, 255],\n  [228, 171, 77, 255],\n  [70, 235, 221, 255],\n  [189, 116, 174, 255],\n  [153, 196, 109, 255],\n  [101, 123, 204, 255],\n  [211, 104, 94, 255],\n  [87, 218, 136, 255],\n  [177, 80, 225, 255],\n  [232, 225, 73, 255],\n  [119, 169, 186, 255],\n  [193, 112, 149, 255],\n  [121, 200, 105, 255],\n  [111, 97, 208, 255],\n  [215, 142, 90, 255],\n  [83, 222, 181, 255],\n  [229, 76, 229, 255],\n  [165, 183, 122, 255],\n  [115, 146, 190, 255],\n  [197, 108, 119, 255],\n  [100, 205, 118, 255],\n  [148, 93, 212, 255],\n  [219, 186, 86, 255],\n  [79, 220, 226, 255],\n  [233, 72, 179, 255],\n  [144, 187, 118, 255],\n  [111, 118, 194, 255],\n  [201, 124, 104, 255],\n  [96, 209, 153, 255],\n  [189, 89, 216, 255],\n  [211, 223, 82, 255],\n  [75, 172, 230, 255],\n  [184, 121, 142, 255],\n  [117, 191, 114, 255],\n  [130, 107, 198, 255],\n  [206, 157, 99, 255],\n  [92, 213, 193, 255],\n  [220, 85, 203, 255],\n  [165, 227, 78, 255],\n  [71, 118, 234, 255],\n  [188, 117, 117, 255],\n  [110, 195, 135, 255],\n  [161, 103, 202, 255],\n  [210, 195, 95, 255],\n  [88, 195, 217, 255],\n  [224, 81, 158, 255],\n  [113, 231, 74, 255],\n  [123, 120, 185, 255],\n  [192, 139, 113, 255],\n  [106, 199, 164, 255],\n  [198, 98, 207, 255],\n  [188, 214, 91, 255],\n  [84, 153, 221, 255],\n  [228, 77, 108, 255],\n  [70, 235, 84, 255],\n  [143, 116, 189, 255],\n  [196, 167, 109, 255],\n  [101, 204, 199, 255],\n  [211, 94, 182, 255],\n  [147, 218, 87, 255],\n  [80, 104, 225, 255],\n  [232, 93, 73, 255],\n  [119, 186, 147, 255],\n  [170, 112, 193, 255],\n  [200, 200, 105, 255],\n  [97, 175, 208, 255],\n  [215, 90, 142, 255],\n  [100, 222, 83, 255],\n  [101, 76, 229, 255],\n  [183, 150, 122, 255],\n  [115, 190, 171, 255],\n  [197, 108, 194, 255],\n  [170, 205, 100, 255],\n  [93, 138, 212, 255],\n  [219, 86, 97, 255],\n  [79, 226, 110, 255],\n  [153, 72, 233, 255],\n  [187, 173, 118, 255],\n  [111, 187, 194, 255],\n  [201, 104, 165, 255],\n  [134, 209, 96, 255],\n  [89, 95, 216, 255],\n  [223, 117, 82, 255],\n  [75, 230, 159, 255],\n  [174, 121, 184, 255],\n  [182, 191, 114, 255],\n  [107, 160, 198, 255],\n  [206, 99, 130, 255],\n  [92, 213, 92, 255],\n  [124, 85, 220, 255],\n  [227, 165, 78, 255],\n  [71, 234, 214, 255],\n  [188, 117, 176, 255],\n  [156, 195, 110, 255],\n  [103, 128, 202, 255],\n  [210, 100, 95, 255],\n  [88, 217, 131, 255],\n  [170, 81, 224, 255],\n  [231, 218, 74, 255],\n  [120, 172, 185, 255],\n  [192, 113, 153, 255],\n  [125, 199, 106, 255],\n  [107, 98, 207, 255],\n  [214, 137, 91, 255],\n  [84, 221, 175, 255],\n  [222, 77, 228, 255],\n  [194, 235, 70, 255],\n  [116, 149, 189, 255],\n  [196, 109, 123, 255],\n  [101, 204, 114, 255],\n  [143, 94, 211, 255],\n  [218, 180, 87, 255],\n  [80, 225, 225, 255],\n  [232, 73, 186, 255],\n  [147, 186, 119, 255],\n  [112, 122, 193, 255],\n  [200, 121, 105, 255],\n  [97, 208, 148, 255],\n  [184, 90, 215, 255],\n  [216, 222, 83, 255],\n  [76, 178, 229, 255],\n  [183, 122, 145, 255],\n  [121, 190, 115, 255],\n  [126, 108, 197, 255],\n  [205, 153, 100, 255],\n  [93, 212, 187, 255],\n  [219, 86, 208, 255],\n  [171, 226, 79, 255],\n  [72, 126, 233, 255],\n  [187, 118, 121, 255],\n  [111, 194, 132, 255],\n  [157, 104, 201, 255],\n  [209, 190, 96, 255],\n  [89, 200, 216, 255],\n  [223, 82, 164, 255],\n  [120, 230, 75, 255],\n  [121, 121, 184, 255],\n  [191, 136, 114, 255],\n  [107, 198, 160, 255],\n  [192, 99, 206, 255],\n  [193, 213, 92, 255],\n  [85, 158, 220, 255],\n  [227, 78, 115, 255],\n  [71, 234, 78, 255],\n  [141, 117, 188, 255],\n  [195, 163, 110, 255],\n  [103, 202, 194, 255],\n  [210, 95, 186, 255],\n  [153, 217, 88, 255],\n  [81, 111, 224, 255],\n];\n\nexport default CORNERSTONE_COLOR_LUT;\n","import { ContourConfig } from '../../../types/ContourTypes';\n\nconst defaultContourConfig: ContourConfig = {\n  renderOutline: true,\n  outlineWidthActive: 2,\n  outlineWidthInactive: 2,\n  outlineOpacity: 1,\n  outlineOpacityInactive: 0.85,\n  renderFill: true,\n  fillAlpha: 1,\n  fillAlphaInactive: 0,\n};\n\nfunction getDefaultContourConfig(): ContourConfig {\n  return defaultContourConfig;\n}\n\nexport default getDefaultContourConfig;\n","import { LabelmapConfig } from '../../../types/LabelmapTypes';\n\nconst defaultLabelmapConfig: LabelmapConfig = {\n  renderOutline: true,\n  outlineWidthActive: 3,\n  outlineWidthInactive: 2,\n  renderFill: true,\n  renderFillInactive: true,\n  fillAlpha: 0.7,\n  fillAlphaInactive: 0.65,\n  outlineOpacity: 1,\n  outlineOpacityInactive: 0.85,\n};\n\nfunction getDefaultLabelmapConfig(): LabelmapConfig {\n  return defaultLabelmapConfig;\n}\n\n// Checks if the labelmap config is valid, which means\n// if all the required fields are present and have the correct type\nfunction isValidLabelmapConfig(config): boolean {\n  return (\n    config &&\n    typeof config.renderOutline === 'boolean' &&\n    typeof config.outlineWidthActive === 'number' &&\n    typeof config.outlineWidthInactive === 'number' &&\n    typeof config.renderFill === 'boolean' &&\n    typeof config.renderFillInactive === 'boolean' &&\n    typeof config.fillAlpha === 'number' &&\n    typeof config.fillAlphaInactive === 'number' &&\n    typeof config.outlineOpacity === 'number' &&\n    typeof config.outlineOpacityInactive === 'number'\n  );\n}\n\nexport default getDefaultLabelmapConfig;\nexport { isValidLabelmapConfig };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport cloneDeep from 'lodash.clonedeep';\n\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\n\nimport { SegmentationRepresentations } from '../../enums';\nimport getDefaultContourConfig from '../../tools/displayTools/Contour/contourConfig';\nimport getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport type {\n  ColorLUT,\n  RepresentationConfig,\n  Segmentation,\n  SegmentationRepresentationConfig,\n  SegmentationState,\n  SegmentSpecificRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n  ToolGroupSpecificRepresentations,\n} from '../../types/SegmentationStateTypes';\n\n// Initialize the default configuration\n// Note: when we get other representations, we should set their default representations too.\nconst defaultLabelmapConfig = getDefaultLabelmapConfig();\nconst defaultContourConfig = getDefaultContourConfig();\n\nconst newGlobalConfig: SegmentationRepresentationConfig = {\n  renderInactiveSegmentations: true,\n  representations: {\n    [SegmentationRepresentations.Labelmap]: defaultLabelmapConfig,\n    [SegmentationRepresentations.Contour]: defaultContourConfig,\n  },\n};\n\n/* A default initial state for the segmentation manager. */\nconst initialDefaultState: SegmentationState = {\n  colorLUT: [],\n  segmentations: [],\n  globalConfig: newGlobalConfig,\n  toolGroups: {},\n};\n\n/**\n * The SegmentationStateManager Class is responsible for managing the state of the\n * segmentations. It stores the segmentations and toolGroup specific representations\n * of the segmentation. It also stores a global config and a toolGroup specific\n * config. Note that this is a singleton state manager.\n */\nexport default class SegmentationStateManager {\n  private state: SegmentationState;\n  public readonly uid: string;\n\n  constructor(uid?: string) {\n    if (!uid) {\n      uid = csUtils.uuidv4();\n    }\n    this.state = cloneDeep(initialDefaultState);\n    this.uid = uid;\n  }\n\n  /**\n   * It returns a copy of the current state of the segmentation\n   * @returns A deep copy of the state.\n   */\n  getState(): SegmentationState {\n    return this.state;\n  }\n\n  /**\n   * It returns an array of toolGroupIds currently in the segmentation state.\n   * @returns An array of strings.\n   */\n  getToolGroups(): string[] {\n    return Object.keys(this.state.toolGroups);\n  }\n\n  /**\n   * It returns the colorLUT at the specified index.\n   * @param lutIndex - The index of the color LUT to retrieve.\n   * @returns A ColorLUT object.\n   */\n  getColorLUT(lutIndex: number): ColorLUT | undefined {\n    return this.state.colorLUT[lutIndex];\n  }\n\n  /**\n   * Reset the state to the default state\n   */\n  resetState(): void {\n    this.state = cloneDeep(initialDefaultState);\n  }\n\n  /**\n   * Given a segmentation Id, return the segmentation state\n   * @param segmentationId - The id of the segmentation to get the data for.\n   * @returns - The segmentation data\n   */\n  getSegmentation(segmentationId: string): Segmentation | undefined {\n    return this.state.segmentations.find(\n      (segmentation) => segmentation.segmentationId === segmentationId\n    );\n  }\n\n  /**\n   * It adds a segmentation to the segmentations array.\n   * @param segmentation - Segmentation\n   */\n  addSegmentation(segmentation: Segmentation): void {\n    this._initDefaultColorLUTIfNecessary();\n\n    // Check if the segmentation already exists with the segmentationId\n    if (this.getSegmentation(segmentation.segmentationId)) {\n      throw new Error(\n        `Segmentation with id ${segmentation.segmentationId} already exists`\n      );\n    }\n\n    this.state.segmentations.push(segmentation);\n  }\n\n  /**\n   * Get the segmentation representations for a tool group\n   * @param toolGroupId - string\n   * @returns A list of segmentation representations.\n   */\n  getSegmentationRepresentations(\n    toolGroupId: string\n  ): ToolGroupSpecificRepresentations | undefined {\n    const toolGroupSegRepresentationsWithConfig =\n      this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupSegRepresentationsWithConfig) {\n      return;\n    }\n\n    return toolGroupSegRepresentationsWithConfig.segmentationRepresentations;\n  }\n\n  /**\n   * Returns an array of all segmentation representations for all tool groups.\n   * @returns An array of ToolGroupSpecificRepresentations.\n   */\n  getAllSegmentationRepresentations(): Record<\n    string,\n    ToolGroupSpecificRepresentation[]\n  > {\n    const toolGroupSegReps: Record<string, ToolGroupSpecificRepresentation[]> =\n      {};\n    Object.entries(this.state.toolGroups).forEach(\n      ([toolGroupId, toolGroupSegRepresentationsWithConfig]) => {\n        toolGroupSegReps[toolGroupId] =\n          toolGroupSegRepresentationsWithConfig.segmentationRepresentations;\n      }\n    );\n    return toolGroupSegReps;\n  }\n\n  /**\n   * Add a new segmentation representation to the toolGroup's segmentation representations.\n   * @param toolGroupId - The Id of the tool group .\n   * @param segmentationRepresentation - The segmentation representation to add.\n   */\n  addSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentation: ToolGroupSpecificRepresentation\n  ): void {\n    // Initialize the default toolGroup state if not created yet\n    if (!this.state.toolGroups[toolGroupId]) {\n      this.state.toolGroups[toolGroupId] = {\n        segmentationRepresentations: [],\n        config: {} as SegmentationRepresentationConfig,\n      };\n    }\n\n    // local toolGroupSpecificSegmentationState\n    this.state.toolGroups[toolGroupId].segmentationRepresentations.push(\n      segmentationRepresentation\n    );\n\n    this._handleActiveSegmentation(toolGroupId, segmentationRepresentation);\n  }\n\n  /**\n   * Get the global config containing both representation config\n   * and render inactive segmentations config\n   * @returns The global config object.\n   */\n  getGlobalConfig(): SegmentationRepresentationConfig {\n    return this.state.globalConfig;\n  }\n\n  /**\n   * It sets the global segmentation config including both representation config\n   * and render inactive segmentations config\n   * @param config - The global configuration for the segmentations.\n   */\n  setGlobalConfig(config: SegmentationRepresentationConfig): void {\n    this.state.globalConfig = config;\n  }\n\n  /**\n   * Given a toolGroupId and a segmentationRepresentationUID, return the segmentation\n   * representation for that tool group.\n   * @param toolGroupId - The Id of the tool group\n   * @param segmentationRepresentationUID - string\n   * @returns The segmentation representation.\n   */\n  getSegmentationRepresentationByUID(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): ToolGroupSpecificRepresentation | undefined {\n    const toolGroupSegRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    const segmentationData = toolGroupSegRepresentations.find(\n      (representation) =>\n        representation.segmentationRepresentationUID ===\n        segmentationRepresentationUID\n    );\n\n    return segmentationData;\n  }\n\n  /**\n   * It removes the segmentation from the segmentation state.\n   * @param segmentationId - The id of the segmentation to remove.\n   */\n  removeSegmentation(segmentationId: string): void {\n    this.state.segmentations = this.state.segmentations.filter(\n      (segmentation) => segmentation.segmentationId !== segmentationId\n    );\n  }\n\n  /**\n   * Remove a segmentation representation from the toolGroup\n   * @param toolGroupId - The Id of the tool group\n   * @param segmentationRepresentationUID - the uid of the segmentation representation to remove\n   * @param immediate - If true, the viewport will be updated immediately.\n   */\n  removeSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): void {\n    const toolGroupSegmentationRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      !toolGroupSegmentationRepresentations.length\n    ) {\n      throw new Error(\n        `No viewport specific segmentation state found for viewport ${toolGroupId}`\n      );\n    }\n\n    const state =\n      toolGroupSegmentationRepresentations as ToolGroupSpecificRepresentations;\n    const index = state.findIndex(\n      (segData) =>\n        segData.segmentationRepresentationUID === segmentationRepresentationUID\n    );\n\n    if (index === -1) {\n      console.warn(\n        `No viewport specific segmentation state data found for viewport ${toolGroupId} and segmentation data UID ${segmentationRepresentationUID}`\n      );\n    }\n\n    const removedSegmentationRepresentation =\n      toolGroupSegmentationRepresentations[index];\n\n    toolGroupSegmentationRepresentations.splice(index, 1);\n\n    this._handleActiveSegmentation(\n      toolGroupId,\n      removedSegmentationRepresentation\n    );\n  }\n\n  /**\n   * Set the active segmentation data for a tool group\n   * @param toolGroupId - The Id of the tool group that owns the\n   * segmentation data.\n   * @param segmentationRepresentationUID - string\n   */\n  setActiveSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): void {\n    const toolGroupSegmentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    if (!toolGroupSegmentations || !toolGroupSegmentations.length) {\n      throw new Error(\n        `No segmentation data found for toolGroupId: ${toolGroupId}`\n      );\n    }\n\n    const segmentationData = toolGroupSegmentations.find(\n      (segmentationData) =>\n        segmentationData.segmentationRepresentationUID ===\n        segmentationRepresentationUID\n    );\n\n    if (!segmentationData) {\n      throw new Error(\n        `No segmentation data found for segmentation data UID ${segmentationRepresentationUID}`\n      );\n    }\n\n    segmentationData.active = true;\n    this._handleActiveSegmentation(toolGroupId, segmentationData);\n  }\n\n  /**\n   * Given a tool group Id it returns the tool group specific representation config\n   *\n   * @param toolGroupId - The Id of the tool group\n   * @returns A SegmentationConfig object.\n   */\n  getToolGroupSpecificConfig(\n    toolGroupId: string\n  ): SegmentationRepresentationConfig | undefined {\n    const toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupStateWithConfig) {\n      return;\n    }\n\n    return toolGroupStateWithConfig.config;\n  }\n\n  getSegmentationRepresentationSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): RepresentationConfig {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    return segmentationRepresentation.segmentationRepresentationSpecificConfig;\n  }\n\n  setSegmentationRepresentationSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    config: RepresentationConfig\n  ): void {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    segmentationRepresentation.segmentationRepresentationSpecificConfig =\n      config;\n  }\n\n  getSegmentSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    segmentIndex: number\n  ): RepresentationConfig {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    return segmentationRepresentation.segmentSpecificConfig[segmentIndex];\n  }\n\n  setSegmentSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    config: SegmentSpecificRepresentationConfig\n  ): void {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    segmentationRepresentation.segmentSpecificConfig = config;\n  }\n\n  /**\n   * Set the segmentation representations config for a given tool group. It will create a new\n   * tool group specific config if one does not exist.\n   *\n   * @param toolGroupId - The Id of the tool group that the segmentation\n   * belongs to.\n   * @param config - SegmentationConfig\n   */\n  setSegmentationRepresentationConfig(\n    toolGroupId: string,\n    config: SegmentationRepresentationConfig\n  ): void {\n    let toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupStateWithConfig) {\n      this.state.toolGroups[toolGroupId] = {\n        segmentationRepresentations: [],\n        config: {\n          renderInactiveSegmentations: true,\n          representations: {},\n        },\n      };\n\n      toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n    }\n\n    toolGroupStateWithConfig.config = {\n      ...toolGroupStateWithConfig.config,\n      ...config,\n    };\n  }\n\n  /**\n   * It adds a color LUT to the state.\n   * @param colorLUT - ColorLUT\n   * @param lutIndex - The index of the color LUT table to add.\n   */\n  addColorLUT(colorLUT: ColorLUT, lutIndex: number): void {\n    if (this.state.colorLUT[lutIndex]) {\n      console.log('Color LUT table already exists, overwriting');\n    }\n\n    this.state.colorLUT[lutIndex] = colorLUT;\n  }\n\n  /**\n   * Removes a color LUT to the state.\n   * @param colorLUTIndex - The index of the color LUT table to remove.\n   */\n  removeColorLUT(colorLUTIndex: number): void {\n    delete this.state.colorLUT[colorLUTIndex];\n  }\n\n  /**\n   * It handles the active segmentation representation based on the active status of the\n   * segmentation representation that was added or removed.\n   *\n   * @param toolGroupId - The Id of the tool group that the segmentation representation belongs to.\n   * @param recentlyAddedOrRemovedSegmentationRepresentation - ToolGroupSpecificSegmentationData\n   */\n  _handleActiveSegmentation(\n    toolGroupId: string,\n    recentlyAddedOrRemovedSegmentationRepresentation: ToolGroupSpecificRepresentation\n  ): void {\n    const segmentationRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    // 1. If there is no segmentation representations, return early\n    if (segmentationRepresentations.length === 0) {\n      return;\n    }\n\n    // 2. If there is only one segmentation representation, make that one active\n    if (segmentationRepresentations.length === 1) {\n      segmentationRepresentations[0].active = true;\n      return;\n    }\n\n    // 3. If removed Segmentation representation was active, make the first one active\n    const activeSegmentationRepresentations =\n      segmentationRepresentations.filter(\n        (representation) => representation.active\n      );\n\n    if (activeSegmentationRepresentations.length === 0) {\n      segmentationRepresentations[0].active = true;\n      return;\n    }\n\n    // 4. If the added segmentation representation is active, make other segmentation\n    // representations inactive\n    if (recentlyAddedOrRemovedSegmentationRepresentation.active) {\n      segmentationRepresentations.forEach((representation) => {\n        if (\n          representation.segmentationRepresentationUID !==\n          recentlyAddedOrRemovedSegmentationRepresentation.segmentationRepresentationUID\n        ) {\n          representation.active = false;\n        }\n      });\n    }\n\n    // 5. if added/removed segmentation is is inactive, do nothing\n  }\n\n  _initDefaultColorLUTIfNecessary() {\n    // if colorLUTTable is not specified or the default one is not found\n    if (this.state.colorLUT.length === 0 || !this.state.colorLUT[0]) {\n      this.addColorLUT(CORNERSTONE_COLOR_LUT as ColorLUT, 0);\n    }\n  }\n}\n\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { defaultSegmentationStateManager };\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\n\nimport { Events } from '../../enums';\nimport {\n  getSegmentationRepresentations,\n  getSegmentations,\n} from '../../stateManagement/segmentation/segmentationState';\nimport {\n  SegmentationRepresentationModifiedEventDetail,\n  SegmentationDataModifiedEventDetail,\n  SegmentationModifiedEventDetail,\n  SegmentationRepresentationRemovedEventDetail,\n  SegmentationRemovedEventDetail,\n} from '../../types/EventTypes';\n\n/**\n * Trigger an event that a segmentation is removed\n * @param segmentationId - The Id of segmentation\n */\nfunction triggerSegmentationRemoved(segmentationId: string): void {\n  const eventDetail: SegmentationRemovedEventDetail = {\n    segmentationId,\n  };\n\n  triggerEvent(eventTarget, Events.SEGMENTATION_REMOVED, eventDetail);\n}\n\n/**\n * Trigger an event that a segmentation representation was removed\n * @param toolGroupId - The id of the tool group that the segmentation\n * representation was removed from.\n * @param segmentationRepresentationUID - The UID of the segmentation\n * representation that was removed.\n */\nfunction triggerSegmentationRepresentationRemoved(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const eventDetail: SegmentationRepresentationRemovedEventDetail = {\n    toolGroupId,\n    segmentationRepresentationUID,\n  };\n\n  triggerEvent(\n    eventTarget,\n    Events.SEGMENTATION_REPRESENTATION_REMOVED,\n    eventDetail\n  );\n}\n\n/**\n * Trigger an event on the eventTarget that the segmentation representation for\n * toolGroupId has been updated\n * @param toolGroupId - The Id of the toolGroup\n */\nfunction triggerSegmentationRepresentationModified(\n  toolGroupId: string,\n  segmentationRepresentationUID?: string\n): void {\n  const eventDetail: SegmentationRepresentationModifiedEventDetail = {\n    toolGroupId,\n    segmentationRepresentationUID,\n  };\n\n  if (segmentationRepresentationUID) {\n    triggerEvent(\n      eventTarget,\n      Events.SEGMENTATION_REPRESENTATION_MODIFIED,\n      eventDetail\n    );\n    return;\n  }\n\n  // If no segmentationRepresentationUID is provided, then we need to trigger\n  // the event for all segmentation representations in the toolGroup\n\n  // Get all segmentation representations in the toolGroup\n  const segmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId) || [];\n\n  segmentationRepresentations.forEach((segmentationRepresentation) => {\n    const { segmentationRepresentationUID } = segmentationRepresentation;\n    const eventDetail: SegmentationRepresentationModifiedEventDetail = {\n      toolGroupId,\n      segmentationRepresentationUID,\n    };\n\n    triggerEvent(\n      eventTarget,\n      Events.SEGMENTATION_REPRESENTATION_MODIFIED,\n      eventDetail\n    );\n  });\n}\n\n/**\n * Triggers segmentation global state updated event, notifying all toolGroups\n * that the global state has been updated, If a segmentationId is provided\n * the event will only be triggered for that segmentation, otherwise it will\n * be triggered for all segmentations.\n *\n * @param segmentationId - The id of the segmentation that has been updated\n */\nfunction triggerSegmentationModified(segmentationId?: string): void {\n  let segmentationIds;\n\n  if (segmentationId) {\n    segmentationIds = [segmentationId];\n  } else {\n    // get all toolGroups\n    segmentationIds = getSegmentations().map(\n      ({ segmentationId }) => segmentationId\n    );\n  }\n\n  // 1. Trigger an event notifying all listeners about the segmentationId\n  // that has been updated.\n  segmentationIds.forEach((segmentationId) => {\n    const eventDetail: SegmentationModifiedEventDetail = {\n      segmentationId,\n    };\n    triggerEvent(eventTarget, Events.SEGMENTATION_MODIFIED, eventDetail);\n  });\n\n  // Todo: I don't think we need the following lines of code\n  // // 2. Notify all viewports that render the segmentationId in order to update the\n  // // rendering based on the new global state.\n  // toolGroupIds.forEach((toolGroupId) => {\n  //   triggerSegmentationRepresentationModified(toolGroupId)\n  // })\n}\n\n/**\n * Trigger an event that a segmentation data has been modified\n * @param segmentationId - The Id of segmentation\n */\nfunction triggerSegmentationDataModified(\n  segmentationId: string,\n  modifiedSlicesToUse?: number[]\n): void {\n  const eventDetail: SegmentationDataModifiedEventDetail = {\n    segmentationId,\n    modifiedSlicesToUse,\n  };\n\n  triggerEvent(eventTarget, Events.SEGMENTATION_DATA_MODIFIED, eventDetail);\n}\n\nexport {\n  // ToolGroup Specific\n  triggerSegmentationRepresentationModified,\n  triggerSegmentationRepresentationRemoved,\n  // Global\n  triggerSegmentationDataModified,\n  triggerSegmentationModified,\n  triggerSegmentationRemoved,\n};\n","import {\n  SegmentationPublicInput,\n  Segmentation,\n} from '../../../types/SegmentationStateTypes';\n\n/**\n * It takes in a segmentation input and returns a segmentation with default values\n * @param segmentationInput - The input to the segmentation.\n * @returns A Segmentation object.\n * @internal\n */\nfunction normalizeSegmentationInput(\n  segmentationInput: SegmentationPublicInput\n): Segmentation {\n  const { segmentationId, representation } = segmentationInput;\n\n  // Todo: we should be able to let the user pass in non-default values for\n  // cachedStats, label, activeSegmentIndex, etc.\n  return {\n    segmentationId,\n    cachedStats: {},\n    segmentLabels: {},\n    label: null,\n    segmentsLocked: new Set(),\n    type: representation.type,\n    activeSegmentIndex: 1,\n    representationData: {\n      [representation.type]: {\n        ...representation.data,\n      },\n    },\n  };\n}\n\nexport default normalizeSegmentationInput;\n","import type {\n  ColorLUT,\n  RepresentationConfig,\n  Segmentation,\n  SegmentationPublicInput,\n  SegmentationRepresentationConfig,\n  SegmentSpecificRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n  ToolGroupSpecificRepresentations,\n} from '../../types/SegmentationStateTypes';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport {\n  triggerSegmentationModified,\n  triggerSegmentationRemoved,\n  triggerSegmentationRepresentationModified,\n  triggerSegmentationRepresentationRemoved,\n} from './triggerSegmentationEvents';\n\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\n\n/**\n * It returns the defaultSegmentationStateManager.\n */\nfunction getDefaultSegmentationStateManager() {\n  return defaultSegmentationStateManager;\n}\n\n/*************************\n *\n * Segmentation State\n *\n **************************/\n\n/**\n * Get the segmentation for the given segmentationId\n * @param segmentationId - The Id of the segmentation\n * @returns A GlobalSegmentationData object\n */\nfunction getSegmentation(segmentationId: string): Segmentation | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentation(segmentationId);\n}\n\n/**\n * Get the segmentations inside the state\n * @returns Segmentation array\n */\nfunction getSegmentations(): Segmentation[] | [] {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  const state = segmentationStateManager.getState();\n\n  return state.segmentations;\n}\n\n/**\n * It takes a segmentation input and adds it to the segmentation state manager\n * @param segmentationInput - The segmentation to add.\n * @param suppressEvents - If true, the event will not be triggered.\n */\nfunction addSegmentation(\n  segmentationInput: SegmentationPublicInput,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  const segmentation = normalizeSegmentationInput(segmentationInput);\n\n  segmentationStateManager.addSegmentation(segmentation);\n\n  if (!suppressEvents) {\n    triggerSegmentationModified(segmentation.segmentationId);\n  }\n}\n\n/**\n * Get the segmentation state for a tool group. It will return an array of\n * segmentation representation objects.\n * @param toolGroupId - The unique identifier of the tool group.\n * @returns An array of segmentation representation objects.\n */\nfunction getSegmentationRepresentations(\n  toolGroupId: string\n): ToolGroupSpecificRepresentations | [] {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n}\n\n/**\n * Get all segmentation representations in the state\n * @returns An array of segmentation representation objects.\n */\nfunction getAllSegmentationRepresentations(): Record<\n  string,\n  ToolGroupSpecificRepresentation[]\n> {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getAllSegmentationRepresentations();\n}\n\n/**\n * Get the tool group IDs that have a segmentation representation with the given\n * segmentationId\n * @param segmentationId - The id of the segmentation\n * @returns An array of tool group IDs.\n */\nfunction getToolGroupIdsWithSegmentation(segmentationId: string): string[] {\n  if (!segmentationId) {\n    throw new Error('getToolGroupIdsWithSegmentation: segmentationId is empty');\n  }\n\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  const state = segmentationStateManager.getState();\n  const toolGroupIds = Object.keys(state.toolGroups);\n\n  const foundToolGroupIds = [];\n  toolGroupIds.forEach((toolGroupId) => {\n    const toolGroupSegmentationRepresentations =\n      segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n\n    toolGroupSegmentationRepresentations.forEach((representation) => {\n      if (representation.segmentationId === segmentationId) {\n        foundToolGroupIds.push(toolGroupId);\n      }\n    });\n  });\n\n  return foundToolGroupIds;\n}\n\n/**\n * Get the segmentation representations config for a given tool group\n * @param toolGroupId - The Id of the tool group that the segmentation\n * config belongs to.\n * @returns A SegmentationConfig object.\n */\nfunction getToolGroupSpecificConfig(\n  toolGroupId: string\n): SegmentationRepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getToolGroupSpecificConfig(toolGroupId);\n}\n\n/**\n * Set the segmentation representation config for the provided toolGroup. ToolGroup specific\n * configuration overwrites the global configuration for each representation.\n * It fires SEGMENTATION_REPRESENTATION_MODIFIED event if not suppressed.\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n * @param toolGroupId - The Id of the tool group that the segmentation\n * config is being set for.\n * @param config - The new configuration for the tool group.\n * @param suppressEvents - If true, the event will not be triggered.\n */\nfunction setToolGroupSpecificConfig(\n  toolGroupId: string,\n  config: SegmentationRepresentationConfig,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentationRepresentationConfig(\n    toolGroupId,\n    config\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(toolGroupId);\n  }\n}\n\n/**\n * It sets the segmentation representation specific config for all the segments\n * inside the segmentation.\n * @param segmentationRepresentationUID - The unique identifier of the segmentation representation.\n * @param config  - The new configuration for the segmentation representation it is an object with keys of\n * different representation types, and values of the configuration for each representation type.\n */\nfunction setSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: RepresentationConfig,\n  suppressEvents = false\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n  }\n}\n\n/**\n * It returns the segmentation representation specific config which is the same for all the segments\n * @param segmentationRepresentationUID - The unique identifier of the segmentation representation.\n * @returns - The segmentation representation specific config.\n */\nfunction getSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): RepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nfunction getSegmentSpecificRepresentationConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): RepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n}\n\nfunction setSegmentSpecificRepresentationConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: SegmentSpecificRepresentationConfig,\n  suppressEvents = false\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n\n  // Todo: this can be even more performant if we create a new event for\n  // triggering a specific segment config change.\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n  }\n}\n\n/**\n * Add the given segmentation representation data to the given tool group state. It fires\n * SEGMENTATION_REPRESENTATION_MODIFIED event if not suppressed.\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n *\n * @param toolGroupId - The Id of the tool group that the segmentation representation is for.\n * @param segmentationData - The data to add to the segmentation state.\n * @param suppressEvents - boolean\n */\nfunction addSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentation: ToolGroupSpecificRepresentation,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.addSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentation\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentation.segmentationRepresentationUID\n    );\n  }\n}\n\n/**\n * It returns the global segmentation config. Note that the toolGroup-specific\n * configuration has higher priority than the global configuration and overwrites\n * the global configuration for each representation.\n * @returns The global segmentation configuration for all segmentations.\n */\nfunction getGlobalConfig(): SegmentationRepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getGlobalConfig();\n}\n\n/**\n * Set the global segmentation configuration. It fires SEGMENTATION_MODIFIED\n * event if not suppressed.\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param config - The new global segmentation config.\n * @param suppressEvents - If true, the `segmentationGlobalStateModified` event will not be triggered.\n */\nfunction setGlobalConfig(\n  config: SegmentationRepresentationConfig,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setGlobalConfig(config);\n\n  if (!suppressEvents) {\n    triggerSegmentationModified();\n  }\n}\n\n/**\n * Get the segmentation data object for a given tool group and\n * segmentation data UID. It searches all the toolGroup specific segmentation\n * data objects and returns the first one that matches the UID.\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @returns Segmentation Data object.\n */\nfunction getSegmentationRepresentationByUID(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): ToolGroupSpecificRepresentation | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentationByUID(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * It removes the segmentation from the segmentation state manager\n *\n * @triggers SEGMENTATION_REMOVED\n *\n * @param segmentationId - The id of the segmentation\n */\nfunction removeSegmentation(segmentationId: string): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeSegmentation(segmentationId);\n  triggerSegmentationRemoved(segmentationId);\n}\n\n/**\n * Remove a segmentation representation from the segmentation state manager for a toolGroup.\n * It fires SEGMENTATION_REPRESENTATION_MODIFIED event.\n *\n * @triggers SEGMENTATION_REPRESENTATION_REMOVED\n *\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation to remove.\n * remove.\n * @param - immediate - If true, the viewports will be updated immediately.\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  triggerSegmentationRepresentationRemoved(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Add a color LUT to the segmentation state manager\n * @param colorLUT - The color LUT array to add.\n * @param index - The index of the color LUT to add.\n */\nfunction removeColorLUT(colorLUTIndex: number): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\n\n/**\n * Get the color lut for a given index\n * @param index - The index of the color lut to retrieve.\n * @returns A ColorLUT array.\n */\nfunction getColorLUT(index: number): ColorLUT | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getColorLUT(index);\n}\n\n/**\n * Add a color LUT to the segmentation state manager\n * @param colorLUT - The color LUT array to add.\n * @param index - The index of the color LUT to add.\n */\nfunction addColorLUT(colorLUT: ColorLUT, index: number): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.addColorLUT(colorLUT, index);\n  // Todo: trigger event color LUT added\n}\n\nexport {\n  getDefaultSegmentationStateManager,\n  // Segmentation\n  getSegmentation,\n  getSegmentations,\n  addSegmentation,\n  removeSegmentation,\n  // ToolGroup specific Segmentation Representation\n  getSegmentationRepresentations,\n  addSegmentationRepresentation,\n  removeSegmentationRepresentation,\n  // config\n  getToolGroupSpecificConfig,\n  setToolGroupSpecificConfig,\n  getGlobalConfig,\n  setGlobalConfig,\n  getSegmentationRepresentationSpecificConfig,\n  setSegmentationRepresentationSpecificConfig,\n  getSegmentSpecificRepresentationConfig,\n  setSegmentSpecificRepresentationConfig,\n  // helpers s\n  getToolGroupIdsWithSegmentation,\n  getAllSegmentationRepresentations,\n  getSegmentationRepresentationByUID,\n  // color\n  addColorLUT,\n  getColorLUT,\n  removeColorLUT,\n};\n","import SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\n\nimport {\n  RepresentationConfig,\n  SegmentationRepresentationConfig,\n  SegmentSpecificRepresentationConfig,\n} from '../../../types/SegmentationStateTypes';\n\n/**\n * It returns the global segmentation config.\n * @returns The global segmentation config containing the representations\n * config for each representation type and renderInactiveSegmentations flag.\n */\nfunction getGlobalConfig(): SegmentationRepresentationConfig {\n  return SegmentationState.getGlobalConfig();\n}\n\n/**\n * Set the global segmentation config\n * @param segmentationConfig - SegmentationConfig\n */\nfunction setGlobalConfig(\n  segmentationConfig: SegmentationRepresentationConfig\n): void {\n  SegmentationState.setGlobalConfig(segmentationConfig);\n}\n\n/**\n * Given a representation type, return the corresponding global representation config\n * @param representationType - The type of representation to query\n * @returns A representation configuration object.\n */\nfunction getGlobalRepresentationConfig(\n  representationType: SegmentationRepresentations\n): RepresentationConfig['LABELMAP'] {\n  const globalConfig = getGlobalConfig();\n  return globalConfig.representations[representationType];\n}\n\n/**\n * Set the global configuration for a given representation type. It fires\n * a SEGMENTATION_MODIFIED event.\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param representationType - The type of representation to set config for\n * @param config - The configuration for the representation.\n */\nfunction setGlobalRepresentationConfig(\n  representationType: SegmentationRepresentations,\n  config: RepresentationConfig['LABELMAP']\n): void {\n  const globalConfig = getGlobalConfig();\n\n  setGlobalConfig({\n    ...globalConfig,\n    representations: {\n      ...globalConfig.representations,\n      [representationType]: {\n        ...globalConfig.representations[representationType],\n        ...config,\n      },\n    },\n  });\n}\n\n/**\n * Get the toolGroup specific segmentation config\n * @param toolGroupId - The Id of the tool group\n * @returns A SegmentationConfig object.\n */\nfunction getToolGroupSpecificConfig(\n  toolGroupId: string\n): SegmentationRepresentationConfig {\n  return SegmentationState.getToolGroupSpecificConfig(toolGroupId);\n}\n\n/**\n * Sets the tool group specific configuration for the segmentation\n * representation. This will apply to all segmentation representations.\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationConfig - This is the configuration object that you will use to set the default values for\n * the segmentation representation.\n */\nfunction setToolGroupSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationConfig: SegmentationRepresentationConfig\n): void {\n  SegmentationState.setToolGroupSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationConfig\n  );\n}\n\n/**\n * Give the segmentation representation UID, return the corresponding config\n * which is shared by all segments in the segmentation representation. This is\n * an optional level of configuration that can be set by the user, by default\n * it will fallback to the toolGroup specific config, if not set, it will fallback\n * to the global config.\n *\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param config - The configuration for the representation. This is an object\n * only containing the representation type as key and the config as value.\n * @returns - The configuration for the representation.\n */\nfunction getSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): RepresentationConfig {\n  return SegmentationState.getSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Set the segmentation representation specific configuration for the\n * segmentation representation. This will apply to all segments in the\n * segmentation representation and has higher priority than the toolGroup\n * specific config.\n *\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param config - The configuration for the representation. This is an object\n * only containing the representation type as key and the config as value.\n */\nfunction setSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: RepresentationConfig\n): void {\n  SegmentationState.setSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n}\n\n/**\n * Get the segment specific configuration for the segmentation representation.\n *\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationUID  - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment\n * @returns - The configuration for the segment index in the segmentation representation that is shown in the toolGroup's viewport\n */\nfunction getSegmentSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): RepresentationConfig {\n  return SegmentationState.getSegmentSpecificRepresentationConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n}\n\n/**\n * Set the segment specific configuration for the segmentation representation.\n * This configuration, if specified, has higher priority than the segmentation representation specific config,\n * and the toolGroup specific config. The order of priority is: segment specific config > segmentation representation specific config > toolGroup specific config > global config\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment\n * @param config - The configuration for the representation. This is an object\n */\nfunction setSegmentSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: SegmentSpecificRepresentationConfig\n): void {\n  SegmentationState.setSegmentSpecificRepresentationConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n}\n\nexport {\n  // Global\n  getGlobalConfig,\n  setGlobalConfig,\n  getGlobalRepresentationConfig,\n  setGlobalRepresentationConfig,\n  // ToolGroup Specific\n  getToolGroupSpecificConfig,\n  setToolGroupSpecificConfig,\n  // segmentation representation specific config\n  getSegmentationRepresentationSpecificConfig,\n  setSegmentationRepresentationSpecificConfig,\n  // segment specific config\n  getSegmentSpecificConfig,\n  setSegmentSpecificConfig,\n};\n","import {\n  getEnabledElement,\n  addVolumesToViewports,\n  Types,\n  Enums,\n} from '@cornerstonejs/core';\n\n/**\n * It adds a labelmap segmentation representation of the viewport's HTML Element.\n * NOTE: This function should not be called directly.\n *\n * @param element - The element that will be rendered.\n * @param volumeId - The volume id of the labelmap.\n * @param segmentationRepresentationUID - The segmentation representation UID.\n *\n * @internal\n */\nasync function addLabelmapToElement(\n  element: HTMLDivElement,\n  volumeId: string,\n  segmentationRepresentationUID: string\n): Promise<void> {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n  const { id: viewportId } = viewport;\n\n  // Default to true since we are setting a new segmentation, however,\n  // in the event listener, we will make other segmentations visible/invisible\n  // based on the config\n  const visibility = true;\n  const immediateRender = false;\n  const suppressEvents = true;\n\n  // Todo: Right now we use MIP blend mode for the labelmap, since the\n  // composite blend mode has a non linear behavior regarding fill and line\n  // opacity. This should be changed to a custom labelmap blendMode which does\n  // what composite does, but with a linear behavior.\n  const volumeInputs: Types.IVolumeInput[] = [\n    {\n      volumeId,\n      actorUID: segmentationRepresentationUID,\n      visibility,\n      blendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n    },\n  ];\n\n  // Add labelmap volumes to the viewports to be be rendered, but not force the render\n  await addVolumesToViewports(\n    renderingEngine,\n    volumeInputs,\n    [viewportId],\n    immediateRender,\n    suppressEvents\n  );\n}\n\nexport default addLabelmapToElement;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Remove the labelmap segmentation representation from the viewport's HTML Element.\n * NOTE: This function should not be called directly.\n *\n * @param element - The element that the segmentation is being added to.\n * @param segmentationRepresentationUID - The UID of the labelmap representation to remove.\n * @param removeFromCache - boolean\n *\n * @internal\n */\nfunction removeLabelmapFromElement(\n  element: HTMLDivElement,\n  segmentationRepresentationUID: string,\n  removeFromCache = false // Todo\n): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  (viewport as Types.IVolumeViewport).removeVolumeActors([\n    segmentationRepresentationUID,\n  ]);\n}\n\nexport default removeLabelmapFromElement;\n","import vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\n\nimport {\n  cache,\n  getEnabledElementByIds,\n  Types,\n  utilities,\n} from '@cornerstonejs/core';\n\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationConfig from '../../../stateManagement/segmentation/config/segmentationConfig';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../../store/ToolGroupManager';\nimport type {\n  LabelmapConfig,\n  LabelmapRenderingConfig,\n} from '../../../types/LabelmapTypes';\nimport {\n  RepresentationPublicInput,\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../../types/SegmentationStateTypes';\n\nimport addLabelmapToElement from './addLabelmapToElement';\n\nimport removeLabelmapFromElement from './removeLabelmapFromElement';\n\nconst MAX_NUMBER_COLORS = 255;\nconst labelMapConfigCache = new Map();\n\n/**\n * For each viewport, in the toolGroup it adds the segmentation labelmap\n * representation to its viewports.\n * @param toolGroup - the tool group that contains the viewports\n * @param representationInput - The segmentation representation input\n * @param toolGroupSpecificConfig - The configuration object for toolGroup\n *\n * @returns The UID of the new segmentation representation\n */\nasync function addSegmentationRepresentation(\n  toolGroupId: string,\n  representationInput: RepresentationPublicInput,\n  toolGroupSpecificConfig?: SegmentationRepresentationConfig\n): Promise<string> {\n  const { segmentationId } = representationInput;\n  const segmentationRepresentationUID = utilities.uuidv4();\n\n  // Todo: make these configurable during representation input by user\n  const segmentsHidden = new Set() as Set<number>;\n  const colorLUTIndex = 0;\n  const active = true;\n  const cfun = vtkColorTransferFunction.newInstance();\n  const ofun = vtkPiecewiseFunction.newInstance();\n\n  ofun.addPoint(0, 0);\n\n  const toolGroupSpecificRepresentation: ToolGroupSpecificRepresentation = {\n    segmentationId,\n    segmentationRepresentationUID,\n    type: Representations.Labelmap,\n    segmentsHidden,\n    colorLUTIndex,\n    active,\n    segmentationRepresentationSpecificConfig: {},\n    segmentSpecificConfig: {},\n    config: {\n      cfun,\n      ofun,\n    },\n  };\n\n  // Update the toolGroup specific configuration\n  if (toolGroupSpecificConfig) {\n    // Since setting configuration on toolGroup will trigger a segmentationRepresentation\n    // update event, we don't want to trigger the event twice, so we suppress\n    // the first one\n    const currentToolGroupConfig =\n      SegmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n\n    const mergedConfig = utilities.deepMerge(\n      currentToolGroupConfig,\n      toolGroupSpecificConfig\n    );\n\n    SegmentationConfig.setToolGroupSpecificConfig(toolGroupId, {\n      renderInactiveSegmentations:\n        mergedConfig.renderInactiveSegmentations || true,\n      representations: {\n        ...mergedConfig.representations,\n      },\n    });\n  }\n\n  SegmentationState.addSegmentationRepresentation(\n    toolGroupId,\n    toolGroupSpecificRepresentation\n  );\n\n  return segmentationRepresentationUID;\n}\n\n/**\n * For each viewport, and for each segmentation, set the segmentation for the viewport's enabled element\n * Initializes the global and viewport specific state for the segmentation in the\n * SegmentationStateManager.\n * @param toolGroup - the tool group that contains the viewports\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param renderImmediate - If true, there will be a render call after the labelmap is removed\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  renderImmediate = false\n): void {\n  _removeLabelmapFromToolGroupViewports(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n  SegmentationState.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  if (renderImmediate) {\n    const viewportsInfo = getToolGroup(toolGroupId).getViewportsInfo();\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      enabledElement.viewport.render();\n    });\n  }\n}\n\n/**\n * Checks if a segmentation data have the same frameOfReference as the series\n * displayed in a given viewport\n * @param viewport\n * @param referencedVolumeId volume id of the segmentation reference series\n * @returns\n */\nfunction isSameFrameOfReference(viewport, referencedVolumeId) {\n  // if the referencedVolumeId is not defined, we acted as before to not break\n  // applications as referencedVolumeId is inserted in this change\n  // Can modify that in the future commits\n  if (!referencedVolumeId) {\n    return true;\n  }\n  const defaultActor = viewport.getDefaultActor();\n  if (!defaultActor) {\n    return false;\n  }\n  const { uid: defaultActorUID } = defaultActor;\n  const volume = cache.getVolume(defaultActorUID);\n\n  if (volume) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (\n      referencedVolume &&\n      volume.metadata.FrameOfReferenceUID ===\n        referencedVolume.metadata.FrameOfReferenceUID\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * It takes the enabled element, the segmentation Id, and the configuration, and\n * it sets the segmentation for the enabled element as a labelmap\n * @param enabledElement - The cornerstone enabled element\n * @param segmentationId - The id of the segmentation to be rendered.\n * @param configuration - The configuration object for the labelmap.\n */\nasync function render(\n  viewport: Types.IVolumeViewport,\n  representation: ToolGroupSpecificRepresentation,\n  toolGroupConfig: SegmentationRepresentationConfig\n): Promise<void> {\n  const {\n    colorLUTIndex,\n    active,\n    segmentationId,\n    segmentationRepresentationUID,\n    segmentsHidden,\n    config: renderingConfig,\n  } = representation;\n\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n  const labelmapData =\n    segmentation.representationData[Representations.Labelmap];\n  const { volumeId: labelmapUID } = labelmapData;\n\n  const labelmap = cache.getVolume(labelmapUID);\n\n  if (!labelmap) {\n    throw new Error(`No Labelmap found for volumeId: ${labelmapUID}`);\n  }\n\n  if (!isSameFrameOfReference(viewport, labelmapData?.referencedVolumeId)) {\n    return;\n  }\n  let actorEntry = viewport.getActor(segmentationRepresentationUID);\n\n  if (!actorEntry) {\n    const segmentation = SegmentationState.getSegmentation(segmentationId);\n    const { volumeId } =\n      segmentation.representationData[Representations.Labelmap];\n    // only add the labelmap to ToolGroup viewports if it is not already added\n    await _addLabelmapToViewport(\n      viewport,\n      volumeId,\n      segmentationRepresentationUID\n    );\n\n    actorEntry = viewport.getActor(segmentationRepresentationUID);\n  }\n\n  if (!actorEntry) {\n    return;\n  }\n\n  const { cfun, ofun } = renderingConfig as LabelmapRenderingConfig;\n\n  const renderInactiveSegmentations =\n    toolGroupConfig.renderInactiveSegmentations;\n\n  _setLabelmapColorAndOpacity(\n    viewport.id,\n    actorEntry,\n    cfun,\n    ofun,\n    colorLUTIndex,\n    toolGroupConfig.representations[Representations.Labelmap],\n    representation,\n    active,\n    renderInactiveSegmentations,\n    segmentsHidden\n  );\n}\n\nfunction _setLabelmapColorAndOpacity(\n  viewportId: string,\n  actorEntry: Types.ActorEntry,\n  cfun: vtkColorTransferFunction,\n  ofun: vtkPiecewiseFunction,\n  colorLUTIndex: number,\n  toolGroupLabelmapConfig: LabelmapConfig,\n  segmentationRepresentation: ToolGroupSpecificRepresentation,\n  isActiveLabelmap: boolean,\n  renderInactiveSegmentations: boolean,\n  segmentsHidden: Set<number>\n): void {\n  const { segmentSpecificConfig, segmentationRepresentationSpecificConfig } =\n    segmentationRepresentation;\n\n  const segmentationRepresentationLabelmapConfig =\n    segmentationRepresentationSpecificConfig[Representations.Labelmap];\n\n  // Note: MAX_NUMBER_COLORS = 256 is needed because the current method to generate\n  // the default color table uses RGB.\n  const colorLUT = SegmentationState.getColorLUT(colorLUTIndex);\n  const numColors = Math.min(256, colorLUT.length);\n  const volumeActor = actorEntry.actor as Types.VolumeActor;\n  const { uid: actorUID } = actorEntry;\n\n  // Note: right now outlineWidth and renderOutline are not configurable\n  // at the segment level, so we don't need to check for segment specific\n  // configuration in the loop, Todo: make them configurable at the segment level\n  const { outlineWidth, renderOutline, outlineOpacity } = _getLabelmapConfig(\n    toolGroupLabelmapConfig,\n    segmentationRepresentationLabelmapConfig,\n    isActiveLabelmap\n  );\n\n  for (let i = 0; i < numColors; i++) {\n    const segmentIndex = i;\n    const segmentColor = colorLUT[segmentIndex];\n\n    const segmentSpecificLabelmapConfig =\n      segmentSpecificConfig[segmentIndex]?.[Representations.Labelmap];\n\n    const { fillAlpha, outlineWidth, renderFill, renderOutline } =\n      _getLabelmapConfig(\n        toolGroupLabelmapConfig,\n        segmentationRepresentationLabelmapConfig,\n        isActiveLabelmap,\n        segmentSpecificLabelmapConfig\n      );\n\n    const { forceOpacityUpdate, forceColorUpdate } =\n      _needsTransferFunctionUpdate(viewportId, actorUID, segmentIndex, {\n        fillAlpha,\n        renderFill,\n        renderOutline,\n        segmentColor,\n        outlineWidth,\n        segmentsHidden,\n      });\n\n    if (forceColorUpdate) {\n      cfun.addRGBPoint(\n        segmentIndex,\n        segmentColor[0] / MAX_NUMBER_COLORS,\n        segmentColor[1] / MAX_NUMBER_COLORS,\n        segmentColor[2] / MAX_NUMBER_COLORS\n      );\n    }\n\n    if (forceOpacityUpdate) {\n      if (renderFill) {\n        const segmentOpacity = segmentsHidden.has(segmentIndex)\n          ? 0\n          : (segmentColor[3] / 255) * fillAlpha;\n\n        ofun.removePoint(segmentIndex);\n        ofun.addPointLong(segmentIndex, segmentOpacity, 0.5, 1.0);\n      } else {\n        ofun.addPointLong(segmentIndex, 0.01, 0.5, 1.0);\n      }\n    }\n  }\n\n  volumeActor.getProperty().setRGBTransferFunction(0, cfun);\n\n  ofun.setClamping(false);\n  volumeActor.getProperty().setScalarOpacity(0, ofun);\n\n  volumeActor.getProperty().setInterpolationTypeToNearest();\n\n  volumeActor.getProperty().setUseLabelOutline(renderOutline);\n\n  // @ts-ignore: setLabelOutlineWidth is not in the vtk.d.ts apparently\n  volumeActor.getProperty().setLabelOutlineOpacity(outlineOpacity);\n  volumeActor.getProperty().setLabelOutlineThickness(outlineWidth);\n\n  // Set visibility based on whether actor visibility is specifically asked\n  // to be turned on/off (on by default) AND whether is is in active but\n  // we are rendering inactive labelmap\n  const visible = isActiveLabelmap || renderInactiveSegmentations;\n  volumeActor.setVisibility(visible);\n}\n\nfunction _getLabelmapConfig(\n  toolGroupLabelmapConfig: LabelmapConfig,\n  segmentationRepresentationLabelmapConfig: LabelmapConfig,\n  isActiveLabelmap: boolean,\n  segmentsLabelmapConfig?: LabelmapConfig\n) {\n  const segmentLabelmapConfig = segmentsLabelmapConfig || {};\n\n  const configToUse = {\n    ...toolGroupLabelmapConfig,\n    ...segmentationRepresentationLabelmapConfig,\n    ...segmentLabelmapConfig,\n  };\n\n  const fillAlpha = isActiveLabelmap\n    ? configToUse.fillAlpha\n    : configToUse.fillAlphaInactive;\n  const outlineWidth = isActiveLabelmap\n    ? configToUse.outlineWidthActive\n    : configToUse.outlineWidthInactive;\n\n  const renderFill = isActiveLabelmap\n    ? configToUse.renderFill\n    : configToUse.renderFillInactive;\n\n  const renderOutline = configToUse.renderOutline;\n\n  const outlineOpacity = isActiveLabelmap\n    ? configToUse.outlineOpacity\n    : configToUse.outlineOpacityInactive;\n\n  return {\n    fillAlpha,\n    outlineWidth,\n    renderFill,\n    renderOutline,\n    outlineOpacity,\n  };\n}\n\nfunction _needsTransferFunctionUpdate(\n  viewportId: string,\n  actorUID: string,\n  segmentIndex: number,\n  {\n    fillAlpha,\n    renderFill,\n    renderOutline,\n    segmentColor,\n    outlineWidth,\n    segmentsHidden,\n  }: {\n    fillAlpha: number;\n    renderFill: boolean;\n    renderOutline: boolean;\n    outlineWidth: number;\n    segmentColor: number[];\n    segmentsHidden: Set<number>;\n  }\n) {\n  const cacheUID = `${viewportId}-${actorUID}-${segmentIndex}`;\n  const oldConfig = labelMapConfigCache.get(cacheUID);\n\n  if (!oldConfig) {\n    labelMapConfigCache.set(cacheUID, {\n      fillAlpha,\n      renderFill,\n      renderOutline,\n      outlineWidth,\n      segmentColor,\n      segmentsHidden: new Set(segmentsHidden), // Create a copy\n    });\n\n    return {\n      forceOpacityUpdate: true,\n      forceColorUpdate: true,\n    };\n  }\n\n  const {\n    fillAlpha: oldFillAlpha,\n    renderFill: oldRenderFill,\n    renderOutline: oldRenderOutline,\n    outlineWidth: oldOutlineWidth,\n    segmentColor: oldSegmentColor,\n    segmentsHidden: oldSegmentsHidden,\n  } = oldConfig;\n\n  const forceColorUpdate =\n    oldSegmentColor[0] !== segmentColor[0] ||\n    oldSegmentColor[1] !== segmentColor[1] ||\n    oldSegmentColor[2] !== segmentColor[2];\n\n  const forceOpacityUpdate =\n    oldSegmentColor[3] !== segmentColor[3] ||\n    oldFillAlpha !== fillAlpha ||\n    oldRenderFill !== renderFill ||\n    oldRenderOutline !== renderOutline ||\n    oldOutlineWidth !== outlineWidth ||\n    oldSegmentsHidden.has(segmentIndex) !== segmentsHidden.has(segmentIndex);\n\n  // update the cache\n  labelMapConfigCache.set(cacheUID, {\n    fillAlpha,\n    renderFill,\n    renderOutline,\n    outlineWidth,\n    segmentColor: segmentColor.slice(), // Create a copy\n    segmentsHidden: new Set(segmentsHidden), // Create a copy\n  });\n\n  return {\n    forceOpacityUpdate,\n    forceColorUpdate,\n  };\n}\n\nfunction _removeLabelmapFromToolGroupViewports(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    throw new Error(`ToolGroup with ToolGroupId ${toolGroupId} does not exist`);\n  }\n\n  const { viewportsInfo } = toolGroup;\n\n  for (const viewportInfo of viewportsInfo) {\n    const { viewportId, renderingEngineId } = viewportInfo;\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    removeLabelmapFromElement(\n      enabledElement.viewport.element,\n      segmentationRepresentationUID\n    );\n  }\n}\n\nasync function _addLabelmapToViewport(\n  viewport: Types.IVolumeViewport,\n  volumeId: string,\n  segmentationRepresentationUID: string\n): Promise<void> {\n  await addLabelmapToElement(\n    viewport.element,\n    volumeId,\n    segmentationRepresentationUID\n  );\n}\n\nexport default {\n  render,\n  addSegmentationRepresentation,\n  removeSegmentationRepresentation,\n};\n","import { Enums, Types } from '@cornerstonejs/core';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray';\nimport vtkPoints from '@kitware/vtk.js/Common/Core/Points';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport { ToolGroupSpecificContourRepresentation } from '../../../types';\n\n/**\n * If the segment specific config exists for the given segment id, it returns\n * the segment specific config. Otherwise, it looks for the segment specific\n * config for the given index. If it doesn't exist, it returns null.\n *\n * @param contourRepresentation -  The representation object that is passed\n * to the tool.\n * @param segmentId -  The id of the segment.\n * @param index -  The index of the segment in the list of segments.\n * @returns the segment specific config for the given segment id.\n *\n */\nexport function getSegmentSpecificConfig(\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  segmentId: string,\n  index: number\n) {\n  let segmentSpecificConfig =\n    contourRepresentation.segmentSpecificConfig?.[segmentId];\n\n  if (!segmentSpecificConfig) {\n    // try the index\n    segmentSpecificConfig =\n      contourRepresentation.segmentSpecificConfig?.[index];\n  }\n\n  if (!segmentSpecificConfig) {\n    return null;\n  }\n\n  return segmentSpecificConfig.CONTOUR;\n}\n\n/**\n * takes a geometry object as an argument\n * and throws an error if the geometry object is not a contour\n * @param geometry -  The geometry object to be rendered.\n */\nexport function validateGeometry(geometry: Types.IGeometry): void {\n  if (!geometry) {\n    throw new Error(`No contours found for geometryId ${geometry.id}`);\n  }\n\n  const geometryId = geometry.id;\n\n  if (geometry.type !== Enums.GeometryType.CONTOUR) {\n    throw new Error(\n      `Geometry type ${geometry.type} not supported for rendering.`\n    );\n  }\n\n  if (!geometry.data) {\n    console.warn(\n      `No contours found for geometryId ${geometryId}. Skipping render.`\n    );\n    return;\n  }\n}\n\n/**\n * It takes a contourSet and returns a vtkPolyData for that contourSet. A contour set\n * is a collection of contours. Each contour is a collection of points. Each point\n * is x,y,z in the world coordinate system.\n *\n * @param contourSet -  the contour set that you want to convert to polyData\n * @returns A vtkPolyData object\n */\nexport function getPolyData(contourSet: Types.IContourSet) {\n  const pointArray = [];\n\n  const points = vtkPoints.newInstance();\n  const lines = vtkCellArray.newInstance();\n\n  // this variable will indicate the index of the first point in the current line\n  // so we can correctly generate the point index list to add in the cellArray\n  let pointIndex = 0;\n  contourSet.getContours().forEach((contour: Types.IContour) => {\n    const pointList = contour.getPoints();\n    const flatPoints = contour.getFlatPointsArray();\n    const type = contour.getType();\n\n    // creating a point index list that defines a line\n    const pointIndexes = pointList.map(\n      (_, pointListIndex) => pointListIndex + pointIndex\n    );\n\n    // if close planar, add the first point index to the list\n    if (type === Enums.ContourType.CLOSED_PLANAR) {\n      pointIndexes.push(pointIndexes[0]);\n    }\n\n    const linePoints = Float32Array.from(flatPoints);\n    // add the current points into the point list\n    pointArray.push(...linePoints);\n    // add the point indexes into the cell array\n    lines.insertNextCell([...pointIndexes]);\n    // update the first point index\n    pointIndex = pointIndex + pointList.length;\n  });\n\n  // converts the pointArray into vtkPoints\n  points.setData(pointArray, 3);\n\n  // creates the polyData\n  const polygon = vtkPolyData.newInstance();\n  polygon.setPoints(points);\n  polygon.setLines(lines);\n\n  return polygon;\n}\n","type ConfigCache = {\n  segmentsHidden: Set<number>;\n  outlineWidthActive: number;\n  visibility: boolean;\n};\n\n/**\n * Config cache is used to store the config for a given segmentation\n * representation. This is used to avoid having to recompute the config\n * every time the user changes the active segment, and also for performance\n * reasons.\n */\nconst configCachePerSegmentationRepresentationUID = new Map();\n\nexport function getConfigCache(\n  segmentationRepresentationUID: string\n): ConfigCache {\n  return configCachePerSegmentationRepresentationUID.get(\n    segmentationRepresentationUID\n  );\n}\n\nexport function setConfigCache(\n  segmentationRepresentationUID: string,\n  config: ConfigCache\n) {\n  configCachePerSegmentationRepresentationUID.set(\n    segmentationRepresentationUID,\n    config\n  );\n}\n\nexport function deleteConfigCache(segmentationRepresentationUID: string) {\n  configCachePerSegmentationRepresentationUID.delete(\n    segmentationRepresentationUID\n  );\n}\n","import { cache, Types } from '@cornerstonejs/core';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkAppendPolyData from '@kitware/vtk.js/Filters/General/AppendPolyData';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\n\nimport {\n  getPolyData,\n  getSegmentSpecificConfig,\n  validateGeometry,\n} from './utils';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificContourRepresentation,\n} from '../../../types';\nimport { getConfigCache, setConfigCache } from './contourConfigCache';\n\nexport function addContourSetsToElement(\n  viewport: Types.IVolumeViewport,\n  geometryIds: string[],\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  contourRepresentationConfig: SegmentationRepresentationConfig,\n  contourActorUID: string\n) {\n  const { segmentationRepresentationUID, segmentsHidden } =\n    contourRepresentation;\n  const appendPolyData = vtkAppendPolyData.newInstance();\n\n  const scalarToColorMap = new Map();\n  const segmentSpecificMap = new Map();\n\n  geometryIds.forEach((geometryId) => {\n    const geometry = cache.getGeometry(geometryId);\n\n    if (!geometry) {\n      console.warn(\n        `No geometry found for geometryId ${geometryId}. Skipping render.`\n      );\n      return;\n    }\n\n    const segmentIndex = (geometry.data as Types.IContourSet).getSegmentIndex();\n\n    validateGeometry(geometry);\n\n    const segmentSpecificConfig = getSegmentSpecificConfig(\n      contourRepresentation,\n      geometryId,\n      segmentIndex\n    );\n\n    const contourSet = geometry.data;\n    const polyData = getPolyData(contourSet);\n    const color = contourSet.getColor();\n\n    const size = polyData.getPoints().getNumberOfPoints();\n\n    const scalars = vtkDataArray.newInstance({\n      size: size * 4,\n      numberOfComponents: 4,\n      dataType: 'Uint8Array',\n    });\n    for (let i = 0; i < size; ++i) {\n      scalars.setTuple(i, [...color, 255]);\n    }\n    polyData.getPointData().setScalars(scalars);\n\n    if (segmentSpecificConfig) {\n      segmentSpecificMap.set(segmentIndex, segmentSpecificConfig);\n    }\n\n    scalarToColorMap.set(segmentIndex, [\n      ...color,\n      segmentsHidden.has(segmentIndex) ? 0 : 255,\n    ]);\n\n    segmentIndex === 0\n      ? appendPolyData.setInputData(polyData)\n      : appendPolyData.addInputData(polyData);\n  });\n\n  const polyDataOutput = appendPolyData.getOutputData();\n\n  const outlineWidthActive =\n    contourRepresentationConfig.representations.CONTOUR.outlineWidthActive;\n\n  const mapper = vtkMapper.newInstance();\n  mapper.setInputData(polyDataOutput);\n\n  const actor = vtkActor.newInstance();\n  actor.setMapper(mapper);\n  actor.getProperty().setLineWidth(outlineWidthActive);\n\n  // set the config cache for later update of the contour\n  setConfigCache(\n    segmentationRepresentationUID,\n    Object.assign({}, getConfigCache(segmentationRepresentationUID), {\n      segmentsHidden: new Set(segmentsHidden),\n      segmentSpecificMap,\n      outlineWidthActive,\n    })\n  );\n\n  actor.setForceOpaque(true);\n\n  viewport.addActor({\n    uid: contourActorUID,\n    actor: actor as unknown as Types.Actor,\n  });\n  viewport.resetCamera();\n  viewport.render();\n}\n","import { cache, Types } from '@cornerstonejs/core';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificContourRepresentation,\n} from '../../../types';\nimport { getConfigCache, setConfigCache } from './contourConfigCache';\nimport { getSegmentSpecificConfig } from './utils';\n\nexport function updateContourSets(\n  viewport: Types.IVolumeViewport,\n  geometryIds: string[],\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  contourRepresentationConfig: SegmentationRepresentationConfig,\n  contourActorUID: string\n) {\n  const { segmentationRepresentationUID, segmentsHidden } =\n    contourRepresentation;\n  const newContourConfig = contourRepresentationConfig.representations.CONTOUR;\n  const cachedConfig = getConfigCache(segmentationRepresentationUID);\n\n  const contourSetsActor = viewport.getActor(contourActorUID);\n\n  if (!contourSetsActor) {\n    console.warn(\n      `No contour actor found for actorUID ${contourActorUID}. Skipping render.`\n    );\n    return;\n  }\n\n  const { actor } = contourSetsActor;\n\n  const newOutlineWithActive = newContourConfig.outlineWidthActive;\n\n  if (cachedConfig?.outlineWidthActive !== newOutlineWithActive) {\n    (actor as unknown as vtkActor)\n      .getProperty()\n      .setLineWidth(newOutlineWithActive);\n\n    setConfigCache(\n      segmentationRepresentationUID,\n      Object.assign({}, cachedConfig, {\n        outlineWidthActive: newOutlineWithActive,\n      })\n    );\n  }\n\n  const mapper = (actor as unknown as vtkActor).getMapper();\n  const lut = mapper.getLookupTable();\n\n  const segmentsToSetToInvisible = [];\n  const segmentsToSetToVisible = [];\n\n  for (const segmentIndex of segmentsHidden) {\n    if (!cachedConfig.segmentsHidden.has(segmentIndex)) {\n      segmentsToSetToInvisible.push(segmentIndex);\n    }\n  }\n\n  // the other way around\n  for (const segmentIndex of cachedConfig.segmentsHidden) {\n    if (!segmentsHidden.has(segmentIndex)) {\n      segmentsToSetToVisible.push(segmentIndex);\n    }\n  }\n\n  const mergedInvisibleSegments = Array.from(cachedConfig.segmentsHidden)\n    .filter((segmentIndex) => !segmentsToSetToVisible.includes(segmentIndex))\n    .concat(segmentsToSetToInvisible);\n\n  const { contourSets, segmentSpecificConfigs } = geometryIds.reduce(\n    (acc, geometryId) => {\n      const geometry = cache.getGeometry(geometryId);\n      const { data: contourSet } = geometry;\n      const segmentIndex = (contourSet as Types.IContourSet).getSegmentIndex();\n      const segmentSpecificConfig = getSegmentSpecificConfig(\n        contourRepresentation,\n        geometryId,\n        segmentIndex\n      );\n\n      acc.contourSets.push(contourSet);\n      acc.segmentSpecificConfigs[segmentIndex] = segmentSpecificConfig ?? {};\n\n      return acc;\n    },\n    { contourSets: [], segmentSpecificConfigs: {} }\n  );\n\n  const affectedSegments = [\n    ...mergedInvisibleSegments,\n    ...segmentsToSetToVisible,\n  ];\n\n  const hasCustomSegmentSpecificConfig = Object.values(\n    segmentSpecificConfigs\n  ).some((config) => Object.keys(config).length > 0);\n\n  let polyDataModified = false;\n\n  if (affectedSegments.length || hasCustomSegmentSpecificConfig) {\n    const appendPolyData = mapper.getInputData();\n    const appendScalars = appendPolyData.getPointData().getScalars();\n    const appendScalarsData = appendScalars.getData();\n    // below we will only manipulate the polyData of the contourSets that are affected\n    // by picking the correct offset in the scalarData array\n    let offset = 0;\n    contourSets.forEach((contourSet) => {\n      const segmentIndex = (contourSet as Types.IContourSet).getSegmentIndex();\n      const size = contourSet.getTotalNumberOfPoints();\n\n      if (\n        affectedSegments.includes(segmentIndex) ||\n        segmentSpecificConfigs[segmentIndex]?.fillAlpha // Todo: add others\n      ) {\n        const color = contourSet.getColor();\n        let visibility = mergedInvisibleSegments.includes(segmentIndex)\n          ? 0\n          : 255;\n\n        const segmentConfig = segmentSpecificConfigs[segmentIndex];\n        if (segmentConfig.fillAlpha !== undefined) {\n          visibility = segmentConfig.fillAlpha * 255;\n        }\n\n        for (let i = 0; i < size; ++i) {\n          appendScalarsData[offset + i * 4] = color[0];\n          appendScalarsData[offset + i * 4 + 1] = color[1];\n          appendScalarsData[offset + i * 4 + 2] = color[2];\n          appendScalarsData[offset + i * 4 + 3] = visibility;\n        }\n\n        polyDataModified = true;\n      }\n\n      offset = offset + size * 4;\n    });\n\n    if (polyDataModified) {\n      appendPolyData.modified();\n    }\n\n    setConfigCache(\n      segmentationRepresentationUID,\n      Object.assign({}, cachedConfig, {\n        segmentsHidden: new Set(segmentsHidden),\n      })\n    );\n\n    mapper.setLookupTable(lut);\n  }\n\n  viewport.render();\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Remove the contour representation from the viewport's HTML Element.\n * NOTE: This function should not be called directly.\n *\n * @param element - The element that the segmentation is being added to.\n * @param segmentationRepresentationUID - The UID of the contour representation to remove.\n * @param removeFromCache - boolean\n *\n * @internal\n */\nfunction removeContourFromElement(\n  element: HTMLDivElement,\n  segmentationRepresentationUID: string,\n  removeFromCache = false // Todo\n): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const actorEntries = (viewport as Types.IVolumeViewport).getActors();\n\n  // remove actors whose id has the same prefix as the segmentationRepresentationUID\n  const actorUIDsToRemove = actorEntries\n    .map(({ uid }) =>\n      uid.includes(segmentationRepresentationUID) ? uid : undefined\n    )\n    .filter(Boolean);\n\n  // @ts-ignore\n  viewport.removeActors(actorUIDsToRemove);\n}\n\nexport default removeContourFromElement;\n","import {\n  getEnabledElementByIds,\n  Types,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\n\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationConfig from '../../../stateManagement/segmentation/config/segmentationConfig';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../../store/ToolGroupManager';\nimport {\n  RepresentationPublicInput,\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../../types/SegmentationStateTypes';\nimport { addOrUpdateContourSets } from './addOrUpdateContourSets';\nimport removeContourFromElement from './removeContourFromElement';\nimport { deleteConfigCache } from './contourConfigCache';\n\n/**\n * It adds a new segmentation representation to the segmentation state\n * @param toolGroupId - The id of the toolGroup that the segmentation\n * belongs to\n * @param representationInput - RepresentationPublicInput\n * @param toolGroupSpecificConfig - The configuration that is specific to the toolGroup.\n * @returns The segmentationRepresentationUID\n */\nasync function addSegmentationRepresentation(\n  toolGroupId: string,\n  representationInput: RepresentationPublicInput,\n  toolGroupSpecificConfig?: SegmentationRepresentationConfig\n): Promise<string> {\n  const { segmentationId } = representationInput;\n  const segmentationRepresentationUID = csUtils.uuidv4();\n  // Todo: make these configurable during representation input by user\n  const segmentsHidden = new Set() as Set<number>;\n  const visibility = true;\n  const colorLUTIndex = 0;\n  const active = true;\n  const toolGroupSpecificRepresentation: ToolGroupSpecificRepresentation = {\n    segmentationId,\n    segmentationRepresentationUID,\n    type: Representations.Contour,\n    segmentsHidden,\n    colorLUTIndex,\n    active,\n    segmentationRepresentationSpecificConfig: {},\n    segmentSpecificConfig: {},\n    config: {},\n  };\n  // Update the toolGroup specific configuration\n  if (toolGroupSpecificConfig) {\n    // Since setting configuration on toolGroup will trigger a segmentationRepresentation\n    // update event, we don't want to trigger the event twice, so we suppress\n    // the first one\n    const currentToolGroupConfig =\n      SegmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n    const mergedConfig = csUtils.deepMerge(\n      currentToolGroupConfig,\n      toolGroupSpecificConfig\n    );\n    SegmentationConfig.setToolGroupSpecificConfig(toolGroupId, {\n      renderInactiveSegmentations:\n        mergedConfig.renderInactiveSegmentations || true,\n      representations: {\n        ...mergedConfig.representations,\n      },\n    });\n  }\n  SegmentationState.addSegmentationRepresentation(\n    toolGroupId,\n    toolGroupSpecificRepresentation\n  );\n  return segmentationRepresentationUID;\n}\n\n/**\n * It removes a segmentation representation from the tool group's viewports and\n * from the segmentation state\n * @param toolGroupId - The toolGroupId of the toolGroup that the\n * segmentationRepresentation belongs to.\n * @param segmentationRepresentationUID - This is the unique identifier\n * for the segmentation representation.\n * @param renderImmediate - If true, the viewport will be rendered\n * immediately after the segmentation representation is removed.\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  renderImmediate = false\n): void {\n  _removeContourFromToolGroupViewports(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n  SegmentationState.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  deleteConfigCache(segmentationRepresentationUID);\n\n  if (renderImmediate) {\n    const viewportsInfo = getToolGroup(toolGroupId).getViewportsInfo();\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      enabledElement.viewport.render();\n    });\n  }\n}\n\n/**\n * It renders the contour sets for the given segmentation\n * @param viewport - The viewport object\n * @param representation - ToolGroupSpecificRepresentation\n * @param toolGroupConfig - This is the configuration object for the tool group\n */\nasync function render(\n  viewport: Types.IVolumeViewport,\n  representationConfig: ToolGroupSpecificRepresentation,\n  toolGroupConfig: SegmentationRepresentationConfig\n): Promise<void> {\n  const { segmentationId } = representationConfig;\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n  const contourData = segmentation.representationData[Representations.Contour];\n  const { geometryIds } = contourData;\n\n  if (!geometryIds?.length) {\n    console.warn(\n      `No contours found for segmentationId ${segmentationId}. Skipping render.`\n    );\n  }\n\n  // add the contour sets to the viewport\n  addOrUpdateContourSets(\n    viewport,\n    geometryIds,\n    representationConfig,\n    toolGroupConfig\n  );\n}\n\nfunction _removeContourFromToolGroupViewports(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    throw new Error(`ToolGroup with ToolGroupId ${toolGroupId} does not exist`);\n  }\n\n  const { viewportsInfo } = toolGroup;\n\n  for (const viewportInfo of viewportsInfo) {\n    const { viewportId, renderingEngineId } = viewportInfo;\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    removeContourFromElement(\n      enabledElement.viewport.element,\n      segmentationRepresentationUID\n    );\n  }\n}\n\nexport default {\n  render,\n  addSegmentationRepresentation,\n  removeSegmentationRepresentation,\n};\n","import { Types } from '@cornerstonejs/core';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificContourRepresentation,\n} from '../../../types';\nimport { addContourSetsToElement } from './addContourSetsToElement';\nimport { updateContourSets } from './updateContourSets';\n\nexport function addOrUpdateContourSets(\n  viewport: Types.IVolumeViewport,\n  geometryIds: string[],\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  contourRepresentationConfig: SegmentationRepresentationConfig\n) {\n  const { segmentationRepresentationUID } = contourRepresentation;\n  const actorUID = `CONTOUR_${segmentationRepresentationUID}`;\n  const actor = viewport.getActor(actorUID);\n\n  const addOrUpdateFn = actor ? updateContourSets : addContourSetsToElement;\n  addOrUpdateFn(\n    viewport,\n    geometryIds,\n    contourRepresentation,\n    contourRepresentationConfig,\n    actorUID\n  );\n}\n","import SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport { labelmapDisplay } from '../../tools/displayTools/Labelmap';\nimport { contourDisplay } from '../../tools/displayTools/Contour';\n\nimport {\n  getSegmentationRepresentations,\n  getSegmentationRepresentationByUID,\n} from './segmentationState';\n\n/**\n * Remove the segmentation representation (representation) from the viewports of the toolGroup.\n * @param toolGroupId - The Id of the toolGroup to remove the segmentation from.\n * @param segmentationRepresentationUIDs - The UIDs of the segmentation representations to remove.\n * @param immediate - if True the viewport will be re-rendered immediately.\n */\nfunction removeSegmentationsFromToolGroup(\n  toolGroupId: string,\n  segmentationRepresentationUIDs?: string[] | undefined,\n  immediate?: boolean\n): void {\n  const toolGroupSegRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  if (\n    !toolGroupSegRepresentations ||\n    toolGroupSegRepresentations.length === 0\n  ) {\n    return;\n  }\n\n  const toolGroupSegRepresentationUIDs = toolGroupSegRepresentations.map(\n    (representation) => representation.segmentationRepresentationUID\n  );\n\n  let segRepresentationUIDsToRemove = segmentationRepresentationUIDs;\n  if (segRepresentationUIDsToRemove) {\n    // make sure the segmentationDataUIDs that are going to be removed belong\n    // to the toolGroup\n    const invalidSegRepresentationUIDs = segmentationRepresentationUIDs.filter(\n      (segRepresentationUID) =>\n        !toolGroupSegRepresentationUIDs.includes(segRepresentationUID)\n    );\n\n    if (invalidSegRepresentationUIDs.length > 0) {\n      throw new Error(\n        `The following segmentationRepresentationUIDs are not part of the toolGroup: ${JSON.stringify(\n          invalidSegRepresentationUIDs\n        )}`\n      );\n    }\n  } else {\n    // remove all segmentation representations\n    segRepresentationUIDsToRemove = toolGroupSegRepresentationUIDs;\n  }\n\n  segRepresentationUIDsToRemove.forEach((segmentationDataUID) => {\n    _removeSegmentation(toolGroupId, segmentationDataUID, immediate);\n  });\n}\n\nfunction _removeSegmentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  immediate?: boolean\n): void {\n  const segmentationRepresentation = getSegmentationRepresentationByUID(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  const { type } = segmentationRepresentation;\n\n  if (type === SegmentationRepresentations.Labelmap) {\n    labelmapDisplay.removeSegmentationRepresentation(\n      toolGroupId,\n      segmentationRepresentationUID,\n      immediate\n    );\n  } else if (type === SegmentationRepresentations.Contour) {\n    contourDisplay.removeSegmentationRepresentation(\n      toolGroupId,\n      segmentationRepresentationUID,\n      immediate\n    );\n  } else {\n    throw new Error(`The representation ${type} is not supported yet`);\n  }\n}\n\nexport default removeSegmentationsFromToolGroup;\n","import { SegmentationPublicInput } from '../../../types/SegmentationStateTypes';\nimport { cache } from '@cornerstonejs/core';\nimport { LabelmapSegmentationData } from '../../../types/LabelmapTypes';\n\nfunction validate(segmentationInput: SegmentationPublicInput): void {\n  if (!segmentationInput.representation.data) {\n    throw new Error(\n      'The segmentationInput.representationData.data is undefined, please provide a valid representationData.data'\n    );\n  }\n\n  const representationData = segmentationInput.representation\n    .data as LabelmapSegmentationData;\n\n  if (!representationData.volumeId) {\n    throw new Error(\n      'The segmentationInput.representationData.volumeId is undefined, please provide a valid representationData.volumeId'\n    );\n  }\n\n  const cachedVolume = cache.getVolume(representationData.volumeId);\n\n  if (!cachedVolume) {\n    throw new Error(\n      `volumeId of ${representationData.volumeId} not found in cache, you should load and cache volume before adding segmentation`\n    );\n  }\n}\n\nexport default validate;\n","import * as Enums from '../../../enums';\nimport { SegmentationPublicInput } from '../../../types/SegmentationStateTypes';\nimport validateLabelmap from '../../../tools/displayTools/Labelmap/validateRepresentationData';\n\n/**\n * Checks if the segmentationInputArray is valid meaning it contains\n * correct representationProps for the representation type that is being used.\n *\n * @param segmentationInputArray - Array of segmentation inputs\n * @internal\n */\nfunction validateSegmentationInput(\n  segmentationInputArray: SegmentationPublicInput[]\n): void {\n  if (!segmentationInputArray || !segmentationInputArray.length) {\n    throw new Error('The segmentationInputArray is undefined or empty array');\n  }\n\n  segmentationInputArray.forEach((segmentationInput) => {\n    if (segmentationInput.segmentationId === undefined) {\n      throw new Error(\n        'The segmentationInput.segmentationId is undefined, please provide a valid segmentationId'\n      );\n    }\n\n    if (segmentationInput.representation === undefined) {\n      throw new Error(\n        'The segmentationInput.representation is undefined, please provide a valid representation'\n      );\n    }\n\n    if (\n      segmentationInput.representation.type ===\n      Enums.SegmentationRepresentations.Labelmap\n    ) {\n      validateLabelmap(segmentationInput);\n    }\n  });\n}\n\nexport default validateSegmentationInput;\n","import _cloneDeep from 'lodash.clonedeep';\nimport { SegmentationPublicInput } from '../../types/SegmentationStateTypes';\nimport { validateSegmentationInput } from './helpers';\nimport { addSegmentation as addSegmentationToState } from './segmentationState';\n/**\n * Adds the segmentation to the cornerstone3D segmentation state. It should be\n * noted that segmentations are not added to any toolGroup's viewports. In order to\n * do so, you should add a \"representation\" of the segmentation to the toolGroup\n * using addSegmentationRepresentations helper. The reason for this is that there\n * can be multiple representations of the same segmentation (e.g. Labelmap and\n * Contour, etc. - Currently only Labelmap representations is supported).\n * @param segmentationInputArray - The array of segmentation input, each of which\n * defining the segmentationId and the main representation data for the segmentation.\n */\nfunction addSegmentations(\n  segmentationInputArray: SegmentationPublicInput[]\n): void {\n  validateSegmentationInput(segmentationInputArray);\n\n  segmentationInputArray.map((segInput) => {\n    const segmentationInput = _cloneDeep(segInput);\n\n    addSegmentationToState(segmentationInput);\n  });\n}\n\nexport default addSegmentations;\n","import _cloneDeep from 'lodash.clonedeep';\nimport {\n  SegmentationRepresentationConfig,\n  RepresentationPublicInput,\n} from '../../types/SegmentationStateTypes';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { getToolGroup } from '../../store/ToolGroupManager';\n\nimport { labelmapDisplay } from '../../tools/displayTools/Labelmap';\nimport { contourDisplay } from '../../tools/displayTools/Contour';\n\n/**\n * Set the specified segmentation representations on the viewports of the specified\n * toolGroup. It accepts a second argument which is a toolGroup specific representation\n * configuration.\n *\n * @param toolGroupId - The Id of the toolGroup to add the segmentation representations to\n * @param representationInputArray - An array of segmentation representations to add to the toolGroup\n * @param toolGroupSpecificRepresentationConfig - The toolGroup specific configuration\n * for the segmentation representations\n */\nasync function addSegmentationRepresentations(\n  toolGroupId: string,\n  representationInputArray: RepresentationPublicInput[],\n  toolGroupSpecificRepresentationConfig?: SegmentationRepresentationConfig\n): Promise<string[]> {\n  // Check if there exists a toolGroup with the toolGroupId\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (!toolGroup) {\n    throw new Error(`No tool group found for toolGroupId: ${toolGroupId}`);\n  }\n\n  const promises = representationInputArray.map((representationInput) => {\n    return _addSegmentationRepresentation(\n      toolGroupId,\n      representationInput,\n      toolGroupSpecificRepresentationConfig\n    );\n  });\n\n  const segmentationRepresentationUIDs = await Promise.all(promises);\n\n  return segmentationRepresentationUIDs;\n}\n\nasync function _addSegmentationRepresentation(\n  toolGroupId: string,\n  representationInput: RepresentationPublicInput,\n  toolGroupSpecificRepresentationConfig?: SegmentationRepresentationConfig\n): Promise<string> {\n  let segmentationRepresentationUID;\n\n  if (representationInput.type === Representations.Labelmap) {\n    segmentationRepresentationUID =\n      await labelmapDisplay.addSegmentationRepresentation(\n        toolGroupId,\n        representationInput,\n        toolGroupSpecificRepresentationConfig\n      );\n  } else if (representationInput.type === Representations.Contour) {\n    segmentationRepresentationUID =\n      await contourDisplay.addSegmentationRepresentation(\n        toolGroupId,\n        representationInput,\n        toolGroupSpecificRepresentationConfig\n      );\n  } else {\n    throw new Error(\n      `The representation type ${representationInput.type} is not supported`\n    );\n  }\n\n  return segmentationRepresentationUID;\n}\n\nexport default addSegmentationRepresentations;\n","import { ToolGroupSpecificRepresentation } from '../../types/SegmentationStateTypes';\nimport { getDefaultSegmentationStateManager } from './segmentationState';\nimport { triggerSegmentationRepresentationModified } from './triggerSegmentationEvents';\n\n/**\n * Get the active segmentation representation for the tool group with\n * the given toolGroupId.\n * @param toolGroupId - The Id of the tool group\n * @returns The active segmentation representation for the tool group.\n */\nfunction getActiveSegmentationRepresentation(\n  toolGroupId: string\n): ToolGroupSpecificRepresentation {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  const toolGroupSegmentationRepresentations =\n    segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n\n  if (!toolGroupSegmentationRepresentations) {\n    return;\n  }\n\n  const activeRepresentation = toolGroupSegmentationRepresentations.find(\n    (representation) => representation.active\n  );\n\n  return activeRepresentation;\n}\n\n/**\n * Set the active segmentation for the given tool group for all its viewports\n *\n * @param toolGroupId - The Id of the tool group to set the active\n * segmentation for.\n * @param segmentationRepresentationUID - The id of the segmentation representation to set as\n * active.\n */\nfunction setActiveSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  segmentationStateManager.setActiveSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nexport {\n  // get\n  getActiveSegmentationRepresentation,\n  // set\n  setActiveSegmentationRepresentation,\n};\n","import { getActiveSegmentationRepresentation } from './activeSegmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\n\n/**\n * Get the locked status for a segment index in a segmentation\n * @param segmentationId - The id of the segmentation that the segment\n * belongs to.\n * @param segmentIndex - The index of the segment\n * @returns A boolean value indicating whether the segment is locked or not.\n */\nfunction isSegmentIndexLocked(\n  segmentationId: string,\n  segmentIndex: number\n): boolean {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n  return segmentsLocked.has(segmentIndex);\n}\n\n/**\n * Set the locked status of a segment index in a segmentation\n * @param segmentationId - The id of the segmentation whose segment\n * index is being modified.\n * @param segmentIndex - The index of the segment to lock/unlock.\n */\nfunction setSegmentIndexLocked(\n  segmentationId: string,\n  segmentIndex: number,\n  locked = true\n): void {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n\n  if (locked) {\n    segmentsLocked.add(segmentIndex);\n  } else {\n    segmentsLocked.delete(segmentIndex);\n  }\n\n  triggerSegmentationModified(segmentationId);\n}\n\n/**\n * Get the locked segments for a segmentation\n * @param segmentationId - The id of the segmentation to get locked\n * segments for.\n * @returns An array of locked segment indices.\n */\nfunction getLockedSegments(segmentationId: string): number[] | [] {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n  return Array.from(segmentsLocked);\n}\n\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegments };\n","import { utilities } from '@cornerstonejs/core';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { Color } from '../../../types/SegmentationStateTypes';\nimport { ColorLUT } from '../../../types/SegmentationStateTypes';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nimport { SegmentationRepresentations } from '../../../enums';\n\n/**\n * addColorLUT - Adds a new color LUT to the state at the given colorLUTIndex.\n * If no colorLUT is provided, a new color LUT is generated.\n *\n * @param colorLUTIndex - the index of the colorLUT in the state\n * @param colorLUT - An array of The colorLUT to set.\n * @returns\n */\nfunction addColorLUT(colorLUT: ColorLUT, colorLUTIndex: number): void {\n  if (!colorLUT) {\n    throw new Error('addColorLUT: colorLUT is required');\n  }\n\n  // Append the \"zero\" (no label) color to the front of the LUT, if necessary.\n  if (!utilities.isEqual(colorLUT[0], [0, 0, 0, 0])) {\n    console.warn(\n      'addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it'\n    );\n    colorLUT.unshift([0, 0, 0, 0]);\n  }\n\n  SegmentationState.addColorLUT(colorLUT, colorLUTIndex);\n}\n\n/**\n * It sets the toolGroup's segmentationRepresentation to use the provided\n * colorLUT at the given colorLUTIndex.\n * @param toolGroupId - the id of the toolGroup that renders the representation\n * @param segmentationRepresentationUID - the representationUID for the segmentation\n * @param colorLUTIndex - the index of the colorLUT to use\n */\nfunction setColorLUT(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  colorLUTIndex: number\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    throw new Error(\n      `setColorLUT: could not find segmentation representation with UID ${segmentationRepresentationUID}`\n    );\n  }\n\n  if (!SegmentationState.getColorLUT(colorLUTIndex)) {\n    throw new Error(\n      `setColorLUT: could not find colorLUT with index ${colorLUTIndex}`\n    );\n  }\n\n  segRepresentation.colorLUTIndex = colorLUTIndex;\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Given a tool group UID, a segmentation representationUID, and a segment index, return the\n * color for that segment. It can be used for segmentation tools that need to\n * display the color of their annotation.\n *\n * @param toolGroupId - The Id of the tool group that owns the segmentation representation.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment in the segmentation\n * @returns A color.\n */\nfunction getColorForSegmentIndex(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): Color {\n  const segmentationRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segmentationRepresentation) {\n    throw new Error(\n      `segmentation representation with UID ${segmentationRepresentationUID} does not exist for tool group ${toolGroupId}`\n    );\n  }\n\n  const { colorLUTIndex } = segmentationRepresentation;\n\n  // get colorLUT\n  const colorLUT = SegmentationState.getColorLUT(colorLUTIndex);\n  return colorLUT[segmentIndex];\n}\n\nfunction setColorForSegmentIndex(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number,\n  color: Color\n): void {\n  // Get the reference to the color in the colorLUT.\n  const colorReference = getColorForSegmentIndex(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n\n  // Modify the values by reference\n  for (let i = 0; i < color.length; i++) {\n    colorReference[i] = color[i];\n  }\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nexport {\n  getColorForSegmentIndex,\n  addColorLUT,\n  setColorLUT,\n  setColorForSegmentIndex,\n};\n","import { cache, Types } from '@cornerstonejs/core';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getSegmentationRepresentations } from '../../../stateManagement/segmentation/segmentationState';\nimport { ToolGroupSpecificRepresentation } from '../../../types/SegmentationStateTypes';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nimport SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\n\nfunction getSegmentationIndices(segmentationId) {\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n\n  if (segmentation.type === SegmentationRepresentations.Labelmap) {\n    const volume = cache.getVolume(segmentationId);\n    const scalarData = volume.getScalarData();\n\n    const keySet = {};\n    for (let i = 0; i < scalarData.length; i++) {\n      const segmentIndex = scalarData[i];\n      if (segmentIndex !== 0 && !keySet[segmentIndex]) {\n        keySet[segmentIndex] = true;\n      }\n    }\n    return Object.keys(keySet).map((it) => parseInt(it, 10));\n  } else if (segmentation.type === SegmentationRepresentations.Contour) {\n    const geometryIds = segmentation.representationData.CONTOUR?.geometryIds;\n\n    if (!geometryIds) {\n      throw new Error(\n        `No geometryIds found for segmentationId ${segmentationId}`\n      );\n    }\n\n    return geometryIds.map((geometryId) => {\n      const geometry = cache.getGeometry(geometryId) as Types.IGeometry;\n      return (geometry.data as Types.IContourSet).getSegmentIndex();\n    });\n  }\n}\n\n/**\n * Set the visibility of a segmentation representation for a given tool group. It fires\n * a SEGMENTATION_REPRESENTATION_MODIFIED event. Visibility true will show all segments\n * and visibility false will hide all segments\"\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n * @param toolGroupId - The Id of the tool group that contains the segmentation.\n * @param segmentationRepresentationUID - The id of the segmentation representation to modify its visibility.\n * @param visibility - boolean\n */\nfunction setSegmentationVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  visibility: boolean\n): void {\n  const toolGroupSegmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  if (!toolGroupSegmentationRepresentations) {\n    return;\n  }\n\n  const representation = toolGroupSegmentationRepresentations.find(\n    (representation: ToolGroupSpecificRepresentation) =>\n      representation.segmentationRepresentationUID ===\n      segmentationRepresentationUID\n  );\n\n  if (!representation) {\n    return;\n  }\n\n  const { segmentsHidden, segmentationId } = representation;\n\n  const indices = getSegmentationIndices(segmentationId);\n\n  // if visibility is set to be true, we need to remove all the segments\n  // from the segmentsHidden set, otherwise we need to add all the segments\n  // to the segmentsHidden set\n  if (visibility) {\n    segmentsHidden.clear();\n  } else {\n    indices.forEach((index) => {\n      segmentsHidden.add(index);\n    });\n  }\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    representation.segmentationRepresentationUID\n  );\n}\n\n/**\n * Get the visibility of a segmentation data for a given tool group.\n *\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The id of the segmentation data to get\n * @returns A boolean value that indicates whether the segmentation data is visible or\n * not on the toolGroup\n */\nfunction getSegmentationVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): boolean | undefined {\n  const toolGroupSegmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  const representation = toolGroupSegmentationRepresentations.find(\n    (representation: ToolGroupSpecificRepresentation) =>\n      representation.segmentationRepresentationUID ===\n      segmentationRepresentationUID\n  );\n\n  if (!representation) {\n    return;\n  }\n\n  const { segmentsHidden } = representation;\n\n  return segmentsHidden.size === 0;\n}\n\n/**\n * Set the visibility of the given segment indices to the given visibility. This\n * is a helper to set the visibility of multiple segments at once and reduces\n * the number of events fired.\n *\n * @param toolGroupId -  The tool group id of the segmentation representation.\n * @param segmentationRepresentationUID -  The UID of the segmentation\n * representation.\n * @param segmentIndices -  The indices of the segments to be hidden/shown.\n * @param visibility -  The visibility to set the segments to.\n *\n */\nfunction setSegmentsVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndices: number[],\n  visibility: boolean\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    return;\n  }\n\n  segmentIndices.forEach((segmentIndex) => {\n    visibility\n      ? segRepresentation.segmentsHidden.delete(segmentIndex)\n      : segRepresentation.segmentsHidden.add(segmentIndex);\n  });\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nfunction setSegmentVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number,\n  visibility: boolean\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    return;\n  }\n\n  visibility\n    ? segRepresentation.segmentsHidden.delete(segmentIndex)\n    : segRepresentation.segmentsHidden.add(segmentIndex);\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nexport {\n  setSegmentationVisibility,\n  getSegmentationVisibility,\n  setSegmentVisibility,\n  setSegmentsVisibility,\n};\n","import { getSegmentation } from './segmentationState';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\n\n/**\n * Set the active segment index for a segmentation Id. It fires a global state\n * modified event.\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param segmentationId - The id of the segmentation that the segment belongs to.\n * @param segmentIndex - The index of the segment to be activated.\n */\nfunction setActiveSegmentIndex(\n  segmentationId: string,\n  segmentIndex: number\n): void {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (segmentation?.activeSegmentIndex !== segmentIndex) {\n    segmentation.activeSegmentIndex = segmentIndex;\n\n    triggerSegmentationModified(segmentationId);\n  }\n}\n\n/**\n * Get the active segment index for a segmentation in the global state\n * @param segmentationId - The id of the segmentation to get the active segment index from.\n * @returns The active segment index for the given segmentation.\n */\nfunction getActiveSegmentIndex(segmentationId: string): number | undefined {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (segmentation) {\n    return segmentation.activeSegmentIndex;\n  }\n}\n\nexport { getActiveSegmentIndex, setActiveSegmentIndex };\n","import {\n  StackViewport,\n  utilities,\n  BaseVolumeViewport,\n} from '@cornerstonejs/core';\nimport { Types } from '@cornerstonejs/core';\nimport { ToolModes } from '../../enums';\nimport { InteractionTypes, ToolProps, PublicToolProps } from '../../types';\n\nexport interface IBaseTool {\n  /** ToolGroup ID the tool instance belongs to */\n  toolGroupId: string;\n  /** Tool supported interaction types */\n  supportedInteractionTypes: InteractionTypes[];\n  /** Tool Mode : Active, Passive, Enabled, Disabled */\n  mode: ToolModes;\n  /** Tool Configuration */\n  configuration: {\n    preventHandleOutsideImage?: boolean;\n    strategies?: Record<string, any>;\n    defaultStrategy?: string;\n    activeStrategy?: string;\n    strategyOptions?: Record<string, unknown>;\n  };\n}\n\n/**\n * Abstract base class from which all tools derive.\n * Deals with cleanly merging custom and default configuration, and strategy\n * application.\n */\nabstract class BaseTool implements IBaseTool {\n  static toolName;\n  /** Supported Interaction Types - currently only Mouse */\n  public supportedInteractionTypes: InteractionTypes[];\n  public configuration: Record<string, any>;\n  /** ToolGroup ID the tool instance belongs to */\n  public toolGroupId: string;\n  /** Tool Mode - Active/Passive/Enabled/Disabled/ */\n  public mode: ToolModes;\n\n  constructor(toolProps: PublicToolProps, defaultToolProps: ToolProps) {\n    const initialProps = utilities.deepMerge(defaultToolProps, toolProps);\n\n    const {\n      configuration = {},\n      supportedInteractionTypes,\n      toolGroupId,\n    } = initialProps;\n\n    // If strategies are not initialized in the tool config\n    if (!configuration.strategies) {\n      configuration.strategies = {};\n      configuration.defaultStrategy = undefined;\n      configuration.activeStrategy = undefined;\n      configuration.strategyOptions = {};\n    }\n\n    this.toolGroupId = toolGroupId;\n    this.supportedInteractionTypes = supportedInteractionTypes || [];\n    this.configuration = Object.assign({}, configuration);\n    this.mode = ToolModes.Disabled;\n  }\n\n  /**\n   * Returns the name of the tool\n   * @returns The name of the tool.\n   */\n  public getToolName(): string {\n    // Since toolName is static we get it from the class constructor\n    return (<typeof BaseTool>this.constructor).toolName;\n  }\n\n  /**\n   * It applies the active strategy to the enabled element.\n   * @param enabledElement - The element that is being operated on.\n   * @param operationData - The data that needs to be passed to the strategy.\n   * @returns The result of the strategy.\n   */\n  public applyActiveStrategy(\n    enabledElement: Types.IEnabledElement,\n    operationData: unknown\n  ): any {\n    const { strategies, activeStrategy } = this.configuration;\n    return strategies[activeStrategy].call(this, enabledElement, operationData);\n  }\n\n  /**\n   * merges the new configuration with the tool configuration\n   * @param configuration - toolConfiguration\n   */\n  public setConfiguration(newConfiguration: Record<string, any>): void {\n    this.configuration = utilities.deepMerge(\n      this.configuration,\n      newConfiguration\n    );\n  }\n\n  /**\n   * Sets the active strategy for a tool. Strategies are\n   * multiple implementations of tool behavior that can be switched by tool\n   * configuration.\n   *\n   * @param strategyName - name of the strategy to be set as active\n   */\n  public setActiveStrategy(strategyName: string): void {\n    this.setConfiguration({ activeStrategy: strategyName });\n  }\n\n  /**\n   * Returns the volumeId for the volume viewport. It will grabbed the volumeId\n   * from the volumeId if particularly specified in the tool configuration, or if\n   * not, the first actorUID in the viewport is returned as the volumeId. NOTE: for\n   * segmentations, actorUID is not necessarily the volumeId since the segmentation\n   * can have multiple representations, use segmentation helpers to get the volumeId\n   * based on the actorUID.\n   *\n   * @param viewport - Volume viewport\n   * @returns the volumeId for the viewport if specified in the tool configuration,\n   * or the first actorUID in the viewport if not.\n   */\n  private getTargetVolumeId(viewport: Types.IViewport): string | undefined {\n    if (this.configuration.volumeId) {\n      return this.configuration.volumeId;\n    }\n\n    // If volume not specified, then return the actorUID for the\n    // default actor - first actor\n    const actorEntries = viewport.getActors();\n\n    if (!actorEntries) {\n      return;\n    }\n\n    // find the first image actor of instance type vtkVolume\n    return actorEntries.find(\n      (actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume'\n    )?.uid;\n  }\n\n  /**\n   * Get the image that is displayed for the targetId in the cachedStats\n   * which can be either imageId:<imageId> or volumeId:<volumeId>\n   *\n   * @param targetId - annotation targetId stored in the cached stats\n   * @param renderingEngine - The rendering engine\n   * @returns The image data for the target.\n   */\n  protected getTargetIdImage(\n    targetId: string,\n    renderingEngine: Types.IRenderingEngine\n  ): Types.IImageData | Types.CPUIImageData | Types.IImageVolume {\n    if (targetId.startsWith('imageId:')) {\n      const imageId = targetId.split('imageId:')[1];\n      const imageURI = utilities.imageIdToURI(imageId);\n      let viewports = utilities.getViewportsWithImageURI(\n        imageURI,\n        renderingEngine.id\n      );\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      viewports = viewports.filter((viewport) => {\n        return viewport.getCurrentImageId() === imageId;\n      });\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      return viewports[0].getImageData();\n    } else if (targetId.startsWith('volumeId:')) {\n      const volumeId = targetId.split('volumeId:')[1];\n      const viewports = utilities.getViewportsWithVolumeId(\n        volumeId,\n        renderingEngine.id\n      );\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      return viewports[0].getImageData();\n    } else {\n      throw new Error(\n        'getTargetIdImage: targetId must start with \"imageId:\" or \"volumeId:\"'\n      );\n    }\n  }\n\n  /**\n   * Get the target Id for the viewport which will be used to store the cached\n   * statistics scoped to that target in the annotations.\n   * For StackViewport, targetId is the viewportId, but for the volume viewport,\n   * the targetId will be grabbed from the volumeId if particularly specified\n   * in the tool configuration, or if not, the first actorUID in the viewport.\n   *\n   * @param viewport - viewport to get the targetId for\n   * @returns targetId\n   */\n  protected getTargetId(viewport: Types.IViewport): string | undefined {\n    if (viewport instanceof StackViewport) {\n      return `imageId:${viewport.getCurrentImageId()}`;\n    } else if (viewport instanceof BaseVolumeViewport) {\n      return `volumeId:${this.getTargetVolumeId(viewport)}`;\n    } else {\n      throw new Error(\n        'getTargetId: viewport must be a StackViewport or VolumeViewport'\n      );\n    }\n  }\n}\n\n// Note: this is a workaround since terser plugin does not support static blocks\n// yet and we can't easily say static toolName = \"BaseTool\" in the class definition.\nBaseTool.toolName = 'BaseTool';\nexport default BaseTool;\n","import { state } from '../store';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nconst VIEWPORT_ELEMENT = 'viewport-element';\n\n/**\n * Returns the SVG drawing helper for the given HTML element.\n * @param element - The HTML element to get the SVG drawing helper for.\n * @private\n */\nfunction getSvgDrawingHelper(element: HTMLDivElement): SVGDrawingHelper {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId, renderingEngineId } = enabledElement;\n  const canvasHash = `${viewportId}:${renderingEngineId}`;\n  const svgLayerElement = _getSvgLayer(element);\n\n  // Reset touched\n  Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n    state.svgNodeCache[canvasHash][cacheKey].touched = false;\n  });\n\n  return {\n    svgLayerElement: svgLayerElement,\n    svgNodeCacheForCanvas: state.svgNodeCache,\n    getSvgNode: getSvgNode.bind(this, canvasHash),\n    appendNode: appendNode.bind(this, svgLayerElement, canvasHash),\n    setNodeTouched: setNodeTouched.bind(this, canvasHash),\n    clearUntouched: clearUntouched.bind(this, svgLayerElement, canvasHash),\n  };\n}\n\n/**\n *\n * @param element\n * @private\n */\nfunction _getSvgLayer(element) {\n  const viewportElement = `.${VIEWPORT_ELEMENT}`;\n  const internalDivElement = element.querySelector(viewportElement);\n  const svgLayer = internalDivElement.querySelector('.svg-layer');\n\n  return svgLayer;\n}\n\nfunction getSvgNode(canvasHash, cacheKey) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return;\n  }\n\n  if (state.svgNodeCache[canvasHash][cacheKey]) {\n    return state.svgNodeCache[canvasHash][cacheKey].domRef;\n  }\n}\n\nfunction appendNode(svgLayerElement, canvasHash, svgNode, cacheKey) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return null;\n  }\n\n  state.svgNodeCache[canvasHash][cacheKey] = {\n    touched: true,\n    domRef: svgNode,\n  };\n\n  svgLayerElement.appendChild(svgNode);\n}\n\nfunction setNodeTouched(canvasHash, cacheKey) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return;\n  }\n\n  if (state.svgNodeCache[canvasHash][cacheKey]) {\n    state.svgNodeCache[canvasHash][cacheKey].touched = true;\n  }\n}\n\nfunction clearUntouched(svgLayerElement, canvasHash) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return;\n  }\n\n  Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n    const cacheEntry = state.svgNodeCache[canvasHash][cacheKey];\n\n    if (!cacheEntry.touched && cacheEntry.domRef) {\n      svgLayerElement.removeChild(cacheEntry.domRef);\n      delete state.svgNodeCache[canvasHash][cacheKey];\n    }\n  });\n}\n\nexport default getSvgDrawingHelper;\n","import getSvgDrawingHelper from './getSvgDrawingHelper';\n\nfunction draw(\n  element: HTMLDivElement,\n  fn: (svgDrawingElement: any) => any\n): void {\n  const svgDrawingHelper = getSvgDrawingHelper(element);\n\n  // Save...\n  fn(svgDrawingHelper);\n  // Restore...\n\n  svgDrawingHelper.clearUntouched();\n}\n\nexport default draw;\n","function _getHash(\n  annotationUID: string,\n  drawingElementType: string,\n  nodeUID: string\n): string {\n  return `${annotationUID}::${drawingElementType}::${nodeUID}`;\n}\n\nexport default _getHash;\n","export function _setAttributesIfNecessary(attributes, svgNode) {\n  Object.keys(attributes).forEach((key) => {\n    const currentValue = svgNode.getAttribute(key);\n    const newValue = attributes[key];\n    if (newValue === undefined || newValue === '') {\n      svgNode.removeAttribute(key);\n    } else if (currentValue !== newValue) {\n      svgNode.setAttribute(key, newValue);\n    }\n  });\n}\n\nexport default _setAttributesIfNecessary;\n","export function _setNewAttributesIfValid(attributes, svgNode) {\n  Object.keys(attributes).forEach((key) => {\n    const newValue = attributes[key];\n    if (newValue !== undefined && newValue !== '') {\n      svgNode.setAttribute(key, newValue);\n    }\n  });\n}\n\nexport default _setNewAttributesIfValid;\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\n\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './_setNewAttributesIfValid';\n\nfunction drawCircle(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  circleUID: string,\n  center: Types.Point2,\n  radius: number,\n  options = {},\n  dataId = ''\n): void {\n  const { color, fill, width, lineWidth, lineDash } = Object.assign(\n    {\n      color: 'dodgerblue',\n      fill: 'transparent',\n      width: '2',\n      lineDash: undefined,\n      lineWidth: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  // variable for the namespace\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'circle', circleUID);\n  const existingCircleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const attributes = {\n    cx: `${center[0]}`,\n    cy: `${center[1]}`,\n    r: `${radius}`,\n    stroke: color,\n    fill,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingCircleElement) {\n    _setAttributesIfNecessary(attributes, existingCircleElement);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newCircleElement = document.createElementNS(svgns, 'circle');\n\n    if (dataId !== '') {\n      newCircleElement.setAttribute('data-id', dataId);\n    }\n\n    _setNewAttributesIfValid(attributes, newCircleElement);\n\n    svgDrawingHelper.appendNode(newCircleElement, svgNodeHash);\n  }\n}\n\nexport default drawCircle;\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './_setNewAttributesIfValid';\n\nfunction drawEllipse(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  ellipseUID: string,\n  corner1: Types.Point2,\n  corner2: Types.Point2,\n  options = {},\n  dataId = ''\n): void {\n  const { color, width, lineWidth, lineDash } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'ellipse', ellipseUID);\n  const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const w = Math.abs(corner1[0] - corner2[0]);\n  const h = Math.abs(corner1[1] - corner2[1]);\n  const xMin = Math.min(corner1[0], corner2[0]);\n  const yMin = Math.min(corner1[1], corner2[1]);\n\n  const center = [xMin + w / 2, yMin + h / 2];\n  const radiusX = w / 2;\n  const radiusY = h / 2;\n\n  const attributes = {\n    cx: `${center[0]}`,\n    cy: `${center[1]}`,\n    rx: `${radiusX}`,\n    ry: `${radiusY}`,\n    stroke: color,\n    fill: 'transparent',\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingEllipse) {\n    _setAttributesIfNecessary(attributes, existingEllipse);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const svgEllipseElement = document.createElementNS(svgns, 'ellipse');\n\n    if (dataId !== '') {\n      svgEllipseElement.setAttribute('data-id', dataId);\n    }\n\n    _setNewAttributesIfValid(attributes, svgEllipseElement);\n\n    svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);\n  }\n}\n\nexport default drawEllipse;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport _setNewAttributesIfValid from './_setNewAttributesIfValid';\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\nfunction drawHandles(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  handleGroupUID: string,\n  handlePoints: Array<Types.Point2>,\n  options = {}\n): void {\n  const { color, handleRadius, width, lineWidth, fill, type, opacity } =\n    Object.assign(\n      {\n        color: 'dodgerblue',\n        handleRadius: '6',\n        width: '2',\n        lineWidth: undefined,\n        fill: 'transparent',\n        type: 'circle',\n        opacity: 1,\n      },\n      options\n    );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  for (let i = 0; i < handlePoints.length; i++) {\n    const handle = handlePoints[i];\n\n    // variable for the namespace\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(\n      annotationUID,\n      'handle',\n      `hg-${handleGroupUID}-index-${i}`\n    );\n\n    let attributes;\n    if (type === 'circle') {\n      attributes = {\n        cx: `${handle[0]}`,\n        cy: `${handle[1]}`,\n        r: handleRadius,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        opacity: opacity,\n      };\n    } else if (type === 'rect') {\n      const handleRadiusFloat = parseFloat(handleRadius);\n      const side = handleRadiusFloat * 1.5;\n      const x = handle[0] - side * 0.5;\n      const y = handle[1] - side * 0.5;\n\n      attributes = {\n        x: `${x}`,\n        y: `${y}`,\n        width: `${side}`,\n        height: `${side}`,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        rx: `${side * 0.1}`,\n        opacity: opacity,\n      };\n    } else {\n      throw new Error(`Unsupported handle type: ${type}`);\n    }\n\n    const existingHandleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n    if (existingHandleElement) {\n      _setAttributesIfNecessary(attributes, existingHandleElement);\n\n      svgDrawingHelper.setNodeTouched(svgNodeHash);\n    } else {\n      const newHandleElement = document.createElementNS(svgns, type);\n\n      _setNewAttributesIfValid(attributes, newHandleElement);\n\n      svgDrawingHelper.appendNode(newHandleElement, svgNodeHash);\n    }\n  }\n}\n\nexport default drawHandles;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport _setNewAttributesIfValid from './_setNewAttributesIfValid';\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\nexport default function drawLine(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  lineUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {},\n  dataId = ''\n): void {\n  // if length is NaN return\n  if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n    return;\n  }\n\n  const { color, width, lineWidth, lineDash, shadow } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n      shadow: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'line', lineUID);\n  const existingLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n  const dropShadowStyle = shadow\n    ? `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`\n    : '';\n\n  const attributes = {\n    x1: `${start[0]}`,\n    y1: `${start[1]}`,\n    x2: `${end[0]}`,\n    y2: `${end[1]}`,\n    stroke: color,\n    style: dropShadowStyle,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingLine) {\n    // This is run to avoid re-rendering annotations that actually haven't changed\n    _setAttributesIfNecessary(attributes, existingLine);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newLine = document.createElementNS(svgns, 'line');\n\n    if (dataId !== '') {\n      newLine.setAttribute('data-id', dataId);\n    }\n\n    _setNewAttributesIfValid(attributes, newLine);\n\n    svgDrawingHelper.appendNode(newLine, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport _getHash from './_getHash';\nimport _setNewAttributesIfValid from './_setNewAttributesIfValid';\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\n/**\n * Draws an SVG polyline with the given points.\n *\n * The `connectLastToFirst` option, if true, draws a closed polyline, with the\n * last point connected to the first.\n */\nexport default function drawPolyline(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  polylineUID: string,\n  points: Types.Point2[],\n  options: {\n    color?: string;\n    width?: number;\n    lineWidth?: number;\n    lineDash?: string;\n    connectLastToFirst?: boolean;\n  }\n): void {\n  if (points.length < 2) {\n    return;\n  }\n\n  const { color, width, lineWidth, lineDash } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n      connectLastToFirst: false,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'polyline', polylineUID);\n  const existingPolyLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  let pointsAttribute = '';\n\n  for (const point of points) {\n    pointsAttribute += `${point[0]}, ${point[1]} `;\n  }\n\n  if (options.connectLastToFirst) {\n    const firstPoint = points[0];\n\n    pointsAttribute += `${firstPoint[0]}, ${firstPoint[1]}`;\n  }\n\n  const attributes = {\n    points: pointsAttribute,\n    stroke: color,\n    fill: 'none',\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingPolyLine) {\n    // This is run to avoid re-rendering annotations that actually haven't changed\n    _setAttributesIfNecessary(attributes, existingPolyLine);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newPolyLine = document.createElementNS(svgns, 'polyline');\n\n    _setNewAttributesIfValid(attributes, newPolyLine);\n\n    svgDrawingHelper.appendNode(newPolyLine, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\n\n/**\n * Draws a textBox.\n *\n * @param textLines - The text to display.\n * @param position - The x/y position of the textbox\n * @param options - Options for the textBox.\n * @returns Bounding box; can be used for isPointNearTool\n */\nfunction drawTextBox(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textUID: string,\n  textLines: Array<string>,\n  position: Types.Point2,\n  options = {}\n): SVGRect {\n  const mergedOptions = Object.assign(\n    {\n      fontFamily: 'Helvetica, Arial, sans-serif',\n      fontSize: '14px',\n      color: 'rgb(255, 255, 0)',\n      background: '',\n      padding: 25,\n      centerX: false,\n      centerY: true,\n    },\n    options\n  );\n\n  // Draw each of the text lines on top of the background box\n  const textGroupBoundingBox = _drawTextGroup(\n    svgDrawingHelper,\n    annotationUID,\n    textUID,\n    textLines,\n    position,\n    mergedOptions\n  );\n\n  return textGroupBoundingBox;\n}\n\nfunction _drawTextGroup(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textUID: string,\n  textLines: Array<string> = [''],\n  position: Types.Point2,\n  options: any\n): SVGRect {\n  const { padding, color, fontFamily, fontSize, background } = options;\n\n  let textGroupBoundingBox;\n  const [x, y] = [position[0] + padding, position[1] + padding];\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'text', textUID);\n  const existingTextGroup = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  // Todo: right now textBox gets a re-render even if the textBox has not changed\n  // and evenIf the attributes are not set again since they are the same.\n  if (existingTextGroup) {\n    // TODO: Iterate each node and update color? font-size?\n    const textElement = existingTextGroup.querySelector('text');\n    const textSpans = Array.from(textElement.children) as Array<SVGElement>;\n\n    for (let i = 0; i < textSpans.length; i++) {\n      const textSpanElement = textSpans[i];\n      const text = textLines[i] || '';\n\n      textSpanElement.textContent = text;\n    }\n\n    // if the textLines have changed size, we need to create textSpans for them\n    if (textLines.length > textSpans.length) {\n      for (let i = 0; i < textLines.length - textSpans.length; i++) {\n        const textLine = textLines[i + textSpans.length];\n        const textSpan = _createTextSpan(textLine);\n\n        textElement.appendChild(textSpan);\n      }\n\n      existingTextGroup.appendChild(textElement);\n      svgDrawingHelper.appendNode(existingTextGroup, svgNodeHash);\n    }\n\n    const textAttributes = {\n      fill: color,\n      'font-size': fontSize,\n      'font-family': fontFamily,\n    };\n\n    const textGroupAttributes = {\n      transform: `translate(${x} ${y})`,\n    };\n\n    // Todo: for some reason this does not work to not re-render the textBox\n    _setAttributesIfNecessary(textAttributes, textElement);\n    _setAttributesIfNecessary(textGroupAttributes, existingTextGroup);\n\n    textGroupBoundingBox = _drawTextBackground(existingTextGroup, background);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const textGroup = document.createElementNS(svgns, 'g');\n\n    textGroup.setAttribute('transform', `translate(${x} ${y})`);\n\n    //\n    const textElement = _createTextElement(svgDrawingHelper, options);\n    for (let i = 0; i < textLines.length; i++) {\n      const textLine = textLines[i];\n      const textSpan = _createTextSpan(textLine);\n\n      textElement.appendChild(textSpan);\n    }\n\n    textGroup.appendChild(textElement);\n    svgDrawingHelper.appendNode(textGroup, svgNodeHash);\n    textGroupBoundingBox = _drawTextBackground(textGroup, background);\n  }\n\n  // We translate the group using `position`\n  // which means we also need to pluck those values when returning\n  // the bounding box\n  return Object.assign({}, textGroupBoundingBox, {\n    x,\n    y,\n    height: textGroupBoundingBox.height + padding,\n    width: textGroupBoundingBox.width + padding,\n  });\n}\n\nfunction _createTextElement(\n  svgDrawingHelper: SVGDrawingHelper,\n  options: any\n): SVGElement {\n  const { color, fontFamily, fontSize } = options;\n  const svgns = 'http://www.w3.org/2000/svg';\n  const textElement = document.createElementNS(svgns, 'text');\n  const noSelectStyle =\n    'user-select: none; pointer-events: none; -webkit-tap-highlight-color:  rgba(255, 255, 255, 0);';\n  const dropShadowStyle = `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`;\n  const combinedStyle = `${noSelectStyle}${dropShadowStyle}`;\n\n  // font-size=\"100\"\n  textElement.setAttribute('x', '0');\n  textElement.setAttribute('y', '0');\n  textElement.setAttribute('fill', color);\n  textElement.setAttribute('font-family', fontFamily);\n  textElement.setAttribute('font-size', fontSize);\n  textElement.setAttribute('style', combinedStyle);\n\n  return textElement;\n}\n\nfunction _createTextSpan(text): SVGElement {\n  const svgns = 'http://www.w3.org/2000/svg';\n  const textSpanElement = document.createElementNS(svgns, 'tspan');\n\n  // TODO: centerX\n  // (parent width / 2) - my width\n  // TODO: centerY\n\n  textSpanElement.setAttribute('x', '0');\n  textSpanElement.setAttribute('dy', '1.2em');\n  textSpanElement.textContent = text;\n\n  return textSpanElement;\n}\n\nfunction _drawTextBackground(group: SVGGElement, color: string) {\n  let element = group.querySelector('rect.background');\n\n  // If we have no background color, remove any element that exists and return\n  // the bounding box of the text\n  if (!color) {\n    if (element) {\n      group.removeChild(element);\n    }\n\n    return group.getBBox();\n  }\n\n  // Otherwise, check if we have a <rect> element. If not, create one\n  if (!element) {\n    element = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n    element.setAttribute('class', 'background');\n    group.insertBefore(element, group.firstChild);\n  }\n\n  // Get the text groups's bounding box and use it to draw the background rectangle\n  const bBox = group.getBBox();\n\n  const attributes = {\n    x: `${bBox.x}`,\n    y: `${bBox.y}`,\n    width: `${bBox.width}`,\n    height: `${bBox.height}`,\n    fill: color,\n  };\n\n  _setAttributesIfNecessary(attributes, element);\n\n  return bBox;\n}\n\nexport default drawTextBox;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Find the closest point to the target point\n *\n * @param sourcePoints - The potential source points.\n * @param targetPoint - The target point, used to find the closest source.\n * @returns The closest point in the array of point sources\n */\nexport default function findClosestPoint(\n  sourcePoints: Array<Types.Point2>,\n  targetPoint: Types.Point2\n): Types.Point2 {\n  let minPoint = [0, 0];\n  let minDistance = Number.MAX_SAFE_INTEGER;\n\n  sourcePoints.forEach(function (sourcePoint) {\n    const distance = _distanceBetween(targetPoint, sourcePoint);\n\n    if (distance < minDistance) {\n      minDistance = distance;\n      minPoint = [...sourcePoint];\n    }\n  });\n\n  return minPoint as Types.Point2;\n}\n\n/**\n *\n * @private\n * @param p1\n * @param p2\n */\nfunction _distanceBetween(p1: Types.Point2, p2: Types.Point2): number {\n  const [x1, y1] = p1;\n  const [x2, y2] = p2;\n\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport drawLine from './drawLine';\nimport findClosestPoint from '../utilities/math/vec2/findClosestPoint';\nimport { PlanarBoundingBox, SVGDrawingHelper } from '../types';\n\n/**\n * Draw a link between an annotation to a box.\n */\nfunction drawLink(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  linkUID: string,\n  // Find closest point to approx. bounding box\n  annotationAnchorPoints: Array<Types.Point2>,\n  refPoint: Types.Point2,\n  // Find bounding box point that's closest to our identified\n  // start point\n  boundingBox: PlanarBoundingBox,\n  options = {}\n): void {\n  // The closest anchor point (for the annotation) to the\n  // text box / bounding box\n  const start =\n    annotationAnchorPoints.length > 0\n      ? findClosestPoint(annotationAnchorPoints, refPoint)\n      : refPoint;\n\n  // Calculate the midpoints of the bounding box\n  const boundingBoxPoints = _boundingBoxPoints(boundingBox);\n  // Find the closest textBox midpoint to the annotation's anchor/start point\n  const end = findClosestPoint(boundingBoxPoints, start);\n\n  // Finally we draw the dashed linking line\n  const mergedOptions = Object.assign(\n    {\n      color: 'rgb(255, 255, 0)',\n      lineWidth: '1',\n      lineDash: '2,3',\n    },\n    options\n  );\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    `link-${linkUID}`,\n    start,\n    end,\n    mergedOptions\n  );\n}\n\n/**\n * Find potential anchor points for a given bounding box. For example, it may\n * look nicer to draw a line from the \"middle left\" of a bounding box to an\n * annotation (instead of from a corner). This function calculates those points\n *\n * @param boundingBox\n */\nfunction _boundingBoxPoints(\n  boundingBox: PlanarBoundingBox\n): Array<Types.Point2> {\n  const { x: left, y: top, height, width } = boundingBox;\n  const halfWidth = width / 2;\n  const halfHeight = height / 2;\n\n  const topMiddle = [left + halfWidth, top] as Types.Point2;\n  const leftMiddle = [left, top + halfHeight] as Types.Point2;\n  const bottomMiddle = [left + halfWidth, top + height] as Types.Point2;\n  const rightMiddle = [left + width, top + halfHeight] as Types.Point2;\n\n  return [topMiddle, leftMiddle, bottomMiddle, rightMiddle];\n}\n\nexport default drawLink;\n","import type { Types } from '@cornerstonejs/core';\n\nimport drawTextBox from './drawTextBox';\nimport drawLink from './drawLink';\nimport { SVGDrawingHelper } from '../types';\n\nfunction drawLinkedTextBox(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textBoxUID: string,\n  //\n  textLines: Array<string>,\n  textBoxPosition: Types.Point2,\n  annotationAnchorPoints: Array<Types.Point2>,\n  textBox: unknown,\n  options = {}\n  // TODO: yCenter as an option\n): SVGRect {\n  const mergedOptions = Object.assign(\n    {\n      handleRadius: '6',\n      centering: {\n        x: false,\n        y: true, // yCenter,\n      },\n    },\n    options\n  );\n\n  // Draw the text box\n  const canvasBoundingBox = drawTextBox(\n    svgDrawingHelper,\n    annotationUID,\n    textBoxUID,\n    textLines,\n    textBoxPosition,\n    mergedOptions\n  );\n  // if (textBox.hasMoved) {\n  //   // Draw dashed link line between tool and text\n  drawLink(\n    svgDrawingHelper,\n    annotationUID,\n    textBoxUID,\n    annotationAnchorPoints, // annotationAnchorPoints\n    textBoxPosition, // refPoint (text)\n    canvasBoundingBox, // textBoxBoundingBox\n    mergedOptions\n  );\n  // }\n\n  // const { top, left, width, height } = canvasBoundingBox\n\n  // textBox.worldBoundingBox = {\n  //   topLeft: canvasToWorld([left, top]),\n  //   topRight: canvasToWorld([left + width, top]),\n  //   bottomLeft: canvasToWorld([left, top + height]),\n  //   bottomRight: canvasToWorld([left + width, top + height]),\n  // }\n\n  return canvasBoundingBox;\n}\n\nexport default drawLinkedTextBox;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './_setNewAttributesIfValid';\nimport { SVGDrawingHelper } from '../types';\n\n// <rect x=\"120\" y=\"100\" width=\"100\" height=\"100\" />\nexport default function drawRect(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  rectangleUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {},\n  dataId = ''\n): void {\n  const {\n    color,\n    width: _width,\n    lineWidth,\n    lineDash,\n  } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || _width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n  const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n  const width = Math.abs(start[0] - end[0]);\n  const height = Math.abs(start[1] - end[1]);\n\n  const attributes = {\n    x: `${tlhc[0]}`,\n    y: `${tlhc[1]}`,\n    width: `${width}`,\n    height: `${height}`,\n    stroke: color,\n    fill: 'transparent',\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingRect) {\n    _setAttributesIfNecessary(attributes, existingRect);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const svgRectElement = document.createElementNS(svgns, 'rect');\n\n    if (dataId !== '') {\n      svgRectElement.setAttribute('data-id', dataId);\n    }\n\n    _setNewAttributesIfValid(attributes, svgRectElement);\n\n    svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\nimport drawLine from './drawLine';\n\nexport default function drawArrow(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  arrowUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {}\n): void {\n  // if length is NaN return\n  if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n    return;\n  }\n\n  const { color, width, lineWidth, lineDash } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // The line itself\n  drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {\n    color,\n    width,\n    lineWidth,\n    lineDash,\n  });\n\n  // Drawing the head arrow with two lines\n  // Variables to be used when creating the arrow\n  const headLength = 10;\n  const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n\n  const firstLine = {\n    start: [\n      end[0] - headLength * Math.cos(angle - Math.PI / 7),\n      end[1] - headLength * Math.sin(angle - Math.PI / 7),\n    ] as Types.Point2,\n    end: end,\n  };\n\n  const secondLine = {\n    start: [\n      end[0] - headLength * Math.cos(angle + Math.PI / 7),\n      end[1] - headLength * Math.sin(angle + Math.PI / 7),\n    ] as Types.Point2,\n    end: end,\n  };\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    '2',\n    firstLine.start,\n    firstLine.end,\n    {\n      color,\n      width,\n      lineWidth,\n    }\n  );\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    '3',\n    secondLine.start,\n    secondLine.end,\n    {\n      color,\n      width,\n      lineWidth,\n    }\n  );\n}\n","import { ToolGroupManager } from '../store';\nimport { ToolModes } from '../enums';\nimport { getEnabledElement } from '@cornerstonejs/core';\n\ntype ModesFilter = Array<ToolModes>;\n\n/**\n * Finds the enabled element, and iterates over the tools inside its\n * toolGroup. Returns the list of tool instances that are valid based\n * on the provided tool mode.\n *\n * @param element Canvas element\n * @param modesFilter tool modes: active, passive, enabled, disabled\n * @returns enabled tool instances\n */\nexport default function getToolsWithModesForElement(\n  element: HTMLDivElement,\n  modesFilter: ModesFilter\n) {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return [];\n  }\n\n  const enabledTools = [];\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    /* filter out tools that don't have options */\n    if (!toolOptions) {\n      continue;\n    }\n\n    if (modesFilter.includes(toolOptions.mode)) {\n      const toolInstance = toolGroup.getToolInstance(toolName);\n      enabledTools.push(toolInstance);\n    }\n  }\n\n  return enabledTools;\n}\n","import {\n  getEnabledElement,\n  triggerEvent,\n  getRenderingEngine,\n} from '@cornerstonejs/core';\nimport { Events, ToolModes } from '../enums';\nimport { draw as drawSvg } from '../drawingSvg';\nimport getToolsWithModesForElement from './getToolsWithModesForElement';\nimport { AnnotationRenderedEventDetail } from '../types/EventTypes';\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * AnnotationRenderingEngine is a class that is responsible for rendering\n * annotations defined in the renderAnnotation method of annotation tools on the page.\n * It mimics the RenderingEngine in the Cornerstone Core. Here it uses requestAnimationFrame\n * is used to render annotations by calling renderAnnotations() on each enabled tool. Note: This\n * is a Singleton class and should not be instantiated directly. To trigger\n * an annotation render for an HTML element containing a viewport you can use\n *\n * ```\n * triggerAnnotationRender(element)\n * ```\n */\nclass AnnotationRenderingEngine {\n  public hasBeenDestroyed: boolean;\n  private _needsRender: Set<HTMLDivElement> = new Set();\n  private _animationFrameSet = false;\n  private _animationFrameHandle: number | null = null;\n  private _viewportElements: Map<string, HTMLDivElement>;\n\n  constructor() {\n    this._viewportElements = new Map();\n  }\n\n  /**\n   * Add the viewport's HTMLDivElement to the viewports for rendering. This method\n   * just informs the annotationRenderingEngine about the viewport and\n   * does not initiate a render.\n   * @param viewportId - Viewport Unique identifier\n   * @param element - HTMLDivElement\n   */\n  public addViewportElement(viewportId: string, element: HTMLDivElement) {\n    this._viewportElements.set(viewportId, element);\n  }\n\n  /**\n   * Remove the viewport's HTMLDivElement from subsequent annotation renders\n   * @param viewportId - Viewport Unique identifier\n   */\n  public removeViewportElement(viewportId: string, element: HTMLDivElement) {\n    this._viewportElements.delete(viewportId);\n\n    // delete element from needsRender if element exist\n    this._needsRender.delete(element);\n\n    // I don' think there is any disadvantage to canceling the animation frame\n    // and resetting the flags on viewport's element removal, since the removeVIewportElement\n    // might be as a result of reEnabling the element (in re-enable we disable first), hence the need to render the\n    // new one while removing the old one\n    this._reset();\n  }\n\n  /**\n   * It tells the AnnotationRenderingEngine to render the viewport element the next\n   * time it renders.\n   *\n   * @param element - The element to render.\n   */\n  public renderViewport(element: HTMLDivElement): void {\n    this._setViewportsToBeRenderedNextFrame([element]);\n  }\n\n  /**\n   * _throwIfDestroyed Throws an error if trying to interact with the `RenderingEngine`\n   * instance after its `destroy` method has been called.\n   */\n  private _throwIfDestroyed() {\n    if (this.hasBeenDestroyed) {\n      throw new Error(\n        'this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.'\n      );\n    }\n  }\n\n  private _renderFlaggedViewports = () => {\n    this._throwIfDestroyed();\n\n    const elements = Array.from(this._viewportElements.values());\n\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (this._needsRender.has(element)) {\n        this._triggerRender(element);\n\n        // This viewport has been rendered, we can remove it from the set\n        this._needsRender.delete(element);\n\n        // If there is nothing left that is flagged for rendering, stop here\n        // and allow RAF to be called again\n        if (this._needsRender.size === 0) {\n          this._animationFrameSet = false;\n          this._animationFrameHandle = null;\n          return;\n        }\n      }\n    }\n  };\n\n  private _setAllViewportsToBeRenderedNextFrame() {\n    const elements = [...this._viewportElements.values()];\n\n    elements.forEach((element) => {\n      this._needsRender.add(element);\n    });\n\n    this._renderFlaggedViewports();\n  }\n\n  private _setViewportsToBeRenderedNextFrame(elements: HTMLDivElement[]) {\n    const elementsEnabled = [...this._viewportElements.values()];\n\n    // Add the viewports to the set of flagged viewports\n    elements.forEach((element) => {\n      // only enabledElement need to render\n      if (elementsEnabled.indexOf(element) !== -1) {\n        this._needsRender.add(element);\n      }\n    });\n\n    // Render any flagged viewports\n    this._render();\n  }\n\n  /**\n   * _render Sets up animation frame if necessary\n   */\n  private _render() {\n    // If we have viewports that need rendering and we have not already\n    // set the RAF callback to run on the next frame.\n    if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n      this._animationFrameHandle = window.requestAnimationFrame(\n        this._renderFlaggedViewports\n      );\n\n      // Set the flag that we have already set up the next RAF call.\n      this._animationFrameSet = true;\n    }\n  }\n\n  _triggerRender(element) {\n    const enabledElement = getEnabledElement(element);\n\n    if (!enabledElement) {\n      console.warn('Element has been disabled');\n      return;\n    }\n\n    const renderingEngine = getRenderingEngine(\n      enabledElement.renderingEngineId\n    );\n    if (!renderingEngine) {\n      console.warn('rendering Engine has been destroyed');\n      return;\n    }\n\n    const enabledTools = getToolsWithModesForElement(element, [\n      Active,\n      Passive,\n      Enabled,\n    ]);\n\n    const { renderingEngineId, viewportId } = enabledElement;\n    const eventDetail: AnnotationRenderedEventDetail = {\n      element,\n      renderingEngineId,\n      viewportId,\n    };\n\n    // const enabledToolsWithAnnotations = enabledTools.filter((tool) => {\n    //   const annotations = getAnnotations(tool.getToolName(), {FrameOfReferenceUID});\n    //   return annotations && annotations.length;\n    // });\n\n    drawSvg(element, (svgDrawingHelper) => {\n      let anyRendered = false;\n      const handleDrawSvg = (tool) => {\n        if (tool.renderAnnotation) {\n          const rendered = tool.renderAnnotation(\n            enabledElement,\n            svgDrawingHelper\n          );\n          anyRendered = anyRendered || rendered;\n        }\n      };\n\n      /**\n       * We should be able to filter tools that don't have annotations, but\n       * currently some of tools have renderAnnotation method BUT\n       * don't keep annotation in the state, so if we do so, the tool will not be\n       * rendered.\n       */\n      enabledTools.forEach(handleDrawSvg);\n\n      if (anyRendered) {\n        triggerEvent(element, Events.ANNOTATION_RENDERED, { ...eventDetail });\n      }\n    });\n  }\n\n  /**\n   * _reset Resets the `RenderingEngine`\n   */\n  private _reset() {\n    window.cancelAnimationFrame(this._animationFrameHandle);\n\n    this._needsRender.clear();\n    this._animationFrameSet = false;\n    this._animationFrameHandle = null;\n\n    this._setAllViewportsToBeRenderedNextFrame();\n  }\n}\n\nconst annotationRenderingEngine = new AnnotationRenderingEngine();\n\n/**\n * It triggers the rendering of the annotations for the given HTML element using\n * the `AnnotationRenderingEngine`\n * @param element - The element to render the annotation on.\n */\nfunction triggerAnnotationRender(element: HTMLDivElement): void {\n  annotationRenderingEngine.renderViewport(element);\n}\n\nexport { annotationRenderingEngine, triggerAnnotationRender };\n\nexport default triggerAnnotationRender;\n","import { vec3 } from 'gl-matrix';\nimport { CONSTANTS, metaData } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { Annotations, Annotation } from '../../types';\nimport { debug } from 'console';\n\nconst { EPSILON } = CONSTANTS;\n\nconst PARALLEL_THRESHOLD = 1 - EPSILON;\n\n/**\n * given some `Annotations`, and the slice defined by the camera's normal\n * direction and the spacing in the normal, filter the `Annotations` which\n * is within the slice.\n *\n * @param annotations - Annotations\n * @param camera - The camera\n * @param spacingInNormalDirection - The spacing in the normal direction\n * @returns The filtered `Annotations`.\n */\nexport default function filterAnnotationsWithinSlice(\n  annotations: Annotations,\n  camera: Types.ICamera,\n  spacingInNormalDirection: number\n): Annotations {\n  const { viewPlaneNormal } = camera;\n\n  // The reason we use parallel normals instead of actual orientation is that\n  // flipped action is done through camera API, so we can't rely on the\n  // orientation (viewplaneNormal and viewUp) since even the same image and\n  // same slice if flipped will have different orientation, but still rendering\n  // the same slice. Instead, we choose to use the parallel normals to filter\n  // the annotations and later we fine tune it with the annotation within slice\n  // logic down below.\n  const annotationsWithParallelNormals = annotations.filter(\n    (td: Annotation) => {\n      let annotationViewPlaneNormal = td.metadata.viewPlaneNormal;\n\n      if (!annotationViewPlaneNormal) {\n        // This code is run to set the annotation view plane normal\n        // for historical data which was saved without the normal.\n        const { referencedImageId } = td.metadata;\n        const { imageOrientationPatient } = metaData.get(\n          'imagePlaneModule',\n          referencedImageId\n        );\n        const rowCosineVec = vec3.fromValues(\n          imageOrientationPatient[0],\n          imageOrientationPatient[1],\n          imageOrientationPatient[2]\n        );\n\n        const colCosineVec = vec3.fromValues(\n          imageOrientationPatient[3],\n          imageOrientationPatient[4],\n          imageOrientationPatient[5]\n        );\n\n        annotationViewPlaneNormal = vec3.create() as Types.Point3;\n\n        vec3.cross(annotationViewPlaneNormal, rowCosineVec, colCosineVec);\n        td.metadata.viewPlaneNormal = annotationViewPlaneNormal;\n      }\n      const isParallel =\n        Math.abs(vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >\n        PARALLEL_THRESHOLD;\n\n      return annotationViewPlaneNormal && isParallel;\n    }\n  );\n\n  // No in plane annotations.\n  if (!annotationsWithParallelNormals.length) {\n    return [];\n  }\n\n  // Annotation should be within the slice, which means that it should be between\n  // camera's focalPoint +/- spacingInNormalDirection.\n\n  const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n  const { focalPoint } = camera;\n\n  const annotationsWithinSlice = [];\n\n  for (const annotation of annotationsWithParallelNormals) {\n    const data = annotation.data;\n    const point = data.handles.points[0];\n\n    if (!annotation.isVisible) {\n      continue;\n    }\n    // A = point\n    // B = focal point\n    // P = normal\n\n    // B-A dot P  => Distance in the view direction.\n    // this should be less than half the slice distance.\n\n    const dir = vec3.create();\n\n    vec3.sub(dir, focalPoint, point);\n\n    const dot = vec3.dot(dir, viewPlaneNormal);\n\n    if (Math.abs(dot) < halfSpacingInNormalDirection) {\n      annotationsWithinSlice.push(annotation);\n    }\n  }\n\n  return annotationsWithinSlice;\n}\n","import {\n  StackViewport,\n  VolumeViewport,\n  Types,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\n\nimport filterAnnotationsWithinSlice from './filterAnnotationsWithinSlice';\nimport { Annotations } from '../../types';\n\n/**\n * Given the viewport and the annotations, it filters the annotations array and only\n * return those annotation that should be displayed on the viewport\n * @param annotations - Annotations\n * @returns A filtered version of the annotations.\n */\nexport default function filterAnnotationsForDisplay(\n  viewport: Types.IViewport,\n  annotations: Annotations\n): Annotations {\n  if (viewport instanceof StackViewport) {\n    // 1. Get the currently displayed imageId from the StackViewport\n    const imageId = viewport.getCurrentImageId();\n\n    // 2. remove the dataLoader scheme since it might be an annotation that was\n    // created on the volumeViewport initially and has the volumeLoader scheme\n    // but shares the same imageId\n    const colonIndex = imageId.indexOf(':');\n    const imageURI = imageId.substring(colonIndex + 1);\n\n    // 3. Filter annotation in the frame of reference by the referenced image ID property\n    // Note: With the current implementation drawing on the stack (PT stack) will not\n    // show the annotation on a volume that does not share the same imageURIs (CT Volume),\n    // and we don't have a proper way to check distance either since a stack can be\n    // composed of multiple unrelated images\n    return annotations.filter((annotation) => {\n      if (!annotation.isVisible) {\n        return false;\n      }\n\n      const imageId = annotation.metadata.referencedImageId;\n\n      if (imageId === undefined) {\n        // This annotation was not drawn on a non-coplanar reformat, and such does\n        // note have a referenced imageId.\n        return false;\n      }\n\n      const colonIndex = imageId.indexOf(':');\n      const referenceImageURI = imageId.substring(colonIndex + 1);\n      return referenceImageURI === imageURI;\n    });\n  } else if (viewport instanceof VolumeViewport) {\n    const camera = viewport.getCamera();\n\n    const { spacingInNormalDirection } =\n      csUtils.getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n\n    // Get data with same normal and within the same slice\n    return filterAnnotationsWithinSlice(\n      annotations,\n      camera,\n      spacingInNormalDirection\n    );\n  } else {\n    throw new Error(`Viewport Type ${viewport.type} not supported`);\n  }\n}\n","import {\n  StyleConfig,\n  ToolStyleConfig,\n  StyleSpecifier,\n  AnnotationStyle,\n} from '../../../types/AnnotationStyle';\n\n/**\n * This class handles the configuration of the tool style. You can use it to set\n * the style of a tool at various levels (annotation, viewport, toolGroup, global).\n *\n * The hierarchy of the configuration is as follows (each level falls back to the\n * next level if not specified):\n *\n * 1) Annotation-level styles (with annotationUID)\n *     2) Viewport-level tool styles\n *         - Per-tool: Length on the viewport with viewportId\n *         - Global: All tools on the viewport with viewportId\n *             3) ToolGroup tool styles\n *                 - Per-tool: Angle on toolGroupId in all viewports of the toolGroup\n *                 - Global: All tools in the toolGroupId for all viewports\n *                     4) Default level:\n *                         - Per-tool: Length styles\n *                         - Global: Opinionated styles by CornerstoneJS\n */\nclass ToolStyle {\n  config: StyleConfig;\n\n  constructor() {\n    const defaultConfig = {\n      color: 'rgb(255, 255, 0)',\n      colorHighlighted: 'rgb(0, 255, 0)',\n      colorSelected: 'rgb(0, 220, 0)',\n      colorLocked: 'rgb(255, 255, 0)',\n      lineWidth: '1',\n      lineDash: '',\n      shadow: true,\n      textBoxFontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n      textBoxFontSize: '14px',\n      textBoxColor: 'rgb(255, 255, 0)',\n      textBoxColorHighlighted: 'rgb(0, 255, 0)',\n      textBoxColorSelected: 'rgb(0, 255, 0)',\n      textBoxColorLocked: 'rgb(255, 255, 0)',\n      textBoxBackground: '',\n      textBoxLinkLineWidth: '1',\n      textBoxLinkLineDash: '2,3',\n      textBoxShadow: true,\n    };\n\n    this._initializeConfig(defaultConfig);\n  }\n\n  /**\n   * It returns the annotation-specific tool styles for the annotation with the given UID\n   * @param annotationUID - The unique identifier of the annotation.\n   * @returns The annotation tool styles for the annotation with the given UID.\n   */\n  getAnnotationToolStyles(annotationUID: string): AnnotationStyle {\n    return this.config.annotations && this.config.annotations[annotationUID];\n  }\n\n  /**\n   * It returns the styles for a given viewport. It includes tool-specific and\n   * global styles (all tools in the viewport)\n   * @param viewportId - The id of the viewport\n   * @returns The viewport tool styles for the given viewport id.\n   */\n  getViewportToolStyles(viewportId: string): ToolStyleConfig {\n    return this.config.viewports && this.config.viewports[viewportId];\n  }\n\n  /**\n   * It returns the tool style for the given toolGroup. It includes tool-specific and\n   * global styles (all tools in the toolGroup)\n   * @param toolGroupId - The id of the toolGroup.\n   * @returns The tool styles for the tool group with the given id.\n   */\n  getToolGroupToolStyles(toolGroupId: string): ToolStyleConfig {\n    return this.config.toolGroups && this.config.toolGroups[toolGroupId];\n  }\n\n  /**\n   * It returns the default tool styles from the config file. It includes tool-specific and\n   * global styles (all tools in all tooLGroups)\n   * @returns The default tool styles.\n   */\n  getDefaultToolStyles(): ToolStyleConfig {\n    return this.config.default;\n  }\n\n  /**\n   * It takes an annotationUID and a style object and sets the styles at\n   * the annotationLevel (highest priority in the hierarchy). The styles is an\n   * object with key value pairs.\n   * @param annotationUID - string - The unique identifier for the annotation.\n   * @param styles - ToolStyles\n   */\n  setAnnotationStyles(annotationUID: string, styles: AnnotationStyle) {\n    let annotationSpecificStyles = this.config.annotations;\n\n    if (!annotationSpecificStyles) {\n      this.config = {\n        ...this.config,\n        annotations: {},\n      };\n\n      annotationSpecificStyles = this.config.annotations;\n    }\n\n    annotationSpecificStyles[annotationUID] = styles;\n  }\n\n  /**\n   * It takes a viewportId and a ToolStyles object, and adds the ToolStyles object\n   * at the viewport level (second highest priority in the hierarchy after the annotation level).\n   * @param viewportId - The id of the viewport\n   * @param styles - style object including tool-specific and/or global styles (All tools in the viewport)\n   */\n  setViewportToolStyles(viewportId: string, styles: ToolStyleConfig) {\n    let viewportSpecificStyles = this.config.viewports;\n\n    if (!viewportSpecificStyles) {\n      this.config = {\n        ...this.config,\n        viewports: {},\n      };\n\n      viewportSpecificStyles = this.config.viewports;\n    }\n\n    viewportSpecificStyles[viewportId] = styles;\n  }\n\n  /**\n   * It takes a toolGroupId and a ToolStyles object, and it adds the ToolStyles object\n   * at the toolGroup level (third highest priority in the hierarchy after the viewport level).\n   * @param toolGroupId - The id of the toolGroup\n   * @param styles - style object including tool-specific (in all viewports of the toolGroup) and/or\n   * global styles (All tools in the toolGroup for all viewports)\n   */\n  setToolGroupToolStyles(toolGroupId: string, styles: ToolStyleConfig) {\n    let toolGroupSpecificStyles = this.config.toolGroups;\n\n    if (!toolGroupSpecificStyles) {\n      this.config = {\n        ...this.config,\n        toolGroups: {},\n      };\n\n      toolGroupSpecificStyles = this.config.toolGroups;\n    }\n\n    toolGroupSpecificStyles[toolGroupId] = styles;\n  }\n\n  /**\n   * Sets the default tool styles for the editor. It overrides the default styles for all tools.\n   * @param styles - style object including tool-specific (a tool in all toolGroups) and/or\n   * global styles (All tools in all tooLGroups)\n   */\n  setDefaultToolStyles(styles: ToolStyleConfig) {\n    this.config.default = styles;\n  }\n\n  /**\n   * It returns the value for a given style key, based on the provided specifications.\n   * It starts by looking at the annotation-specific styles, then at the viewport-specific styles,\n   * then at the toolGroup-specific styles, and finally at the default styles.\n   * @param styleKey - The key of the style.\n   * @param styleSpecifier - An object containing the specifications such as viewportId,\n   * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n   * met\n   * @returns The value for the given style key.\n   */\n  getStyleProperty(toolStyle: string, specifications: StyleSpecifier) {\n    const { annotationUID, viewportId, toolGroupId, toolName } = specifications;\n\n    return this._getToolStyle(\n      toolStyle,\n      annotationUID,\n      viewportId,\n      toolGroupId,\n      toolName\n    );\n  }\n\n  private _getToolStyle(\n    property: string,\n    annotationUID: string,\n    viewportId: string,\n    toolGroupId: string,\n    toolName: string\n  ) {\n    if (annotationUID) {\n      const styles = this.getAnnotationToolStyles(annotationUID);\n\n      if (styles) {\n        // check first in the toolSpecific styles\n        if (styles[property]) {\n          return styles[property];\n        }\n      }\n    }\n\n    if (viewportId) {\n      const styles = this.getViewportToolStyles(viewportId);\n\n      if (styles) {\n        // check if we have the viewportId specific style\n        // check first in the toolSpecific styles\n        if (styles[toolName] && styles[toolName][property]) {\n          return styles[toolName][property];\n        }\n\n        // check if we have the style in the viewport specific global viewportSpecificStyles\n        if (styles.global && styles.global[property]) {\n          return styles.global[property];\n        }\n      }\n    }\n\n    if (toolGroupId) {\n      const styles = this.getToolGroupToolStyles(toolGroupId);\n\n      if (styles) {\n        // check first in the toolSpecific styles\n        if (styles[toolName] && styles[toolName][property]) {\n          return styles[toolName][property];\n        }\n\n        // check if we have the style in the toolGroup specific global styles\n        if (styles.global && styles.global[property]) {\n          return styles.global[property];\n        }\n      }\n    }\n\n    const globalStyles = this.getDefaultToolStyles();\n\n    if (globalStyles[toolName] && globalStyles[toolName][property]) {\n      return globalStyles[toolName][property];\n    }\n\n    if (globalStyles.global && globalStyles.global[property]) {\n      return globalStyles.global[property];\n    }\n  }\n\n  private _initializeConfig(config) {\n    const toolStyles = {};\n    for (const name in config) {\n      toolStyles[name] = config[name];\n    }\n\n    this.config = {\n      default: {\n        global: toolStyles as AnnotationStyle,\n      },\n    };\n  }\n}\n\nconst toolStyle = new ToolStyle();\n\nexport default toolStyle;\n","import { StyleSpecifier } from '../../../types/AnnotationStyle';\nimport { ToolModes, AnnotationStyleStates } from '../../../enums';\nimport toolStyle from './ToolStyle';\n\n/**\n * Build a list of hierarchal property names in ascending order of priority\n * @param property - The base property name -- e.g., 'color'\n * @param state - An optional state to determine the final property name\n * @param mode - An optional mode to determine the final property name\n * @returns A list of property names\n */\nfunction getHierarchalPropertyStyles(\n  property: string,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string[] {\n  const list = [`${property}`];\n  if (state) list.push(`${list[0]}${state}`);\n  if (mode) list.push(`${list[list.length - 1]}${mode}`);\n  return list;\n}\n\n/**\n * Get the value of a style property from the ToolStyle config\n * @param property - The name of the property to get.\n * @param styleSpecifier - An object containing the specifications such as viewportId,\n * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n * met (hierarchy is checked from most specific to least specific which is\n * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n * @param state - The state of the tool (Default, Locked etc.)\n * @param mode - The current tool mode. (Active, Passive etc.)\n * @returns The value of the property.\n */\nfunction getStyleProperty(\n  property: string,\n  styleSpecifier: StyleSpecifier,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string {\n  // Hierarchal property styles is a list of property names with priority in ascending\n  // order like: ['color', 'colorSelected', 'colorSelectedActive'], if in the toolStyle\n  // config, the `colorSelectedActive` property is defined, it will be used, otherwise\n  // the `colorSelected` property will be used, and if that is not defined, the `color`\n  // property will be used. This is done to ensure that the most specific property is used.\n  // Thus, we attempt resolving property names in reverse order\n  const alternatives = getHierarchalPropertyStyles(property, state, mode);\n  for (let i = alternatives.length - 1; i >= 0; --i) {\n    const style = toolStyle.getStyleProperty(alternatives[i], styleSpecifier);\n    if (style !== undefined) {\n      return style;\n    }\n  }\n}\n\nexport { getStyleProperty };\n","import { Annotation } from '../../../types';\nimport { isAnnotationLocked } from '../annotationLocking';\nimport { isAnnotationSelected } from '../annotationSelection';\nimport { AnnotationStyleStates } from '../../../enums';\n\n/**\n * Given a Annotation object, return the annotationStyle State that it\n * should be in based on its data\n * @param annotation - The annotation that we want to style.\n * @returns The state of the annotation whether it is Default, Highlighted, Locked, or Selected.\n */\nfunction getState(annotation?: Annotation): AnnotationStyleStates {\n  if (annotation) {\n    if (annotation.data && annotation.highlighted)\n      return AnnotationStyleStates.Highlighted;\n    if (isAnnotationSelected(annotation.annotationUID))\n      return AnnotationStyleStates.Selected;\n\n    // Todo: make annotation lock api not to rely on the annotation itself\n    if (isAnnotationLocked(annotation)) return AnnotationStyleStates.Locked;\n  }\n\n  return AnnotationStyleStates.Default;\n}\n\nexport default getState;\n","import { ToolModes, AnnotationStyleStates } from '../../../enums';\nimport { getStyleProperty } from './helpers';\nimport { StyleSpecifier } from '../../../types/AnnotationStyle';\n\n/**\n * getFont - Returns a font string of the form \"{fontSize}px fontName\" used by `canvas`.\n * @param styleSpecifier - An object containing the specifications such as viewportId,\n * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n * met (hierarchy is checked from most specific to least specific which is\n * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n * @param state - An optional state to determine the final property name\n * @param mode - An optional mode to determine the final property name\n * @returns The font string.\n */\nfunction getFont(\n  styleSpecifier: StyleSpecifier,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string {\n  const fontSize = getStyleProperty(\n    'textBoxFontSize',\n    styleSpecifier,\n    state,\n    mode\n  );\n  const fontFamily = getStyleProperty(\n    'textBoxFontFamily',\n    styleSpecifier,\n    state,\n    mode\n  );\n\n  return `${fontSize}px ${fontFamily}`;\n}\n\nexport default getFont;\n","import {\n  utilities,\n  getEnabledElement,\n  VolumeViewport,\n  StackViewport,\n  cache,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport BaseTool from './BaseTool';\nimport { getAnnotationManager } from '../../stateManagement/annotation/annotationState';\nimport { Annotation, Annotations, SVGDrawingHelper } from '../../types';\nimport triggerAnnotationRender from '../../utilities/triggerAnnotationRender';\nimport filterAnnotationsForDisplay from '../../utilities/planar/filterAnnotationsForDisplay';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nimport { getState } from '../../stateManagement/annotation/config';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\n/**\n * Abstract class for tools which create and display annotations on the\n * cornerstone3D canvas. In addition, it provides a base class for segmentation\n * tools that require drawing an annotation before running the segmentation strategy\n * for instance threshold segmentation based on an area and a threshold.\n * Annotation tools make use of drawing utilities to draw SVG elements on the viewport.\n *\n * To create a new annotation tool, derive from this class and implement the\n * abstract methods.\n */\nabstract class AnnotationDisplayTool extends BaseTool {\n  static toolName;\n\n  // ===================================================================\n  // Abstract Methods - Must be implemented.\n  // ===================================================================\n\n  /**\n   * @abstract renderAnnotation it used to draw the tool's annotation in each\n   * request animation frame\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  abstract renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  );\n\n  /**\n   * @virtual Given the element and annotations which is an array of annotation, it\n   * filters the annotations array to only include the annotation based on the viewportType.\n   * If the viewport is StackViewport, it filters based on the current imageId of the viewport,\n   * if the viewport is volumeViewport, it only returns those that are within the\n   * same slice as the current rendered slice in the volume viewport.\n   * imageId as the enabledElement.\n   * @param element - The HTML element\n   * @param annotations - The annotations to filter (array of annotation)\n   * @returns The filtered annotations\n   */\n  filterInteractableAnnotationsForElement(\n    element: HTMLDivElement,\n    annotations: Annotations\n  ): Annotations | undefined {\n    if (!annotations || !annotations.length) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    return filterAnnotationsForDisplay(viewport, annotations);\n  }\n\n  /**\n   * On Image Calibration, take all the annotation from the AnnotationState manager,\n   * and invalidate them to force them to be re-rendered and their stats to be recalculated.\n   * Then use the old and new imageData (non-calibrated and calibrated) to calculate the\n   * new position for the annotations in the space of the new imageData.\n   *\n   * @param evt - The calibration event\n   *\n   */\n  public onImageSpacingCalibrated = (\n    evt: Types.EventTypes.ImageSpacingCalibratedEvent\n  ) => {\n    const { element, imageId } = evt.detail;\n\n    const imageURI = utilities.imageIdToURI(imageId);\n    const annotationManager = getAnnotationManager();\n    const framesOfReference = annotationManager.getFramesOfReference();\n\n    // For each frame Of Reference\n    framesOfReference.forEach((frameOfReference) => {\n      const frameOfReferenceSpecificAnnotations =\n        annotationManager.getAnnotations(frameOfReference);\n\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[this.getToolName()];\n\n      if (!toolSpecificAnnotations || !toolSpecificAnnotations.length) {\n        return;\n      }\n\n      // for this specific tool\n      toolSpecificAnnotations.forEach((annotation) => {\n        // if the annotation is drawn on the same imageId\n        const referencedImageURI = utilities.imageIdToURI(\n          annotation.metadata.referencedImageId\n        );\n\n        if (referencedImageURI === imageURI) {\n          // make them invalid since the image has been calibrated so that\n          // we can update the cachedStats and also rendering\n          annotation.invalidated = true;\n          annotation.data.cachedStats = {};\n        }\n      });\n      triggerAnnotationRender(element);\n    });\n  };\n\n  protected getReferencedImageId(\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    worldPos: Types.Point3,\n    viewPlaneNormal: Types.Point3,\n    viewUp: Types.Point3\n  ): string {\n    const targetId = this.getTargetId(viewport);\n\n    let referencedImageId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    } else {\n      const volumeId = targetId.split('volumeId:')[1];\n      const imageVolume = cache.getVolume(volumeId);\n\n      referencedImageId = utilities.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    return referencedImageId;\n  }\n\n  /**\n   * It takes the property (color, lineDash, etc.) and based on the state of the\n   * annotation (selected, highlighted etc.) it returns the appropriate value\n   * based on the central toolStyle settings for each level of specification.\n   * @param property - The name of the style property to get.\n   * @param styleSpecifier - An object containing the specifications such as viewportId,\n   * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n   * met (hierarchy is checked from most specific to least specific which is\n   * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n   * @param annotation - The annotation for the tool that is\n   * currently active.\n   * @returns The value of the property.\n   */\n  public getStyle(\n    property: string,\n    specifications: StyleSpecifier,\n    annotation?: Annotation\n  ): unknown {\n    return getStyleProperty(\n      property,\n      specifications,\n      getState(annotation),\n      this.mode\n    );\n  }\n}\n\nAnnotationDisplayTool.toolName = 'AnnotationDisplayTool';\nexport default AnnotationDisplayTool;\n","import {\n  BaseVolumeViewport,\n  StackViewport,\n  cache,\n  getEnabledElement,\n  metaData,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { vec2 } from 'gl-matrix';\n\nimport AnnotationDisplayTool from './AnnotationDisplayTool';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  Annotation,\n  Annotations,\n  EventTypes,\n  ToolHandle,\n  InteractionTypes,\n} from '../../types';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\n/**\n * Abstract class for tools which create and display annotations on the\n * cornerstone3D canvas. In addition, it provides a base class for segmentation\n * tools that require drawing an annotation before running the segmentation strategy\n * for instance threshold segmentation based on an area and a threshold.\n * Annotation tools make use of drawing utilities to draw SVG elements on the viewport.\n *\n * To create a new annotation tool, derive from this class and implement the\n * abstract methods.\n */\nabstract class AnnotationTool extends AnnotationDisplayTool {\n  static toolName;\n  // ===================================================================\n  // Abstract Methods - Must be implemented.\n  // ===================================================================\n\n  /**\n   * @abstract addNewAnnotation Creates a new annotation based on the clicked mouse position\n   *\n   * @param evt - The normalized mouse event\n   * @param interactionType -  The interaction type used to add the annotation.\n   */\n  abstract addNewAnnotation(\n    evt: EventTypes.InteractionEventType,\n    interactionType: InteractionTypes\n  ): Annotation;\n\n  /**\n   * @abstract cancel Used to cancel the ongoing tool drawing and manipulation\n   *\n   */\n  abstract cancel(element: HTMLDivElement);\n\n  /**\n   * handleSelectedCallback Custom callback for when a handle is selected.\n   *\n   * @param evt - The normalized mouse event\n   * @param annotation - The annotation selected.\n   * @param handle - The selected handle (either Types.Point3 in space for annotations, or TextBoxHandle object for text boxes).\n   * @param interactionType - The interaction type the handle was selected with.\n   */\n  abstract handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    handle: ToolHandle,\n    interactionType: InteractionTypes\n  ): void;\n\n  /**\n   * Custom callback for when an annotation is selected\n   *\n   * @param evt - The normalized mouse event\n   * @param annotation - The `Annotation` to check.\n   * @param interactionType - The interaction type used to select the tool.\n   */\n  abstract toolSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    interactionType: InteractionTypes\n  ): void;\n\n  /**\n   * Returns true if the provided canvas coordinate tool is near the annotation\n   *\n   * @param element - The HTML element\n   * @param annotation - The annotation to check\n   * @param canvasCoords - The canvas coordinate to check\n   * @param proximity - The minimum proximity to consider the point near\n   * @param interactionType - The interaction type used to select the tool.\n   *\n   * @returns boolean if the point is near.\n   */\n  abstract isPointNearTool(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number,\n    interactionType: string\n  ): boolean;\n\n  /**\n   * @virtual Event handler for Cornerstone MOUSE_MOVE event.\n   *\n   *\n   * @param evt - The normalized mouse event\n   * @param filteredAnnotations - The annotations to check for hover interactions\n   * @returns True if the annotation needs to be re-drawn by the annotationRenderingEngine.\n   */\n  public mouseMoveCallback = (\n    evt: EventTypes.MouseMoveEventType,\n    filteredAnnotations?: Annotations\n  ): boolean => {\n    if (!filteredAnnotations) {\n      return false;\n    }\n\n    const { element, currentPoints } = evt.detail;\n    const canvasCoords = currentPoints.canvas;\n    let annotationsNeedToBeRedrawn = false;\n\n    for (const annotation of filteredAnnotations) {\n      // Do not do anything if the annotation is locked or hidden.\n      if (\n        isAnnotationLocked(annotation) ||\n        !isAnnotationVisible(annotation.annotationUID)\n      ) {\n        continue;\n      }\n\n      const { data } = annotation;\n      const activateHandleIndex = data.handles\n        ? data.handles.activeHandleIndex\n        : undefined;\n\n      // Perform tool specific imagePointNearToolOrHandle to determine if the mouse\n      // is near the tool or its handles or its textBox.\n      const near = this._imagePointNearToolOrHandle(\n        element,\n        annotation,\n        canvasCoords,\n        6 // Todo: This should come from the state\n      );\n\n      const nearToolAndNotMarkedActive = near && !annotation.highlighted;\n      const notNearToolAndMarkedActive = !near && annotation.highlighted;\n      if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n        annotation.highlighted = !annotation.highlighted;\n        annotationsNeedToBeRedrawn = true;\n      } else if (\n        data.handles &&\n        data.handles.activeHandleIndex !== activateHandleIndex\n      ) {\n        // Active handle index has changed, re-render.\n        annotationsNeedToBeRedrawn = true;\n      }\n    }\n\n    return annotationsNeedToBeRedrawn;\n  };\n\n  /**\n   * It checks if the mouse click is near TextBoxHandle or AnnotationHandle itself, and\n   * return either it. It prioritize TextBoxHandle over AnnotationHandle. If\n   * the mouse click is not near any of the handles, it does not return anything.\n   *\n   * @param element - The element that the tool is attached to.\n   * @param annotation - The annotation object associated with the annotation\n   * @param canvasCoords - The coordinates of the mouse click on canvas\n   * @param proximity - The distance from the mouse cursor to the point\n   * that is considered \"near\".\n   * @returns The handle that is closest to the cursor, or null if the cursor\n   * is not near any of the handles.\n   */\n  getHandleNearImagePoint(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): ToolHandle | undefined {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points, textBox } = data.handles;\n    const { worldBoundingBox } = textBox;\n\n    if (worldBoundingBox) {\n      const canvasBoundingBox = {\n        topLeft: viewport.worldToCanvas(worldBoundingBox.topLeft),\n        topRight: viewport.worldToCanvas(worldBoundingBox.topRight),\n        bottomLeft: viewport.worldToCanvas(worldBoundingBox.bottomLeft),\n        bottomRight: viewport.worldToCanvas(worldBoundingBox.bottomRight),\n      };\n\n      if (\n        canvasCoords[0] >= canvasBoundingBox.topLeft[0] &&\n        canvasCoords[0] <= canvasBoundingBox.bottomRight[0] &&\n        canvasCoords[1] >= canvasBoundingBox.topLeft[1] &&\n        canvasCoords[1] <= canvasBoundingBox.bottomRight[1]\n      ) {\n        data.handles.activeHandleIndex = null;\n        return textBox;\n      }\n    }\n\n    for (let i = 0; i < points.length; i++) {\n      const point = points[i];\n      const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n\n      const near =\n        vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n\n      if (near === true) {\n        data.handles.activeHandleIndex = i;\n        return point;\n      }\n    }\n\n    data.handles.activeHandleIndex = null;\n  }\n\n  /**\n   * It returns the style for the text box\n   * @param styleSpecifier - An object containing the specifications such as viewportId,\n   * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n   * met (hierarchy is checked from most specific to least specific which is\n   * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n   * @param annotation - The annotation for the tool that is\n   * currently active.\n   * @returns An object of the style settings for the text box.\n   */\n  public getLinkedTextBoxStyle(\n    specifications: StyleSpecifier,\n    annotation?: Annotation\n  ): Record<string, unknown> {\n    // Todo: this function can be used to set different styles for different toolMode\n    // for the textBox.\n\n    return {\n      fontFamily: this.getStyle(\n        'textBoxFontFamily',\n        specifications,\n        annotation\n      ),\n      fontSize: this.getStyle('textBoxFontSize', specifications, annotation),\n      color: this.getStyle('textBoxColor', specifications, annotation),\n      shadow: this.getStyle('textBoxShadow', specifications, annotation),\n      background: this.getStyle(\n        'textBoxBackground',\n        specifications,\n        annotation\n      ),\n      lineWidth: this.getStyle(\n        'textBoxLinkLineWidth',\n        specifications,\n        annotation\n      ),\n      lineDash: this.getStyle(\n        'textBoxLinkLineDash',\n        specifications,\n        annotation\n      ),\n    };\n  }\n\n  /**\n   * Returns true if the viewport is scaled to SUV units\n   * @param viewport - The viewport\n   * @param targetId - The annotation targetId\n   * @param imageId - The annotation imageId\n   * @returns\n   */\n  isSuvScaled(\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    targetId: string,\n    imageId?: string\n  ): boolean {\n    if (viewport instanceof BaseVolumeViewport) {\n      const volumeId = targetId.split('volumeId:')[1];\n      const volume = cache.getVolume(volumeId);\n      return volume.scaling?.PT !== undefined;\n    } else if (viewport instanceof StackViewport) {\n      const scalingModule: Types.ScalingParameters | undefined =\n        imageId && metaData.get('scalingModule', imageId);\n      return typeof scalingModule?.suvbw === 'number';\n    } else {\n      throw new Error('Viewport is not a valid type');\n    }\n  }\n\n  /**\n   * Returns true if the `canvasCoords` are near a handle or selectable part of the tool\n   *\n   * @param element - The HTML element\n   * @param annotation - The annotation to check\n   * @param canvasCoords - The canvas coordinates to check\n   * @param proximity - The proximity to consider\n   *\n   * @returns If the point is near.\n   */\n  private _imagePointNearToolOrHandle(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean {\n    // Based on the tool instance type, check if the point is near the tool handles\n    const handleNearImagePoint = this.getHandleNearImagePoint(\n      element,\n      annotation,\n      canvasCoords,\n      proximity\n    );\n\n    if (handleNearImagePoint) {\n      return true;\n    }\n\n    // If the point is not near the handles, check if the point is near the tool\n    const toolNewImagePoint = this.isPointNearTool(\n      element,\n      annotation,\n      canvasCoords,\n      proximity,\n      'mouse'\n    );\n\n    if (toolNewImagePoint) {\n      return true;\n    }\n  }\n}\n\nAnnotationTool.toolName = 'AnnotationTool';\nexport default AnnotationTool;\n","import {\n  getEnabledElementByIds,\n  Types,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { config as segmentationConfig } from '../../stateManagement/segmentation';\nimport { setSegmentationVisibility } from '../../stateManagement/segmentation/config/segmentationVisibility';\nimport { getSegmentationRepresentations } from '../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport { PublicToolProps, ToolProps } from '../../types';\nimport { BaseTool } from '../base';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../types/SegmentationStateTypes';\nimport { contourDisplay } from './Contour';\nimport { labelmapDisplay } from './Labelmap';\n\n/**\n * In Cornerstone3DTools, displaying of segmentations are handled by the SegmentationDisplayTool.\n * Generally, any Segmentation can be viewed in various representations such as\n * labelmap (3d), contours, surface etc. As of now, Cornerstone3DTools only implements\n * Labelmap representation.\n *\n * SegmentationDisplayTool works at ToolGroup level, and is responsible for displaying the\n * segmentation representation for ALL viewports of a toolGroup, this way we can support complex\n * scenarios for displaying segmentations.\n *\n * Current Limitations:\n * - Only supports rendering of the volumetric segmentations in 3D space. (StackViewport segmentations are not supported yet)\n * - Labelmap representation is the only supported representation for now.\n *\n * Similar to other tools in Cornerstone3DTools, the SegmentationDisplayTool should\n * be added to the CornerstoneTools by calling cornerstoneTools.addTool(SegmentationDisplayTool)\n * and a toolGroup should be created for it using the ToolGroupManager API, finally\n * viewports information such as viewportId and renderingEngineId should be provided\n * to the toolGroup and the SegmentationDisplayTool should be set to be activated.\n *\n *\n */\nclass SegmentationDisplayTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {},\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  onSetToolEnabled(): void {\n    const toolGroupId = this.toolGroupId;\n    const toolGroupSegmentationRepresentations =\n      getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      toolGroupSegmentationRepresentations.length === 0\n    ) {\n      return;\n    }\n\n    // for each segmentationData, make the visibility true\n    toolGroupSegmentationRepresentations.forEach(\n      (segmentationRepresentation) => {\n        setSegmentationVisibility(\n          toolGroupId,\n          segmentationRepresentation.segmentationRepresentationUID,\n          true\n        );\n      }\n    );\n  }\n\n  onSetToolDisabled(): void {\n    const toolGroupId = this.toolGroupId;\n    const toolGroupSegmentationRepresentations =\n      getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      toolGroupSegmentationRepresentations.length === 0\n    ) {\n      return;\n    }\n\n    // for each segmentationData, make the visibility false\n    toolGroupSegmentationRepresentations.forEach(\n      (segmentationRepresentation) => {\n        setSegmentationVisibility(\n          toolGroupId,\n          segmentationRepresentation.segmentationRepresentationUID,\n          false\n        );\n      }\n    );\n  }\n\n  /**\n   * It is used to trigger the render for each segmentations in the toolGroup.\n   * Based on the segmentation representation type, it will call the corresponding\n   * render function.\n   *\n   * @param toolGroupId - the toolGroupId\n   */\n  renderSegmentation = (toolGroupId: string): void => {\n    const toolGroup = getToolGroup(toolGroupId);\n\n    if (!toolGroup) {\n      return;\n    }\n\n    const toolGroupSegmentationRepresentations =\n      getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      toolGroupSegmentationRepresentations.length === 0\n    ) {\n      return;\n    }\n\n    // toolGroup Viewports\n    const toolGroupViewports = toolGroup.viewportsInfo.map(\n      ({ renderingEngineId, viewportId }) => {\n        const enabledElement = getEnabledElementByIds(\n          viewportId,\n          renderingEngineId\n        );\n\n        if (enabledElement) {\n          return enabledElement.viewport;\n        }\n      }\n    );\n\n    // Render each segmentationData, in each viewport in the toolGroup\n    const segmentationRenderList = toolGroupSegmentationRepresentations.map(\n      (representation: ToolGroupSpecificRepresentation) => {\n        const config = this._getMergedRepresentationsConfig(toolGroupId);\n\n        const viewportsRenderList = [];\n        for (const viewport of toolGroupViewports) {\n          if (representation.type == Representations.Labelmap) {\n            viewportsRenderList.push(\n              labelmapDisplay.render(\n                viewport as Types.IVolumeViewport,\n                representation,\n                config\n              )\n            );\n          } else if (representation.type == Representations.Contour) {\n            viewportsRenderList.push(\n              contourDisplay.render(\n                viewport as Types.IVolumeViewport,\n                representation,\n                config\n              )\n            );\n          }\n        }\n\n        return viewportsRenderList;\n      }\n    );\n\n    Promise.allSettled(segmentationRenderList).then(() => {\n      // for all viewports in the toolGroup trigger a re-render\n      toolGroupViewports.forEach((viewport) => {\n        viewport.render();\n      });\n    });\n  };\n\n  /**\n   * Merge the toolGroup specific configuration with the default global configuration\n   * @param toolGroupId\n   * @returns\n   */\n  _getMergedRepresentationsConfig(\n    toolGroupId: string\n  ): SegmentationRepresentationConfig {\n    const toolGroupConfig =\n      segmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n    const globalConfig = segmentationConfig.getGlobalConfig();\n\n    // merge two configurations and override the global config\n    const mergedConfig = csUtils.deepMerge(globalConfig, toolGroupConfig);\n\n    return mergedConfig;\n  }\n}\n\nSegmentationDisplayTool.toolName = 'SegmentationDisplay';\nexport default SegmentationDisplayTool;\n","import {\n  triggerEvent,\n  eventTarget,\n  getRenderingEngine,\n  Enums,\n  Types,\n} from '@cornerstonejs/core';\nimport { Events as csToolsEvents } from '../../enums';\nimport {\n  getToolGroup,\n  getToolGroupForViewport,\n} from '../../store/ToolGroupManager';\n\nimport SegmentationDisplayTool from '../../tools/displayTools/SegmentationDisplayTool';\nimport { SegmentationRenderedEventDetail } from '../../types/EventTypes';\n\n/**\n * SegmentationRenderingEngine is a class that is responsible for rendering\n * segmentations for a toolGroup. It will call SegmentationDisplayTool to render the segmentation\n * based on the segmentation data and their configurations. Note: This is a Singleton class\n * and should not be instantiated directly. To trigger a render for all the\n * segmentations of a tool group you can use.\n *\n * ```\n * triggerSegmentationRender(toolGroupId)\n * ```\n */\nclass SegmentationRenderingEngine {\n  private _needsRender: Set<string> = new Set();\n  private _animationFrameSet = false;\n  private _animationFrameHandle: number | null = null;\n  public hasBeenDestroyed: boolean;\n\n  public removeToolGroup(toolGroupId) {\n    this._needsRender.delete(toolGroupId);\n\n    if (this._needsRender.size === 0) {\n      this._reset();\n    }\n  }\n\n  public renderToolGroupSegmentations(toolGroupId): void {\n    this._setToolGroupSegmentationToBeRenderedNextFrame([toolGroupId]);\n  }\n\n  /**\n   *  _throwIfDestroyed Throws an error if trying to interact with the `RenderingEngine`\n   * instance after its `destroy` method has been called.\n   */\n  private _throwIfDestroyed() {\n    if (this.hasBeenDestroyed) {\n      throw new Error(\n        'this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.'\n      );\n    }\n  }\n\n  private _setToolGroupSegmentationToBeRenderedNextFrame(\n    toolGroupIds: string[]\n  ) {\n    // Add the viewports to the set of flagged viewports\n    toolGroupIds.forEach((toolGroupId) => {\n      this._needsRender.add(toolGroupId);\n    });\n\n    // Render any flagged viewports\n    this._render();\n  }\n\n  /**\n   *  _render Sets up animation frame if necessary\n   */\n  private _render() {\n    // If we have viewports that need rendering and we have not already\n    // set the RAF callback to run on the next frame.\n    if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n      this._animationFrameHandle = window.requestAnimationFrame(\n        this._renderFlaggedToolGroups\n      );\n\n      // Set the flag that we have already set up the next RAF call.\n      this._animationFrameSet = true;\n    }\n  }\n\n  private _renderFlaggedToolGroups = () => {\n    this._throwIfDestroyed();\n\n    // for each toolGroupId insides the _needsRender set, render the segmentation\n    const toolGroupIds = Array.from(this._needsRender.values());\n\n    for (const toolGroupId of toolGroupIds) {\n      this._triggerRender(toolGroupId);\n\n      // This viewport has been rendered, we can remove it from the set\n      this._needsRender.delete(toolGroupId);\n\n      // If there is nothing left that is flagged for rendering, stop here\n      // and allow RAF to be called again\n      if (this._needsRender.size === 0) {\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        return;\n      }\n    }\n  };\n  _triggerRender(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n\n    if (!toolGroup) {\n      console.warn(`No tool group found with toolGroupId: ${toolGroupId}`);\n      return;\n    }\n\n    const { viewportsInfo } = toolGroup;\n    const viewports = [];\n\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const renderingEngine = getRenderingEngine(renderingEngineId);\n\n      if (!renderingEngine) {\n        console.warn('rendering Engine has been destroyed');\n        return;\n      }\n\n      viewports.push(renderingEngine.getViewport(viewportId));\n    });\n\n    const segmentationDisplayToolInstance = toolGroup.getToolInstance(\n      SegmentationDisplayTool.toolName\n    ) as SegmentationDisplayTool;\n    if (!segmentationDisplayToolInstance) {\n      console.warn('No segmentation tool found inside', toolGroupId);\n      return;\n    }\n\n    function onSegmentationRender(evt: Types.EventTypes.ImageRenderedEvent) {\n      const { element, viewportId, renderingEngineId } = evt.detail;\n\n      element.removeEventListener(\n        Enums.Events.IMAGE_RENDERED,\n        onSegmentationRender as EventListener\n      );\n\n      const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n\n      if (!toolGroup) {\n        console.warn('toolGroup has been destroyed');\n        return;\n      }\n\n      const eventDetail: SegmentationRenderedEventDetail = {\n        toolGroupId: toolGroup.id,\n        viewportId,\n      };\n\n      triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n        ...eventDetail,\n      });\n    }\n\n    // Todo: for other representations we probably need the drawSVG, but right now we are not using it\n    // drawSvg(element, (svgDrawingHelper) => {\n    //   const handleDrawSvg = (tool) => {\n    //     if (tool instanceof SegmentationDisplayTool && tool.renderAnnotation) {\n    //       tool.renderAnnotation({ detail: eventDetail })\n    //       triggerEvent(element, csToolsEvents.SEGMENTATION_RENDERED, { ...eventDetail })\n    //     }\n    //   }\n    //   enabledTools.forEach(handleDrawSvg)\n    // })\n\n    viewports.forEach(({ element }) => {\n      element.addEventListener(\n        Enums.Events.IMAGE_RENDERED,\n        onSegmentationRender\n      );\n    });\n\n    segmentationDisplayToolInstance.renderSegmentation(toolGroupId);\n  }\n\n  /**\n   *  _reset Resets the `RenderingEngine`\n   */\n  private _reset() {\n    window.cancelAnimationFrame(this._animationFrameHandle);\n\n    this._needsRender.clear();\n    this._animationFrameSet = false;\n    this._animationFrameHandle = null;\n  }\n}\n\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\n\n/**\n * It triggers a render for all the segmentations of the tool group with the given Id.\n * @param toolGroupId - The Id of the tool group to render.\n */\nfunction triggerSegmentationRender(toolGroupId: string): void {\n  segmentationRenderingEngine.renderToolGroupSegmentations(toolGroupId);\n}\n\nexport { segmentationRenderingEngine, triggerSegmentationRender };\nexport default triggerSegmentationRender;\n","import triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport { SegmentationRepresentationModifiedEventType } from '../../types/EventTypes';\n\n/** A function that listens to the `segmentationStateModified` event and triggers\n * the `triggerSegmentationRender` function. This function is called when the\n * segmentation state or config is modified.\n */\nconst segmentationRepresentationModifiedListener = function (\n  evt: SegmentationRepresentationModifiedEventType\n): void {\n  const { toolGroupId } = evt.detail;\n  triggerSegmentationRender(toolGroupId);\n};\n\nexport default segmentationRepresentationModifiedListener;\n","import { cache } from '@cornerstonejs/core';\n\nimport triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../stateManagement/segmentation/segmentationState';\nimport { SegmentationDataModifiedEventType } from '../../types/EventTypes';\n\n/** A callback function that is called when the segmentation data is modified which\n *  often is as a result of tool interactions e.g., scissors, eraser, etc.\n */\nconst onSegmentationDataModified = function (\n  evt: SegmentationDataModifiedEventType\n): void {\n  const { segmentationId, modifiedSlicesToUse } = evt.detail;\n\n  const { representationData, type } =\n    SegmentationState.getSegmentation(segmentationId);\n\n  let toolGroupIds;\n  if (type === SegmentationRepresentations.Labelmap) {\n    // get the volume from cache, we need the openGLTexture to be updated to GPU\n    const segmentationVolume = cache.getVolume(\n      representationData[type].volumeId\n    );\n\n    if (!segmentationVolume) {\n      console.warn('segmentation not found in cache');\n      return;\n    }\n\n    const { imageData, vtkOpenGLTexture } = segmentationVolume;\n\n    // Update the texture for the volume in the GPU\n    let slicesToUpdate;\n    if (modifiedSlicesToUse && Array.isArray(modifiedSlicesToUse)) {\n      slicesToUpdate = modifiedSlicesToUse;\n    } else {\n      const numSlices = imageData.getDimensions()[2];\n      slicesToUpdate = [...Array(numSlices).keys()];\n    }\n\n    slicesToUpdate.forEach((i) => {\n      vtkOpenGLTexture.setUpdatedFrame(i);\n    });\n\n    // Trigger modified on the imageData to update the image\n    imageData.modified();\n    toolGroupIds =\n      SegmentationState.getToolGroupIdsWithSegmentation(segmentationId);\n  } else {\n    throw new Error(\n      `onSegmentationDataModified: representationType ${type} not supported yet`\n    );\n  }\n\n  toolGroupIds.forEach((toolGroupId) => {\n    triggerSegmentationRender(toolGroupId);\n  });\n};\n\nexport default onSegmentationDataModified;\n","import triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport { SegmentationRepresentationRemovedEventType } from '../../types/EventTypes';\n\n/** A function that listens to the `segmentationRepresentationRemoved` event and triggers\n * the `triggerSegmentationRender` function. This function is called when the\n * segmentation state or config is modified.\n */\nconst segmentationRepresentationRemovedEventListener = function (\n  evt: SegmentationRepresentationRemovedEventType\n): void {\n  const { toolGroupId, segmentationRepresentationUID } = evt.detail;\n\n  triggerSegmentationRender(toolGroupId);\n};\n\nexport default segmentationRepresentationRemovedEventListener;\n","import { SegmentationModifiedEventType } from '../../types/EventTypes';\nimport {\n  getToolGroupIdsWithSegmentation,\n  getSegmentationRepresentations,\n} from '../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationRepresentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\n\n/** A function that listens to the `segmentationModified` event and triggers\n * the triggerSegmentationRepresentationModified on each toolGroup that\n * has a representation of the given segmentationId.\n */\nconst segmentationModifiedListener = function (\n  evt: SegmentationModifiedEventType\n): void {\n  const { segmentationId } = evt.detail;\n\n  const toolGroupIds = getToolGroupIdsWithSegmentation(segmentationId);\n\n  toolGroupIds.forEach((toolGroupId) => {\n    const segRepresentations = getSegmentationRepresentations(toolGroupId);\n    segRepresentations.forEach((representation) => {\n      if (representation.segmentationId === segmentationId) {\n        triggerSegmentationRepresentationModified(\n          toolGroupId,\n          representation.segmentationRepresentationUID\n        );\n      }\n    });\n  });\n};\n\nexport default segmentationModifiedListener;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool, BaseTool } from '../tools';\nimport { Annotation } from '../types';\nimport { getAnnotations } from '../stateManagement/annotation/annotationState';\nimport * as ToolGroupManager from '../store/ToolGroupManager';\n\n/**\n * Get the annotation that is close to the provided canvas point, it will return\n * the first annotation that is found.\n *\n * @param element - The element to search for an annotation on.\n * @param canvasPoint - The canvasPoint on the page where the user clicked.\n * @param proximity - The distance from the canvasPoint to the annotation.\n * @returns The annotation for the element\n */\nfunction getAnnotationNearPoint(\n  element: HTMLDivElement,\n  canvasPoint: Types.Point2,\n  proximity = 5\n): Annotation | null {\n  // Todo: this function should return closest annotation, BUT, we are not using\n  // the function anywhere.\n  const enabledElement = getEnabledElement(element);\n  if (!enabledElement) {\n    throw new Error('getAnnotationNearPoint: enabledElement not found');\n  }\n\n  return getAnnotationNearPointOnEnabledElement(\n    enabledElement,\n    canvasPoint,\n    proximity\n  );\n}\n\n/**\n * \"Find the annotation near the point on the enabled element.\" it will return the\n * first annotation that is found.\n *\n * @param enabledElement - The element that is currently active.\n * @param point - The point to search near.\n * @param proximity - The distance from the point that the annotation must\n * be within.\n * @returns A Annotation object.\n */\nfunction getAnnotationNearPointOnEnabledElement(\n  enabledElement: Types.IEnabledElement,\n  point: Types.Point2,\n  proximity: number\n): Annotation | null {\n  // Todo: this function should return closest annotation, BUT, we are not using\n  // the function anywhere.\n  const { renderingEngineId, viewportId } = enabledElement;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const { _toolInstances: tools } = toolGroup;\n  for (const name in tools) {\n    const found = findAnnotationNearPointByTool(\n      tools[name],\n      enabledElement,\n      point,\n      proximity\n    );\n    if (found) {\n      return found;\n    }\n  }\n\n  return null;\n}\n\n/**\n * For the provided toolClass, it will find the annotation that is near the point,\n * it will return the first annotation that is found.\n *\n * @param tool - AnnotationTool\n * @param enabledElement - The element that is currently active.\n * @param point - The point in the image where the user clicked.\n * @param proximity - The distance from the point that the tool must be\n * within to be considered \"near\" the point.\n * @returns The annotation object that is being returned is the annotation object that\n * is being used in the tool.\n */\nfunction findAnnotationNearPointByTool(\n  tool: AnnotationTool,\n  enabledElement: Types.IEnabledElement,\n  point: Types.Point2,\n  proximity: number\n): Annotation | null {\n  // Todo: this function does not return closest annotation. It just returns\n  // the first annotation that is found in the proximity. BUT, we are not using\n  // the function anywhere.\n  const { viewport } = enabledElement;\n\n  const annotations = getAnnotations(\n    (tool.constructor as typeof BaseTool).toolName,\n    viewport?.element\n  );\n  const currentId = viewport?.getCurrentImageId?.();\n  if (annotations?.length) {\n    const { element } = enabledElement.viewport;\n    for (const annotation of annotations) {\n      const referencedImageId = annotation.metadata?.referencedImageId;\n      if (\n        (currentId && referencedImageId && currentId !== referencedImageId) ||\n        !tool.isPointNearTool\n      ) {\n        continue;\n      }\n\n      if (\n        tool.isPointNearTool(element, annotation, point, proximity, '') ||\n        tool.getHandleNearImagePoint(element, annotation, point, proximity)\n      ) {\n        return annotation;\n      }\n    }\n  }\n  return null;\n}\n\nexport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement };\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @since 0.1.0\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * isObject({})\n * // => true\n *\n * isObject([1, 2, 3])\n * // => true\n *\n * isObject(Function)\n * // => true\n *\n * isObject(null)\n * // => false\n */\nfunction isObject(value) {\n  const type = typeof value;\n\n  return value !== null && (type === 'object' || type === 'function');\n}\n\nexport default isObject;\n","import isObject from './isObject';\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }))\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * jQuery(source).on('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nfunction debounce(func, wait, options) {\n  let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;\n\n  let lastInvokeTime = 0;\n  let leading = false;\n  let maxing = false;\n  let trailing = true;\n\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  const useRAF =\n    !wait && wait !== 0 && typeof window.requestAnimationFrame === 'function';\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n  wait = Number(wait) || 0;\n  if (isObject(options)) {\n    leading = Boolean(options.leading);\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n  }\n\n  function invokeFunc(time) {\n    const args = lastArgs;\n    const thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n\n    return result;\n  }\n\n  function startTimer(pendingFunc, wait) {\n    if (useRAF) {\n      return window.requestAnimationFrame(pendingFunc);\n    }\n\n    return setTimeout(pendingFunc, wait);\n  }\n\n  function cancelTimer(id) {\n    if (useRAF) {\n      return window.cancelAnimationFrame(id);\n    }\n    clearTimeout(id);\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = startTimer(timerExpired, wait);\n\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    const timeSinceLastCall = time - lastCallTime;\n    const timeSinceLastInvoke = time - lastInvokeTime;\n    const timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    const timeSinceLastCall = time - lastCallTime;\n    const timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (\n      lastCallTime === undefined ||\n      timeSinceLastCall >= wait ||\n      timeSinceLastCall < 0 ||\n      (maxing && timeSinceLastInvoke >= maxWait)\n    );\n  }\n\n  function timerExpired() {\n    const time = Date.now();\n\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = startTimer(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      cancelTimer(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(Date.now());\n  }\n\n  function pending() {\n    return timerId !== undefined;\n  }\n\n  function debounced(...args) {\n    const time = Date.now();\n    const isInvoking = shouldInvoke(time);\n\n    lastArgs = args;\n    lastThis = this; // eslint-disable-line consistent-this\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = startTimer(timerExpired, wait);\n\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = startTimer(timerExpired, wait);\n    }\n\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  debounced.pending = pending;\n\n  return debounced;\n}\n\nexport default debounce;\n","import debounce from './debounce';\nimport isObject from './isObject';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds (or once per browser frame). The throttled function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `throttle` and `debounce`.\n *\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0]\n *  The number of milliseconds to throttle invocations to; if omitted,\n *  `requestAnimationFrame` is used (if available).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', throttle(updatePosition, 100))\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * const throttled = throttle(renewToken, 300000, { 'trailing': false })\n * jQuery(element).on('click', throttled)\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel)\n */\nfunction throttle(func, wait, options) {\n  let leading = true;\n  let trailing = true;\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? Boolean(options.leading) : leading;\n    trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n  }\n\n  return debounce(func, wait, {\n    leading,\n    trailing,\n    maxWait: wait,\n  });\n}\n\nexport default throttle;\n","/**\n * Clips a value to an upper and lower bound.\n * @export @public @method\n * @name clip\n *\n * @param  {number} val  The value to clip.\n * @param  {number} low  The lower bound.\n * @param  {number} high The upper bound.\n * @returns {number}      The clipped value.\n */\nexport function clip(val, low, high) {\n  return Math.min(Math.max(low, val), high);\n}\n\n/**\n * Clips a value within a box.\n * @export @public @method\n * @name clipToBox\n *\n * @param  {Object} point The point to clip\n * @param  {Object} box   The bounding box to clip to.\n * @returns {Object}       The clipped point.\n */\nexport function clipToBox(point, box) {\n  // Clip an {x, y} point to a box of size {width, height}\n  point.x = clip(point.x, 0, box.width);\n  point.y = clip(point.y, 0, box.height);\n}\n\nexport default clip;\n","import { utilities, Enums } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nconst { calibratedPixelSpacingMetadataProvider } = utilities;\n\n/**\n * It adds the provided spacing to the Cornerstone internal calibratedPixelSpacing\n * metadata provider, then it invalidates all the tools that have the imageId as\n * their reference imageIds. Finally, it triggers a re-render for invalidated annotations.\n * @param imageId - ImageId for the calibrated image\n * @param rowPixelSpacing - Spacing in row direction\n * @param calibrationOrScale - either the calibration object or a scale value\n */\nexport default function calibrateImageSpacing(\n  imageId: string,\n  renderingEngine: Types.IRenderingEngine,\n  calibrationOrScale: Types.IImageCalibration | number\n): void {\n  // Handle simple parameter version\n  if (typeof calibrationOrScale === 'number') {\n    calibrationOrScale = {\n      type: Enums.CalibrationTypes.USER,\n      scale: calibrationOrScale,\n    };\n  }\n  // 1. Add the calibratedPixelSpacing metadata to the metadata\n  calibratedPixelSpacingMetadataProvider.add(imageId, calibrationOrScale);\n\n  // 2. Update the actor for stackViewports\n  const viewports = renderingEngine.getStackViewports();\n\n  // 2.1 If imageId is already being used in a stackViewport -> update actor\n  viewports.forEach((viewport) => {\n    const imageIds = viewport.getImageIds();\n    if (imageIds.includes(imageId)) {\n      viewport.calibrateSpacing(imageId);\n    }\n  });\n\n  // 2.2 If imageId is cached but not being displayed in a viewport, stackViewport\n  // will handle using the calibratedPixelSpacing since it has been added\n  // to the provider\n}\n","import type { Types } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\n\nexport function triggerAnnotationRenderForViewportIds(\n  renderingEngine: Types.IRenderingEngine,\n  viewportIdsToRender: string[]\n): void {\n  if (!viewportIdsToRender.length) {\n    return;\n  }\n\n  viewportIdsToRender.forEach((viewportId) => {\n    const { element } = renderingEngine.getViewport(viewportId);\n    triggerAnnotationRender(element);\n  });\n}\n\nexport default triggerAnnotationRenderForViewportIds;\n","import {\n  StackViewport,\n  Types,\n  VolumeViewport,\n  eventTarget,\n  EVENTS,\n  utilities as csUtils,\n  getEnabledElement,\n} from '@cornerstonejs/core';\nimport { ScrollOptions, EventTypes } from '../types';\n\n/**\n * It scrolls one slice in the Stack or Volume Viewport, it uses the options provided\n * to determine the slice to scroll to. For Stack Viewport, it scrolls in the 1 or -1\n * direction, for Volume Viewport, it uses the camera and focal point to determine the\n * slice to scroll to based on the spacings.\n * @param viewport - The viewport in which to scroll\n * @param options - Options to use for scrolling, including direction, invert, and volumeId\n * @returns\n */\nexport default function scroll(\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  options: ScrollOptions\n): void {\n  // check if viewport is disabled then throw error\n  const enabledElement = getEnabledElement(viewport.element);\n\n  if (!enabledElement) {\n    throw new Error('Scroll::Viewport is not enabled (it might be disabled)');\n  }\n\n  if (\n    viewport instanceof StackViewport &&\n    viewport.getImageIds().length === 0\n  ) {\n    throw new Error('Scroll::Stack Viewport has no images');\n  }\n\n  const { type: viewportType } = viewport;\n  const { volumeId, delta } = options;\n\n  if (viewport instanceof StackViewport) {\n    viewport.scroll(delta, options.debounceLoading, options.loop);\n  } else if (viewport instanceof VolumeViewport) {\n    scrollVolume(viewport, volumeId, delta);\n  } else {\n    throw new Error(`Not implemented for Viewport Type: ${viewportType}`);\n  }\n}\n\nexport function scrollVolume(\n  viewport: VolumeViewport,\n  volumeId: string,\n  delta: number\n) {\n  const { numScrollSteps, currentStepIndex, sliceRangeInfo } =\n    csUtils.getVolumeViewportScrollInfo(viewport, volumeId);\n\n  if (!sliceRangeInfo) {\n    return;\n  }\n\n  const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;\n  const { focalPoint, viewPlaneNormal, position } = camera;\n\n  const { newFocalPoint, newPosition } = csUtils.snapFocalPointToSlice(\n    focalPoint,\n    position,\n    sliceRange,\n    viewPlaneNormal,\n    spacingInNormalDirection,\n    delta\n  );\n\n  viewport.setCamera({\n    focalPoint: newFocalPoint,\n    position: newPosition,\n  });\n  viewport.render();\n\n  const desiredStepIndex = currentStepIndex + delta;\n\n  if (\n    (desiredStepIndex > numScrollSteps || desiredStepIndex < 0) &&\n    viewport.getCurrentImageId() // Check that we are in the plane of acquistion\n  ) {\n    // One common use case of this trigger might be to load the next\n    // volume in a time series or the next segment of a partially loaded volume.\n\n    const VolumeScrollEventDetail = {\n      volumeId,\n      viewport,\n      delta,\n      desiredStepIndex,\n      currentStepIndex,\n      numScrollSteps,\n      currentImageId: viewport.getCurrentImageId(),\n    };\n\n    csUtils.triggerEvent(\n      eventTarget,\n      EVENTS.VOLUME_SCROLL_OUT_OF_BOUNDS,\n      VolumeScrollEventDetail as EventTypes.VolumeScrollOutOfBoundsEventDetail\n    );\n  }\n}\n","import {\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  utilities as csUtils,\n  Types,\n} from '@cornerstonejs/core';\nimport JumpToSliceOptions from '../../types/JumpToSliceOptions';\nimport clip from '../clip';\nimport scroll from '../scroll';\n\n/**\n * It uses the imageIndex in the Options to scroll to the slice that is intended.\n * It works for both Stack and Volume viewports. In VolumeViewports, the imageIndex\n * should be given with respect to the index in the 3D image in the view direction\n * (i.e. the index of the slice in Axial, Sagittal, Coronal, or Oblique).\n *\n * @param element - the HTML Div element scrolling inside\n * @param options - the options used for jumping to a slice\n * @returns Promise that resolves to ImageIdIndex\n */\nasync function jumpToSlice(\n  element: HTMLDivElement,\n  options = {} as JumpToSliceOptions\n): Promise<void> {\n  const { imageIndex, debounceLoading, volumeId } = options;\n  const enabledElement = getEnabledElement(element);\n\n  if (!enabledElement) {\n    throw new Error('Element has been disabled');\n  }\n\n  const { viewport } = enabledElement;\n\n  const { imageIndex: currentImageIndex, numberOfSlices } = _getImageSliceData(\n    viewport,\n    debounceLoading\n  );\n\n  const imageIndexToJump = _getImageIndexToJump(numberOfSlices, imageIndex);\n  const delta = imageIndexToJump - currentImageIndex;\n\n  scroll(viewport, { delta, debounceLoading, volumeId });\n}\n\nfunction _getImageSliceData(\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  debounceLoading?: boolean\n): Types.ImageSliceData {\n  if (viewport instanceof StackViewport) {\n    return {\n      numberOfSlices: viewport.getImageIds().length,\n      imageIndex: debounceLoading\n        ? viewport.getTargetImageIdIndex()\n        : viewport.getCurrentImageIdIndex(),\n    };\n  } else if (viewport instanceof VolumeViewport) {\n    return csUtils.getImageSliceDataForVolumeViewport(viewport);\n  } else {\n    throw new Error('Unsupported viewport type');\n  }\n}\n\nfunction _getImageIndexToJump(\n  numberOfSlices: number,\n  imageIndex: number\n): number {\n  const lastSliceIndex = numberOfSlices - 1;\n\n  return clip(imageIndex, 0, lastSliceIndex);\n}\n\nexport default jumpToSlice;\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\nimport type { vtkImageData } from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport BoundsIJK from '../types/BoundsIJK';\n\nexport type PointInShapeCallback = ({\n  value,\n  index,\n  pointIJK,\n  pointLPS,\n}: {\n  value: number;\n  index: number;\n  pointIJK: Types.Point3;\n  pointLPS: Types.Point3;\n}) => void;\n\nexport type ShapeFnCriteria = (\n  pointIJK: Types.Point3,\n  pointLPS: Types.Point3\n) => boolean;\n\n/**\n * For each point in the image (If boundsIJK is not provided, otherwise, for each\n * point in the provided bounding box), It runs the provided callback IF the point\n * passes the provided criteria to be inside the shape (which is defined by the\n * provided pointInShapeFn)\n *\n * @param imageData - The image data object.\n * @param dimensions - The dimensions of the image.\n * @param pointInShapeFn - A function that takes a point in LPS space and returns\n * true if the point is in the shape and false if it is not.\n * @param callback - A function that will be called for\n * every point in the shape.\n * @param boundsIJK - The bounds of the volume in IJK coordinates.\n */\nexport default function pointInShapeCallback(\n  imageData: vtkImageData | Types.CPUImageData,\n  pointInShapeFn: ShapeFnCriteria,\n  callback: PointInShapeCallback,\n  boundsIJK?: BoundsIJK\n): void {\n  let iMin, iMax, jMin, jMax, kMin, kMax;\n\n  let scalarData;\n\n  // if getScalarData is a method on imageData\n  if ((imageData as Types.CPUImageData).getScalarData) {\n    scalarData = (imageData as Types.CPUImageData).getScalarData();\n  } else {\n    scalarData = (imageData as vtkImageData)\n      .getPointData()\n      .getScalars()\n      .getData();\n  }\n\n  const dimensions = imageData.getDimensions();\n\n  if (!boundsIJK) {\n    iMin = 0;\n    iMax = dimensions[0];\n    jMin = 0;\n    jMax = dimensions[1];\n    kMin = 0;\n    kMax = dimensions[2];\n  } else {\n    [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = boundsIJK;\n  }\n\n  const start = vec3.fromValues(iMin, jMin, kMin);\n\n  const direction = imageData.getDirection();\n  const rowCosines = direction.slice(0, 3);\n  const columnCosines = direction.slice(3, 6);\n  const scanAxisNormal = direction.slice(6, 9);\n\n  const spacing = imageData.getSpacing();\n  const [rowSpacing, columnSpacing, scanAxisSpacing] = spacing;\n\n  // @ts-ignore will be fixed in vtk-master\n  const worldPosStart = imageData.indexToWorld(start);\n\n  const rowStep = vec3.fromValues(\n    rowCosines[0] * rowSpacing,\n    rowCosines[1] * rowSpacing,\n    rowCosines[2] * rowSpacing\n  );\n\n  const columnStep = vec3.fromValues(\n    columnCosines[0] * columnSpacing,\n    columnCosines[1] * columnSpacing,\n    columnCosines[2] * columnSpacing\n  );\n\n  const scanAxisStep = vec3.fromValues(\n    scanAxisNormal[0] * scanAxisSpacing,\n    scanAxisNormal[1] * scanAxisSpacing,\n    scanAxisNormal[2] * scanAxisSpacing\n  );\n\n  const yMultiple = dimensions[0];\n  const zMultiple = dimensions[0] * dimensions[1];\n\n  for (let k = kMin; k <= kMax; k++) {\n    for (let j = jMin; j <= jMax; j++) {\n      for (let i = iMin; i <= iMax; i++) {\n        const pointIJK: Types.Point3 = [i, j, k];\n        const dI = i - iMin;\n        const dJ = j - jMin;\n        const dK = k - kMin;\n\n        const startWorld = worldPosStart;\n\n        const pointLPS: Types.Point3 = [\n          startWorld[0] +\n            dI * rowStep[0] +\n            dJ * columnStep[0] +\n            dK * scanAxisStep[0],\n          startWorld[1] +\n            dI * rowStep[1] +\n            dJ * columnStep[1] +\n            dK * scanAxisStep[1],\n          startWorld[2] +\n            dI * rowStep[2] +\n            dJ * columnStep[2] +\n            dK * scanAxisStep[2],\n        ];\n\n        if (pointInShapeFn(pointLPS, pointIJK)) {\n          const index = k * zMultiple + j * yMultiple + i;\n          const value = scalarData[index];\n\n          callback({ value, index, pointIJK, pointLPS });\n        }\n      }\n    }\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Uses the current bounds of the 2D rectangle and extends it in the view axis by numSlices\n * It compares min and max of each IJK to find the view axis (for axial, zMin === zMax) and\n * then calculates the extended range. It will assume the slice is relative to the\n * current slice and will add the given slices to the current max of the boundingBox.\n * @param boundsIJK - [[iMin, iMax], [jMin, jMax], [kMin, kMax]]\n * @param slices - number of slices to project before and after\n * @returns extended bounds\n */\nfunction extend2DBoundingBoxInViewAxis(\n  boundsIJK: [Types.Point2, Types.Point2, Types.Point2],\n  numSlicesToProject: number\n): [Types.Point2, Types.Point2, Types.Point2] {\n  // find which index in boundsIJK has the same first and last value\n  const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);\n\n  if (sliceNormalIndex === -1) {\n    throw new Error('3D bounding boxes not supported in an oblique plane');\n  }\n\n  // get the index and subtract slices from the min and add to the max\n  boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;\n  boundsIJK[sliceNormalIndex][1] += numSlicesToProject;\n  return boundsIJK;\n}\n\nexport default extend2DBoundingBoxInViewAxis;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * With a given vertices (points) coordinates in IJK, it calculates the minimum and maximum\n * coordinate in each axis, and returns them. If dimensions are provided it also\n * clip the min, max to the provided width, height and depth\n *\n * @param points - shape corner points coordinates (IJK)\n * @param dimensions - dimensions of the image\n * @returns [[xMin,xMax],[yMin,yMax], [zMin,zMax]]\n */\nfunction getBoundingBoxAroundShape(\n  points: Types.Point3[],\n  dimensions?: Types.Point3\n): [Types.Point2, Types.Point2, Types.Point2] {\n  let xMin = Infinity;\n  let xMax = 0;\n  let yMin = Infinity;\n  let yMax = 0;\n  let zMin = Infinity;\n  let zMax = 0;\n\n  points.forEach((p) => {\n    xMin = Math.min(p[0], xMin);\n    xMax = Math.max(p[0], xMax);\n    yMin = Math.min(p[1], yMin);\n    yMax = Math.max(p[1], yMax);\n    zMin = Math.min(p[2], zMin);\n    zMax = Math.max(p[2], zMax);\n  });\n\n  xMin = Math.floor(xMin);\n  xMax = Math.floor(xMax);\n  yMin = Math.floor(yMin);\n  yMax = Math.floor(yMax);\n  zMin = Math.floor(zMin);\n  zMax = Math.floor(zMax);\n\n  if (dimensions) {\n    // clip the min, max to the provided width, height and depth\n    const [width, height, depth] = dimensions;\n    xMin = Math.max(0, xMin);\n    xMax = Math.min(width - 1, xMax);\n    yMin = Math.max(0, yMin);\n    yMax = Math.min(height - 1, yMax);\n    zMin = Math.max(0, zMin);\n    zMax = Math.min(depth - 1, zMax);\n  }\n\n  return [\n    [xMin, xMax],\n    [yMin, yMax],\n    [zMin, zMax],\n  ];\n}\n\nexport default getBoundingBoxAroundShape;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport type { vtkImageData } from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { vec3 } from 'gl-matrix';\nimport { pointInSphere } from './math/sphere';\nimport pointInShapeCallback, {\n  PointInShapeCallback,\n} from './pointInShapeCallback';\nimport { BoundsIJK } from '../types';\nimport { getBoundingBoxAroundShape } from './boundingBox';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * Given an imageData, and the great circle top and bottom points of a sphere,\n * this function will run the callback for each point of the imageData that is\n * within the sphere defined by the great circle points. If the viewport\n * is provided, region of interest will be an accurate approximation of the\n * sphere (using viewport camera), and the resulting performance will be\n * better.\n *\n * @privateRemarks great circle also known as orthodrome is the intersection of\n * the sphere and the plane that passes through the center of the sphere\n *\n * @param imageData - The volume imageData\n * @param circlePoints - bottom and top points of the great circle in world coordinates\n * @param callback - A callback function that will be called for each point in the shape.\n */\nexport default function pointInSurroundingSphereCallback(\n  imageData: vtkImageData,\n  circlePoints: [Types.Point3, Types.Point3],\n  callback: PointInShapeCallback,\n  viewport?: Types.IVolumeViewport\n): void {\n  // We can run the sphere equation to determine if a point is inside\n  // the sphere; however, since the imageData dimensions can be quite large, we\n  // can narrow down the search by estimating the bounds of the sphere in index\n  // space.\n  const { boundsIJK, centerWorld, radiusWorld } = _getBounds(\n    circlePoints,\n    imageData,\n    viewport\n  );\n\n  const sphereObj = {\n    center: centerWorld,\n    radius: radiusWorld,\n  };\n\n  pointInShapeCallback(\n    imageData,\n    (pointLPS) => pointInSphere(sphereObj, pointLPS),\n    callback,\n    boundsIJK\n  );\n}\n\nfunction _getBounds(\n  circlePoints: [Types.Point3, Types.Point3],\n  imageData: vtkImageData,\n  viewport\n): {\n  boundsIJK: BoundsIJK;\n  centerWorld: Types.Point3;\n  radiusWorld: number;\n} {\n  const [bottom, top] = circlePoints;\n\n  // Sphere center in world\n  const centerWorld = vec3.fromValues(\n    (bottom[0] + top[0]) / 2,\n    (bottom[1] + top[1]) / 2,\n    (bottom[2] + top[2]) / 2\n  );\n\n  // sphere radius in world\n  const radiusWorld = vec3.distance(bottom, top) / 2;\n\n  let boundsIJK;\n\n  if (!viewport) {\n    // If no viewport is provide (no camera), we can estimate the bounding box\n    // of the sphere in index space.\n    // This is done by calculating the maximum value for radius in the index\n    // space (since the radius is in world space, we need to convert it to index, and\n    // each dimensions can have a different scale factor). Therefore, by finding\n    // the minimum spacing value in the imageData, we can calculate the maximum\n    // radius in index space and use that to calculate the bounds of the sphere\n    // This will not be accurate, but it is a good first approximation.\n    // sphere center in index\n    const centerIJK = transformWorldToIndex(\n      imageData,\n      centerWorld as Types.Point3\n    );\n\n    const spacings = imageData.getSpacing();\n    const minSpacing = Math.min(...spacings);\n\n    const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);\n\n    boundsIJK = [\n      [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],\n      [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],\n      [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK],\n    ];\n\n    return {\n      boundsIJK,\n      centerWorld: centerWorld as Types.Point3,\n      radiusWorld,\n    };\n  }\n\n  boundsIJK = _computeBoundsIJKWithCamera(\n    imageData,\n    viewport,\n    circlePoints,\n    centerWorld,\n    radiusWorld\n  );\n\n  return {\n    boundsIJK,\n    centerWorld: centerWorld as Types.Point3,\n    radiusWorld,\n  };\n}\n\nfunction _computeBoundsIJKWithCamera(\n  imageData,\n  viewport,\n  circlePoints,\n  centerWorld,\n  radiusWorld\n) {\n  const [bottom, top] = circlePoints;\n\n  const dimensions = imageData.getDimensions() as Types.Point3;\n  const camera = viewport.getCamera();\n\n  // Calculate viewRight from the camera, this will get used in order to\n  // calculate circles topLeft and bottomRight on different planes of intersection\n  // between sphere and viewPlane\n  const viewUp = vec3.fromValues(\n    camera.viewUp[0],\n    camera.viewUp[1],\n    camera.viewUp[2]\n  );\n  const viewPlaneNormal = vec3.fromValues(\n    camera.viewPlaneNormal[0],\n    camera.viewPlaneNormal[1],\n    camera.viewPlaneNormal[2]\n  );\n  const viewRight = vec3.create();\n\n  vec3.cross(viewRight, viewUp, viewPlaneNormal);\n\n  // we need to find the bounding box of the sphere in the image, e.g., the\n  // topLeftWorld and bottomRightWorld points of the bounding box.\n  // We go from the sphereCenter in the normal direction of amount radius, and\n  // we go left to find the topLeftWorld point of the bounding box. Next we go\n  // in the opposite direction and go right to find the bottomRightWorld point\n  // of the bounding box.\n  const topLeftWorld = vec3.create();\n  const bottomRightWorld = vec3.create();\n\n  vec3.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);\n  vec3.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);\n\n  // go in the direction of viewRight with the value of radius\n  vec3.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);\n  vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);\n\n  // convert the world coordinates to index coordinates\n\n  const sphereCornersIJK = [\n    <Types.Point3>transformWorldToIndex(imageData, <Types.Point3>topLeftWorld),\n    <Types.Point3>(\n      transformWorldToIndex(imageData, <Types.Point3>bottomRightWorld)\n    ),\n  ];\n\n  // get the bounding box of the sphere in the image\n  const boundsIJK = getBoundingBoxAroundShape(sphereCornersIJK, dimensions);\n\n  return boundsIJK;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\ntype Sphere = {\n  center: Types.Point3 | vec3;\n  radius: number;\n};\n\n/**\n * Checks if a point is inside a sphere. Note: this is similar to the\n * `pointInEllipse` function, but since we don't need checks for the\n * ellipse's rotation in different views, we can use a simpler equation\n * which would be faster (no if statements).\n *\n * @param sphere - Sphere object with center and radius\n * @param pointLPS - the point to check in world coordinates\n * @returns boolean\n */\nexport default function pointInSphere(\n  sphere: Sphere,\n  pointLPS: Types.Point3\n): boolean {\n  const { center, radius } = sphere;\n\n  return (\n    (pointLPS[0] - center[0]) ** 2 +\n      (pointLPS[1] - center[1]) ** 2 +\n      (pointLPS[2] - center[2]) ** 2 <=\n    radius ** 2\n  );\n}\n","/**\n * Truncates decimal points to that there is at least 1+precision significant\n * digits.\n *\n * For example, with the default precision 2 (3 significant digits)\n * * Values larger than 100 show no information after the decimal point\n * * Values between 10 and 99 show 1 decimal point\n * * Values between 1 and 9 show 2 decimal points\n *\n * @param value - to return a fixed measurement value from\n * @param precision - defining how many digits after 1..9 are desired\n */\nfunction roundNumber(value: string | number, precision = 2): string {\n  if (value === undefined || value === null || value === '') return 'NaN';\n  value = Number(value);\n  if (value < 0.0001) return `${value}`;\n  const fixedPrecision =\n    value >= 100\n      ? precision - 2\n      : value >= 10\n      ? precision - 1\n      : value >= 1\n      ? precision\n      : value >= 0.1\n      ? precision + 1\n      : value >= 0.01\n      ? precision + 2\n      : value >= 0.001\n      ? precision + 3\n      : precision + 4;\n  return value.toFixed(fixedPrecision);\n}\n\nexport default roundNumber;\n","import type { Types } from '@cornerstonejs/core';\n\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { pointInSurroundingSphereCallback } from '../../../utilities';\n\ntype OperationData = {\n  points: [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n  volume: Types.IImageVolume;\n  segmentIndex: number;\n  segmentationId: string;\n  segmentsLocked: number[];\n  viewPlaneNormal: Types.Point3;\n  viewUp: Types.Point3;\n  constraintFn: () => boolean;\n};\n\nfunction fillSphere(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData,\n  _inside = true\n): void {\n  const { viewport } = enabledElement;\n  const {\n    volume: segmentation,\n    segmentsLocked,\n    segmentIndex,\n    segmentationId,\n    points,\n  } = operationData;\n\n  const { imageData, dimensions } = segmentation;\n  const scalarData = segmentation.getScalarData();\n  const scalarIndex = [];\n\n  const callback = ({ index, value }) => {\n    if (segmentsLocked.includes(value)) {\n      return;\n    }\n    scalarData[index] = segmentIndex;\n    scalarIndex.push(index);\n  };\n\n  pointInSurroundingSphereCallback(\n    imageData,\n    [points[0], points[1]],\n    callback,\n    viewport as Types.IVolumeViewport\n  );\n\n  // Since the scalar indexes start from the top left corner of the cube, the first\n  // slice that needs to be rendered can be calculated from the first mask coordinate\n  // divided by the zMultiple, as well as the last slice for the last coordinate\n  const zMultiple = dimensions[0] * dimensions[1];\n  const minSlice = Math.floor(scalarIndex[0] / zMultiple);\n  const maxSlice = Math.floor(scalarIndex[scalarIndex.length - 1] / zMultiple);\n  const sliceArray = Array.from(\n    { length: maxSlice - minSlice + 1 },\n    (v, k) => k + minSlice\n  );\n\n  triggerSegmentationDataModified(segmentationId, sliceArray);\n}\n\n/**\n * Fill inside a sphere with the given segment index in the given operation data. The\n * operation data contains the sphere required points.\n * @param enabledElement - The element that is enabled and selected.\n * @param operationData - OperationData\n */\nexport function fillInsideSphere(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillSphere(enabledElement, operationData, true);\n}\n\n/**\n * Fill outside a sphere with the given segment index in the given operation data. The\n * operation data contains the sphere required points.\n * @param enabledElement - The element that is enabled and selected.\n * @param operationData - OperationData\n */\nexport function fillOutsideSphere(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillSphere(enabledElement, operationData, false);\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport { fillInsideSphere } from './fillSphere';\n\ntype OperationData = {\n  points: [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n  volume: Types.IImageVolume;\n  segmentIndex: number;\n  segmentationId: string;\n  segmentsLocked: number[];\n  viewPlaneNormal: Types.Point3;\n  viewUp: Types.Point3;\n  constraintFn: () => boolean;\n};\n\nexport function eraseInsideSphere(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  // Take the arguments and set the segmentIndex to 0,\n  // Then use existing fillInsideCircle functionality.\n  const eraseOperationData = Object.assign({}, operationData, {\n    segmentIndex: 0,\n  });\n\n  fillInsideSphere(enabledElement, eraseOperationData);\n}\n","import type { Types } from '@cornerstonejs/core';\n\ntype Ellipse = {\n  center: Types.Point3;\n  xRadius: number;\n  yRadius: number;\n  zRadius: number;\n};\n\n/**\n * Given an ellipse and a point, return true if the point is inside the ellipse\n * @param ellipse - The ellipse object to check against.\n * @param pointLPS - The point in LPS space to test.\n * @returns A boolean value.\n */\nexport default function pointInEllipse(\n  ellipse: Ellipse,\n  pointLPS: Types.Point3\n): boolean {\n  const { center: circleCenterWorld, xRadius, yRadius, zRadius } = ellipse;\n  const [x, y, z] = pointLPS;\n  const [x0, y0, z0] = circleCenterWorld;\n\n  let inside = 0;\n  if (xRadius !== 0) {\n    inside += ((x - x0) * (x - x0)) / (xRadius * xRadius);\n  }\n\n  if (yRadius !== 0) {\n    inside += ((y - y0) * (y - y0)) / (yRadius * yRadius);\n  }\n\n  if (zRadius !== 0) {\n    inside += ((z - z0) * (z - z0)) / (zRadius * zRadius);\n  }\n\n  return inside <= 1;\n}\n","import type { Types } from '@cornerstonejs/core';\n\ntype canvasCoordinates = [\n  Types.Point2, // bottom\n  Types.Point2, // top\n  Types.Point2, // left\n  Types.Point2 // right\n];\n\n/**\n * It takes the canvas coordinates of the ellipse corners and returns the top left and bottom right\n * corners of it\n *\n * @param ellipseCanvasPoints - The coordinates of the ellipse in the canvas.\n * @returns An array of two points.\n */\nexport default function getCanvasEllipseCorners(\n  ellipseCanvasPoints: canvasCoordinates\n): Array<Types.Point2> {\n  const [bottom, top, left, right] = ellipseCanvasPoints;\n\n  const topLeft = <Types.Point2>[left[0], top[1]];\n  const bottomRight = <Types.Point2>[right[0], bottom[1]];\n\n  return [topLeft, bottomRight];\n}\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\nimport { utilities as csUtils } from '@cornerstonejs/core';\n\nimport {\n  getCanvasEllipseCorners,\n  pointInEllipse,\n} from '../../../utilities/math/ellipse';\nimport { getBoundingBoxAroundShape } from '../../../utilities/boundingBox';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { pointInShapeCallback } from '../../../utilities';\n\nconst { transformWorldToIndex } = csUtils;\n\ntype OperationData = {\n  segmentationId: string;\n  imageVolume: Types.IImageVolume;\n  points: any; // Todo:fix\n  volume: Types.IImageVolume;\n  segmentIndex: number;\n  segmentsLocked: number[];\n  viewPlaneNormal: number[];\n  viewUp: number[];\n  strategySpecificConfiguration: any;\n  constraintFn: () => boolean;\n};\n\nfunction fillCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData,\n  threshold = false\n): void {\n  const {\n    volume: segmentationVolume,\n    imageVolume,\n    points,\n    segmentsLocked,\n    segmentIndex,\n    segmentationId,\n    strategySpecificConfiguration,\n  } = operationData;\n  const { imageData, dimensions } = segmentationVolume;\n  const scalarData = segmentationVolume.getScalarData();\n  const { viewport } = enabledElement;\n\n  // Average the points to get the center of the ellipse\n  const center = vec3.fromValues(0, 0, 0);\n  points.forEach((point) => {\n    vec3.add(center, center, point);\n  });\n  vec3.scale(center, center, 1 / points.length);\n\n  const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n  // 1. From the drawn tool: Get the ellipse (circle) topLeft and bottomRight\n  // corners in canvas coordinates\n  const [topLeftCanvas, bottomRightCanvas] =\n    getCanvasEllipseCorners(canvasCoordinates);\n\n  // 2. Find the extent of the ellipse (circle) in IJK index space of the image\n  const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n  const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n\n  const ellipsoidCornersIJK = [\n    <Types.Point3>transformWorldToIndex(imageData, topLeftWorld),\n    <Types.Point3>transformWorldToIndex(imageData, bottomRightWorld),\n  ];\n\n  const boundsIJK = getBoundingBoxAroundShape(ellipsoidCornersIJK, dimensions);\n\n  // using circle as a form of ellipse\n  const ellipseObj = {\n    center: center as Types.Point3,\n    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n  };\n\n  const modifiedSlicesToUse = new Set() as Set<number>;\n\n  let callback;\n\n  if (threshold) {\n    callback = ({ value, index, pointIJK }) => {\n      if (segmentsLocked.includes(value)) {\n        return;\n      }\n\n      if (\n        isWithinThreshold(index, imageVolume, strategySpecificConfiguration)\n      ) {\n        scalarData[index] = segmentIndex;\n        //Todo: I don't think this will always be index 2 in streamingImageVolume?\n        modifiedSlicesToUse.add(pointIJK[2]);\n      }\n    };\n  } else {\n    callback = ({ value, index, pointIJK }) => {\n      if (segmentsLocked.includes(value)) {\n        return;\n      }\n      scalarData[index] = segmentIndex;\n      //Todo: I don't think this will always be index 2 in streamingImageVolume?\n      modifiedSlicesToUse.add(pointIJK[2]);\n    };\n  }\n\n  pointInShapeCallback(\n    imageData,\n    (pointLPS, pointIJK) => pointInEllipse(ellipseObj, pointLPS),\n    callback,\n    boundsIJK\n  );\n\n  const arrayOfSlices: number[] = Array.from(modifiedSlicesToUse);\n\n  triggerSegmentationDataModified(segmentationId, arrayOfSlices);\n}\n\nfunction isWithinThreshold(\n  index: number,\n  imageVolume: Types.IImageVolume,\n  strategySpecificConfiguration: any\n) {\n  const { THRESHOLD_INSIDE_CIRCLE } = strategySpecificConfiguration;\n\n  const voxelValue = imageVolume.getScalarData()[index];\n  const { threshold } = THRESHOLD_INSIDE_CIRCLE;\n\n  return threshold[0] <= voxelValue && voxelValue <= threshold[1];\n}\n\n/**\n * Fill inside the circular region segment inside the segmentation defined by the operationData.\n * It fills the segmentation pixels inside the defined circle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function fillInsideCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillCircle(enabledElement, operationData, false);\n}\n\n/**\n * Fill inside the circular region segment inside the segmentation defined by the operationData.\n * It fills the segmentation pixels inside the defined circle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function thresholdInsideCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  const { volume, imageVolume } = operationData;\n\n  if (\n    !csUtils.isEqual(volume.dimensions, imageVolume.dimensions) ||\n    !csUtils.isEqual(volume.direction, imageVolume.direction)\n  ) {\n    throw new Error(\n      'Only source data the same dimensions/size/orientation as the segmentation currently supported.'\n    );\n  }\n\n  fillCircle(enabledElement, operationData, true);\n}\n\n/**\n * Fill outside the circular region segment inside the segmentation defined by the operationData.\n * It fills the segmentation pixels outside the  defined circle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function fillOutsideCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  throw new Error('Not yet implemented');\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport { fillInsideCircle } from './fillCircle';\n\ntype OperationData = {\n  segmentationId: string;\n  imageVolume: Types.IImageVolume;\n  points: any; // Todo:fix\n  volume: Types.IImageVolume;\n  segmentIndex: number;\n  segmentsLocked: number[];\n  viewPlaneNormal: number[];\n  viewUp: number[];\n  strategySpecificConfiguration: any;\n  constraintFn: () => boolean;\n};\n\nexport function eraseInsideCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  // Take the arguments and set the segmentIndex to 0,\n  // Then use existing fillInsideCircle functionality.\n  const eraseOperationData = {\n    ...operationData,\n    segmentIndex: 0,\n  };\n\n  fillInsideCircle(enabledElement, eraseOperationData);\n}\n","const DEFINED_CURSORS = Symbol('DefinedCursors');\nconst STANDARD_CURSORS = new Set([\n  'alias',\n  'all-scroll',\n  'auto',\n  'cell',\n  'col-resize',\n  'context-menu',\n  'copy',\n  'crosshair',\n  'default',\n  'e-resize',\n  'ew-resize',\n  'grab',\n  'grabbing',\n  'help',\n  'move',\n  'ne-resize',\n  'nesw-resize',\n  'no-drop',\n  'none',\n  'not-allowed',\n  'n-resize',\n  'ns-resize',\n  'nw-resize',\n  'nwse-resize',\n  'pointer',\n  'progress',\n  'row-resize',\n  'se-resize',\n  's-resize',\n  'sw-resize',\n  'text',\n  'vertical-text',\n  'wait',\n  'w-resize',\n  'zoom-in',\n  'zoom-out',\n]);\n\nexport default class MouseCursor {\n  private name: string;\n  private fallback: MouseCursor | undefined;\n\n  constructor(name: string, fallback?: MouseCursor | undefined) {\n    this.name = name + '';\n    this.fallback = fallback;\n  }\n\n  getName(): string {\n    return this.name + '';\n  }\n\n  addFallbackStyleProperty(style: string): string {\n    const { fallback } = this;\n    if (fallback instanceof MouseCursor) {\n      return `${style}, ${fallback.getStyleProperty()}`;\n    }\n    return style + '';\n  }\n\n  getStyleProperty(): string {\n    return this.addFallbackStyleProperty(this.name) + '';\n  }\n\n  static getDefinedCursor(name: string): MouseCursor | undefined {\n    const definedCursors = getDefinedCursors(\n      // @ts-ignore\n      MouseCursor as Record<symbol, Map<string, MouseCursor>>,\n      DEFINED_CURSORS\n    );\n    let mouseCursor = definedCursors.get(name);\n    if (mouseCursor instanceof MouseCursor) {\n      return mouseCursor;\n    }\n    if (STANDARD_CURSORS.has(name)) {\n      mouseCursor = new MouseCursor(name);\n      definedCursors.set(name, mouseCursor);\n      return mouseCursor;\n    }\n  }\n\n  static setDefinedCursor(name: string, cursor: MouseCursor): boolean {\n    if (cursor instanceof MouseCursor) {\n      const definedCursors = getDefinedCursors(\n        // @ts-ignore\n        MouseCursor as Record<symbol, Map<string, MouseCursor>>,\n        DEFINED_CURSORS\n      );\n      definedCursors.set(name, cursor);\n      return true;\n    }\n    return false;\n  }\n}\n\n/*\n * Helpers\n */\n\nfunction getDefinedCursors(\n  context: Record<symbol, Map<string, MouseCursor>>,\n  symbol: symbol\n): Map<string, MouseCursor> {\n  let definedCursors = context[symbol];\n  if (!(definedCursors instanceof Map)) {\n    definedCursors = new Map();\n    Object.defineProperty(context, symbol, { value: definedCursors });\n  }\n  return definedCursors;\n}\n\nconst standardCursorNames = STANDARD_CURSORS.values();\nexport { standardCursorNames };\n","import { utilities } from '@cornerstonejs/core';\nimport MouseCursor from './MouseCursor';\n\nconst DEFAULT_NAME = 'image-cursor';\n\nexport default class ImageMouseCursor extends MouseCursor {\n  private url: string;\n  private x: number;\n  private y: number;\n\n  constructor(\n    url: string,\n    x?: number,\n    y?: number,\n    name?: string | undefined,\n    fallback?: MouseCursor | undefined\n  ) {\n    super(\n      name || ImageMouseCursor.getUniqueInstanceName(DEFAULT_NAME),\n      fallback\n    );\n    this.url = url;\n    this.x = Number(x) || 0;\n    this.y = Number(y) || 0;\n  }\n\n  getStyleProperty(): string {\n    const { url, x, y } = this;\n    let style = `url('${url}')`;\n    if (x >= 0 && y >= 0 && (x > 0 || y > 0)) {\n      style += ` ${x} ${y}`;\n    }\n    return this.addFallbackStyleProperty(style);\n  }\n\n  static getUniqueInstanceName(prefix: string): string {\n    return `${prefix}-${utilities.getRuntimeId(ImageMouseCursor)}`;\n  }\n}\n","import { SVGCursorDescriptor } from '../types';\n\n/*\n * Definitions\n */\n\nconst BASE: SVGCursorDescriptor = {\n  iconContent: '',\n  iconSize: 16,\n  viewBox: {\n    x: 16,\n    y: 16,\n  },\n  mousePoint: {\n    x: 8,\n    y: 8,\n  },\n  mousePointerGroupString: `\n    <path stroke=\"{{color}}\" d=\"M8 16L8 0\"></path>\n    <path stroke=\"{{color}}\" d=\"M16 8L0 8\"></path>\n  `,\n};\n\nconst SEGMENTATION_CURSOR_BOUNDARIES = {\n  x: 127,\n  y: 60,\n};\n\nconst MINUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n`;\n\nconst PLUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n<rect fill=\"{{color}}\" x=\"95.84\" y=\"9.38\" width=\"15.85\" height=\"47.14\"/>\n`;\n\nconst SCISSOR_ICON = `<path fill=\"{{color}}\" d=\"M82.89,10a12.09,12.09,0,0,0-16.8-2.5l-27.5,20.4-8.5-6.3a2.93,2.93,0,0,1-1.1-3,14.66,14.66,0,0,0,.1-6.6,14.08,14.08,0,1,0-6.5,15.2,2.87,2.87,0,0,1,3.2.2l8.2,6.1-8.2,6.1a2.87,2.87,0,0,1-3.2.2,14.16,14.16,0,1,0,6.7,14.4,14,14,0,0,0-.3-5.8,2.93,2.93,0,0,1,1.1-3l8.5-6.3,27.5,20.4A11.91,11.91,0,0,0,82.89,57l-31.7-23.5ZM15.29,21a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,21Zm0,36.8a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,57.77Zm28.3-21.5a2.8,2.8,0,1,1,2.8-2.8A2.8,2.8,0,0,1,43.59,36.27Z\" transform=\"translate(-1.17 -0.96)\"/>`;\nconst RECTANGLE_ICON = `<path fill=\"{{color}}\" d=\"M8.86,2.25V66.08H72.69V2.25H8.86ZM65.28,58.67h-49v-49h49v49Z\" transform=\"translate(-8.86 -2.25)\"/>`;\nconst CIRCLE_ICON = `<path fill=\"{{color}}\" d=\"M40.77,2.25A31.92,31.92,0,1,0,72.69,34.16,31.92,31.92,0,0,0,40.77,2.25Zm0,57.63A25.71,25.71,0,1,1,66.48,34.16,25.71,25.71,0,0,1,40.77,59.87Z\" transform=\"translate(-8.86 -2.25)\"/>`;\n\nconst CursorSVG: Record<string, SVGCursorDescriptor> = {\n  Angle: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1203 544q0 13-10 23l-393 393 393 393q10 10 10 23t-10 23l-50\n    50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23\n    10l50 50q10 10 10 23z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  ArrowAnnotate: extend(BASE, {\n    iconContent: `<g id=\"arrowAnnotate-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"arrowAnnotate-arrow\" d=\"M23,7 l-15,15 M7,17 l0,6 6,0\" stroke-width=\"2\" />\n  </g>`,\n    viewBox: {\n      x: 24,\n      y: 24,\n    },\n  }),\n  Bidirectional: extend(BASE, {\n    iconContent: `<g fill=\"{{color}}\" stroke-width=\"3\" stroke=\"{{color}}\">\n    <path d=\"M27.63 3.21L3.12 28.81\"></path>\n    <path d=\"M27.63 15.75L15.27 4.43\"></path>\n    <path d=\"M16.5 4.28C16.5 4.96 15.95 5.51 15.27 5.51C14.59 5.51 14.03 4.96 14.03 4.28C14.03 3.59 14.59 3.04 15.27 3.04C15.95 3.04 16.5 3.59 16.5 4.28Z\" ></path>\n    <path d=\"M28.87 3.19C28.87 3.87 28.31 4.43 27.63 4.43C26.95 4.43 26.4 3.87 26.4 3.19C26.4 2.51 26.95 1.95 27.63 1.95C28.31 1.95 28.87 2.51 28.87 3.19Z\"></path>\n    <path d=\"M28.87 15.75C28.87 16.43 28.31 16.99 27.63 16.99C26.95 16.99 26.4 16.43 26.4 15.75C26.4 15.07 26.95 14.51 27.63 14.51C28.31 14.51 28.87 15.07 28.87 15.75Z\"></path>\n    <path d=\"M4.73 28.44C4.73 29.12 4.17 29.68 3.49 29.68C2.81 29.68 2.25 29.12 2.25 28.44C2.25 27.76 2.81 27.2 3.49 27.2C4.17 27.2 4.73 27.76 4.73 28.44Z\"></path>\n  </g>`,\n    viewBox: {\n      x: 48,\n      y: 48,\n    },\n  }),\n  CobbAngle: extend(BASE, {\n    iconContent: `<g stroke=\"{{color}}\" stroke-width=\"3\">\n    <path d=\"M28.59 2.34L3.82 12.32\"></path>\n    <path d=\"M28.59 29.66L3.82 19.68\"></path>\n    <path stroke-dasharray=\"2\" fill-opacity=\"0\" d=\"M12.37\n      23.06C12.67 22.36 12.85 21.93 12.92 21.76C14.6 17.8 14.68 13.35 13.15\n      9.33C13.11 9.24 13.02 9 12.88 8.63\">\n    </path>\n  </g>`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  CircleROI: extend(BASE, {\n    iconContent: `<circle stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" cx=\"16\" cy=\"16\" r=\"14\" />`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  EllipticalROI: extend(BASE, {\n    iconContent: `<path stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" d=\"M30.74 15.76C30.74 20.99 24.14 25.23 16\n    25.23C7.86 25.23 1.26 20.99 1.26 15.76C1.26 10.54 7.86 6.3 16 6.3C24.14\n    6.3 30.74 10.54 30.74 15.76Z\" />`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  FreehandROI: extend(BASE, {\n    iconContent: `<g fill=\"{{color}}\" stroke=\"{{color}}\" stroke-width=\"2\">\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_3\" cy=\"4.240343\" cx=\"14.306499\"/>\n    <line id=\"svg_4\" y2=\"3.58462\" x2=\"12.242186\" y1=\"3.997482\" x1=\"13.432202\"/>\n    <line id=\"svg_5\" y2=\"3.268901\" x2=\"10.857882\" y1=\"3.608906\" x1=\"12.387902\"/>\n    <line id=\"svg_6\" y2=\"3.147471\" x2=\"9.740724\" y1=\"3.293187\" x1=\"10.955026\"/>\n    <line id=\"svg_7\" y2=\"3.147471\" x2=\"8.089274\" y1=\"3.196043\" x1=\"9.983585\"/>\n    <line id=\"svg_8\" y2=\"3.268901\" x2=\"6.874972\" y1=\"3.123185\" x1=\"8.307848\"/>\n    <line id=\"svg_9\" y2=\"3.657478\" x2=\"5.587812\" y1=\"3.220329\" x1=\"7.020688\"/>\n    <line id=\"svg_10\" y2=\"4.046054\" x2=\"4.737801\" y1=\"3.560334\" x1=\"5.854959\"/>\n    <line id=\"svg_11\" y2=\"4.337487\" x2=\"4.300652\" y1=\"3.997482\" x1=\"4.834945\"/>\n    <line id=\"svg_12\" y2=\"4.726063\" x2=\"3.88779\" y1=\"4.191771\" x1=\"4.470655\"/>\n    <line id=\"svg_15\" y2=\"5.3575\" x2=\"3.377783\" y1=\"4.604633\" x1=\"3.960648\"/>\n    <line id=\"svg_16\" y2=\"6.183226\" x2=\"2.916348\" y1=\"5.138926\" x1=\"3.547785\"/>\n    <line id=\"svg_17\" y2=\"6.960379\" x2=\"2.770632\" y1=\"5.867507\" x1=\"3.037779\"/>\n    <line id=\"svg_18\" y2=\"7.713246\" x2=\"2.673488\" y1=\"6.741804\" x1=\"2.819204\"/>\n    <line id=\"svg_19\" y2=\"8.684687\" x2=\"2.697774\" y1=\"7.616102\" x1=\"2.673488\"/>\n    <line id=\"svg_20\" y2=\"9.753273\" x2=\"2.892062\" y1=\"8.611829\" x1=\"2.697774\"/>\n    <line id=\"svg_21\" y2=\"10.724714\" x2=\"3.134923\" y1=\"9.534698\" x1=\"2.84349\"/>\n    <line id=\"svg_23\" y2=\"11.647583\" x2=\"3.596357\" y1=\"10.578998\" x1=\"3.086351\"/>\n    <line id=\"svg_25\" y2=\"12.521881\" x2=\"4.276366\" y1=\"11.501867\" x1=\"3.499213\"/>\n    <line id=\"svg_26\" y2=\"13.930471\" x2=\"5.830673\" y1=\"12.376165\" x1=\"4.13065\"/>\n    <line id=\"svg_28\" y2=\"14.707624\" x2=\"7.263549\" y1=\"13.881899\" x1=\"5.733528\"/>\n    <line id=\"svg_29\" y2=\"15.339061\" x2=\"8.963571\" y1=\"14.61048\" x1=\"7.06926\"/>\n    <line id=\"svg_30\" y2=\"15.581921\" x2=\"10.882168\" y1=\"15.314775\" x1=\"8.817855\"/>\n    <line id=\"svg_31\" y2=\"15.460491\" x2=\"12.023612\" y1=\"15.581921\" x1=\"10.785024\"/>\n    <line id=\"svg_33\" y2=\"15.120487\" x2=\"13.092197\" y1=\"15.484777\" x1=\"11.877895\"/>\n    <line id=\"svg_34\" y2=\"14.586194\" x2=\"13.86935\" y1=\"15.217631\" x1=\"12.897909\"/>\n    <line id=\"svg_35\" y2=\"13.833327\" x2=\"14.597931\" y1=\"14.756196\" x1=\"13.699348\"/>\n    <line id=\"svg_37\" y2=\"12.716169\" x2=\"15.180796\" y1=\"13.881899\" x1=\"14.549359\"/>\n    <line id=\"svg_39\" y2=\"11.429009\" x2=\"15.520801\" y1=\"12.813313\" x1=\"15.15651\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_40\" cy=\"10.967574\" cx=\"15.520801\"/>\n  </g>`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  FreehandROISculptor: extend(BASE, {\n    iconContent: `<g id=\"icon-freehand-sculpt\" fill=\"none\" stroke-width=\"1.5\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <line id=\"svg_1\" y2=\"2.559367\" x2=\"10.184807\" y1=\"4.467781\" x1=\"8.81711\"/>\n    <line id=\"svg_4\" y2=\"1.493836\" x2=\"11.727442\" y1=\"2.766112\" x1=\"10.089386\"/>\n    <line id=\"svg_7\" y2=\"1.080346\" x2=\"13.047428\" y1=\"1.748291\" x1=\"11.345759\"/>\n    <line id=\"svg_8\" y2=\"1.000829\" x2=\"14.351511\" y1=\"1.112153\" x1=\"12.77707\"/>\n    <line id=\"svg_9\" y2=\"1.350705\" x2=\"15.242104\" y1=\"0.905408\" x1=\"13.969828\"/>\n    <line id=\"svg_10\" y2=\"2.098167\" x2=\"15.862339\" y1=\"1.14396\" x1=\"14.955842\"/>\n    <line id=\"svg_11\" y2=\"3.195505\" x2=\"16.41896\" y1=\"1.939133\" x1=\"15.766918\"/>\n    <line id=\"svg_12\" y2=\"4.292843\" x2=\"16.530284\" y1=\"2.925147\" x1=\"16.387153\"/>\n    <line id=\"svg_16\" y2=\"5.644637\" x2=\"16.196311\" y1=\"3.831643\" x1=\"16.593898\"/>\n    <line id=\"svg_18\" y2=\"7.266789\" x2=\"15.623787\" y1=\"5.19934\" x1=\"16.275829\"/>\n    <line id=\"svg_19\" y2=\"10.813258\" x2=\"14.526449\" y1=\"6.726071\" x1=\"15.766918\"/>\n    <line id=\"svg_20\" y2=\"5.056209\" x2=\"8.085552\" y1=\"4.181519\" x1=\"8.976145\"/>\n    <line id=\"svg_23\" y2=\"5.326568\" x2=\"7.481221\" y1=\"4.78585\" x1=\"8.403621\"/>\n    <line id=\"svg_24\" y2=\"5.565119\" x2=\"6.749662\" y1=\"5.294761\" x1=\"7.624352\"/>\n    <line id=\"svg_25\" y2=\"5.994512\" x2=\"5.429675\" y1=\"5.533312\" x1=\"6.956407\"/>\n    <line id=\"svg_27\" y2=\"6.551133\" x2=\"4.284627\" y1=\"5.962706\" x1=\"5.572807\"/>\n    <line id=\"svg_28\" y2=\"7.584858\" x2=\"3.044158\" y1=\"6.392099\" x1=\"4.427758\"/>\n    <line id=\"svg_29\" y2=\"8.84123\" x2=\"2.185372\" y1=\"7.489437\" x1=\"3.219096\"/>\n    <line id=\"svg_31\" y2=\"10.606513\" x2=\"1.644654\" y1=\"8.602678\" x1=\"2.280792\"/>\n    <line id=\"svg_32\" y2=\"13.214679\" x2=\"1.48562\" y1=\"10.352058\" x1=\"1.724171\"/>\n    <line id=\"svg_33\" y2=\"14.375631\" x2=\"1.676461\" y1=\"12.992031\" x1=\"1.453813\"/>\n    <line id=\"svg_34\" y2=\"15.298031\" x2=\"2.264889\" y1=\"14.152983\" x1=\"1.517427\"/>\n    <line id=\"svg_35\" y2=\"16.172721\" x2=\"3.521261\" y1=\"14.948155\" x1=\"1.915013\"/>\n    <line id=\"svg_36\" y2=\"16.824762\" x2=\"5.207027\" y1=\"15.997783\" x1=\"3.28271\"/>\n    <line id=\"svg_38\" y2=\"17.063314\" x2=\"7.035924\" y1=\"16.745245\" x1=\"4.968475\"/>\n    <line id=\"svg_39\" y2=\"16.888376\" x2=\"9.278311\" y1=\"17.047411\" x1=\"6.733758\"/>\n    <line id=\"svg_40\" y2=\"16.284045\" x2=\"10.661911\" y1=\"16.983797\" x1=\"8.992048\"/>\n    <line id=\"svg_41\" y2=\"15.313934\" x2=\"11.647925\" y1=\"16.395369\" x1=\"10.455166\"/>\n    <line id=\"svg_44\" y2=\"13.898527\" x2=\"12.82478\" y1=\"15.425259\" x1=\"11.504794\"/>\n    <line id=\"svg_45\" y2=\"12.037824\" x2=\"14.144766\" y1=\"14.312017\" x1=\"12.522614\"/>\n    <line id=\"svg_47\" y2=\"10.59061\" x2=\"14.605966\" y1=\"12.228665\" x1=\"13.953925\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_48\" cy=\"3.982726\" cx=\"13.460918\"/>\n  </g>`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  Length: extend(BASE, {\n    iconContent: `<g id=\"length-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"length-dashes\" d=\"m22.5,6 -16.5,16.5\" stroke-width=\"3\" stroke-dasharray=\"0.6666,5\" />\n  </g>`,\n    viewBox: {\n      x: 24,\n      y: 24,\n    },\n  }),\n  Probe: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1152 896q0 106-75 181t-181 75-181-75-75-181 75-181 181-75 181 75\n    75 181zm-256-544q-148 0-273 73t-198 198-73 273 73 273 198 198 273 73 273-73\n    198-198 73-273-73-273-198-198-273-73zm768 544q0 209-103 385.5t-279.5\n    279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5\n    385.5-103 385.5 103 279.5 279.5 103 385.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  RectangleROI: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1312 256h-832q-66 0-113 47t-47 113v832q0 66 47\n    113t113 47h832q66 0 113-47t47-113v-832q0-66-47-113t-113-47zm288 160v832q0\n    119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119\n    84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  TextMarker: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M789 559l-170 450q33 0 136.5 2t160.5 2q19 0\n    57-2-87-253-184-452zm-725 1105l2-79q23-7 56-12.5t57-10.5 49.5-14.5 44.5-29\n    31-50.5l237-616 280-724h128q8 14 11 21l205 480q33 78 106 257.5t114 274.5q15\n    34 58 144.5t72 168.5q20 45 35 57 19 15 88 29.5t84 20.5q6 38 6 57 0 5-.5\n    13.5t-.5 12.5q-63 0-190-8t-191-8q-76 0-215 7t-178 8q0-43 4-78l131-28q1 0\n    12.5-2.5t15.5-3.5 14.5-4.5 15-6.5 11-8 9-11\n    2.5-14q0-16-31-96.5t-72-177.5-42-100l-450-2q-26 58-76.5 195.5t-50.5 162.5q0\n    22 14 37.5t43.5 24.5 48.5 13.5 57 8.5 41 4q1 19 1 58 0 9-2 27-58\n    0-174.5-10t-174.5-10q-8 0-26.5 4t-21.5 4q-80 14-188 14z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Crosshairs: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1325 1024h-109q-26 0-45-19t-19-45v-128q0-26\n    19-45t45-19h109q-32-108-112.5-188.5t-188.5-112.5v109q0 26-19 45t-45\n    19h-128q-26 0-45-19t-19-45v-109q-108 32-188.5 112.5t-112.5 188.5h109q26\n    0 45 19t19 45v128q0 26-19 45t-45 19h-109q32 108 112.5 188.5t188.5\n    112.5v-109q0-26 19-45t45-19h128q26 0 45 19t19 45v109q108-32\n    188.5-112.5t112.5-188.5zm339-192v128q0 26-19 45t-45 19h-143q-37 161-154.5\n    278.5t-278.5 154.5v143q0 26-19 45t-45 19h-128q-26\n    0-45-19t-19-45v-143q-161-37-278.5-154.5t-154.5-278.5h-143q-26\n    0-45-19t-19-45v-128q0-26 19-45t45-19h143q37-161\n    154.5-278.5t278.5-154.5v-143q0-26 19-45t45-19h128q26 0 45 19t19 45v143q161\n    37 278.5 154.5t154.5 278.5h143q26 0 45 19t19 45z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Eraser: extend(BASE, {\n    iconContent: `<path transform=\"translate(0,1792) scale(1,-1)\" fill=\"{{color}}\" d=\"M960 1408l336-384h-768l-336 384h768zm1013-1077q15\n    34 9.5 71.5t-30.5 65.5l-896 1024q-38 44-96 44h-768q-38\n    0-69.5-20.5t-47.5-54.5q-15-34-9.5-71.5t30.5-65.5l896-1024q38-44 96-44h768q38\n    0 69.5 20.5t47.5 54.5z\" />`,\n    viewBox: {\n      x: 2048,\n      y: 1792,\n    },\n  }),\n  Magnify: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />`,\n    viewBox: {\n      x: 512,\n      y: 512,\n    },\n  }),\n  Pan: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1411 541l-355 355 355 355 144-144q29-31 70-14 39 17\n    39 59v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39 14-69l144-144-355-355-355\n    355 144 144q31 30 14 69-17 40-59 40h-448q-26 0-45-19t-19-45v-448q0-42 40-59\n    39-17 69 14l144 144 355-355-355-355-144 144q-19 19-45 19-12\n    0-24-5-40-17-40-59v-448q0-26 19-45t45-19h448q42 0 59 40 17 39-14 69l-144\n    144 355 355 355-355-144-144q-31-30-14-69 17-40 59-40h448q26 0 45 19t19\n    45v448q0 42-39 59-13 5-25 5-26 0-45-19z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Rotate: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1664 256v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39\n    14-69l138-138q-148-137-349-137-104 0-198.5 40.5t-163.5 109.5-109.5\n    163.5-40.5 198.5 40.5 198.5 109.5 163.5 163.5 109.5 198.5 40.5q119 0\n    225-52t179-147q7-10 23-12 15 0 25 9l137 138q9 8 9.5 20.5t-7.5 22.5q-109\n    132-264 204.5t-327 72.5q-156 0-298-61t-245-164-164-245-61-298 61-298\n    164-245 245-164 298-61q147 0 284.5 55.5t244.5 156.5l130-129q29-31 70-14\n    39 17 39 59z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  StackScroll: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M24 21v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1zM24 13v2c0\n    0.547-0.453 1-1 1h-22c-0.547 0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547\n    0 1 0.453 1 1zM24 5v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1z\" />`,\n    viewBox: {\n      x: 24,\n      y: 28,\n    },\n  }),\n  WindowLevelRegion: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1664 416v960q0 119-84.5 203.5t-203.5 84.5h-960q-119\n    0-203.5-84.5t-84.5-203.5v-960q0-119 84.5-203.5t203.5-84.5h960q119 0 203.5\n    84.5t84.5 203.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  WindowLevel: extend(BASE, {\n    iconContent: `\n    <path fill=\"{{color}}\" d=\"M14.5,3.5 a1 1 0 0 1 -11,11 Z\" stroke=\"none\" opacity=\"0.8\" />\n    <circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"none\" stroke-width=\"2\" stroke=\"{{color}}\" />`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  Zoom: extend(BASE, {\n    iconContent: `\n  <path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />\n  <path fill=\"{{color}}\" transform=\"scale(0.22,0.22) translate(1400,0)\" d=\"M1216\n    320q0 26-19 45t-45 19h-128v1024h128q26 0 45 19t19 45-19 45l-256 256q-19\n    19-45 19t-45-19l-256-256q-19-19-19-45t19-45 45-19h128v-1024h-128q-26\n    0-45-19t-19-45 19-45l256-256q19-19 45-19t45 19l256 256q19 19 19 45z\" />`,\n    viewBox: {\n      x: 640,\n      y: 512,\n    },\n  }),\n\n  /*\n   * Segmentation Cursors\n   */\n\n  SegmentationFreeHandEraseInside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandFillInside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandEraseOutside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandFillOutside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationRectangleEraseInside: extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  // Default Rectangle Scissors\n  RectangleScissor: extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.FILL_INSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.FILL_OUTSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.ERASE_OUTSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.ERASE_INSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  CircleScissor: extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.FILL_INSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.ERASE_OUTSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.FILL_OUTSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n};\n\n/*\n * Utils\n */\n\nfunction extend(\n  base: SVGCursorDescriptor,\n  values: Record<string, unknown>\n): SVGCursorDescriptor {\n  return Object.assign(Object.create(base), values);\n}\n\n/**\n * Registers a cursor to the list, so that it will be used for the given `toolName`.\n * Overwrites the given cursor if it is already set.\n *\n * @param toolName - The name of the tool to assign a cursor to.\n * @param iconContent - The SVG icon content of the cursor.\n * @param viewBox - The viewBox of the cursor object.\n */\nfunction registerCursor(\n  toolName: string,\n  iconContent: string,\n  viewBox: { x: number; y: number }\n) {\n  CursorSVG[toolName] = extend(BASE, {\n    iconContent,\n    viewBox,\n  });\n}\n\nfunction getDefinedSVGCursorDescriptor(\n  name: string\n): SVGCursorDescriptor | undefined {\n  return CursorSVG[name];\n}\n\n/*\n * Exports\n */\nconst svgCursorNames = Object.keys(CursorSVG);\n\nexport {\n  getDefinedSVGCursorDescriptor,\n  registerCursor,\n  svgCursorNames,\n  CursorSVG,\n};\n","import { ToolModes, AnnotationStyleStates } from '../enums';\nimport MouseCursor from './MouseCursor';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport { getDefinedSVGCursorDescriptor } from './SVGCursorDescriptor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\n\nimport type { StyleSpecifier } from '../types/AnnotationStyle';\nimport type { SVGCursorDescriptor } from '../types';\n\nconst PROPERTY = 'color';\nconst STATE = AnnotationStyleStates.Highlighted;\nconst MODE = ToolModes.Active;\n\nexport default class SVGMouseCursor extends ImageMouseCursor {\n  constructor(\n    url: string,\n    x?: number,\n    y?: number,\n    name?: string | undefined,\n    fallback?: MouseCursor | undefined\n  ) {\n    super(url, x, y, name, fallback);\n  }\n\n  /**\n   * Get a shared instance of the SVGMouseCursor class satisfying the given parameters.\n   *\n   * @param name - The name of the cursor (defined in SVGCursorDescriptor.ts);\n   * @param pointer - Should be true to use the version of the cursor containing\n   * a mouse pointer. Defaults to false (which does not add a pointer to the cursor);\n   * @param color - The color of the cursor. Defaults to tool.style.colorHighlightedActive;\n   * @returns a SVGMouseCursor instance or\n   * undefined if no SVG cursor descriptor was found with the given name;\n   */\n  static getDefinedCursor(\n    name: string,\n    pointer = false,\n    color?: string\n  ): MouseCursor {\n    if (!color) {\n      color = getStyleProperty(PROPERTY, {} as StyleSpecifier, STATE, MODE);\n    }\n    const urn = getCursorURN(name, pointer, color);\n    let cursor = super.getDefinedCursor(urn);\n    if (!cursor) {\n      const descriptor = getDefinedSVGCursorDescriptor(name);\n      if (descriptor) {\n        cursor = createSVGMouseCursor(\n          descriptor,\n          urn,\n          pointer,\n          color,\n          super.getDefinedCursor('default')\n        );\n        super.setDefinedCursor(urn, cursor);\n      }\n    }\n    return cursor;\n  }\n}\n\n/*\n * Helpers\n */\n\nfunction format(template: string, dictionary: Record<string, unknown>): string {\n  const dict = Object(dictionary);\n  const defined = Object.prototype.hasOwnProperty.bind(dict);\n  return (template + '').replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\n    return defined(key) ? dict[key] + '' : '';\n  });\n}\n\nfunction getCursorURN(name: string, pointer: boolean, color: string) {\n  const type = pointer ? 'pointer' : 'cursor';\n  return `${type}:${name}/${color}`;\n}\n\nfunction createSVGMouseCursor(\n  descriptor: SVGCursorDescriptor,\n  name: string,\n  pointer: boolean,\n  color: string,\n  fallback: MouseCursor\n): SVGMouseCursor {\n  const { x, y } = descriptor.mousePoint;\n  return new SVGMouseCursor(\n    createSVGIconUrl(descriptor, pointer, { color }),\n    x,\n    y,\n    name,\n    fallback\n  );\n}\n\nfunction createSVGIconUrl(\n  descriptor: SVGCursorDescriptor,\n  pointer: boolean,\n  options: Record<string, unknown>\n): string {\n  return URL.createObjectURL(createSVGIconBlob(descriptor, pointer, options));\n}\n\nfunction createSVGIconBlob(\n  descriptor: SVGCursorDescriptor,\n  pointer: boolean,\n  options: Record<string, unknown>\n): Blob {\n  const svgString = (pointer ? createSVGIconWithPointer : createSVGIcon)(\n    descriptor,\n    options\n  );\n  return new Blob([svgString], { type: 'image/svg+xml' });\n}\n\nfunction createSVGIcon(\n  descriptor: SVGCursorDescriptor,\n  options: Record<string, unknown>\n): string {\n  const { iconContent, iconSize, viewBox } = descriptor;\n  const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${iconSize}\" height=\"${iconSize}\" viewBox=\"0 0\n      ${viewBox.x} ${viewBox.y}\">\n      ${iconContent}\n    </svg>`;\n  return format(svgString, options);\n}\n\nfunction createSVGIconWithPointer(\n  descriptor: SVGCursorDescriptor,\n  options: Record<string, unknown>\n) {\n  const { iconContent, iconSize, viewBox, mousePointerGroupString } =\n    descriptor;\n  const scale = iconSize / Math.max(viewBox.x, viewBox.y, 1);\n  const svgSize = 16 + iconSize;\n  const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${svgSize}\" height=\"${svgSize}\" viewBox=\"0 0 ${svgSize} ${svgSize}\">\n      <g>${mousePointerGroupString}</g>\n      <g transform=\"translate(16, 16) scale(${scale})\">${iconContent}</g>\n    </svg>`;\n  return format(svgString, options);\n}\n","import { setElementCursor } from './elementCursor';\nimport MouseCursor from './MouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\n\n/**\n * Set the cursor for an HTML element. cursorNames can be either\n * cornerstone3DTools cursors or standard cursors.\n *\n * @param element - The element to set the cursor on.\n * @param cursorName - The name of the cursor to set. This can be\n * any cursor name either Cornerstone-specific cursor names or the standard\n * CSS cursor names.\n */\nfunction setCursorForElement(\n  element: HTMLDivElement,\n  cursorName: string\n): void {\n  let cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n  if (!cursor) {\n    cursor = MouseCursor.getDefinedCursor(cursorName);\n  }\n\n  if (!cursor) {\n    console.log(\n      `Cursor ${cursorName} is not defined either as SVG or as a standard cursor.`\n    );\n    cursor = MouseCursor.getDefinedCursor(cursorName);\n  }\n\n  setElementCursor(element, cursor);\n}\n\nexport default setCursorForElement;\n","import MouseCursor, { standardCursorNames } from './MouseCursor';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\nimport * as elementCursor from './elementCursor';\nimport setCursorForElement from './setCursorForElement';\nimport {\n  registerCursor,\n  svgCursorNames,\n  CursorSVG,\n} from './SVGCursorDescriptor';\n\n// Todo: this should be enum\nconst CursorNames = [...svgCursorNames, ...standardCursorNames];\n\nexport {\n  MouseCursor,\n  ImageMouseCursor,\n  SVGMouseCursor,\n  elementCursor,\n  registerCursor,\n  CursorNames,\n  CursorSVG,\n  setCursorForElement,\n};\n","import { MouseCursor } from '.';\n\nconst ELEMENT_CURSORS_MAP = Symbol('ElementCursorsMap');\n\n/*\n * Public Methods\n */\n\nfunction initElementCursor(\n  element: HTMLDivElement,\n  cursor: MouseCursor | null\n): void {\n  _getElementCursors(element)[0] = cursor;\n  _setElementCursor(element, cursor);\n}\n\nfunction _setElementCursor(\n  element: HTMLDivElement,\n  cursor: MouseCursor | null\n): void {\n  const cursors = _getElementCursors(element);\n  cursors[1] = cursors[0];\n  cursors[0] = cursor;\n  element.style.cursor = (\n    cursor instanceof MouseCursor\n      ? cursor\n      : MouseCursor.getDefinedCursor('auto')\n  ).getStyleProperty();\n}\n\nfunction resetElementCursor(element: HTMLDivElement): void {\n  _setElementCursor(element, _getElementCursors(element)[1]);\n}\n\nfunction hideElementCursor(element: HTMLDivElement): void {\n  _setElementCursor(element, MouseCursor.getDefinedCursor('none'));\n}\n\n/*\n * Helpers\n */\n\nfunction _getElementCursors(\n  element: HTMLDivElement\n): [MouseCursor | null, MouseCursor | null] {\n  let map = _getElementCursors[ELEMENT_CURSORS_MAP];\n  if (!(map instanceof WeakMap)) {\n    map = new WeakMap();\n    Object.defineProperty(_getElementCursors, ELEMENT_CURSORS_MAP, {\n      value: map,\n    });\n  }\n  let cursors = map.get(element);\n  if (!cursors) {\n    cursors = [null, null];\n    map.set(element, cursors);\n  }\n  return cursors;\n}\n\n/*\n * Exports\n */\nexport {\n  initElementCursor,\n  resetElementCursor,\n  hideElementCursor,\n  _setElementCursor as setElementCursor,\n};\n","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\n\nimport type { Types } from '@cornerstonejs/core';\nimport type {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { BaseTool } from '../base';\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport {\n  thresholdInsideCircle,\n  fillInsideCircle,\n} from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events, ToolModes } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  state as segmentationState,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\n/**\n * @public\n */\nclass BrushTool extends BaseTool {\n  static toolName;\n  private _editData: {\n    segmentation: Types.IImageVolume;\n    imageVolume: Types.IImageVolume; //\n    segmentsLocked: number[]; //\n  } | null;\n  private _hoverData?: {\n    brushCursor: any;\n    segmentationId: string;\n    segmentIndex: number;\n    segmentationRepresentationUID: string;\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    centerCanvas?: Array<number>;\n  };\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE_CIRCLE: fillInsideCircle,\n          THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n          ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n          FILL_INSIDE_SPHERE: fillInsideSphere,\n          ERASE_INSIDE_SPHERE: eraseInsideSphere,\n        },\n        strategySpecificConfiguration: {\n          THRESHOLD_INSIDE_CIRCLE: {\n            threshold: [-150, -70], // E.g. CT Fat // Only used during threshold strategies.\n          },\n        },\n        defaultStrategy: 'FILL_INSIDE_CIRCLE',\n        activeStrategy: 'FILL_INSIDE_CIRCLE',\n        brushSize: 25,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  onSetToolPassive = () => {\n    this.disableCursor();\n  };\n\n  onSetToolEnabled = () => {\n    this.disableCursor();\n  };\n\n  onSetToolDisabled = () => {\n    this.disableCursor();\n  };\n\n  private disableCursor() {\n    this._hoverData = undefined;\n  }\n\n  preMouseDownCallback = (\n    evt: EventTypes.MouseDownActivateEventType\n  ): boolean => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using the brush tool'\n      );\n    }\n\n    const { segmentationId, type } = activeSegmentationRepresentation;\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const { representationData } =\n      segmentationState.getSegmentation(segmentationId);\n\n    // Todo: are we going to support contour editing with this tool?\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n\n    const actors = viewport.getActors();\n\n    // Note: For tools that need the source data. Assumed to use\n    // First volume actor for now.\n    const firstVolumeActorUID = actors[0].uid;\n    const imageVolume = cache.getVolume(firstVolumeActorUID);\n\n    const viewportIdsToRender = [viewport.id];\n\n    this._editData = {\n      segmentation,\n      imageVolume,\n      segmentsLocked,\n    };\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportUIDs(\n      renderingEngine,\n      viewportIdsToRender\n    );\n\n    return true;\n  };\n\n  mouseMoveCallback = (evt: EventTypes.InteractionEventType): void => {\n    if (this.mode === ToolModes.Active) {\n      this.updateCursor(evt);\n    }\n  };\n\n  private updateCursor(evt: EventTypes.InteractionEventType) {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const { currentPoints } = eventData;\n    const centerCanvas = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      console.warn(\n        'No active segmentation detected, create one before using the brush tool'\n      );\n      return;\n    }\n\n    const { segmentationRepresentationUID, segmentationId } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const viewportIdsToRender = [viewport.id];\n\n    // Center of circle in canvas Coordinates\n\n    const brushCursor = {\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {},\n    };\n\n    this._hoverData = {\n      brushCursor,\n      centerCanvas,\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      segmentColor,\n      viewportIdsToRender,\n    };\n\n    this._calculateCursor(element, centerCanvas);\n\n    triggerAnnotationRenderForViewportUIDs(\n      renderingEngine,\n      viewportIdsToRender\n    );\n  }\n\n  private _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const { imageVolume, segmentation, segmentsLocked } = this._editData;\n\n    this.updateCursor(evt);\n\n    const {\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      brushCursor,\n      viewportIdsToRender,\n    } = this._hoverData;\n\n    const { data } = brushCursor;\n    const { viewPlaneNormal, viewUp } = brushCursor.metadata;\n\n    triggerAnnotationRenderForViewportUIDs(\n      renderingEngine,\n      viewportIdsToRender\n    );\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation, // todo: just pass the segmentationId instead\n      imageVolume,\n      segmentIndex,\n      segmentsLocked,\n      viewPlaneNormal,\n      toolGroupId: this.toolGroupId,\n      segmentationId,\n      segmentationRepresentationUID,\n      viewUp,\n      strategySpecificConfiguration:\n        this.configuration.strategySpecificConfiguration,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  private _calculateCursor(element, centerCanvas) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n    const { brushSize } = this.configuration;\n    // Center of circle in canvas Coordinates\n\n    const radius = brushSize;\n\n    const bottomCanvas: Types.Point2 = [\n      centerCanvas[0],\n      centerCanvas[1] + radius,\n    ];\n    const topCanvas: Types.Point2 = [centerCanvas[0], centerCanvas[1] - radius];\n    const leftCanvas: Types.Point2 = [\n      centerCanvas[0] - radius,\n      centerCanvas[1],\n    ];\n    const rightCanvas: Types.Point2 = [\n      centerCanvas[0] + radius,\n      centerCanvas[1],\n    ];\n\n    const { brushCursor } = this._hoverData;\n    const { data } = brushCursor;\n\n    if (data.handles === undefined) {\n      data.handles = {};\n    }\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    data.invalidated = false;\n  }\n\n  private _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const { imageVolume, segmentation, segmentsLocked } = this._editData;\n    const {\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      brushCursor,\n    } = this._hoverData;\n\n    const { data } = brushCursor;\n    const { viewPlaneNormal, viewUp } = brushCursor.metadata;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    this._editData = null;\n    this.updateCursor(evt);\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation,\n      imageVolume,\n      segmentIndex,\n      segmentsLocked,\n      viewPlaneNormal,\n      toolGroupId: this.toolGroupId,\n      segmentationId,\n      segmentationRepresentationUID,\n      viewUp,\n      strategySpecificConfiguration:\n        this.configuration.strategySpecificConfiguration,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  private _activateDraw = (element: HTMLDivElement): void => {\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  private _deactivateDraw = (element: HTMLDivElement): void => {\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n  };\n\n  public invalidateBrushCursor() {\n    if (this._hoverData !== undefined) {\n      const { data } = this._hoverData.brushCursor;\n\n      data.invalidated = true;\n    }\n  }\n\n  renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): void {\n    if (!this._hoverData) {\n      return;\n    }\n\n    const { viewport } = enabledElement;\n\n    const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return;\n    }\n\n    const brushCursor = this._hoverData.brushCursor;\n\n    if (brushCursor.data.invalidated === true) {\n      const { centerCanvas } = this._hoverData;\n      const { element } = viewport;\n\n      // This can be set true when changing the brush size programmatically\n      // whilst the cursor is being rendered.\n      this._calculateCursor(element, centerCanvas);\n    }\n\n    const toolMetadata = brushCursor.metadata;\n    const annotationUID = toolMetadata.brushCursorUID;\n\n    const data = brushCursor.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n  }\n}\n\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import { Types } from '@cornerstonejs/core';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nimport getBoundingBoxAroundShape from '../boundingBox/getBoundingBoxAroundShape';\n\nexport type ThresholdInformation = {\n  volume: Types.IImageVolume;\n  lower: number;\n  upper: number;\n};\n\nexport default function getBrushToolInstances(toolGroupId) {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const toolInstances = toolGroup._toolInstances;\n\n  if (!Object.keys(toolInstances).length) {\n    return;\n  }\n\n  // For each tool that has BrushTool as base class, set the brush size.\n  const brushBasedToolInstances = Object.values(toolInstances).filter(\n    (toolInstance) => toolInstance instanceof BrushTool\n  ) as BrushTool[];\n\n  return brushBasedToolInstances;\n}\n\nconst equalsCheck = (a, b) => {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\n\n/**\n * Given the center of a voxel in world coordinates, calculate the voxel\n * corners in world coords to calculate the voxel overlap in another volume\n */\nexport function getVoxelOverlap(\n  imageData,\n  dimensions,\n  voxelSpacing,\n  voxelCenter\n) {\n  const voxelCornersWorld = [];\n  for (let i = 0; i < 2; i++) {\n    for (let j = 0; j < 2; j++) {\n      for (let k = 0; k < 2; k++) {\n        const point = voxelCenter;\n        point[0] = point[0] + ((i * 2 - 1) * voxelSpacing[0]) / 2;\n        point[1] = point[1] + ((j * 2 - 1) * voxelSpacing[1]) / 2;\n        point[2] = point[2] + ((k * 2 - 1) * voxelSpacing[2]) / 2;\n        voxelCornersWorld.push(point);\n      }\n    }\n  }\n  const voxelCornersIJK = voxelCornersWorld.map(\n    (world) => csUtils.transformWorldToIndex(imageData, world) as Types.Point3\n  );\n  const overlapBounds = getBoundingBoxAroundShape(voxelCornersIJK, dimensions);\n\n  return overlapBounds;\n}\n\n/**\n * Prepare a list of volume information objects for callback functions\n */\nexport function processVolumes(\n  segmentationVolume: Types.IImageVolume,\n  thresholdVolumeInformation: ThresholdInformation[]\n) {\n  const { spacing: segmentationSpacing, imageData: segmentationImageData } =\n    segmentationVolume;\n  const scalarData = segmentationVolume.getScalarData();\n\n  // prepare a list of volume information objects for callback functions\n  const volumeInfoList = [];\n  let baseVolumeIdx = 0;\n  for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n    const { imageData, spacing, dimensions } =\n      thresholdVolumeInformation[i].volume;\n\n    const volumeSize =\n      thresholdVolumeInformation[i].volume.getScalarData().length;\n    // discover the index of the volume the segmentation data is based on\n    if (\n      volumeSize === scalarData.length &&\n      equalsCheck(spacing, segmentationSpacing)\n    ) {\n      baseVolumeIdx = i;\n    }\n\n    // prepare information used in callback functions\n    const referenceValues = imageData.getPointData().getScalars().getData();\n    const lower = thresholdVolumeInformation[i].lower;\n    const upper = thresholdVolumeInformation[i].upper;\n\n    volumeInfoList.push({\n      imageData,\n      referenceValues,\n      lower,\n      upper,\n      spacing,\n      dimensions,\n      volumeSize,\n    });\n  }\n\n  return {\n    volumeInfoList,\n    baseVolumeIdx,\n  };\n}\n","import { Types } from '@cornerstonejs/core';\nimport { pointInShapeCallback } from '../../utilities';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { BoundsIJK } from '../../types';\nimport {\n  getVoxelOverlap,\n  processVolumes,\n  ThresholdInformation,\n} from './utilities';\n\nexport type ThresholdRangeOptions = {\n  overwrite: boolean;\n  boundsIJK: BoundsIJK;\n  overlapType?: number;\n};\n\n/**\n * It thresholds a segmentation volume based on a set of threshold values with\n * respect to a list of volumes and respective threshold ranges.\n * @param segmentationVolume - the segmentation volume to be modified\n * @param thresholdVolumeInformation - array of objects containing volume data\n * and a range (lower and upper values) to threshold\n * @param options - the options for thresholding\n * As there is a chance the volumes might have different dimensions and spacing,\n * could be the case of no 1 to 1 mapping. So we need to work with the idea of\n * voxel overlaps (1 to many mappings). We consider all intersections valid, to\n * avoid the complexity to calculate a minimum voxel intersection percentage.\n * This function, given a voxel center and spacing, calculates the overlap of\n * the voxel with another volume and range check the voxels in the overlap.\n * Three situations can occur: all voxels pass the range check, some voxels pass\n * or none voxels pass. The overlapType parameter indicates if the user requires\n * all voxels pass (overlapType = 1) or any voxel pass (overlapType = 0)\n *\n * @returns segmented volume\n */\nfunction thresholdVolumeByRange(\n  segmentationVolume: Types.IImageVolume,\n  thresholdVolumeInformation: ThresholdInformation[],\n  options: ThresholdRangeOptions\n): Types.IImageVolume {\n  const { imageData: segmentationImageData } = segmentationVolume;\n  const scalarData = segmentationVolume.getScalarData();\n\n  const { overwrite, boundsIJK } = options;\n  const overlapType = options?.overlapType || 0;\n\n  // set the segmentation to all zeros\n  if (overwrite) {\n    for (let i = 0; i < scalarData.length; i++) {\n      scalarData[i] = 0;\n    }\n  }\n\n  const { baseVolumeIdx, volumeInfoList } = processVolumes(\n    segmentationVolume,\n    thresholdVolumeInformation\n  );\n\n  // global variables used in callbackOverlap function\n  let overlaps, total, range;\n\n  const testOverlapRange = (volumeInfo, voxelSpacing, voxelCenter) => {\n    /**\n     * This callback function will test all overlaps between a voxel in base\n     * volume (the reference for segmentation volume creation) and voxels in other\n     * volumes.\n     */\n    const callbackOverlap = ({ value }) => {\n      total = total + 1;\n      if (value >= range.lower && value <= range.upper) {\n        overlaps = overlaps + 1;\n      }\n    };\n\n    const { imageData, dimensions, lower, upper } = volumeInfo;\n\n    const overlapBounds = getVoxelOverlap(\n      imageData,\n      dimensions,\n      voxelSpacing,\n      voxelCenter\n    );\n\n    // reset global variables and setting the range check\n    total = 0;\n    overlaps = 0;\n    range = { lower, upper };\n\n    let overlapTest = false;\n\n    // check all voxel overlaps\n    pointInShapeCallback(imageData, () => true, callbackOverlap, overlapBounds);\n\n    if (overlapType === 0) {\n      overlapTest = overlaps > 0; // any voxel overlap is accepted\n    } else if (overlapType == 1) {\n      overlapTest = overlaps === total; // require all voxel overlaps\n    }\n    return overlapTest;\n  };\n\n  // range checks a voxel in a volume with same dimension as the segmentation\n  const testRange = (volumeInfo, pointIJK) => {\n    const { imageData, referenceValues, lower, upper } = volumeInfo;\n    const offset = imageData.computeOffsetIndex(pointIJK);\n\n    const value = referenceValues[offset];\n    if (value <= lower || value >= upper) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  /**\n   * This callback function will test all overlaps between a voxel in base\n   * volume (the reference for segmentation volume creation) and voxels in other\n   * volumes.\n   */\n  const callback = ({ index, pointIJK, pointLPS }) => {\n    let insert = volumeInfoList.length > 0;\n    for (let i = 0; i < volumeInfoList.length; i++) {\n      // if volume has the same size as segmentation volume, just range check\n      if (volumeInfoList[i].volumeSize === scalarData.length) {\n        insert = testRange(volumeInfoList[i], pointIJK);\n      } else {\n        // if not, need to calculate overlaps\n        insert = testOverlapRange(\n          volumeInfoList[i],\n          volumeInfoList[baseVolumeIdx].spacing,\n          pointLPS\n        );\n      }\n      if (!insert) {\n        break;\n      }\n    }\n\n    // Todo: make the segmentIndex a parameter\n    if (insert) scalarData[index] = 1;\n  };\n\n  pointInShapeCallback(segmentationImageData, () => true, callback, boundsIJK);\n\n  triggerSegmentationDataModified(segmentationVolume.volumeId);\n\n  return segmentationVolume;\n}\n\nexport default thresholdVolumeByRange;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\n\n/**\n * Tool that pans the camera in the plane defined by the viewPlaneNormal and the viewUp.\n */\nclass PanTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n\n    const deltaPointsWorld = deltaPoints.world;\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    enabledElement.viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n    enabledElement.viewport.render();\n  }\n}\n\nPanTool.toolName = 'Pan';\nexport default PanTool;\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\n\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\nimport { BaseTool } from './base';\n\n/**\n * Tool that rotates the camera in the plane defined by the viewPlaneNormal and the viewUp.\n */\nclass TrackballRotateTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  mouseDragCallback: (evt: EventTypes.InteractionEventType) => void;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        rotateIncrementDegrees: 2,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this.touchDragCallback = this._dragCallback.bind(this);\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  rotateCamera = (viewport, centerWorld, axis, angle) => {\n    const vtkCamera = viewport.getVtkActiveCamera();\n    const viewUp = vtkCamera.getViewUp();\n    const focalPoint = vtkCamera.getFocalPoint();\n    const position = vtkCamera.getPosition();\n\n    const newPosition: Types.Point3 = [0, 0, 0];\n    const newFocalPoint: Types.Point3 = [0, 0, 0];\n    const newViewUp: Types.Point3 = [0, 0, 0];\n\n    const transform = mat4.identity(new Float32Array(16));\n    mat4.translate(transform, transform, centerWorld);\n    mat4.rotate(transform, transform, angle, axis);\n    mat4.translate(transform, transform, [\n      -centerWorld[0],\n      -centerWorld[1],\n      -centerWorld[2],\n    ]);\n    vec3.transformMat4(newPosition, position, transform);\n    vec3.transformMat4(newFocalPoint, focalPoint, transform);\n\n    mat4.identity(transform);\n    mat4.rotate(transform, transform, angle, axis);\n    vec3.transformMat4(newViewUp, viewUp, transform);\n\n    viewport.setCamera({\n      position: newPosition,\n      viewUp: newViewUp,\n      focalPoint: newFocalPoint,\n    });\n  };\n\n  // pseudocode inspired from\n  // https://github.com/kitware/vtk-js/blob/HEAD/Sources/Interaction/Manipulators/MouseCameraUnicamRotateManipulator/index.js\n  _dragCallback(evt: EventTypes.InteractionEventType): void {\n    const { element, currentPoints, lastPoints } = evt.detail;\n    const currentPointsCanvas = currentPoints.canvas;\n    const lastPointsCanvas = lastPoints.canvas;\n    const { rotateIncrementDegrees } = this.configuration;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const camera = viewport.getCamera();\n    const width = element.clientWidth;\n    const height = element.clientHeight;\n\n    const normalizedPosition = [\n      currentPointsCanvas[0] / width,\n      currentPointsCanvas[1] / height,\n    ];\n\n    const normalizedPreviousPosition = [\n      lastPointsCanvas[0] / width,\n      lastPointsCanvas[1] / height,\n    ];\n\n    const center: Types.Point2 = [width * 0.5, height * 0.5];\n    // NOTE: centerWorld corresponds to the focal point in cornerstone3D\n    const centerWorld = viewport.canvasToWorld(center);\n    const normalizedCenter = [0.5, 0.5];\n\n    const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n    const op = [normalizedPreviousPosition[0], 0, 0];\n    const oe = [normalizedPosition[0], 0, 0];\n\n    const opsq = op[0] ** 2;\n    const oesq = oe[0] ** 2;\n\n    const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n    const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n\n    const nop: Types.Point3 = [op[0], 0, lop];\n    vtkMath.normalize(nop);\n    const noe: Types.Point3 = [oe[0], 0, loe];\n    vtkMath.normalize(noe);\n\n    const dot = vtkMath.dot(nop, noe);\n    if (Math.abs(dot) > 0.0001) {\n      const angleX =\n        -2 *\n        Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n        Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n        rotateIncrementDegrees;\n\n      const upVec = camera.viewUp;\n      const atV = camera.viewPlaneNormal;\n      const rightV: Types.Point3 = [0, 0, 0];\n      const forwardV: Types.Point3 = [0, 0, 0];\n\n      vtkMath.cross(upVec, atV, rightV);\n      vtkMath.normalize(rightV);\n\n      vtkMath.cross(atV, rightV, forwardV);\n      vtkMath.normalize(forwardV);\n      vtkMath.normalize(upVec);\n\n      this.rotateCamera(viewport, centerWorld, forwardV, angleX);\n\n      const angleY =\n        (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n        rotateIncrementDegrees;\n\n      this.rotateCamera(viewport, centerWorld, rightV, angleY);\n\n      viewport.render();\n    }\n  }\n}\n\nTrackballRotateTool.toolName = 'TrackballRotate';\nexport default TrackballRotateTool;\n","import { BaseTool } from './base';\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  StackViewport,\n  utilities,\n  cache,\n  Types,\n} from '@cornerstonejs/core';\nimport { EventTypes } from '../types';\n\n// Todo: should move to configuration\nconst DEFAULT_MULTIPLIER = 4;\nconst DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;\nconst PT = 'PT';\n\n/**\n * WindowLevel tool manipulates the windowLevel applied to a viewport. It\n * provides a way to set the windowCenter and windowWidth of a viewport\n * by dragging mouse over the image.\n *\n */\nclass WindowLevelTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this.mouseDragCallback(evt);\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n\n    let volumeId,\n      lower,\n      upper,\n      modality,\n      newRange,\n      viewportsContainingVolumeUID;\n    let isPreScaled = false;\n\n    if (viewport instanceof VolumeViewport) {\n      const targetId = this.getTargetId(viewport as Types.IVolumeViewport);\n      volumeId = targetId.split('volumeId:')[1];\n      viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(\n        volumeId,\n        renderingEngine.id\n      );\n      const properties = viewport.getProperties();\n      ({ lower, upper } = properties.voiRange);\n      const volume = cache.getVolume(volumeId);\n      modality = volume.metadata.Modality;\n      isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;\n    } else if (viewport instanceof StackViewport) {\n      const properties = viewport.getProperties();\n      modality = viewport.modality;\n      ({ lower, upper } = properties.voiRange);\n      const { preScale } = viewport.getImageData();\n      isPreScaled =\n        preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;\n    } else {\n      throw new Error('Viewport is not a valid type');\n    }\n\n    // If modality is PT, treat it special to not include the canvas delta in\n    // the x direction. For other modalities, use the canvas delta in both\n    // directions, and if the viewport is a volumeViewport, the multiplier\n    // is calculate using the volume min and max.\n    if (modality === PT) {\n      newRange = this.getPTScaledNewRange({\n        deltaPointsCanvas: deltaPoints.canvas,\n        lower,\n        upper,\n        clientHeight: element.clientHeight,\n        isPreScaled,\n        viewport,\n        volumeId,\n      });\n    } else {\n      newRange = this.getNewRange({\n        viewport,\n        deltaPointsCanvas: deltaPoints.canvas,\n        volumeId,\n        lower,\n        upper,\n      });\n    }\n\n    if (viewport instanceof StackViewport) {\n      viewport.setProperties({\n        voiRange: newRange,\n      });\n\n      viewport.render();\n      return;\n    }\n\n    if (viewport instanceof VolumeViewport) {\n      viewport.setProperties({\n        voiRange: newRange,\n      });\n\n      viewportsContainingVolumeUID.forEach((vp) => {\n        vp.render();\n      });\n      return;\n    }\n  }\n\n  getPTScaledNewRange({\n    deltaPointsCanvas,\n    lower,\n    upper,\n    clientHeight,\n    viewport,\n    volumeId,\n    isPreScaled,\n  }) {\n    let multiplier = DEFAULT_MULTIPLIER;\n\n    if (isPreScaled) {\n      multiplier = 5 / clientHeight;\n    } else {\n      multiplier =\n        this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n        DEFAULT_MULTIPLIER;\n    }\n\n    const deltaY = deltaPointsCanvas[1];\n    const wcDelta = deltaY * multiplier;\n\n    upper -= wcDelta;\n    upper = isPreScaled ? Math.max(upper, 0.1) : upper;\n\n    return { lower, upper };\n  }\n\n  getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {\n    const multiplier =\n      this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n      DEFAULT_MULTIPLIER;\n\n    const wwDelta = deltaPointsCanvas[0] * multiplier;\n    const wcDelta = deltaPointsCanvas[1] * multiplier;\n\n    let { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(\n      lower,\n      upper\n    );\n\n    windowWidth += wwDelta;\n    windowCenter += wcDelta;\n\n    windowWidth = Math.max(windowWidth, 1);\n\n    // Convert back to range\n    return utilities.windowLevel.toLowHighRange(windowWidth, windowCenter);\n  }\n\n  _getMultiplierFromDynamicRange(viewport, volumeId) {\n    let imageDynamicRange;\n\n    if (volumeId) {\n      const imageVolume = cache.getVolume(volumeId);\n      const { dimensions } = imageVolume;\n      const scalarData = imageVolume.getScalarData();\n      const calculatedDynamicRange = this._getImageDynamicRangeFromMiddleSlice(\n        scalarData,\n        dimensions\n      );\n      const BitsStored = imageVolume?.metadata?.BitsStored;\n      const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;\n      // Burned in Pixels often use pixel values above the BitsStored.\n      // This results in a multiplier which is way higher than what you would\n      // want in practice. Thus we take the min between the metadata dynamic\n      // range and actual middel slice dynamic range.\n      imageDynamicRange = Math.min(\n        calculatedDynamicRange,\n        metadataDynamicRange\n      );\n    } else {\n      imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);\n    }\n\n    const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;\n\n    let multiplier = DEFAULT_MULTIPLIER;\n\n    if (ratio > 1) {\n      multiplier = Math.round(ratio);\n    }\n    return multiplier;\n  }\n\n  _getImageDynamicRangeFromViewport(viewport) {\n    const { imageData } = viewport.getImageData();\n    const dimensions = imageData.getDimensions();\n\n    let scalarData;\n    // if getScalarData is a method on imageData\n    if (imageData.getScalarData) {\n      scalarData = imageData.getScalarData();\n    } else {\n      scalarData = imageData.getPointData().getScalars();\n    }\n\n    if (dimensions[2] !== 1) {\n      return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);\n    }\n\n    let range;\n    if (scalarData.getRange) {\n      range = scalarData.getRange();\n    } else {\n      const { min, max } = this._getMinMax(scalarData, scalarData.length);\n      range = [min, max];\n    }\n\n    return range[1] - range[0];\n  }\n\n  _getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {\n    const middleSliceIndex = Math.floor(dimensions[2] / 2);\n\n    const frameLength = dimensions[0] * dimensions[1];\n    let bytesPerVoxel;\n    let TypedArrayConstructor;\n\n    if (scalarData instanceof Float32Array) {\n      bytesPerVoxel = 4;\n      TypedArrayConstructor = Float32Array;\n    } else if (scalarData instanceof Uint8Array) {\n      bytesPerVoxel = 1;\n      TypedArrayConstructor = Uint8Array;\n    } else if (scalarData instanceof Uint16Array) {\n      bytesPerVoxel = 2;\n      TypedArrayConstructor = Uint16Array;\n    } else if (scalarData instanceof Int16Array) {\n      bytesPerVoxel = 2;\n      TypedArrayConstructor = Int16Array;\n    }\n\n    const buffer = scalarData.buffer;\n    const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;\n    const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);\n\n    const { max, min } = this._getMinMax(frame, frameLength);\n\n    return max - min;\n  };\n\n  private _getMinMax(frame: Uint8Array | Float32Array, frameLength: number) {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let i = 0; i < frameLength; i++) {\n      const voxel = frame[i];\n\n      if (voxel < min) {\n        min = voxel;\n      }\n\n      if (voxel > max) {\n        max = voxel;\n      }\n    }\n    return { max, min };\n  }\n}\n\nWindowLevelTool.toolName = 'WindowLevel';\nexport default WindowLevelTool;\n","import {\n  getEnabledElementByIds,\n  VolumeViewport,\n  StackViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { scroll } from '../utilities';\nimport { PublicToolProps, ToolProps, EventTypes } from '../types';\n\n/**\n * The StackScrollTool is a tool that allows the user to scroll through a\n * stack of images by pressing the mouse click and dragging\n */\nclass StackScrollTool extends BaseTool {\n  static toolName;\n  deltaY: number;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        invert: false,\n        debounceIfNotLoaded: true,\n        loop: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.deltaY = 1;\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { deltaPoints, viewportId, renderingEngineId } = evt.detail;\n    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n\n    const targetId = this.getTargetId(viewport);\n    const { debounceIfNotLoaded, invert, loop } = this.configuration;\n\n    const deltaPointY = deltaPoints.canvas[1];\n\n    let volumeId;\n    if (viewport instanceof VolumeViewport) {\n      volumeId = targetId.split('volumeId:')[1];\n    }\n\n    const pixelsPerImage = this._getPixelPerImage(viewport);\n    const deltaY = deltaPointY + this.deltaY;\n\n    if (!pixelsPerImage) {\n      return;\n    }\n\n    if (Math.abs(deltaY) >= pixelsPerImage) {\n      const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);\n\n      scroll(viewport, {\n        delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,\n        volumeId,\n        debounceLoading: debounceIfNotLoaded,\n        loop: loop,\n      });\n\n      this.deltaY = deltaY % pixelsPerImage;\n    } else {\n      this.deltaY = deltaY;\n    }\n  }\n\n  _getPixelPerImage(viewport) {\n    const { element } = viewport;\n    const numberOfSlices = this._getNumberOfSlices(viewport);\n\n    // The Math.max here makes it easier to mouseDrag-scroll small or really large image stacks\n    return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));\n  }\n\n  _getNumberOfSlices(viewport) {\n    if (viewport instanceof VolumeViewport) {\n      const { numberOfSlices } =\n        csUtils.getImageSliceDataForVolumeViewport(viewport);\n      return numberOfSlices;\n    } else if (viewport instanceof StackViewport) {\n      return viewport.getImageIds().length;\n    }\n  }\n}\n\nStackScrollTool.toolName = 'StackScroll';\nexport default StackScrollTool;\n","import type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\ntype Line = [Types.Point3, Types.Point3];\n\n/**\n * It returns the angle between two lines in degrees.\n * The angle measured is that between the vectors\n * line1[1]->line1[0] AND line2[0]->line2[1].\n * @param line1 - Line = [p1, p2]\n * @param line2 - Line = [p3, p4]\n * @returns The angle between two lines in degrees.\n */\nexport default function angleBetweenLines(line1: Line, line2: Line): number {\n  const [p1, p2] = line1;\n  const [p3, p4] = line2;\n\n  const v1 = vec3.sub(vec3.create(), p2, p1);\n  const v2 = vec3.sub(vec3.create(), p3, p4);\n\n  const dot = vec3.dot(v1, v2);\n\n  const v1Length = vec3.length(v1);\n  const v2Length = vec3.length(v2);\n\n  const cos = dot / (v1Length * v2Length);\n\n  const radian = Math.acos(cos);\n\n  return (radian * 180) / Math.PI;\n}\n","import {\n  BaseVolumeViewport,\n  getEnabledElement,\n  Types,\n} from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nimport { PublicToolProps, ToolProps, EventTypes } from '../types';\n\n/**\n * The PlanarRotateTool is a tool that allows the user to rotate\n * the image by pressing the mouse click and dragging\n */\nclass PlanarRotateTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.MouseDragEventType) => void;\n  mouseDragCallback: (evt: EventTypes.MouseDragEventType) => void;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this.touchDragCallback = this._dragCallback.bind(this);\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  _dragCallback(evt: EventTypes.MouseDragEventType) {\n    const { element, currentPoints, startPoints } = evt.detail;\n    const currentPointWorld = currentPoints.world;\n    const startPointWorld = startPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const camera = viewport.getCamera();\n    const width = element.clientWidth;\n    const height = element.clientHeight;\n\n    const centerCanvas: Types.Point2 = [width * 0.5, height * 0.5];\n    const centerWorld = viewport.canvasToWorld(centerCanvas);\n\n    let angle = angleBetweenLines(\n      [startPointWorld, centerWorld],\n      [centerWorld, currentPointWorld]\n    );\n\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n    const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n    const cross = vec3.cross(vec3.create(), v1, v2);\n    if (vec3.dot(viewPlaneNormal, cross) > 0) {\n      angle = -angle;\n    }\n\n    if (Number.isNaN(angle)) return;\n\n    if (viewport instanceof BaseVolumeViewport) {\n      const rotAngle = (angle * Math.PI) / 180;\n      const rotMat = mat4.identity(new Float32Array(16));\n      mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n      const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n      viewport.setCamera({ viewUp: rotatedViewUp as Types.Point3 });\n    } else {\n      const { rotation } = (viewport as Types.IStackViewport).getProperties();\n      viewport.setProperties({ rotation: rotation + angle });\n    }\n\n    viewport.render();\n  }\n}\n\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { MouseWheelEventType } from '../types/EventTypes';\nimport scroll from '../utilities/scroll';\n\n/**\n * The StackScrollMouseWheelTool is a tool that allows the user to scroll through a\n * stack of images using the mouse wheel\n */\nclass StackScrollMouseWheelTool extends BaseTool {\n  static toolName;\n\n  _configuration: any;\n\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        invert: false,\n        debounceIfNotLoaded: true,\n        loop: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  mouseWheelCallback(evt: MouseWheelEventType): void {\n    const { wheel, element } = evt.detail;\n    const { direction } = wheel;\n    const { invert } = this.configuration;\n    const { viewport } = getEnabledElement(element);\n    const delta = direction * (invert ? -1 : 1);\n\n    const targetId = this.getTargetId(viewport);\n    const volumeId = targetId.split('volumeId:')[1];\n\n    scroll(viewport, {\n      delta,\n      debounceLoading: this.configuration.debounceIfNotLoaded,\n      loop: this.configuration.loop,\n      volumeId,\n    });\n  }\n}\n\nStackScrollMouseWheelTool.toolName = 'StackScrollMouseWheel';\nexport default StackScrollMouseWheelTool;\n","import { vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { getEnabledElement, Types } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\n\n/**\n * ZoomTool tool manipulates the camera zoom applied to a viewport. It\n * provides a way to set the zoom of a viewport by dragging mouse over the image.\n *\n */\nclass ZoomTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  mouseDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  initialMousePosWorld: Types.Point3;\n  dirVec: Types.Point3;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        // whether zoom to the center of the image OR zoom to the mouse position\n        zoomToCenter: false,\n        minZoomScale: 0.1,\n        maxZoomScale: 30,\n        pinchToZoom: true,\n        pan: true,\n        invert: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.initialMousePosWorld = [0, 0, 0];\n    this.dirVec = [0, 0, 0];\n    if (this.configuration.pinchToZoom) {\n      this.touchDragCallback = this._pinchCallback.bind(this);\n    } else {\n      this.touchDragCallback = this._dragCallback.bind(this);\n    }\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventData = evt.detail;\n    const { element, currentPoints } = eventData;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint } = camera;\n\n    this.initialMousePosWorld = worldPos;\n\n    // The direction vector from the clicked location to the focal point\n    // which would act as the vector to translate the image (if zoomToCenter is false)\n    let dirVec = vec3.fromValues(\n      focalPoint[0] - worldPos[0],\n      focalPoint[1] - worldPos[1],\n      focalPoint[2] - worldPos[2]\n    );\n\n    dirVec = vec3.normalize(vec3.create(), dirVec);\n\n    this.dirVec = dirVec as Types.Point3;\n\n    // we should not return true here, returning true in the preMouseDownCallback\n    // means that the event is handled by the tool and no other methods\n    // can claim the event, which will result in a bug where having Zoom on primary\n    // and clicking on an annotation will not manipulate the annotation, but will\n    // instead zoom the image (which is not what we want), so we return false here\n    return false;\n  };\n\n  preTouchStartCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    if (!this.configuration.pinchToZoom) {\n      return this.preMouseDownCallback(evt);\n    }\n  };\n\n  _pinchCallback(evt: EventTypes.InteractionEventType) {\n    const pointsList = (evt as EventTypes.TouchStartEventType).detail\n      .currentPointsList;\n\n    if (pointsList.length > 1) {\n      const { element, currentPoints } = evt.detail;\n      const enabledElement = getEnabledElement(element);\n      const { viewport } = enabledElement;\n      const camera = viewport.getCamera();\n      const worldPos = currentPoints.world;\n      const { focalPoint } = camera;\n      this.initialMousePosWorld = worldPos;\n      // The direction vector from the clicked location to the focal point\n      // which would act as the vector to translate the image (if zoomToCenter is false)\n      let dirVec = vec3.fromValues(\n        focalPoint[0] - worldPos[0],\n        focalPoint[1] - worldPos[1],\n        focalPoint[2] - worldPos[2]\n      );\n      dirVec = vec3.normalize(vec3.create(), dirVec);\n\n      this.dirVec = dirVec as Types.Point3;\n      if (camera.parallelProjection) {\n        this._dragParallelProjection(evt, viewport, camera, true);\n      } else {\n        this._dragPerspectiveProjection(evt, viewport, camera, true);\n      }\n      viewport.render();\n    }\n\n    if (this.configuration.pan) {\n      this._panCallback(evt);\n    }\n  }\n\n  // Takes ICornerstoneEvent, Mouse or Touch\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { element } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n\n    if (camera.parallelProjection) {\n      this._dragParallelProjection(evt, viewport, camera);\n    } else {\n      this._dragPerspectiveProjection(evt, viewport, camera);\n    }\n\n    viewport.render();\n  }\n\n  _dragParallelProjection = (\n    evt: EventTypes.InteractionEventType,\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    camera: Types.ICamera,\n    pinch = false\n  ): void => {\n    const { element, deltaPoints } = evt.detail;\n    const deltaY = pinch\n      ? (evt as EventTypes.TouchDragEventType).detail.deltaDistance.canvas\n      : deltaPoints.canvas[1];\n\n    const size = [element.clientWidth, element.clientHeight];\n    const { parallelScale, focalPoint, position } = camera;\n\n    const zoomScale = 1.5 / size[1];\n    const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n\n    let parallelScaleToSet = (1.0 - k) * parallelScale;\n\n    let focalPointToSet = focalPoint;\n    let positionToSet = position;\n\n    // if we're not zooming to the center, we need to adjust the focal point\n    // and position to set the focal point and position to the value that\n    // would simulate the zoom to the mouse position\n    if (!this.configuration.zoomToCenter) {\n      // Distance of the initial mouse position (world) to the focal point\n      // which is always the center of the canvas.\n      const distanceToCanvasCenter = vec3.distance(\n        focalPoint,\n        this.initialMousePosWorld\n      );\n      // const initialYDistanceBetweenInitialAndFocalPoint;\n\n      // we need to move in the direction of the vector between the focal point\n      // and the initial mouse position by some amount until ultimately we\n      // reach the mouse position at the focal point\n      const zoomScale = 5 / size[1];\n      const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n      parallelScaleToSet = (1.0 - k) * parallelScale;\n\n      positionToSet = vec3.scaleAndAdd(\n        vec3.create(),\n        position,\n        this.dirVec,\n        -distanceToCanvasCenter * k\n      ) as Types.Point3;\n\n      focalPointToSet = vec3.scaleAndAdd(\n        vec3.create(),\n        focalPoint,\n        this.dirVec,\n        -distanceToCanvasCenter * k\n      ) as Types.Point3;\n    }\n\n    // If it is a regular GPU accelerated viewport, then parallel scale\n    // has a physical meaning and we can use that to determine the threshold\n    // Added spacing preset in case there is no imageData on viewport\n    const imageData = viewport.getImageData();\n    let spacing = [1, 1, 1];\n    if (imageData) {\n      spacing = imageData.spacing;\n    }\n\n    const { minZoomScale, maxZoomScale } = this.configuration;\n\n    const t = element.clientHeight * spacing[1] * 0.5;\n    const scale = t / parallelScaleToSet;\n\n    let cappedParallelScale = parallelScaleToSet;\n    let thresholdExceeded = false;\n\n    if (imageData) {\n      if (scale < minZoomScale) {\n        cappedParallelScale = t / minZoomScale;\n        thresholdExceeded = true;\n      } else if (scale >= maxZoomScale) {\n        cappedParallelScale = t / maxZoomScale;\n        thresholdExceeded = true;\n      }\n    }\n\n    viewport.setCamera({\n      parallelScale: cappedParallelScale,\n      focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,\n      position: thresholdExceeded ? position : positionToSet,\n    });\n  };\n\n  _dragPerspectiveProjection = (\n    evt: EventTypes.InteractionEventType,\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    camera: Types.ICamera,\n    pinch = false\n  ): void => {\n    const { element, deltaPoints } = evt.detail;\n    const deltaY = pinch\n      ? (evt as EventTypes.TouchDragEventType).detail.deltaDistance.canvas\n      : deltaPoints.canvas[1];\n\n    const size = [element.clientWidth, element.clientHeight];\n    const { position, focalPoint, viewPlaneNormal } = camera;\n\n    const distance = vtkMath.distance2BetweenPoints(position, focalPoint);\n    const zoomScale = Math.sqrt(distance) / size[1];\n\n    const directionOfProjection = [\n      -viewPlaneNormal[0],\n      -viewPlaneNormal[1],\n      -viewPlaneNormal[2],\n    ];\n\n    const k = this.configuration.invert\n      ? deltaY / zoomScale\n      : deltaY * zoomScale;\n\n    let tmp = k * directionOfProjection[0];\n    position[0] += tmp;\n    focalPoint[0] += tmp;\n\n    tmp = k * directionOfProjection[1];\n    position[1] += tmp;\n    focalPoint[1] += tmp;\n\n    tmp = k * directionOfProjection[2];\n    position[2] += tmp;\n    focalPoint[2] += tmp;\n\n    viewport.setCamera({ position, focalPoint });\n  };\n\n  _panCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n\n    const deltaPointsWorld = deltaPoints.world;\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    enabledElement.viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n    enabledElement.viewport.render();\n  }\n}\n\nZoomTool.toolName = 'Zoom';\nexport default ZoomTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { mat4, vec3 } from 'gl-matrix';\nimport { PublicToolProps, ToolProps } from '../types';\nimport { MouseWheelEventType } from '../types/EventTypes';\n\nconst DIRECTIONS = {\n  X: [1, 0, 0],\n  Y: [0, 1, 0],\n  Z: [0, 0, 1],\n  CUSTOM: [],\n};\n\n/**\n * Tool that rotates the camera on mouse wheel.\n * It rotates the camera around the focal point, and around a defined axis. Default\n * axis is set to be Z axis, but it can be configured to any custom normalized axis.\n *\n */\nclass VolumeRotateMouseWheelTool extends BaseTool {\n  static toolName;\n  _configuration: any;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        direction: DIRECTIONS.Z,\n        rotateIncrementDegrees: 0.5,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  mouseWheelCallback(evt: MouseWheelEventType) {\n    // https://github.com/kitware/vtk-js/blob/HEAD/Sources/Interaction/Manipulators/MouseCameraUnicamRotateManipulator/index.js#L73\n    const { element, wheel } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { direction, rotateIncrementDegrees } = this.configuration;\n\n    const camera = viewport.getCamera();\n    const { viewUp, position, focalPoint } = camera;\n\n    const { direction: deltaY } = wheel;\n\n    const [cx, cy, cz] = focalPoint;\n    const [ax, ay, az] = direction;\n\n    const angle = deltaY * rotateIncrementDegrees;\n\n    // position[3] = 1.0\n    // focalPoint[3] = 1.0\n    // viewUp[3] = 0.0\n\n    const newPosition: Types.Point3 = [0, 0, 0];\n    const newFocalPoint: Types.Point3 = [0, 0, 0];\n    const newViewUp: Types.Point3 = [0, 0, 0];\n\n    const transform = mat4.identity(new Float32Array(16));\n    mat4.translate(transform, transform, [cx, cy, cz]);\n    mat4.rotate(transform, transform, angle, [ax, ay, az]);\n    mat4.translate(transform, transform, [-cx, -cy, -cz]);\n    vec3.transformMat4(newPosition, position, transform);\n    vec3.transformMat4(newFocalPoint, focalPoint, transform);\n\n    mat4.identity(transform);\n    mat4.rotate(transform, transform, angle, [ax, ay, az]);\n    vec3.transformMat4(<Types.Point3>newViewUp, viewUp, transform);\n\n    viewport.setCamera({\n      position: newPosition,\n      viewUp: newViewUp,\n      focalPoint: newFocalPoint,\n    });\n\n    viewport.render();\n  }\n}\n\nVolumeRotateMouseWheelTool.toolName = 'VolumeRotateMouseWheel';\nexport default VolumeRotateMouseWheelTool;\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Given two world positions and an orthogonal view to an `imageVolume` defined\n * by a `viewPlaneNormal` and a `viewUp`, get the width and height in world coordinates\n * of the rectangle defined by the two points. The implementation works both with orthogonal\n * non-orthogonal rectangles.\n *\n * @param viewPlaneNormal - The normal of the view.\n * @param viewUp - The up direction of the view.\n * @param imageVolume - The imageVolume to use to measure.\n * @param topLeftWorld - The first world position.\n * @param bottomRightWorld - The second world position.\n *\n * @returns The `worldWidth` and `worldHeight`.\n */\nexport default function getWorldWidthAndHeightFromCorners(\n  viewPlaneNormal: Types.Point3,\n  viewUp: Types.Point3,\n  topLeftWorld: Types.Point3,\n  bottomRightWorld: Types.Point3\n): { worldWidth: number; worldHeight: number } {\n  const viewRight = vec3.create();\n\n  vec3.cross(viewRight, <vec3>viewUp, <vec3>viewPlaneNormal);\n\n  const pos1 = vec3.fromValues(...topLeftWorld);\n  const pos2 = vec3.fromValues(...bottomRightWorld);\n\n  const diagonal = vec3.create();\n  vec3.subtract(diagonal, pos1, pos2);\n\n  const diagonalLength = vec3.length(diagonal);\n\n  // When the two points are very close to each other return width as 0\n  // to avoid NaN the cosTheta formula calculation\n  if (diagonalLength < 0.0001) {\n    return { worldWidth: 0, worldHeight: 0 };\n  }\n\n  const cosTheta =\n    vec3.dot(diagonal, viewRight) / (diagonalLength * vec3.length(viewRight));\n\n  const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);\n\n  const worldWidth = sinTheta * diagonalLength;\n  const worldHeight = cosTheta * diagonalLength;\n\n  return { worldWidth, worldHeight };\n}\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n/**\n * Returns a point based on some criteria (e.g., minimum or maximum intensity) in\n * the line of sight (on the line between the passed worldPosition and camera position).\n * It iterated over the points with a step size on the line.\n *\n * @param viewport - Volume viewport\n * @param worldPos - World coordinates of the clicked location\n * @param targetVolumeId - target Volume ID in the viewport\n * @param criteriaFunction - A function that returns the point if it passes a certain\n * written logic, for instance, it can be a maxValue function that keeps the\n * records of all intensity values, and only return the point if its intensity\n * is greater than the maximum intensity of the points passed before.\n * @param stepsSize - Percentage of the spacing in the normal direction, default value\n * is 0.25 which means steps = 1/4 of the spacing in the normal direction.\n * @returns the World pos of the point that passes the criteriaFunction\n */\nexport default function getPointInLineOfSightWithCriteria(\n  viewport: Types.IVolumeViewport,\n  worldPos: Types.Point3,\n  targetVolumeId: string,\n  criteriaFunction: (intensity: number, point: Types.Point3) => Types.Point3,\n  stepSize = 0.25\n): Types.Point3 {\n  // 1. Getting the camera from the event details\n  const camera = viewport.getCamera();\n  const { position: cameraPosition } = camera;\n\n  // 2. Calculating the spacing in the normal direction, this will get\n  // used as the step size for iterating over the points in the line of sight\n  const { spacingInNormalDirection } =\n    csUtils.getTargetVolumeAndSpacingInNormalDir(\n      viewport,\n      camera,\n      targetVolumeId\n    );\n  // 2.1 Making sure, we are not missing any point\n  const step = spacingInNormalDirection * stepSize;\n\n  // 3. Getting the bounds of the viewports. Search for brightest point is\n  // limited to the visible bound\n  // Todo: this might be a problem since bounds will change to spatial bounds.\n  const bounds = viewport.getBounds();\n  const xMin = bounds[0];\n  const xMax = bounds[1];\n\n  // 5. Calculating the line, we use a parametric line definition\n  const vector = <Types.Point3>[0, 0, 0];\n\n  // 5.1 Point coordinate on the line\n  let point = <Types.Point3>[0, 0, 0];\n\n  // 5.2 Calculating the line direction, and storing in vector\n  vtkMath.subtract(worldPos, cameraPosition, vector);\n\n  let pickedPoint;\n\n  // 6. Iterating over the line from the lower bound to the upper bound, with the\n  // specified step size\n  for (let pointT = xMin; pointT <= xMax; pointT = pointT + step) {\n    // 6.1 Calculating the point x location\n    point = [pointT, 0, 0];\n    // 6.2 Calculating the point y,z location based on the line equation\n    const t = (pointT - cameraPosition[0]) / vector[0];\n    point[1] = t * vector[1] + cameraPosition[1];\n    point[2] = t * vector[2] + cameraPosition[2];\n\n    // 6.3 Checking if the points is inside the bounds\n    if (_inBounds(point, bounds)) {\n      // 6.4 Getting the intensity of the point\n      const intensity = viewport.getIntensityFromWorld(point);\n      // 6.5 Passing the intensity to the maximum value functions which decides\n      // whether the current point is of interest based on some criteria\n      const pointToPick = criteriaFunction(intensity, point);\n      if (pointToPick) {\n        pickedPoint = pointToPick;\n      }\n    }\n  }\n\n  return pickedPoint;\n}\n\n/**\n * Returns whether the point in the world is inside the bounds of the viewport\n * @param point - coordinates in the world\n * @returns boolean\n */\nconst _inBounds = function (\n  point: Types.Point3,\n  bounds: Array<number>\n): boolean {\n  const [xMin, xMax, yMin, yMax, zMin, zMax] = bounds;\n  return (\n    point[0] > xMin &&\n    point[0] < xMax &&\n    point[1] > yMin &&\n    point[1] < yMax &&\n    point[2] > zMin &&\n    point[2] < zMax\n  );\n};\n","import filterAnnotationsWithinSlice from './filterAnnotationsWithinSlice';\nimport getWorldWidthAndHeightFromCorners from './getWorldWidthAndHeightFromCorners';\nimport filterAnnotationsForDisplay from './filterAnnotationsForDisplay';\nimport getPointInLineOfSightWithCriteria from './getPointInLineOfSightWithCriteria';\n\nexport default {\n  filterAnnotationsWithinSlice,\n  getWorldWidthAndHeightFromCorners,\n  filterAnnotationsForDisplay,\n  getPointInLineOfSightWithCriteria,\n};\n\nexport {\n  filterAnnotationsWithinSlice,\n  getWorldWidthAndHeightFromCorners,\n  filterAnnotationsForDisplay,\n  getPointInLineOfSightWithCriteria,\n};\n","import { VolumeViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { vec3 } from 'gl-matrix';\n\n// Todo: merge this utility functionality with Crosshair _jump\n/**\n * Uses the viewport's current camera to jump to a specific world coordinate\n * @param enabledElement - enabled element\n * @param jumpWorld - location in the world to jump to\n * @returns True if successful\n */\nexport default function jumpToWorld(\n  viewport: Types.IVolumeViewport,\n  jumpWorld: Types.Point3\n): true | undefined {\n  // if not instance of volumeViewport, return\n  if (!(viewport instanceof VolumeViewport)) {\n    return;\n  }\n\n  const { focalPoint } = viewport.getCamera();\n\n  const delta: Types.Point3 = [0, 0, 0];\n  vec3.sub(delta, jumpWorld, focalPoint);\n\n  _applyShift(viewport, delta);\n\n  return true;\n}\n\nfunction _applyShift(viewport, delta) {\n  const camera = viewport.getCamera();\n  const normal = camera.viewPlaneNormal;\n\n  const dotProd = vec3.dot(delta, normal);\n  const projectedDelta = vec3.fromValues(normal[0], normal[1], normal[2]);\n\n  vec3.scale(projectedDelta, projectedDelta, dotProd);\n\n  if (\n    Math.abs(projectedDelta[0]) > 1e-3 ||\n    Math.abs(projectedDelta[1]) > 1e-3 ||\n    Math.abs(projectedDelta[2]) > 1e-3\n  ) {\n    const newFocalPoint: Types.Point3 = [0, 0, 0];\n    const newPosition: Types.Point3 = [0, 0, 0];\n\n    vec3.add(newFocalPoint, camera.focalPoint, projectedDelta);\n    vec3.add(newPosition, camera.position, projectedDelta);\n\n    viewport.setCamera({\n      focalPoint: newFocalPoint,\n      position: newPosition,\n    });\n    viewport.render();\n  }\n}\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { getPointInLineOfSightWithCriteria } from '../utilities/planar';\nimport jumpToWorld from '../utilities/viewport/jumpToWorld';\nimport { PublicToolProps, ToolProps } from '../types';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\n\n/**\n * On a Maximum Intensity Projection (MIP) viewport, MIPJumpToClickTool allows the\n * user to click on a point in the MIP and the targetViewportIdS (provided in the\n * tool configuration) will be scrolled (jumped) to the location of the point with\n * the highest intensity value in the MIP.\n */\nclass MIPJumpToClickTool extends BaseTool {\n  static toolName;\n\n  _bounds: any;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        targetViewportIds: [],\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Handles the click event, and move the camera's focal point the brightest\n   * point that is in the line of sight of camera. This function 1) search for the\n   * brightest point in the line of sight, 2) move the camera to that point,\n   * this triggers a cameraModified event which then 4) moves all other synced\n   * viewports and their crosshairs.\n   *\n   * @param evt - click event\n   */\n  mouseClickCallback(evt): void {\n    const { element, currentPoints } = evt.detail;\n\n    // 1. Getting the enabled element\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    // 2. Getting the target volume that is clicked on\n    const targetId = this.getTargetId(viewport as Types.IVolumeViewport);\n\n    if (!targetId.startsWith('volumeId')) {\n      throw new Error(\n        `MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`\n      );\n    }\n\n    const volumeId = targetId.split('volumeId:')[1];\n\n    // 3. Criteria function to search for the point (maximum intensity)\n    let maxIntensity = -Infinity;\n    const maxFn = (intensity, point) => {\n      if (intensity > maxIntensity) {\n        maxIntensity = intensity;\n        return point;\n      }\n    };\n\n    // 4. Search for the brightest point location in the line of sight\n    const brightestPoint = getPointInLineOfSightWithCriteria(\n      viewport as Types.IVolumeViewport,\n      currentPoints.world,\n      volumeId,\n      maxFn\n    );\n\n    if (!brightestPoint || !brightestPoint.length) {\n      return;\n    }\n\n    const { targetViewportIds, toolGroupId } = this.configuration;\n    // TODO - consider making this a utility\n    const viewports = renderingEngine.getViewports().filter((vp) => {\n      if (targetViewportIds?.indexOf(vp.id) >= 0) return true;\n      const foundToolGroup = getToolGroupForViewport(vp.id, renderingEngine.id);\n      if (toolGroupId && toolGroupId === foundToolGroup?.id) return true;\n      return false;\n    });\n\n    // 6. Update all the targetedViewports to jump\n    viewports.forEach((viewport) => {\n      // Todo: current limitation is that we cannot jump in viewports\n      // that don't belong to the renderingEngine of the source clicked viewport\n      if (viewport instanceof VolumeViewport) {\n        jumpToWorld(viewport, brightestPoint);\n      } else {\n        console.warn(\n          'Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport'\n        );\n      }\n    });\n  }\n}\n\nMIPJumpToClickTool.toolName = 'MIPJumpToClickTool';\nexport default MIPJumpToClickTool;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Given an array of viewports, returns a list of viewports that are viewing a\n * world space with the given `FrameOfReferenceUID`.\n *\n * @param viewports - An array of viewports.\n * @param FrameOfReferenceUID - The UID defining a particular world space/Frame Of Reference.\n *\n * @returns A filtered array of viewports.\n */\nexport default function filterViewportsWithFrameOfReferenceUID(\n  viewports: Array<Types.IStackViewport | Types.IVolumeViewport>,\n  FrameOfReferenceUID: string\n): Array<Types.IStackViewport | Types.IVolumeViewport> {\n  const numViewports = viewports.length;\n  const viewportsWithFrameOfReferenceUID = [];\n\n  for (let vp = 0; vp < numViewports; vp++) {\n    const viewport = viewports[vp];\n\n    if (viewport.getFrameOfReferenceUID() === FrameOfReferenceUID) {\n      viewportsWithFrameOfReferenceUID.push(viewport);\n    }\n  }\n\n  return viewportsWithFrameOfReferenceUID;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport type { IToolGroup } from '../../types';\nimport { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\n\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * Given an array of viewports, returns a list of viewports that have the the specified tool enabled.\n *\n * @param viewports - An array of viewports.\n * @param toolName - The name of the tool to filter on.\n *\n * @returns A filtered array of viewports.\n */\nexport default function filterViewportsWithToolEnabled(\n  viewports: Array<Types.IStackViewport | Types.IVolumeViewport>,\n  toolName: string\n): Array<Types.IStackViewport | Types.IVolumeViewport> {\n  const numViewports = viewports.length;\n\n  const viewportsWithToolEnabled = [];\n\n  for (let vp = 0; vp < numViewports; vp++) {\n    const viewport = viewports[vp];\n\n    const toolGroup = ToolGroupManager.getToolGroupForViewport(\n      viewport.id,\n      viewport.renderingEngineId\n    );\n\n    if (!toolGroup) {\n      continue;\n    }\n\n    const hasTool = _toolGroupHasActiveEnabledOrPassiveTool(\n      toolGroup,\n      toolName\n    );\n\n    if (hasTool) {\n      viewportsWithToolEnabled.push(viewport);\n    }\n  }\n\n  return viewportsWithToolEnabled;\n}\n\n/**\n * Given a toolGroup, return true if it contains the tool with the given `toolName` and it is\n * active, passive or enabled.\n *\n * @param toolGroup - The `toolGroup` to check.\n * @param toolName - The name of the tool.\n *\n * @returns True if the tool is enabled, passive or active in the `toolGroup`.\n */\nfunction _toolGroupHasActiveEnabledOrPassiveTool(\n  toolGroup: IToolGroup,\n  toolName: string\n) {\n  const { toolOptions } = toolGroup;\n  const tool = toolOptions[toolName];\n\n  if (!tool) {\n    return false;\n  }\n\n  const toolMode = tool.mode;\n\n  return toolMode === Active || toolMode === Passive || toolMode === Enabled;\n}\n","import { vec3 } from 'gl-matrix';\n\n/**\n * It filters the viewports that are looking in the same view as the camera\n * It basically checks if the viewPlaneNormal is parallel to the camera viewPlaneNormal\n * @param viewports - Array of viewports to filter\n * @param camera - Camera to compare against\n * @returns - Array of viewports with the same view\n */\nexport function filterViewportsWithParallelNormals(\n  viewports,\n  camera,\n  EPS = 0.999\n) {\n  return viewports.filter((viewport) => {\n    const vpCamera = viewport.getCamera();\n\n    const isParallel =\n      Math.abs(vec3.dot(vpCamera.viewPlaneNormal, camera.viewPlaneNormal)) >\n      EPS;\n\n    return isParallel;\n  });\n}\n\nexport default filterViewportsWithParallelNormals;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport filterViewportsWithFrameOfReferenceUID from './filterViewportsWithFrameOfReferenceUID';\nimport filterViewportsWithToolEnabled from './filterViewportsWithToolEnabled';\nimport filterViewportsWithParallelNormals from './filterViewportsWithParallelNormals';\n\n/**\n * Given a cornerstone3D enabled `element`, and a `toolName`, find all viewportIds\n * looking at the same Frame Of Reference that have the tool with the given `toolName`\n * active, passive or enabled.\n *\n * @param element - The target cornerstone3D enabled element.\n * @param toolName - The string toolName.\n * @param requireParallelNormals - If true, only return viewports that have parallel normals.\n *\n * @returns An array of viewportIds.\n */\nexport default function getViewportIdsWithToolToRender(\n  element: HTMLDivElement,\n  toolName: string,\n  requireParallelNormals = true\n): string[] {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, FrameOfReferenceUID } = enabledElement;\n\n  let viewports = renderingEngine.getViewports();\n\n  viewports = filterViewportsWithFrameOfReferenceUID(\n    viewports,\n    FrameOfReferenceUID\n  );\n  viewports = filterViewportsWithToolEnabled(viewports, toolName);\n\n  const viewport = renderingEngine.getViewport(enabledElement.viewportId);\n\n  if (requireParallelNormals) {\n    viewports = filterViewportsWithParallelNormals(\n      viewports,\n      viewport.getCamera()\n    );\n  }\n\n  const viewportIds = viewports.map((vp) => vp.id);\n\n  return viewportIds;\n}\n","// Pulled from source: https://github.com/w8r/liang-barsky\n// MIT Licensed.\n\n/**\n * Fast, destructive implementation of Liang-Barsky line clipping algorithm.\n * It clips a 2D segment by a rectangle.\n * @author Alexander Milevski <info@w8r.name>\n * @license MIT\n */\n\nconst EPSILON = 1e-6;\nconst INSIDE = 1;\nconst OUTSIDE = 0;\n\nfunction clipT(num, denom, c) {\n  const [tE, tL] = c;\n  if (Math.abs(denom) < EPSILON) return num < 0;\n  const t = num / denom;\n\n  if (denom > 0) {\n    if (t > tL) return 0;\n    if (t > tE) c[0] = t;\n  } else {\n    if (t < tE) return 0;\n    if (t < tL) c[1] = t;\n  }\n  return 1;\n}\n\n/**\n * @param  {Point} a\n * @param  {Point} b\n * @param  {BoundingBox} box [xmin, ymin, xmax, ymax]\n * @param  {Point?} [da]\n * @param  {Point?} [db]\n * @return {number}\n */\nexport default function clip(a, b, box, da?, db?) {\n  const [x1, y1] = a;\n  const [x2, y2] = b;\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n\n  if (da === undefined || db === undefined) {\n    da = a;\n    db = b;\n  } else {\n    da[0] = a[0];\n    da[1] = a[1];\n    db[0] = b[0];\n    db[1] = b[1];\n  }\n\n  if (\n    Math.abs(dx) < EPSILON &&\n    Math.abs(dy) < EPSILON &&\n    x1 >= box[0] &&\n    x1 <= box[2] &&\n    y1 >= box[1] &&\n    y1 <= box[3]\n  ) {\n    return INSIDE;\n  }\n\n  const c = [0, 1];\n  if (\n    clipT(box[0] - x1, dx, c) &&\n    clipT(x1 - box[2], -dx, c) &&\n    clipT(box[1] - y1, dy, c) &&\n    clipT(y1 - box[3], -dy, c)\n  ) {\n    const [tE, tL] = c;\n    if (tL < 1) {\n      db[0] = x1 + tL * dx;\n      db[1] = y1 + tL * dy;\n    }\n    if (tE > 0) {\n      da[0] += tE * dx;\n      da[1] += tE * dy;\n    }\n    return INSIDE;\n  }\n  return OUTSIDE;\n}\n","import { Types } from '@cornerstonejs/core';\n\nfunction dist2(p1: Types.Point2, p2: Types.Point2): number {\n  return (p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]);\n}\n\n/**\n * Calculates the distance-squared of a point to a line\n *\n * @param lineStart - x,y coordinates of the start of the line\n * @param lineEnd - x,y coordinates of the end of the line\n * @param point - x,y of the point\n * @returns distance-squared\n */\nexport default function distanceToPointSquared(\n  lineStart: Types.Point2,\n  lineEnd: Types.Point2,\n  point: Types.Point2\n): number {\n  const d2 = dist2(lineStart, lineEnd);\n\n  if (d2 === 0) {\n    return dist2(point, lineStart);\n  }\n\n  const t =\n    ((point[0] - lineStart[0]) * (lineEnd[0] - lineStart[0]) +\n      (point[1] - lineStart[1]) * (lineEnd[1] - lineStart[1])) /\n    d2;\n\n  if (t < 0) {\n    return dist2(point, lineStart);\n  }\n  if (t > 1) {\n    return dist2(point, lineEnd);\n  }\n\n  const pt: Types.Point2 = [\n    lineStart[0] + t * (lineEnd[0] - lineStart[0]),\n    lineStart[1] + t * (lineEnd[1] - lineStart[1]),\n  ];\n\n  return dist2(point, pt);\n}\n","import distanceToPointSquared from './distanceToPointSquared';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Calculates the distance of a point to a line\n *\n * @param lineStart - x,y coordinates of the start of the line\n * @param lineEnd - x,y coordinates of the end of the line\n * @param point - x,y of the point\n * @returns distance\n */\nexport default function distanceToPoint(\n  lineStart: Types.Point2,\n  lineEnd: Types.Point2,\n  point: Types.Point2\n): number {\n  if (lineStart.length !== 2 || lineEnd.length !== 2 || point.length !== 2) {\n    throw Error(\n      'lineStart, lineEnd, and point should have 2 elements of [x, y]'\n    );\n  }\n\n  return Math.sqrt(distanceToPointSquared(lineStart, lineEnd, point));\n}\n","import type { Types } from '@cornerstonejs/core';\n\n// Returns sign of number\nfunction sign(x: any) {\n  return typeof x === 'number'\n    ? x\n      ? x < 0\n        ? -1\n        : 1\n      : x === x\n      ? 0\n      : NaN\n    : NaN;\n}\n\n/**\n * Calculates the intersection point between two lines in the 2D plane\n *\n * @param line1Start - x,y coordinates of the start of the first line\n * @param line1End - x,y coordinates of the end of the first line\n * @param line2Start - x,y coordinates of the start of the second line\n * @param line2End - x,y coordinates of the end of the second line\n * @returns [x,y] - point x,y of the point\n */\n\nexport default function intersectLine(\n  line1Start: Types.Point2,\n  line1End: Types.Point2,\n  line2Start: Types.Point2,\n  line2End: Types.Point2\n): number[] {\n  const [x1, y1] = line1Start;\n  const [x2, y2] = line1End;\n  const [x3, y3] = line2Start;\n  const [x4, y4] = line2End;\n\n  // Compute a1, b1, c1, where line joining points 1 and 2 is \"a1 x  +  b1 y  +  c1  =  0\"\n  const a1 = y2 - y1;\n  const b1 = x1 - x2;\n  const c1 = x2 * y1 - x1 * y2;\n\n  // Compute r3 and r4\n  const r3 = a1 * x3 + b1 * y3 + c1;\n  const r4 = a1 * x4 + b1 * y4 + c1;\n\n  /* Check signs of r3 and r4.  If both point 3 and point 4 lie on\n   * same side of line 1, the line segments do not intersect.\n   */\n\n  if (r3 !== 0 && r4 !== 0 && sign(r3) === sign(r4)) {\n    return;\n  }\n\n  // Compute a2, b2, c2\n  const a2 = y4 - y3;\n  const b2 = x3 - x4;\n  const c2 = x4 * y3 - x3 * y4;\n\n  // Compute r1 and r2\n  const r1 = a2 * x1 + b2 * y1 + c2;\n  const r2 = a2 * x2 + b2 * y2 + c2;\n\n  /* Check signs of r1 and r2.  If both point 1 and point 2 lie\n   * on same side of second line segment, the line segments do\n   * not intersect.\n   */\n\n  if (r1 !== 0 && r2 !== 0 && sign(r1) === sign(r2)) {\n    return;\n  }\n\n  /* Line segments intersect: compute intersection point.\n   */\n\n  const denom = a1 * b2 - a2 * b1;\n  let num;\n\n  /* The denom/2 is to get rounding instead of truncating.  It\n   * is added or subtracted to the numerator, depending upon the\n   * sign of the numerator.\n   */\n\n  num = b1 * c2 - b2 * c1;\n  const x = num / denom;\n\n  num = a2 * c1 - a1 * c2;\n  const y = num / denom;\n\n  const intersectionPoint = [x, y];\n\n  return intersectionPoint;\n}\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\n\nimport { AnnotationTool } from './base';\n\nimport {\n  getEnabledElementByIds,\n  getEnabledElement,\n  utilities as csUtils,\n  Enums,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getToolGroup,\n  getToolGroupForViewport,\n} from '../store/ToolGroupManager';\n\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../stateManagement/annotation/annotationState';\n\nimport {\n  drawCircle as drawCircleSvg,\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n} from '../drawingSvg';\nimport { state } from '../store';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\n\nimport * as lineSegment from '../utilities/math/line';\nimport {\n  Annotation,\n  Annotations,\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../types';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { CONSTANTS } from '@cornerstonejs/core';\n\nconst { RENDERING_DEFAULTS } = CONSTANTS;\n\n// TODO: nested config is weird\ninterface ToolConfiguration {\n  configuration?: {\n    getReferenceLineColor?: (viewportId: string) => string;\n    getReferenceLineControllable?: (viewportId: string) => boolean;\n    getReferenceLineDraggableRotatable?: (viewportId: string) => boolean;\n    getReferenceLineSlabThicknessControlsOn?: (viewportId: string) => boolean;\n    referenceLinesCenterGapRadius?: number;\n    shadow?: boolean;\n    autopan?: {\n      enabled: boolean;\n      panSize: number;\n    };\n    mobile?: {\n      enabled: boolean;\n      opacity: number;\n      handleRadius: number;\n    };\n  };\n}\n\ninterface CrosshairsAnnotation extends Annotation {\n  data: {\n    handles: {\n      rotationPoints: any[]; // rotation handles, used for rotation interactions\n      slabThicknessPoints: any[]; // slab thickness handles, used for setting the slab thickness\n      activeOperation: number | null; // 0 translation, 1 rotation handles, 2 slab thickness handles\n      toolCenter: Types.Point3;\n    };\n    activeViewportIds: string[]; // a list of the viewport ids connected to the reference lines being translated\n    viewportId: string;\n  };\n}\n\nfunction defaultReferenceLineColor() {\n  return 'rgb(0, 200, 0)';\n}\n\nfunction defaultReferenceLineControllable() {\n  return true;\n}\n\nfunction defaultReferenceLineDraggableRotatable() {\n  return true;\n}\n\nfunction defaultReferenceLineSlabThicknessControlsOn() {\n  return true;\n}\n\nconst OPERATION = {\n  DRAG: 1,\n  ROTATE: 2,\n  SLAB: 3,\n};\n\nconst EPSILON = 1e-3;\n\n/**\n * CrosshairsTool is a tool that provides reference lines between different viewports\n * of a toolGroup. Using crosshairs, you can jump to a specific location in one\n * viewport and the rest of the viewports in the toolGroup will be aligned to that location.\n * Crosshairs have grababble handles that can be used to rotate and translate the\n * reference lines. They can also be used to set the slab thickness of the viewports\n * by modifying the slab thickness handles.\n *\n */\nclass CrosshairsTool extends AnnotationTool {\n  static toolName;\n\n  toolCenter: Types.Point3 = [0, 0, 0]; // NOTE: it is assumed that all the active/linked viewports share the same crosshair center.\n  // This because the rotation operation rotates also all the other active/intersecting reference lines of the same angle\n  _getReferenceLineColor?: (viewportId: string) => string;\n  _getReferenceLineControllable?: (viewportId: string) => boolean;\n  _getReferenceLineDraggableRotatable?: (viewportId: string) => boolean;\n  _getReferenceLineSlabThicknessControlsOn?: (viewportId: string) => boolean;\n  editData: {\n    annotation: any;\n  } | null;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse'],\n      configuration: {\n        shadow: true,\n        // renders a colored circle on top right of the viewports whose color\n        // matches the color of the reference line\n        viewportIndicators: true,\n        // Auto pan is a configuration which will update pan\n        // other viewports in the toolGroup if the center of the crosshairs\n        // is outside of the viewport. This might be useful for the case\n        // when the user is scrolling through an image (usually in the zoomed view)\n        // and the crosshairs will eventually get outside of the viewport for\n        // the other viewports.\n        autoPan: {\n          enabled: false,\n          panSize: 10,\n        },\n        // radius of the area around the intersection of the planes, in which\n        // the reference lines will not be rendered. This is only used when\n        // having 3 viewports in the toolGroup.\n        referenceLinesCenterGapRadius: 20,\n        // actorUIDs for slabThickness application, if not defined, the slab thickness\n        // will be applied to all actors of the viewport\n        filterActorUIDsToSetSlabThickness: [],\n        // blend mode for slabThickness modifications\n        slabThicknessBlendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n        mobile: {\n          enabled: false,\n          opacity: 0.8,\n          handleRadius: 9,\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._getReferenceLineColor =\n      toolProps.configuration?.getReferenceLineColor ||\n      defaultReferenceLineColor;\n    this._getReferenceLineControllable =\n      toolProps.configuration?.getReferenceLineControllable ||\n      defaultReferenceLineControllable;\n    this._getReferenceLineDraggableRotatable =\n      toolProps.configuration?.getReferenceLineDraggableRotatable ||\n      defaultReferenceLineDraggableRotatable;\n    this._getReferenceLineSlabThicknessControlsOn =\n      toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||\n      defaultReferenceLineSlabThicknessControlsOn;\n  }\n\n  /**\n   * Gets the camera from the viewport, and adds crosshairs annotation for the viewport\n   * to the annotationManager. If any annotation is found in the annotationManager, it\n   * overwrites it.\n   * @param viewportInfo - The viewportInfo for the viewport to add the crosshairs\n   * @returns viewPlaneNormal and center of viewport canvas in world space\n   */\n  initializeViewport = ({\n    renderingEngineId,\n    viewportId,\n  }: Types.IViewportId): {\n    normal: Types.Point3;\n    point: Types.Point3;\n  } => {\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    const { FrameOfReferenceUID, viewport } = enabledElement;\n    const { element } = viewport;\n    const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n\n    // Check if there is already annotation for this viewport\n    let annotations = this._getAnnotations(enabledElement);\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (annotations.length) {\n      // If found, it will override it by removing the annotation and adding it later\n      removeAnnotation(annotations[0].annotationUID);\n    }\n\n    const annotation = {\n      highlighted: false,\n      metadata: {\n        cameraPosition: <Types.Point3>[...position],\n        cameraFocalPoint: <Types.Point3>[...focalPoint],\n        FrameOfReferenceUID,\n        toolName: this.getToolName(),\n      },\n      data: {\n        handles: {\n          rotationPoints: [], // rotation handles, used for rotation interactions\n          slabThicknessPoints: [], // slab thickness handles, used for setting the slab thickness\n          toolCenter: this.toolCenter,\n        },\n        activeOperation: null, // 0 translation, 1 rotation handles, 2 slab thickness handles\n        activeViewportIds: [], // a list of the viewport ids connected to the reference lines being translated\n        viewportId,\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    return {\n      normal: viewPlaneNormal,\n      point: viewport.canvasToWorld([\n        viewport.canvas.clientWidth / 2,\n        viewport.canvas.clientHeight / 2,\n      ]),\n    };\n  };\n\n  _getViewportsInfo = () => {\n    const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    return viewports;\n  };\n\n  onSetToolActive() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    // Upon new setVolumes on viewports we need to update the crosshairs\n    // reference points in the new space, so we subscribe to the event\n    // and update the reference points accordingly.\n    this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n    this._subscribeToViewportNewVolumeSet(viewportsInfo);\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolPassive() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolEnabled() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolDisabled() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n\n    // Crosshairs annotations in the state\n    // has no value when the tool is disabled\n    // since viewports can change (zoom, pan, scroll)\n    // between disabled and enabled/active states.\n    // so we just remove the annotations from the state\n    viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const annotations = this._getAnnotations(enabledElement);\n\n      if (annotations?.length) {\n        annotations.forEach((annotation) => {\n          removeAnnotation(annotation.annotationUID);\n        });\n      }\n    });\n  }\n\n  /**\n   * When activated, it initializes the crosshairs. It begins by computing\n   * the intersection of viewports associated with the crosshairs instance.\n   * When all three views are accessible, the intersection (e.g., crosshairs tool centre)\n   * will be an exact point in space; however, with two viewports, because the\n   * intersection of two planes is a line, it assumes the last view is between the centre\n   * of the two rendering viewports.\n   * @param viewportsInfo Array of viewportInputs which each item containing {viewportId, renderingEngineId}\n   */\n  computeToolCenter = (viewportsInfo): void => {\n    if (!viewportsInfo.length || viewportsInfo.length === 1) {\n      throw new Error(\n        'For crosshairs to operate, at least two viewports must be given.'\n      );\n    }\n\n    // Todo: handle two same view viewport, or more than 3 viewports\n    const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;\n\n    // Initialize first viewport\n    const { normal: normal1, point: point1 } =\n      this.initializeViewport(firstViewport);\n\n    // Initialize second viewport\n    const { normal: normal2, point: point2 } =\n      this.initializeViewport(secondViewport);\n\n    let normal3 = <Types.Point3>[0, 0, 0];\n    let point3 = vec3.create();\n\n    // If there are three viewports\n    if (thirdViewport) {\n      ({ normal: normal3, point: point3 } =\n        this.initializeViewport(thirdViewport));\n    } else {\n      // If there are only two views (viewport) associated with the crosshairs:\n      // In this situation, we don't have a third information to find the\n      // exact intersection, and we \"assume\" the third view is looking at\n      // a location in between the first and second view centers\n      vec3.add(point3, point1, point2);\n      vec3.scale(point3, point3, 0.5);\n      vec3.cross(normal3, normal1, normal2);\n    }\n\n    // Planes of each viewport\n    const firstPlane = csUtils.planar.planeEquation(normal1, point1);\n    const secondPlane = csUtils.planar.planeEquation(normal2, point2);\n    const thirdPlane = csUtils.planar.planeEquation(normal3, point3);\n\n    // Calculating the intersection of 3 planes\n    // prettier-ignore\n    this.toolCenter = csUtils.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane)\n\n    // assuming all viewports are in the same rendering engine\n    const { renderingEngine } = getEnabledElementByIds(\n      viewportsInfo[0].viewportId,\n      viewportsInfo[0].renderingEngineId\n    );\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportsInfo.map(({ viewportId }) => viewportId)\n    );\n  };\n\n  /**\n   * addNewAnnotation acts as jump for the crosshairs tool. It is called when\n   * the user clicks on the image. It does not store the annotation in the stateManager though.\n   *\n   * @param evt - The mouse event\n   * @param interactionType - The type of interaction (e.g., mouse, touch, etc.)\n   * @returns Crosshairs annotation\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): CrosshairsAnnotation => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { currentPoints } = eventDetail;\n    const jumpWorld = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    this._jump(enabledElement, jumpWorld);\n\n    const annotations = this._getAnnotations(enabledElement);\n    const filteredAnnotations = this.filterInteractableAnnotationsForElement(\n      viewport.element,\n      annotations\n    );\n\n    // viewport Annotation\n    const { data } = filteredAnnotations[0];\n\n    const { rotationPoints } = data.handles;\n    const viewportIdArray = [];\n    // put all the draggable reference lines in the viewportIdArray\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      if (!viewportControllable || !viewportDraggableRotatable) {\n        continue;\n      }\n      viewportIdArray.push(otherViewport.id);\n      // rotation handles are two per viewport\n      i++;\n    }\n\n    data.activeViewportIds = [...viewportIdArray];\n    // set translation operation\n    data.handles.activeOperation = OPERATION.DRAG;\n\n    evt.preventDefault();\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n    return filteredAnnotations[0];\n  };\n\n  cancel = () => {\n    console.log('Not implemented yet');\n  };\n\n  /**\n   * It checks if the mouse click is near crosshairs handles, if yes\n   * it returns the handle location. If the mouse click is not near any\n   * of the handles, it does not return anything.\n   *\n   * @param element - The element that the tool is attached to.\n   * @param annotation - The annotation object associated with the annotation\n   * @param canvasCoords - The coordinates of the mouse click on canvas\n   * @param proximity - The distance from the mouse cursor to the point\n   * that is considered \"near\".\n   * @returns The handle that is closest to the cursor, or null if the cursor\n   * is not near any of the handles.\n   */\n  getHandleNearImagePoint(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): ToolHandle | undefined {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    let point = this._getRotationHandleNearImagePoint(\n      viewport,\n      annotation,\n      canvasCoords,\n      proximity\n    );\n\n    if (point !== null) {\n      return point;\n    }\n\n    point = this._getSlabThicknessHandleNearImagePoint(\n      viewport,\n      annotation,\n      canvasCoords,\n      proximity\n    );\n\n    if (point !== null) {\n      return point;\n    }\n  }\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    annotation.highlighted = true;\n\n    // NOTE: handle index or coordinates are not used when dragging.\n    // This because the handle points are actually generated in the renderTool and they are a derivative\n    // from the camera variables of the viewports and of the slab thickness variable.\n    // Remember that the translation and rotation operations operate on the camera\n    // variables and not really on the handles. Similar for the slab thickness.\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * It returns if the canvas point is near the provided crosshairs annotation in the\n   * provided element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: CrosshairsAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    interactionType: InteractionTypes\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    annotation.highlighted = true;\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  onCameraModified = (evt) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n    const viewport = enabledElement.viewport as Types.IVolumeViewport;\n\n    const annotations = this._getAnnotations(enabledElement);\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport that the camera modified is originating from\n    const viewportAnnotation =\n      filteredToolAnnotations[0] as CrosshairsAnnotation;\n\n    if (!viewportAnnotation) {\n      return;\n    }\n\n    // -- Update the camera of other linked viewports containing the same volumeId that\n    //    have the same camera in case of translation\n    // -- Update the crosshair center in world coordinates in annotation.\n    // This is necessary because other tools can modify the position of the slices,\n    // e.g. stackScroll tool at wheel scroll. So we update the coordinates of the center always here.\n    // NOTE: rotation and slab thickness handles are created/updated in renderTool.\n    const currentCamera = viewport.getCamera();\n    const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;\n    const deltaCameraPosition: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(\n      currentCamera.position,\n      oldCameraPosition,\n      deltaCameraPosition\n    );\n\n    const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;\n    const deltaCameraFocalPoint: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(\n      currentCamera.focalPoint,\n      oldCameraFocalPoint,\n      deltaCameraFocalPoint\n    );\n\n    // updated cached \"previous\" camera position and focal point\n    viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];\n    viewportAnnotation.metadata.cameraFocalPoint = [\n      ...currentCamera.focalPoint,\n    ];\n\n    const viewportControllable = this._getReferenceLineControllable(\n      viewport.id\n    );\n    const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(\n      viewport.id\n    );\n    if (\n      !csUtils.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&\n      viewportControllable &&\n      viewportDraggableRotatable\n    ) {\n      // Is camera Modified a TRANSLATION or ROTATION?\n      let isRotation = false;\n\n      // This is guaranteed to be the same diff for both position and focal point\n      // if the camera is modified by pan, zoom, or scroll BUT for rotation of\n      // crosshairs handles it will be different.\n      const cameraModifiedSameForPosAndFocalPoint = csUtils.isEqual(\n        deltaCameraPosition,\n        deltaCameraFocalPoint,\n        1e-3\n      );\n\n      // NOTE: it is a translation if the the focal point and camera position shifts are the same\n      if (!cameraModifiedSameForPosAndFocalPoint) {\n        isRotation = true;\n      }\n\n      const cameraModifiedInPlane =\n        Math.abs(\n          vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)\n        ) < 1e-2;\n\n      // TRANSLATION\n      // NOTE1: if the camera modified is a result of a pan or zoom don't update the crosshair center\n      // NOTE2: rotation handles are updates in renderTool\n      if (!isRotation && !cameraModifiedInPlane) {\n        this.toolCenter[0] += deltaCameraPosition[0];\n        this.toolCenter[1] += deltaCameraPosition[1];\n        this.toolCenter[2] += deltaCameraPosition[2];\n      }\n    }\n\n    // AutoPan modification\n    if (this.configuration.autoPan?.enabled) {\n      const toolGroup = getToolGroupForViewport(\n        viewport.id,\n        renderingEngine.id\n      );\n\n      const otherViewportIds = toolGroup\n        .getViewportIds()\n        .filter((id) => id !== viewport.id);\n\n      otherViewportIds.forEach((viewportId) => {\n        this._autoPanViewportIfNecessary(viewportId, renderingEngine);\n      });\n    }\n\n    const requireSameOrientation = false;\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      requireSameOrientation\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  mouseMoveCallback = (\n    evt: EventTypes.MouseMoveEventType,\n    filteredToolAnnotations: Annotations\n  ): boolean => {\n    const { element, currentPoints } = evt.detail;\n    const canvasCoords = currentPoints.canvas;\n    let imageNeedsUpdate = false;\n\n    for (let i = 0; i < filteredToolAnnotations.length; i++) {\n      const annotation = filteredToolAnnotations[i] as CrosshairsAnnotation;\n\n      if (isAnnotationLocked(annotation)) {\n        continue;\n      }\n\n      const { data, highlighted } = annotation;\n      if (!data.handles) {\n        continue;\n      }\n\n      const previousActiveOperation = data.handles.activeOperation;\n      const previousActiveViewportIds =\n        data.activeViewportIds && data.activeViewportIds.length > 0\n          ? [...data.activeViewportIds]\n          : [];\n\n      // This init are necessary, because when we move the mouse they are not cleaned by _endCallback\n      data.activeViewportIds = [];\n      data.handles.activeOperation = null;\n\n      const handleNearImagePoint = this.getHandleNearImagePoint(\n        element,\n        annotation,\n        canvasCoords,\n        6\n      );\n\n      let near = false;\n      if (handleNearImagePoint) {\n        near = true;\n      } else {\n        near = this._pointNearTool(element, annotation, canvasCoords, 6);\n      }\n\n      const nearToolAndNotMarkedActive = near && !highlighted;\n      const notNearToolAndMarkedActive = !near && highlighted;\n      if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n        annotation.highlighted = !highlighted;\n        imageNeedsUpdate = true;\n      } else if (\n        data.handles.activeOperation !== previousActiveOperation ||\n        !this._areViewportIdArraysEqual(\n          data.activeViewportIds,\n          previousActiveViewportIds\n        )\n      ) {\n        imageNeedsUpdate = true;\n      }\n    }\n\n    return imageNeedsUpdate;\n  };\n\n  filterInteractableAnnotationsForElement = (element, annotations) => {\n    if (!annotations || !annotations.length) {\n      return [];\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewportId } = enabledElement;\n\n    const viewportUIDSpecificCrosshairs = annotations.filter(\n      (annotation) => annotation.data.viewportId === viewportId\n    );\n\n    return viewportUIDSpecificCrosshairs;\n  };\n\n  /**\n   * renders the crosshairs lines and handles in the requestAnimationFrame callback\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, renderingEngine } = enabledElement;\n    const { element } = viewport;\n    const annotations = this._getAnnotations(enabledElement);\n    const camera = viewport.getCamera();\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport Annotation\n    const viewportAnnotation = filteredToolAnnotations[0];\n    if (!annotations?.length || !viewportAnnotation?.data) {\n      // No annotations yet, and didn't just create it as we likely don't have a FrameOfReference/any data loaded yet.\n      return renderStatus;\n    }\n\n    const annotationUID = viewportAnnotation.annotationUID;\n\n    // Get cameras/canvases for each of these.\n    // -- Get two world positions for this canvas in this line (e.g. the diagonal)\n    // -- Convert these world positions to this canvas.\n    // -- Extend/confine this line to fit in this canvas.\n    // -- Render this line.\n    const { clientWidth, clientHeight } = viewport.canvas;\n    const canvasDiagonalLength = Math.sqrt(\n      clientWidth * clientWidth + clientHeight * clientHeight\n    );\n    const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);\n\n    const data = viewportAnnotation.data;\n    const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n\n    const otherViewportAnnotations =\n      this._filterAnnotationsByUniqueViewportOrientations(\n        enabledElement,\n        annotations\n      );\n\n    const referenceLines = [];\n\n    // get canvas information for points and lines (canvas box, canvas horizontal distances)\n    const canvasBox = [0, 0, clientWidth, clientHeight];\n\n    otherViewportAnnotations.forEach((annotation) => {\n      const { data } = annotation;\n\n      data.handles.toolCenter = this.toolCenter;\n\n      const otherViewport = renderingEngine.getViewport(\n        data.viewportId\n      ) as Types.IVolumeViewport;\n\n      const otherCamera = otherViewport.getCamera();\n\n      const otherViewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const otherViewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      const otherViewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n      // get coordinates for the reference line\n      const { clientWidth, clientHeight } = otherViewport.canvas;\n      const otherCanvasDiagonalLength = Math.sqrt(\n        clientWidth * clientWidth + clientHeight * clientHeight\n      );\n      const otherCanvasCenter: Types.Point2 = [\n        clientWidth * 0.5,\n        clientHeight * 0.5,\n      ];\n      const otherViewportCenterWorld =\n        otherViewport.canvasToWorld(otherCanvasCenter);\n\n      const direction: Types.Point3 = [0, 0, 0];\n      vtkMath.cross(\n        camera.viewPlaneNormal,\n        otherCamera.viewPlaneNormal,\n        direction\n      );\n      vtkMath.normalize(direction);\n      vtkMath.multiplyScalar(\n        <Types.Point3>direction,\n        otherCanvasDiagonalLength\n      );\n\n      const pointWorld0: Types.Point3 = [0, 0, 0];\n      vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n\n      const pointWorld1: Types.Point3 = [0, 0, 0];\n      vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n\n      const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n\n      const otherViewportCenterCanvas = viewport.worldToCanvas(\n        otherViewportCenterWorld\n      );\n\n      const canvasUnitVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasUnitVectorFromCenter,\n        pointCanvas0,\n        otherViewportCenterCanvas\n      );\n      vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n\n      // Graphic:\n      // Mid -> SlabThickness handle\n      // Short -> Rotation handle\n      //                           Long\n      //                            |\n      //                            |\n      //                            |\n      //                           Mid\n      //                            |\n      //                            |\n      //                            |\n      //                          Short\n      //                            |\n      //                            |\n      //                            |\n      // Long --- Mid--- Short--- Center --- Short --- Mid --- Long\n      //                            |\n      //                            |\n      //                            |\n      //                          Short\n      //                            |\n      //                            |\n      //                            |\n      //                           Mid\n      //                            |\n      //                            |\n      //                            |\n      //                           Long\n      const canvasVectorFromCenterLong = vec2.create();\n\n      vec2.scale(\n        canvasVectorFromCenterLong,\n        canvasUnitVectorFromCenter,\n        canvasDiagonalLength * 100\n      );\n      const canvasVectorFromCenterMid = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterMid,\n        canvasUnitVectorFromCenter,\n        // to maximize the visibility of the controls, they need to be\n        // placed at most at half the length of the shortest side of the canvas.\n        // Chosen 0.4 to have some margin to the edge.\n        canvasMinDimensionLength * 0.4\n      );\n      const canvasVectorFromCenterShort = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterShort,\n        canvasUnitVectorFromCenter,\n        // Chosen 0.2 because is half of 0.4.\n        canvasMinDimensionLength * 0.2\n      );\n      const canvasVectorFromCenterStart = vec2.create();\n      const centerGap = this.configuration.referenceLinesCenterGapRadius;\n      vec2.scale(\n        canvasVectorFromCenterStart,\n        canvasUnitVectorFromCenter,\n        // Don't put a gap if the the third view is missing\n        otherViewportAnnotations.length === 2 ? centerGap : 0\n      );\n\n      // Computing Reference start and end (4 lines per viewport in case of 3 view MPR)\n      const refLinePointOne = vec2.create();\n      const refLinePointTwo = vec2.create();\n      const refLinePointThree = vec2.create();\n      const refLinePointFour = vec2.create();\n\n      let refLinesCenter = vec2.clone(crosshairCenterCanvas);\n      if (!otherViewportDraggableRotatable || !otherViewportControllable) {\n        refLinesCenter = vec2.clone(otherViewportCenterCanvas);\n      }\n\n      vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);\n      vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);\n      vec2.subtract(\n        refLinePointThree,\n        refLinesCenter,\n        canvasVectorFromCenterStart\n      );\n      vec2.subtract(\n        refLinePointFour,\n        refLinesCenter,\n        canvasVectorFromCenterLong\n      );\n\n      // Clipping lines to be only included in a box (canvas), we don't want\n      // the lines goes beyond canvas\n      liangBarksyClip(refLinePointOne, refLinePointTwo, canvasBox);\n      liangBarksyClip(refLinePointThree, refLinePointFour, canvasBox);\n\n      // Computing rotation handle positions\n      const rotHandleOne = vec2.create();\n      vec2.subtract(\n        rotHandleOne,\n        crosshairCenterCanvas,\n        canvasVectorFromCenterMid\n      );\n\n      const rotHandleTwo = vec2.create();\n      vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);\n\n      // Computing SlabThickness (st below) position\n\n      // SlabThickness center in canvas\n      let stHandlesCenterCanvas = vec2.clone(crosshairCenterCanvas);\n      if (\n        !otherViewportDraggableRotatable &&\n        otherViewportSlabThicknessControlsOn\n      ) {\n        stHandlesCenterCanvas = vec2.clone(otherViewportCenterCanvas);\n      }\n\n      // SlabThickness center in world\n      let stHandlesCenterWorld: Types.Point3 = [...this.toolCenter];\n      if (\n        !otherViewportDraggableRotatable &&\n        otherViewportSlabThicknessControlsOn\n      ) {\n        stHandlesCenterWorld = [...otherViewportCenterWorld];\n      }\n\n      const worldUnitVectorFromCenter: Types.Point3 = [0, 0, 0];\n      vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);\n      vtkMath.normalize(worldUnitVectorFromCenter);\n\n      const { viewPlaneNormal } = camera;\n      // @ts-ignore // Todo: fix after vtk pr merged\n      const { matrix } = vtkMatrixBuilder\n        .buildFromDegree()\n        // @ts-ignore fix after vtk pr merged\n        .rotate(90, viewPlaneNormal);\n\n      const worldUnitOrthoVectorFromCenter: Types.Point3 = [0, 0, 0];\n      vec3.transformMat4(\n        worldUnitOrthoVectorFromCenter,\n        worldUnitVectorFromCenter,\n        matrix\n      );\n\n      const slabThicknessValue = otherViewport.getSlabThickness();\n      const worldOrthoVectorFromCenter: Types.Point3 = [\n        ...worldUnitOrthoVectorFromCenter,\n      ];\n      vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);\n\n      const worldVerticalRefPoint: Types.Point3 = [0, 0, 0];\n      vtkMath.add(\n        stHandlesCenterWorld,\n        worldOrthoVectorFromCenter,\n        worldVerticalRefPoint\n      );\n\n      // convert vertical world distances in canvas coordinates\n      const canvasVerticalRefPoint = viewport.worldToCanvas(\n        worldVerticalRefPoint\n      );\n\n      // points for slab thickness lines\n      const canvasOrthoVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasOrthoVectorFromCenter,\n        stHandlesCenterCanvas,\n        canvasVerticalRefPoint\n      );\n\n      const stLinePointOne = vec2.create();\n      vec2.subtract(\n        stLinePointOne,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);\n\n      const stLinePointTwo = vec2.create();\n      vec2.add(\n        stLinePointTwo,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);\n\n      liangBarksyClip(stLinePointOne, stLinePointTwo, canvasBox);\n\n      const stLinePointThree = vec2.create();\n      vec2.add(\n        stLinePointThree,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.subtract(\n        stLinePointThree,\n        stLinePointThree,\n        canvasOrthoVectorFromCenter\n      );\n\n      const stLinePointFour = vec2.create();\n      vec2.subtract(\n        stLinePointFour,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.subtract(\n        stLinePointFour,\n        stLinePointFour,\n        canvasOrthoVectorFromCenter\n      );\n\n      liangBarksyClip(stLinePointThree, stLinePointFour, canvasBox);\n\n      // points for slab thickness handles\n      const stHandleOne = vec2.create();\n      const stHandleTwo = vec2.create();\n      const stHandleThree = vec2.create();\n      const stHandleFour = vec2.create();\n\n      vec2.subtract(\n        stHandleOne,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);\n      vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n      vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);\n      vec2.subtract(\n        stHandleThree,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);\n      vec2.add(\n        stHandleFour,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);\n\n      referenceLines.push([\n        otherViewport,\n        refLinePointOne,\n        refLinePointTwo,\n        refLinePointThree,\n        refLinePointFour,\n        stLinePointOne,\n        stLinePointTwo,\n        stLinePointThree,\n        stLinePointFour,\n        rotHandleOne,\n        rotHandleTwo,\n        stHandleOne,\n        stHandleTwo,\n        stHandleThree,\n        stHandleFour,\n      ]);\n    });\n\n    const newRtpoints = [];\n    const newStpoints = [];\n    const viewportColor = this._getReferenceLineColor(viewport.id);\n    const color =\n      viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n    referenceLines.forEach((line, lineIndex) => {\n      // get color for the reference line\n      const otherViewport = line[0];\n      const viewportColor = this._getReferenceLineColor(otherViewport.id);\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id) ||\n        this.configuration.mobile?.enabled;\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||\n        this.configuration.mobile?.enabled;\n      const selectedViewportId = data.activeViewportIds.find(\n        (id) => id === otherViewport.id\n      );\n\n      let color =\n        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n      let lineWidth = 1;\n\n      const lineActive =\n        data.handles.activeOperation !== null &&\n        data.handles.activeOperation === OPERATION.DRAG &&\n        selectedViewportId;\n\n      if (lineActive) {\n        lineWidth = 2.5;\n      }\n\n      let lineUID = `${lineIndex}`;\n      if (viewportControllable && viewportDraggableRotatable) {\n        lineUID = `${lineIndex}One`;\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[1],\n          line[2],\n          {\n            color,\n            lineWidth,\n          }\n        );\n\n        lineUID = `${lineIndex}Two`;\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[3],\n          line[4],\n          {\n            color,\n            lineWidth,\n          }\n        );\n      } else {\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[2],\n          line[4],\n          {\n            color,\n            lineWidth,\n          }\n        );\n      }\n\n      if (viewportControllable) {\n        color =\n          viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n        const rotHandlesActive =\n          data.handles.activeOperation === OPERATION.ROTATE;\n        const rotationHandles = [line[9], line[10]];\n\n        const rotHandleWorldOne = [\n          viewport.canvasToWorld(line[9]),\n          otherViewport,\n          line[1],\n          line[2],\n        ];\n        const rotHandleWorldTwo = [\n          viewport.canvasToWorld(line[10]),\n          otherViewport,\n          line[3],\n          line[4],\n        ];\n        newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);\n\n        const slabThicknessHandlesActive =\n          data.handles.activeOperation === OPERATION.SLAB;\n        const slabThicknessHandles = [line[11], line[12], line[13], line[14]];\n\n        const slabThicknessHandleWorldOne = [\n          viewport.canvasToWorld(line[11]),\n          otherViewport,\n          line[5],\n          line[6],\n        ];\n        const slabThicknessHandleWorldTwo = [\n          viewport.canvasToWorld(line[12]),\n          otherViewport,\n          line[5],\n          line[6],\n        ];\n        const slabThicknessHandleWorldThree = [\n          viewport.canvasToWorld(line[13]),\n          otherViewport,\n          line[7],\n          line[8],\n        ];\n        const slabThicknessHandleWorldFour = [\n          viewport.canvasToWorld(line[14]),\n          otherViewport,\n          line[7],\n          line[8],\n        ];\n        newStpoints.push(\n          slabThicknessHandleWorldOne,\n          slabThicknessHandleWorldTwo,\n          slabThicknessHandleWorldThree,\n          slabThicknessHandleWorldFour\n        );\n\n        if (\n          (lineActive || this.configuration.mobile?.enabled) &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportDraggableRotatable &&\n          viewportSlabThicknessControlsOn\n        ) {\n          // draw all handles inactive (rotation and slab thickness)\n          let handleUID = `${lineIndex}One`;\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'circle',\n            }\n          );\n          handleUID = `${lineIndex}Two`;\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'rect',\n            }\n          );\n        } else if (\n          lineActive &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportDraggableRotatable\n        ) {\n          const handleUID = `${lineIndex}`;\n          // draw rotation handles inactive\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'circle',\n            }\n          );\n        } else if (\n          selectedViewportId &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportSlabThicknessControlsOn\n        ) {\n          const handleUID = `${lineIndex}`;\n          // draw slab thickness handles inactive\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'rect',\n            }\n          );\n        } else if (rotHandlesActive && viewportDraggableRotatable) {\n          const handleUID = `${lineIndex}`;\n          // draw all rotation handles as active\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: 2,\n              fill: color,\n              type: 'circle',\n            }\n          );\n        } else if (\n          slabThicknessHandlesActive &&\n          selectedViewportId &&\n          viewportSlabThicknessControlsOn\n        ) {\n          // draw only the slab thickness handles for the active viewport as active\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: 2,\n              fill: color,\n              type: 'rect',\n            }\n          );\n        }\n        const slabThicknessValue = otherViewport.getSlabThickness();\n        if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {\n          // draw slab thickness reference lines\n          lineUID = `${lineIndex}STOne`;\n          drawLineSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            line[5],\n            line[6],\n            {\n              color,\n              width: 1,\n              lineDash: [2, 3],\n            }\n          );\n\n          lineUID = `${lineIndex}STTwo`;\n          drawLineSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            line[7],\n            line[8],\n            {\n              color,\n              width: line,\n              lineDash: [2, 3],\n            }\n          );\n        }\n      }\n    });\n\n    renderStatus = true;\n\n    // Save new handles points in annotation\n    data.handles.rotationPoints = newRtpoints;\n    data.handles.slabThicknessPoints = newStpoints;\n\n    if (this.configuration.viewportIndicators) {\n      // render a circle to pin point the viewport color\n      // TODO: This should not be part of the tool, and definitely not part of the renderAnnotation loop\n      const referenceColorCoordinates = [\n        clientWidth * 0.95,\n        clientHeight * 0.05,\n      ] as Types.Point2;\n      const circleRadius = canvasDiagonalLength * 0.01;\n\n      const circleUID = '0';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID,\n        referenceColorCoordinates,\n        circleRadius,\n        { color, fill: color }\n      );\n    }\n\n    return renderStatus;\n  };\n\n  _getAnnotations = (enabledElement: Types.IEnabledElement) => {\n    const { viewport } = enabledElement;\n    return getAnnotations(this.getToolName(), viewport.element);\n  };\n\n  _onNewVolume = (e: any) => {\n    const viewportsInfo = this._getViewportsInfo();\n    this.computeToolCenter(viewportsInfo);\n  };\n\n  _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const { viewport } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      const { element } = viewport;\n\n      element.removeEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        this._onNewVolume\n      );\n    });\n  }\n\n  _subscribeToViewportNewVolumeSet(viewports) {\n    viewports.forEach(({ viewportId, renderingEngineId }) => {\n      const { viewport } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      const { element } = viewport;\n\n      element.addEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        this._onNewVolume\n      );\n    });\n  }\n\n  _autoPanViewportIfNecessary(\n    viewportId: string,\n    renderingEngine: Types.IRenderingEngine\n  ): void {\n    // 1. Check if the toolCenter is outside the viewport\n    // 2. If it is outside, pan the viewport to fit in the toolCenter\n\n    const viewport = renderingEngine.getViewport(viewportId);\n    const { clientWidth, clientHeight } = viewport.canvas;\n\n    const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n\n    // pan the viewport to fit the toolCenter in the direction\n    // that is out of bounds\n    const pan = this.configuration.autoPan.panSize;\n\n    const visiblePointCanvas = <Types.Point2>[\n      toolCenterCanvas[0],\n      toolCenterCanvas[1],\n    ];\n\n    if (toolCenterCanvas[0] < 0) {\n      visiblePointCanvas[0] = pan;\n    } else if (toolCenterCanvas[0] > clientWidth) {\n      visiblePointCanvas[0] = clientWidth - pan;\n    }\n\n    if (toolCenterCanvas[1] < 0) {\n      visiblePointCanvas[1] = pan;\n    } else if (toolCenterCanvas[1] > clientHeight) {\n      visiblePointCanvas[1] = clientHeight - pan;\n    }\n\n    if (\n      visiblePointCanvas[0] === toolCenterCanvas[0] &&\n      visiblePointCanvas[1] === toolCenterCanvas[1]\n    ) {\n      return;\n    }\n\n    const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);\n\n    const deltaPointsWorld = [\n      visiblePointWorld[0] - this.toolCenter[0],\n      visiblePointWorld[1] - this.toolCenter[1],\n      visiblePointWorld[2] - this.toolCenter[2],\n    ];\n\n    const camera = viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n\n    viewport.render();\n  }\n\n  _areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {\n    if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {\n      return false;\n    }\n\n    viewportIdArrayOne.forEach((id) => {\n      let itemFound = false;\n      for (let i = 0; i < viewportIdArrayTwo.length; ++i) {\n        if (id === viewportIdArrayTwo[i]) {\n          itemFound = true;\n          break;\n        }\n      }\n      if (itemFound === false) {\n        return false;\n      }\n    });\n\n    return true;\n  };\n\n  // It filters the viewports with crosshairs and only return viewports\n  // that have different camera.\n  _getAnnotationsForViewportsWithDifferentCameras = (\n    enabledElement,\n    annotations\n  ) => {\n    const { viewportId, renderingEngine, viewport } = enabledElement;\n\n    const otherViewportAnnotations = annotations.filter(\n      (annotation) => annotation.data.viewportId !== viewportId\n    );\n\n    if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n      return [];\n    }\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, position } = camera;\n\n    const viewportsWithDifferentCameras = otherViewportAnnotations.filter(\n      (annotation) => {\n        const { viewportId } = annotation.data;\n        const targetViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfTarget = targetViewport.getCamera();\n\n        return !(\n          csUtils.isEqual(\n            cameraOfTarget.viewPlaneNormal,\n            viewPlaneNormal,\n            1e-2\n          ) && csUtils.isEqual(cameraOfTarget.position, position, 1)\n        );\n      }\n    );\n\n    return viewportsWithDifferentCameras;\n  };\n\n  _filterViewportWithSameOrientation = (\n    enabledElement,\n    referenceAnnotation,\n    annotations\n  ) => {\n    const { renderingEngine } = enabledElement;\n    const { data } = referenceAnnotation;\n    const viewport = renderingEngine.getViewport(data.viewportId);\n\n    const linkedViewportAnnotations = annotations.filter((annotation) => {\n      const { data } = annotation;\n      const otherViewport = renderingEngine.getViewport(data.viewportId);\n      const otherViewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n\n      return otherViewportControllable === true;\n    });\n\n    if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n      return [];\n    }\n\n    const camera = viewport.getCamera();\n    const viewPlaneNormal = camera.viewPlaneNormal;\n    vtkMath.normalize(viewPlaneNormal);\n\n    const otherViewportsAnnotationsWithSameCameraDirection =\n      linkedViewportAnnotations.filter((annotation) => {\n        const { viewportId } = annotation.data;\n        const otherViewport = renderingEngine.getViewport(viewportId);\n        const otherCamera = otherViewport.getCamera();\n        const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n        vtkMath.normalize(otherViewPlaneNormal);\n\n        return (\n          csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n          csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2)\n        );\n      });\n\n    return otherViewportsAnnotationsWithSameCameraDirection;\n  };\n\n  _filterAnnotationsByUniqueViewportOrientations = (\n    enabledElement,\n    annotations\n  ) => {\n    const { renderingEngine, viewport } = enabledElement;\n    const camera = viewport.getCamera();\n    const viewPlaneNormal = camera.viewPlaneNormal;\n    vtkMath.normalize(viewPlaneNormal);\n\n    const otherLinkedViewportAnnotationsFromSameScene = annotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const otherViewportControllable = this._getReferenceLineControllable(\n          otherViewport.id\n        );\n\n        return (\n          viewport !== otherViewport &&\n          // scene === otherScene &&\n          otherViewportControllable === true\n        );\n      }\n    );\n\n    const otherViewportsAnnotationsWithUniqueCameras = [];\n    // Iterate first on other viewport from the same scene linked\n    for (\n      let i = 0;\n      i < otherLinkedViewportAnnotationsFromSameScene.length;\n      ++i\n    ) {\n      const annotation = otherLinkedViewportAnnotationsFromSameScene[i];\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const otherViewportControllable = this._getReferenceLineControllable(\n          otherViewport.id\n        );\n\n        return (\n          viewport !== otherViewport &&\n          // scene === otherScene &&\n          otherViewportControllable !== true\n        );\n      }\n    );\n\n    // Iterate second on other viewport from the same scene non linked\n    for (\n      let i = 0;\n      i < otherNonLinkedViewportAnnotationsFromSameScene.length;\n      ++i\n    ) {\n      const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    // Iterate on all the viewport\n    const otherViewportAnnotations =\n      this._getAnnotationsForViewportsWithDifferentCameras(\n        enabledElement,\n        annotations\n      );\n\n    for (let i = 0; i < otherViewportAnnotations.length; ++i) {\n      const annotation = otherViewportAnnotations[i];\n      if (\n        otherViewportsAnnotationsWithUniqueCameras.some(\n          (element) => element === annotation\n        )\n      ) {\n        continue;\n      }\n\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    return otherViewportsAnnotationsWithUniqueCameras;\n  };\n\n  _checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {\n    const actors = viewport.getActors();\n    const otherViewportActors = otherViewport.getActors();\n\n    let sameScene = true;\n\n    actors.forEach((actor) => {\n      if (\n        actors.length !== otherViewportActors.length ||\n        otherViewportActors.find(({ uid }) => uid === actor.uid) === undefined\n      ) {\n        sameScene = false;\n      }\n    });\n\n    return sameScene;\n  };\n\n  _jump = (enabledElement, jumpWorld) => {\n    state.isInteractingWithTool = true;\n    const { viewport, renderingEngine } = enabledElement;\n\n    const annotations = this._getAnnotations(enabledElement);\n\n    const delta: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(jumpWorld, this.toolCenter, delta);\n\n    // TRANSLATION\n    // get the annotation of the other viewport which are parallel to the delta shift and are of the same scene\n    const otherViewportAnnotations =\n      this._getAnnotationsForViewportsWithDifferentCameras(\n        enabledElement,\n        annotations\n      );\n\n    const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n\n        const sameScene = this._checkIfViewportsRenderingSameScene(\n          viewport,\n          otherViewport\n        );\n\n        return (\n          this._getReferenceLineControllable(otherViewport.id) &&\n          this._getReferenceLineDraggableRotatable(otherViewport.id) &&\n          sameScene\n        );\n      }\n    );\n\n    if (viewportsAnnotationsToUpdate.length === 0) {\n      state.isInteractingWithTool = false;\n      return false;\n    }\n\n    this._applyDeltaShiftToSelectedViewportCameras(\n      renderingEngine,\n      viewportsAnnotationsToUpdate,\n      delta\n    );\n\n    state.isInteractingWithTool = false;\n\n    return true;\n  };\n\n  _activateModify = (element) => {\n    // mobile sometimes has lingering interaction even when touchEnd triggers\n    // this check allows for multiple handles to be active which doesn't affect\n    // tool usage.\n    state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    this.editData.annotation.data.handles.activeOperation = null;\n    this.editData.annotation.data.activeViewportIds = [];\n\n    this._deactivateModify(element);\n\n    resetElementCursor(element);\n\n    this.editData = null;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const requireSameOrientation = false;\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      requireSameOrientation\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const delta = eventDetail.deltaPoints.world;\n\n    if (\n      Math.abs(delta[0]) < 1e-3 &&\n      Math.abs(delta[1]) < 1e-3 &&\n      Math.abs(delta[2]) < 1e-3\n    ) {\n      return;\n    }\n\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const annotations = this._getAnnotations(\n      enabledElement\n    ) as CrosshairsAnnotation[];\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport Annotation\n    const viewportAnnotation = filteredToolAnnotations[0];\n    if (!viewportAnnotation) {\n      return;\n    }\n\n    const { handles } = viewportAnnotation.data;\n    const { currentPoints } = evt.detail;\n    const canvasCoords = currentPoints.canvas;\n\n    if (handles.activeOperation === OPERATION.DRAG) {\n      // TRANSLATION\n      // get the annotation of the other viewport which are parallel to the delta shift and are of the same scene\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportDraggableRotatable =\n            this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportDraggableRotatable === true &&\n            viewportAnnotation.data.activeViewportIds.find(\n              (id) => id === otherViewport.id\n            )\n          );\n        }\n      );\n\n      this._applyDeltaShiftToSelectedViewportCameras(\n        renderingEngine,\n        viewportsAnnotationsToUpdate,\n        delta\n      );\n    } else if (handles.activeOperation === OPERATION.ROTATE) {\n      // ROTATION\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportDraggableRotatable =\n            this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportDraggableRotatable === true\n          );\n        }\n      );\n\n      const dir1 = vec2.create();\n      const dir2 = vec2.create();\n\n      const center: Types.Point3 = [\n        this.toolCenter[0],\n        this.toolCenter[1],\n        this.toolCenter[2],\n      ];\n\n      const centerCanvas = viewport.worldToCanvas(center);\n\n      const finalPointCanvas = eventDetail.currentPoints.canvas;\n      const originalPointCanvas = vec2.create();\n      vec2.sub(\n        originalPointCanvas,\n        finalPointCanvas,\n        eventDetail.deltaPoints.canvas\n      );\n      vec2.sub(dir1, originalPointCanvas, <vec2>centerCanvas);\n      vec2.sub(dir2, finalPointCanvas, <vec2>centerCanvas);\n\n      let angle = vec2.angle(dir1, dir2);\n\n      if (\n        this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)\n      ) {\n        angle *= -1;\n      }\n\n      // Rounding the angle to allow rotated handles to be undone\n      // If we don't round and rotate handles clockwise by 0.0131233 radians,\n      // there's no assurance that the counter-clockwise rotation occurs at\n      // precisely -0.0131233, resulting in the drawn annotations being lost.\n      angle = Math.round(angle * 100) / 100;\n\n      const rotationAxis = viewport.getCamera().viewPlaneNormal;\n      // @ts-ignore : vtkjs incorrect typing\n      const { matrix } = vtkMatrixBuilder\n        .buildFromRadian()\n        .translate(center[0], center[1], center[2])\n        // @ts-ignore\n        .rotate(angle, rotationAxis) //todo: why we are passing\n        .translate(-center[0], -center[1], -center[2]);\n\n      const otherViewportsIds = [];\n      // update camera for the other viewports.\n      // NOTE: The lines then are rendered by the onCameraModified\n      viewportsAnnotationsToUpdate.forEach((annotation) => {\n        const { data } = annotation;\n        data.handles.toolCenter = center;\n\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const camera = otherViewport.getCamera();\n        const { viewUp, position, focalPoint } = camera;\n\n        viewUp[0] += position[0];\n        viewUp[1] += position[1];\n        viewUp[2] += position[2];\n\n        vec3.transformMat4(focalPoint, focalPoint, matrix);\n        vec3.transformMat4(position, position, matrix);\n        vec3.transformMat4(viewUp, viewUp, matrix);\n\n        viewUp[0] -= position[0];\n        viewUp[1] -= position[1];\n        viewUp[2] -= position[2];\n\n        otherViewport.setCamera({\n          position,\n          viewUp,\n          focalPoint,\n        });\n        otherViewportsIds.push(otherViewport.id);\n      });\n      renderingEngine.renderViewports(otherViewportsIds);\n    } else if (handles.activeOperation === OPERATION.SLAB) {\n      // SLAB THICKNESS\n      // this should be just the active one under the mouse,\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const referenceAnnotations = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportSlabThicknessControlsOn =\n            this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportSlabThicknessControlsOn === true &&\n            viewportAnnotation.data.activeViewportIds.find(\n              (id) => id === otherViewport.id\n            )\n          );\n        }\n      );\n\n      if (referenceAnnotations.length === 0) {\n        return;\n      }\n      const viewportsAnnotationsToUpdate =\n        this._filterViewportWithSameOrientation(\n          enabledElement,\n          referenceAnnotations[0],\n          annotations\n        );\n\n      const viewportsIds = [];\n      viewportsIds.push(viewport.id);\n      viewportsAnnotationsToUpdate.forEach(\n        (annotation: CrosshairsAnnotation) => {\n          const { data } = annotation;\n\n          const otherViewport = renderingEngine.getViewport(\n            data.viewportId\n          ) as Types.IVolumeViewport;\n          const camera = otherViewport.getCamera();\n          const normal = camera.viewPlaneNormal;\n\n          const dotProd = vtkMath.dot(delta, normal);\n          const projectedDelta: Types.Point3 = [...normal];\n          vtkMath.multiplyScalar(projectedDelta, dotProd);\n\n          if (\n            Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3\n          ) {\n            const mod = Math.sqrt(\n              projectedDelta[0] * projectedDelta[0] +\n                projectedDelta[1] * projectedDelta[1] +\n                projectedDelta[2] * projectedDelta[2]\n            );\n\n            const currentPoint = eventDetail.lastPoints.world;\n            const direction: Types.Point3 = [0, 0, 0];\n\n            const currentCenter: Types.Point3 = [\n              this.toolCenter[0],\n              this.toolCenter[1],\n              this.toolCenter[2],\n            ];\n\n            // use this.toolCenter only if viewportDraggableRotatable\n            const viewportDraggableRotatable =\n              this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportDraggableRotatable) {\n              const { rotationPoints } = this.editData.annotation.data.handles;\n              // Todo: what is a point uid?\n              const otherViewportRotationPoints = rotationPoints.filter(\n                (point) => point[1].uid === otherViewport.id\n              );\n              if (otherViewportRotationPoints.length === 2) {\n                const point1 = viewport.canvasToWorld(\n                  otherViewportRotationPoints[0][3]\n                );\n                const point2 = viewport.canvasToWorld(\n                  otherViewportRotationPoints[1][3]\n                );\n                vtkMath.add(point1, point2, currentCenter);\n                vtkMath.multiplyScalar(<Types.Point3>currentCenter, 0.5);\n              }\n            }\n\n            vtkMath.subtract(currentPoint, currentCenter, direction);\n            const dotProdDirection = vtkMath.dot(direction, normal);\n            const projectedDirection: Types.Point3 = [...normal];\n            vtkMath.multiplyScalar(projectedDirection, dotProdDirection);\n            const normalizedProjectedDirection: Types.Point3 = [\n              projectedDirection[0],\n              projectedDirection[1],\n              projectedDirection[2],\n            ];\n            vec3.normalize(\n              normalizedProjectedDirection,\n              normalizedProjectedDirection\n            );\n            const normalizedProjectedDelta: Types.Point3 = [\n              projectedDelta[0],\n              projectedDelta[1],\n              projectedDelta[2],\n            ];\n            vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);\n\n            let slabThicknessValue = otherViewport.getSlabThickness();\n            if (\n              csUtils.isOpposite(\n                normalizedProjectedDirection,\n                normalizedProjectedDelta,\n                1e-3\n              )\n            ) {\n              slabThicknessValue -= mod;\n            } else {\n              slabThicknessValue += mod;\n            }\n\n            slabThicknessValue = Math.abs(slabThicknessValue);\n            slabThicknessValue = Math.max(\n              RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS,\n              slabThicknessValue\n            );\n\n            const near = this._pointNearReferenceLine(\n              viewportAnnotation,\n              canvasCoords,\n              6,\n              otherViewport\n            );\n\n            if (near) {\n              slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n            }\n\n            // We want to set the slabThickness for the viewport's actors but\n            // since the crosshairs tool instance has configuration regarding which\n            // actorUIDs (in case of volume -> actorUID = volumeIds) to set the\n            // slabThickness for, we need to delegate the slabThickness setting\n            // to the crosshairs tool instance of the toolGroup since configurations\n            // exist on the toolInstance and each toolGroup has its own crosshairs\n            // tool instance (Otherwise, we would need to set this filterActorUIDsToSetSlabThickness at\n            // the viewport level which makes tool and viewport state convoluted).\n            const toolGroup = getToolGroupForViewport(\n              otherViewport.id,\n              renderingEngine.id\n            );\n            const crosshairsInstance = toolGroup.getToolInstance(\n              this.getToolName()\n            );\n            crosshairsInstance.setSlabThickness(\n              otherViewport,\n              slabThicknessValue\n            );\n\n            viewportsIds.push(otherViewport.id);\n          }\n        }\n      );\n      renderingEngine.renderViewports(viewportsIds);\n    }\n  };\n\n  setSlabThickness(viewport, slabThickness) {\n    let actorUIDs;\n    const { filterActorUIDsToSetSlabThickness } = this.configuration;\n    if (\n      filterActorUIDsToSetSlabThickness &&\n      filterActorUIDsToSetSlabThickness.length > 0\n    ) {\n      actorUIDs = filterActorUIDsToSetSlabThickness;\n    }\n\n    let blendModeToUse = this.configuration.slabThicknessBlendMode;\n    if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {\n      blendModeToUse = Enums.BlendModes.COMPOSITE;\n    }\n\n    const immediate = false;\n    viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);\n    viewport.setSlabThickness(slabThickness, actorUIDs);\n  }\n\n  _isClockWise(a, b, c) {\n    // return true if the rotation is clockwise\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;\n  }\n\n  _applyDeltaShiftToSelectedViewportCameras(\n    renderingEngine,\n    viewportsAnnotationsToUpdate,\n    delta\n  ) {\n    // update camera for the other viewports.\n    // NOTE1: The lines then are rendered by the onCameraModified\n    // NOTE2: crosshair center are automatically updated in the onCameraModified event\n    viewportsAnnotationsToUpdate.forEach((annotation) => {\n      this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n    });\n  }\n\n  _applyDeltaShiftToViewportCamera(\n    renderingEngine: Types.IRenderingEngine,\n    annotation,\n    delta\n  ) {\n    // update camera for the other viewports.\n    // NOTE1: The lines then are rendered by the onCameraModified\n    // NOTE2: crosshair center are automatically updated in the onCameraModified event\n    const { data } = annotation;\n\n    const viewport = renderingEngine.getViewport(data.viewportId);\n    const camera = viewport.getCamera();\n    const normal = camera.viewPlaneNormal;\n\n    // Project delta over camera normal\n    // (we don't need to pan, we need only to scroll the camera as in the wheel stack scroll tool)\n    const dotProd = vtkMath.dot(delta, normal);\n    const projectedDelta: Types.Point3 = [...normal];\n    vtkMath.multiplyScalar(projectedDelta, dotProd);\n\n    if (\n      Math.abs(projectedDelta[0]) > 1e-3 ||\n      Math.abs(projectedDelta[1]) > 1e-3 ||\n      Math.abs(projectedDelta[2]) > 1e-3\n    ) {\n      const newFocalPoint: Types.Point3 = [0, 0, 0];\n      const newPosition: Types.Point3 = [0, 0, 0];\n\n      vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n      vtkMath.add(camera.position, projectedDelta, newPosition);\n\n      viewport.setCamera({\n        focalPoint: newFocalPoint,\n        position: newPosition,\n      });\n      viewport.render();\n    }\n  }\n\n  _pointNearReferenceLine = (\n    annotation,\n    canvasCoords,\n    proximity,\n    lineViewport\n  ) => {\n    const { data } = annotation;\n    const { rotationPoints } = data.handles;\n\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      if (otherViewport.id !== lineViewport.id) {\n        continue;\n      }\n\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const lineSegment1 = {\n        start: {\n          x: rotationPoints[i][2][0],\n          y: rotationPoints[i][2][1],\n        },\n        end: {\n          x: rotationPoints[i][3][0],\n          y: rotationPoints[i][3][1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: rotationPoints[i + 1][2][0],\n          y: rotationPoints[i + 1][2][1],\n        },\n        end: {\n          x: rotationPoints[i + 1][3][0],\n          y: rotationPoints[i + 1][3][1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        return true;\n      }\n\n      // rotation handles are two for viewport\n      i++;\n    }\n\n    return false;\n  };\n\n  _getRotationHandleNearImagePoint(\n    viewport,\n    annotation,\n    canvasCoords,\n    proximity\n  ) {\n    const { data } = annotation;\n    const { rotationPoints } = data.handles;\n\n    for (let i = 0; i < rotationPoints.length; i++) {\n      const point = rotationPoints[i][0];\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      if (!viewportDraggableRotatable) {\n        continue;\n      }\n\n      const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n      if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n        data.handles.activeOperation = OPERATION.ROTATE;\n\n        this.editData = {\n          annotation,\n        };\n\n        return point;\n      }\n    }\n\n    return null;\n  }\n\n  _getSlabThicknessHandleNearImagePoint(\n    viewport,\n    annotation,\n    canvasCoords,\n    proximity\n  ) {\n    const { data } = annotation;\n    const { slabThicknessPoints } = data.handles;\n\n    for (let i = 0; i < slabThicknessPoints.length; i++) {\n      const point = slabThicknessPoints[i][0];\n      const otherViewport = slabThicknessPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n      if (!viewportSlabThicknessControlsOn) {\n        continue;\n      }\n\n      const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n      if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n        data.handles.activeOperation = OPERATION.SLAB;\n\n        data.activeViewportIds = [otherViewport.id];\n\n        this.editData = {\n          annotation,\n        };\n\n        return point;\n      }\n    }\n\n    return null;\n  }\n\n  _pointNearTool(element, annotation, canvasCoords, proximity) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { clientWidth, clientHeight } = viewport.canvas;\n    const canvasDiagonalLength = Math.sqrt(\n      clientWidth * clientWidth + clientHeight * clientHeight\n    );\n    const { data } = annotation;\n\n    const { rotationPoints } = data.handles;\n    const { slabThicknessPoints } = data.handles;\n    const viewportIdArray = [];\n\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n      if (!viewportControllable || !viewportDraggableRotatable) {\n        continue;\n      }\n\n      const lineSegment1 = {\n        start: {\n          x: rotationPoints[i][2][0],\n          y: rotationPoints[i][2][1],\n        },\n        end: {\n          x: rotationPoints[i][3][0],\n          y: rotationPoints[i][3][1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: rotationPoints[i + 1][2][0],\n          y: rotationPoints[i + 1][2][1],\n        },\n        end: {\n          x: rotationPoints[i + 1][3][0],\n          y: rotationPoints[i + 1][3][1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        viewportIdArray.push(otherViewport.id);\n        data.handles.activeOperation = OPERATION.DRAG;\n      }\n\n      // rotation handles are two for viewport\n      i++;\n    }\n\n    for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {\n      const otherViewport = slabThicknessPoints[i][1];\n      if (viewportIdArray.find((id) => id === otherViewport.id)) {\n        continue;\n      }\n\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n      if (!viewportControllable || !viewportSlabThicknessControlsOn) {\n        continue;\n      }\n\n      const stPointLineCanvas1 = slabThicknessPoints[i][2];\n      const stPointLineCanvas2 = slabThicknessPoints[i][3];\n\n      const centerCanvas = vec2.create();\n      vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);\n      vec2.scale(centerCanvas, centerCanvas, 0.5);\n\n      const canvasUnitVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasUnitVectorFromCenter,\n        stPointLineCanvas1,\n        centerCanvas\n      );\n      vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n\n      const canvasVectorFromCenterStart = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterStart,\n        canvasUnitVectorFromCenter,\n        canvasDiagonalLength * 0.05\n      );\n\n      const stPointLineCanvas1Start = vec2.create();\n      const stPointLineCanvas2Start = vec2.create();\n      vec2.add(\n        stPointLineCanvas1Start,\n        centerCanvas,\n        canvasVectorFromCenterStart\n      );\n      vec2.subtract(\n        stPointLineCanvas2Start,\n        centerCanvas,\n        canvasVectorFromCenterStart\n      );\n\n      const lineSegment1 = {\n        start: {\n          x: stPointLineCanvas1Start[0],\n          y: stPointLineCanvas1Start[1],\n        },\n        end: {\n          x: stPointLineCanvas1[0],\n          y: stPointLineCanvas1[1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: stPointLineCanvas2Start[0],\n          y: stPointLineCanvas2Start[1],\n        },\n        end: {\n          x: stPointLineCanvas2[0],\n          y: stPointLineCanvas2[1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        viewportIdArray.push(otherViewport.id); // we still need this to draw inactive slab thickness handles\n        data.handles.activeOperation = null; // no operation\n      }\n\n      // slab thickness handles are in couples\n      i++;\n    }\n\n    data.activeViewportIds = [...viewportIdArray];\n\n    this.editData = {\n      annotation,\n    };\n\n    return data.handles.activeOperation === OPERATION.DRAG ? true : false;\n  }\n}\n\nCrosshairsTool.toolName = 'Crosshairs';\nexport default CrosshairsTool;\n","import { BaseTool } from './base';\nimport { Events } from '../enums';\n\nimport { getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { state } from '../store';\nimport { Enums } from '@cornerstonejs/core';\n\nimport {\n  hideElementCursor,\n  resetElementCursor,\n} from '../cursors/elementCursor';\nimport { IPoints } from '../types';\n\nconst MAGNIFY_VIEWPORT_ID = 'magnify-viewport';\n\nclass MagnifyTool extends BaseTool {\n  static toolName;\n  _bounds: any;\n  editData: {\n    referencedImageId: string;\n    viewportIdsToRender: string[];\n    enabledElement: Types.IEnabledElement;\n    renderingEngine: Types.IRenderingEngine;\n    currentPoints: IPoints;\n  } | null;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        magnifySize: 10, // parallel scale , higher more zoom\n        magnifyWidth: 250, //px\n        magnifyHeight: 250, //px\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  _getReferencedImageId(\n    viewport: Types.IStackViewport | Types.IVolumeViewport\n  ): string {\n    const targetId = this.getTargetId(viewport);\n\n    let referencedImageId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    }\n\n    return referencedImageId;\n  }\n\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element, currentPoints } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    if (!(viewport instanceof StackViewport)) {\n      throw new Error('MagnifyTool only works on StackViewports');\n    }\n\n    const referencedImageId = this._getReferencedImageId(viewport);\n\n    if (!referencedImageId) {\n      throw new Error(\n        'MagnifyTool: No referenced image id found, reconstructed planes not supported yet'\n      );\n    }\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      referencedImageId,\n      viewportIdsToRender,\n      enabledElement,\n      renderingEngine,\n      currentPoints,\n    };\n\n    this._createMagnificationViewport();\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  preTouchStartCallback = (evt: EventTypes.InteractionEventType) => {\n    this.preMouseDownCallback(evt);\n  };\n\n  _createMagnificationViewport = () => {\n    const {\n      enabledElement,\n      referencedImageId,\n      viewportIdsToRender,\n      renderingEngine,\n      currentPoints,\n    } = this.editData;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n    const { voiRange } = viewport.getProperties();\n\n    const { canvas: canvasPos, world: worldPos } = currentPoints;\n\n    let magnifyToolElement: HTMLDivElement;\n\n    magnifyToolElement = element.querySelector('.magnifyTool');\n    if (magnifyToolElement === null) {\n      const magnifyElement = document.createElement('div');\n\n      magnifyElement.classList.add('magnifyTool');\n\n      magnifyElement.style.display = 'block';\n      magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;\n      magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;\n      magnifyElement.style.position = 'absolute';\n\n      magnifyToolElement = magnifyElement;\n\n      const viewportElement = element.querySelector('.viewport-element');\n      viewportElement.appendChild(magnifyElement);\n\n      const viewportInput = {\n        viewportId: MAGNIFY_VIEWPORT_ID,\n        type: Enums.ViewportType.STACK,\n        element: magnifyToolElement as HTMLDivElement,\n      };\n\n      renderingEngine.enableElement(viewportInput);\n    }\n\n    // Todo: use CSS transform instead of setting top and left for better performance\n    magnifyToolElement.style.top = `${\n      canvasPos[1] - this.configuration.magnifyHeight / 2\n    }px`;\n    magnifyToolElement.style.left = `${\n      canvasPos[0] - this.configuration.magnifyWidth / 2\n    }px`;\n\n    const magnifyViewport = renderingEngine.getViewport(\n      MAGNIFY_VIEWPORT_ID\n    ) as Types.IStackViewport;\n\n    magnifyViewport.setStack([referencedImageId]).then(() => {\n      // match the original viewport voi range\n      magnifyViewport.setProperties({ voiRange });\n\n      // Use the original viewport for the base for parallelScale\n      const { parallelScale } = viewport.getCamera();\n\n      const { focalPoint, position, viewPlaneNormal } =\n        magnifyViewport.getCamera();\n\n      const distance = Math.sqrt(\n        Math.pow(focalPoint[0] - position[0], 2) +\n          Math.pow(focalPoint[1] - position[1], 2) +\n          Math.pow(focalPoint[2] - position[2], 2)\n      );\n\n      const updatedFocalPoint = <Types.Point3>[\n        worldPos[0],\n        worldPos[1],\n        worldPos[2],\n      ];\n\n      const updatedPosition = <Types.Point3>[\n        updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n        updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n        updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n      ];\n\n      magnifyViewport.setCamera({\n        parallelScale: parallelScale * (1 / this.configuration.magnifySize),\n        focalPoint: updatedFocalPoint,\n        position: updatedPosition,\n      });\n      magnifyViewport.render();\n    });\n\n    magnifyToolElement.style.display = 'block';\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n\n    const { deltaPoints, element, currentPoints } = eventDetail;\n    const deltaPointsWorld = deltaPoints.world;\n    const canvasPos = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n\n    const magnifyElement = element.querySelector(\n      '.magnifyTool'\n    ) as HTMLDivElement;\n\n    if (!magnifyElement) {\n      return;\n    }\n\n    magnifyElement.style.top = `${\n      canvasPos[1] - this.configuration.magnifyHeight / 2\n    }px`;\n    magnifyElement.style.left = `${\n      canvasPos[0] - this.configuration.magnifyWidth / 2\n    }px`;\n\n    const { focalPoint, position } = magnifyViewport.getCamera();\n\n    const updatedPosition = <Types.Point3>[\n      position[0] + deltaPointsWorld[0],\n      position[1] + deltaPointsWorld[1],\n      position[2] + deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] + deltaPointsWorld[0],\n      focalPoint[1] + deltaPointsWorld[1],\n      focalPoint[2] + deltaPointsWorld[2],\n    ];\n\n    magnifyViewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n\n    magnifyViewport.render();\n  };\n\n  _dragEndCallback = (evt: EventTypes.InteractionEventType) => {\n    const { element } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);\n\n    const viewportElement = element.querySelector('.viewport-element');\n\n    const magnifyToolElement = viewportElement.querySelector(\n      '.magnifyTool'\n    ) as HTMLDivElement;\n\n    viewportElement.removeChild(magnifyToolElement);\n\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._dragEndCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._dragEndCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._dragEndCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n}\n\nMagnifyTool.toolName = 'Magnify';\nexport default MagnifyTool;\n","import { vec3 } from 'gl-matrix';\nimport {\n  getRenderingEngines,\n  CONSTANTS,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\n\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\n\nimport { PublicToolProps, ToolProps, SVGDrawingHelper } from '../types';\nimport { ReferenceLineAnnotation } from '../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\n\nconst { EPSILON } = CONSTANTS;\n\n/**\n * @public\n */\n\nclass ReferenceLines extends AnnotationDisplayTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    renderingEngine: any;\n    sourceViewport: any;\n    annotation: ReferenceLineAnnotation;\n  } | null = {} as any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        sourceViewportId: '',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    // this._throttledCalculateCachedStats = throttle(\n    //   this._calculateCachedStats,\n    //   100,\n    //   { trailing: true }\n    // );\n  }\n\n  _init = (): void => {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n\n    // Todo: handle this case where it is too soon to get the rendering engine\n    if (!renderingEngine) {\n      return;\n    }\n\n    let viewports = renderingEngine.getViewports();\n    viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n\n    const sourceViewport = renderingEngine.getViewport(\n      this.configuration.sourceViewportId\n    ) as Types.IVolumeViewport;\n\n    if (!sourceViewport || !sourceViewport.getImageData()) {\n      return;\n    }\n\n    const { element } = sourceViewport;\n    const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();\n\n    const sourceViewportCanvasCornersInWorld =\n      csUtils.getViewportImageCornersInWorld(sourceViewport);\n\n    let annotation = this.editData.annotation;\n    const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();\n\n    if (!annotation) {\n      const newAnnotation: ReferenceLineAnnotation = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n          toolName: this.getToolName(),\n          viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n          viewUp: <Types.Point3>[...viewUp],\n          FrameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          handles: {\n            points: sourceViewportCanvasCornersInWorld,\n          },\n        },\n      };\n\n      addAnnotation(newAnnotation, element);\n      annotation = newAnnotation;\n    } else {\n      this.editData.annotation.data.handles.points =\n        sourceViewportCanvasCornersInWorld;\n    }\n\n    this.editData = {\n      sourceViewport,\n      renderingEngine,\n      annotation,\n    };\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewports\n        .filter((viewport) => viewport.id !== sourceViewport.id)\n        .map((viewport) => viewport.id)\n    );\n  };\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onCameraModified = (evt: Types.EventTypes.CameraModifiedEvent): void => {\n    // If the camera is modified, we need to update the reference lines\n    // we really don't care which viewport triggered the\n    // camera modification, since we want to update all of them\n    // with respect to the targetViewport\n    this._init();\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    const { viewport: targetViewport } = enabledElement;\n    const { annotation, sourceViewport } = this.editData;\n\n    let renderStatus = false;\n\n    if (!sourceViewport) {\n      return renderStatus;\n    }\n\n    if (sourceViewport.id === targetViewport.id) {\n      // If the source viewport is the same as the current viewport, we don't need to render\n      return renderStatus;\n    }\n\n    if (!annotation || !annotation?.data?.handles?.points) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // top left world, top right world, bottom right world, bottom left world\n    const topLeft = annotation.data.handles.points[0];\n    const topRight = annotation.data.handles.points[1];\n    const bottomLeft = annotation.data.handles.points[2];\n    const bottomRight = annotation.data.handles.points[3];\n\n    const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();\n    const { viewPlaneNormal: sourceViewPlaneNormal } =\n      sourceViewport.getCamera();\n\n    if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {\n      // If the source and target viewports are parallel, we don't need to render\n      return renderStatus;\n    }\n\n    const targetViewportPlane = csUtils.planar.planeEquation(\n      viewPlaneNormal,\n      focalPoint\n    );\n\n    // check if the topLeft and bottomLeft line is parallel to the viewUp\n    const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n    const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n\n    let pointSetToUse = pointSet1;\n\n    let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n    topBottomVec = vec3.normalize(vec3.create(), topBottomVec) as Types.Point3;\n\n    let topRightVec = vec3.subtract(vec3.create(), pointSet1[2], pointSet1[0]);\n    topRightVec = vec3.normalize(vec3.create(), topRightVec);\n\n    const newNormal = vec3.cross(\n      vec3.create(),\n      topBottomVec,\n      topRightVec\n    ) as Types.Point3;\n\n    if (this.isParallel(newNormal, viewPlaneNormal)) {\n      return renderStatus;\n    }\n\n    // check if it is perpendicular to the viewPlaneNormal which means\n    // the line does not intersect the viewPlaneNormal\n    if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n      // 'use pointSet2';\n      pointSetToUse = pointSet2;\n    }\n\n    const lineStartWorld = csUtils.planar.linePlaneIntersection(\n      pointSetToUse[0],\n      pointSetToUse[1],\n      targetViewportPlane\n    );\n\n    const lineEndWorld = csUtils.planar.linePlaneIntersection(\n      pointSetToUse[2],\n      pointSetToUse[3],\n      targetViewportPlane\n    );\n    const { annotationUID } = annotation;\n\n    styleSpecifier.annotationUID = annotationUID;\n    const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n    const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n    const color = this.getStyle('color', styleSpecifier, annotation);\n    const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n    const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) =>\n      targetViewport.worldToCanvas(world)\n    );\n\n    const dataId = `${annotationUID}-line`;\n    const lineUID = '1';\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      lineUID,\n      canvasCoordinates[0],\n      canvasCoordinates[1],\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      dataId\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n\n  isPerpendicular = (vec1: Types.Point3, vec2: Types.Point3): boolean => {\n    const dot = vec3.dot(vec1, vec2);\n    return Math.abs(dot) < EPSILON;\n  };\n\n  isParallel(vec1: Types.Point3, vec2: Types.Point3): boolean {\n    return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n  }\n}\n\nReferenceLines.toolName = 'ReferenceLines';\nexport default ReferenceLines;\n","import { Enums } from '@cornerstonejs/core';\n\nconst { CalibrationTypes } = Enums;\nconst PIXEL_UNITS = 'px';\n\n/**\n * Extracts the length units and the type of calibration for those units\n * into the response.  The length units will typically be either mm or px\n * while the calibration type can be any of a number of different calibraiton types.\n *\n * Volumetric images have no calibration type, so are just the raw mm.\n *\n * TODO: Handle region calibration\n *\n * @param handles - used to detect if the spacing information is different\n *   between various points (eg angled ERMF or US Region).\n *   Currently unused, but needed for correct US Region handling\n * @param image - to extract the calibration from\n *        image.calibration - calibration value to extract units form\n * @returns String containing the units and type of calibration\n */\nconst getCalibratedLengthUnits = (handles, image): string => {\n  const { calibration, hasPixelSpacing } = image;\n  // Anachronistic - moving to using calibration consistently, but not completed yet\n  const units = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n  if (!calibration || !calibration.type) return units;\n  if (calibration.type === CalibrationTypes.UNCALIBRATED) return PIXEL_UNITS;\n  // TODO - handle US regions properly\n  if (calibration.SequenceOfUltrasoundRegions) return 'US Region';\n  return `${units} ${calibration.type}`;\n};\n\nconst SQUARE = '\\xb2';\n/**\n *  Extracts the area units, including the squared sign plus calibration type.\n */\nconst getCalibratedAreaUnits = (handles, image): string => {\n  const { calibration, hasPixelSpacing } = image;\n  const units = (hasPixelSpacing ? 'mm' : PIXEL_UNITS) + SQUARE;\n  if (!calibration || !calibration.type) return units;\n  if (calibration.SequenceOfUltrasoundRegions) return 'US Region';\n  return `${units} ${calibration.type}`;\n};\n\n/**\n * Gets the scale divisor for converting from internal spacing to\n * image spacing for calibrated images.\n */\nconst getCalibratedScale = (image) => image.calibration?.scale || 1;\n\n/** Gets the aspect ratio of the screen display relative to the image\n * display in order to square up measurement values.\n * That is, suppose the spacing on the image is 1, 0.5 (x,y spacing)\n * This is displayed at 1, 1 spacing on screen, then the\n * aspect value will be 1/0.5 = 2\n */\nconst getCalibratedAspect = (image) => image.calibration?.aspect || 1;\n\nexport default getCalibratedLengthUnits;\n\nexport {\n  getCalibratedAreaUnits,\n  getCalibratedLengthUnits,\n  getCalibratedScale,\n  getCalibratedAspect,\n};\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Determine the coordinates that will place the textbox to the right of the\n * annotation.\n *\n * @param annotationCanvasPoints - The canvas points of the annotation's handles.\n * @returns - The coordinates for default placement of the textbox.\n */\nexport default function getTextBoxCoordsCanvas(\n  annotationCanvasPoints: Array<Types.Point2>\n): Types.Point2 {\n  const corners = _determineCorners(annotationCanvasPoints);\n  const centerY = (corners.top[1] + corners.bottom[1]) / 2;\n  const textBoxCanvas = <Types.Point2>[corners.right[0], centerY];\n\n  return textBoxCanvas;\n}\n\n/**\n * Determine the handles that have the min/max x and y values.\n *\n * @param canvasPoints - The canvas points of the annotation's handles.\n * @returns - The top, left, bottom, and right handles.\n */\nfunction _determineCorners(canvasPoints: Array<Types.Point2>) {\n  const handlesLeftToRight = [canvasPoints[0], canvasPoints[1]].sort(_compareX);\n  const handlesTopToBottom = [canvasPoints[0], canvasPoints[1]].sort(_compareY);\n  const right = handlesLeftToRight[handlesLeftToRight.length - 1];\n  const top = handlesTopToBottom[0];\n  const bottom = handlesTopToBottom[handlesTopToBottom.length - 1];\n\n  return {\n    top,\n    bottom,\n    right,\n  };\n\n  function _compareX(a, b) {\n    return a[0] < b[0] ? -1 : 1;\n  }\n  function _compareY(a, b) {\n    return a[1] < b[1] ? -1 : 1;\n  }\n}\n","import { vec2, vec3 } from 'gl-matrix';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedLengthUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawLine as drawLineSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { BidirectionalAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n  MouseDragEventType,\n  MouseMoveEventType,\n} from '../../types/EventTypes';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * BidirectionalTool let you draw annotations that measures the length and\n * width at the same time in `mm` unit. It is consisted of two perpendicular lines and\n * a text box. You can use the BidirectionalTool in all planes even in oblique\n * reconstructed planes. Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(BidirectionalTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(BidirectionalTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(BidirectionalTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n */\nclass BidirectionalTool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n  preventHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Bidirectional Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation(\n    evt: EventTypes.InteractionEventType\n  ): BidirectionalAnnotation {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation: BidirectionalAnnotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [\n            // long\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            // short\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          activeHandleIndex: null,\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  }\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: BidirectionalAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // Check long axis\n    let canvasPoint1 = viewport.worldToCanvas(points[0]);\n    let canvasPoint2 = viewport.worldToCanvas(points[1]);\n\n    let line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    let distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    // Check short axis\n    canvasPoint1 = viewport.worldToCanvas(points[2]);\n    canvasPoint2 = viewport.worldToCanvas(points[3]);\n\n    line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Handles the toolSelected callback for bidirectional tool\n   * @param evt - EventTypes.MouseDownEventType\n   * @param annotation - Bidirectional annotation\n   * @param interactionType - interaction type (mouse, touch)\n   */\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: BidirectionalAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * Executes the callback for when mouse has selected a handle (anchor point) of\n   * the bidirectional tool or when the text box has been selected.\n   *\n   * @param evt - EventTypes.MouseDownEventType\n   * @param annotation - Bidirectional annotation\n   * @param handle - Handle index or selected textBox information\n   * @param interactionType - interaction type (mouse, touch)\n   */\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: BidirectionalAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const data = annotation.data;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    hideElementCursor(element);\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * Handles the mouse up action for the bidirectional tool. It can be at the end\n   * of the annotation drawing (MouseUpEventType) or when the user clicks and release\n   * the mouse button instantly which let to the annotation to draw without holding\n   * the mouse button (MouseClickEventType).\n   *\n   * @param evt - mouse up or mouse click event types\n   */\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (this.editData.handleIndex !== undefined) {\n      const { points } = data.handles;\n      const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n      const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n\n      if (secondLineSegmentLength > firstLineSegmentLength) {\n        // Switch points so [0,1] is the long axis and [2,3] is the short axis.\n\n        const longAxis = [[...points[2]], [...points[3]]];\n\n        const shortAxisPoint0 = [...points[0]];\n        const shortAxisPoint1 = [...points[1]];\n\n        // shortAxis[0->1] should be perpendicular (counter-clockwise) to longAxis[0->1]\n        const longAxisVector = vec2.create();\n\n        vec2.set(\n          longAxisVector,\n          longAxis[1][0] - longAxis[0][0],\n          longAxis[1][1] - longAxis[1][0]\n        );\n\n        const counterClockWisePerpendicularToLongAxis = vec2.create();\n\n        vec2.set(\n          counterClockWisePerpendicularToLongAxis,\n          -longAxisVector[1],\n          longAxisVector[0]\n        );\n\n        const currentShortAxisVector = vec2.create();\n\n        vec2.set(\n          currentShortAxisVector,\n          shortAxisPoint1[0] - shortAxisPoint0[0],\n          shortAxisPoint1[1] - shortAxisPoint0[0]\n        );\n\n        let shortAxis;\n\n        if (\n          vec2.dot(\n            currentShortAxisVector,\n            counterClockWisePerpendicularToLongAxis\n          ) > 0\n        ) {\n          shortAxis = [shortAxisPoint0, shortAxisPoint1];\n        } else {\n          shortAxis = [shortAxisPoint1, shortAxisPoint0];\n        }\n\n        data.handles.points = [\n          longAxis[0],\n          longAxis[1],\n          shortAxis[0],\n          shortAxis[1],\n        ];\n      }\n    }\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  /**\n   * @param evt - mouse move event type or mouse drag\n   */\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { worldToCanvas } = viewport;\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    const worldPos = currentPoints.world;\n\n    // Update first move handle\n    data.handles.points[handleIndex] = [...worldPos];\n\n    const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n\n    const canvasCoords = {\n      longLineSegment: {\n        start: {\n          x: canvasCoordPoints[0][0],\n          y: canvasCoordPoints[0][1],\n        },\n        end: {\n          x: canvasCoordPoints[1][0],\n          y: canvasCoordPoints[1][1],\n        },\n      },\n      shortLineSegment: {\n        start: {\n          x: canvasCoordPoints[2][0],\n          y: canvasCoordPoints[2][1],\n        },\n        end: {\n          x: canvasCoordPoints[3][0],\n          y: canvasCoordPoints[3][1],\n        },\n      },\n    };\n\n    // ~~ calculate worldPos of our short axis handles\n    // short axis is perpendicular to long axis, and we set its length to be 2/3 of long axis\n    // (meaning each)\n    const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n\n    const shortAxisDistFromCenter = dist / 3;\n    // Calculate long line's incline\n    const dx =\n      canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n    const dy =\n      canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const vectorX = dx / length;\n    const vectorY = dy / length;\n    // middle point between long line segment's points\n    const xMid =\n      (canvasCoords.longLineSegment.start.x +\n        canvasCoords.longLineSegment.end.x) /\n      2;\n    const yMid =\n      (canvasCoords.longLineSegment.start.y +\n        canvasCoords.longLineSegment.end.y) /\n      2;\n    // short points 1/3 distance from center of long points\n    const startX = xMid + shortAxisDistFromCenter * vectorY;\n    const startY = yMid - shortAxisDistFromCenter * vectorX;\n    const endX = xMid - shortAxisDistFromCenter * vectorY;\n    const endY = yMid + shortAxisDistFromCenter * vectorX;\n\n    // Update perpendicular line segment's points\n    data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n    data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n\n    annotation.invalidated = true;\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.editData.hasMoved = true;\n  };\n\n  /**\n   * Mouse drag to edit annotation callback\n   * @param evt - mouse drag event\n   */\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragModifyHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  /**\n   * Mouse dragging a handle callback\n   * @param evt - mouse drag event\n   */\n  _dragModifyHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { annotation, handleIndex: movingHandleIndex } = this.editData;\n    const { data } = annotation;\n\n    // Moving handle\n    const worldPos = currentPoints.world;\n    const canvasCoordHandlesCurrent = [\n      viewport.worldToCanvas(data.handles.points[0]),\n      viewport.worldToCanvas(data.handles.points[1]),\n      viewport.worldToCanvas(data.handles.points[2]),\n      viewport.worldToCanvas(data.handles.points[3]),\n    ];\n\n    const firstLineSegment = {\n      start: {\n        x: canvasCoordHandlesCurrent[0][0],\n        y: canvasCoordHandlesCurrent[0][1],\n      },\n      end: {\n        x: canvasCoordHandlesCurrent[1][0],\n        y: canvasCoordHandlesCurrent[1][1],\n      },\n    };\n    const secondLineSegment = {\n      start: {\n        x: canvasCoordHandlesCurrent[2][0],\n        y: canvasCoordHandlesCurrent[2][1],\n      },\n      end: {\n        x: canvasCoordHandlesCurrent[3][0],\n        y: canvasCoordHandlesCurrent[3][1],\n      },\n    };\n\n    // Handle we've selected's proposed point\n    const proposedPoint = <Types.Point3>[...worldPos];\n    const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n\n    if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n      const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n\n      const fixedHandleCanvasCoord =\n        canvasCoordHandlesCurrent[fixedHandleIndex];\n\n      const fixedHandleToProposedCoordVec = vec2.set(\n        vec2.create(),\n        proposedCanvasCoord[0] - fixedHandleCanvasCoord[0],\n        proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]\n      );\n\n      const fixedHandleToOldCoordVec = vec2.set(\n        vec2.create(),\n        canvasCoordHandlesCurrent[movingHandleIndex][0] -\n          fixedHandleCanvasCoord[0],\n        canvasCoordHandlesCurrent[movingHandleIndex][1] -\n          fixedHandleCanvasCoord[1]\n      );\n\n      // normalize vector\n      vec2.normalize(\n        fixedHandleToProposedCoordVec,\n        fixedHandleToProposedCoordVec\n      );\n      vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n\n      // Check whether this\n      const proposedFirstLineSegment = {\n        start: {\n          x: fixedHandleCanvasCoord[0],\n          y: fixedHandleCanvasCoord[1],\n        },\n        end: {\n          x: proposedCanvasCoord[0],\n          y: proposedCanvasCoord[1],\n        },\n      };\n\n      // Note: this is the case when we are modifying the long axis line segment\n      // and we make it shorter and shorter until its second half size becomes zero\n      // which basically means that any more modification would make the long axis\n      // second half disappear. In this case, we just bail out and do not update\n      // since we don't want to disrupt the bidirectional shape.\n      if (\n        this._movingLongAxisWouldPutItThroughShortAxis(\n          proposedFirstLineSegment,\n          secondLineSegment\n        )\n      ) {\n        return;\n      }\n\n      const centerOfRotation = fixedHandleCanvasCoord;\n\n      const angle = this._getSignedAngle(\n        fixedHandleToOldCoordVec,\n        fixedHandleToProposedCoordVec\n      );\n\n      // rotate handles around the center of rotation, first translate to origin,\n      // then rotate, then translate back\n      let firstPointX = canvasCoordHandlesCurrent[2][0];\n      let firstPointY = canvasCoordHandlesCurrent[2][1];\n\n      let secondPointX = canvasCoordHandlesCurrent[3][0];\n      let secondPointY = canvasCoordHandlesCurrent[3][1];\n\n      // translate to origin\n      firstPointX -= centerOfRotation[0];\n      firstPointY -= centerOfRotation[1];\n\n      secondPointX -= centerOfRotation[0];\n      secondPointY -= centerOfRotation[1];\n\n      // rotate\n      const rotatedFirstPoint =\n        firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n      const rotatedFirstPointY =\n        firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n\n      const rotatedSecondPoint =\n        secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n      const rotatedSecondPointY =\n        secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n\n      // translate back\n      firstPointX = rotatedFirstPoint + centerOfRotation[0];\n      firstPointY = rotatedFirstPointY + centerOfRotation[1];\n\n      secondPointX = rotatedSecondPoint + centerOfRotation[0];\n      secondPointY = rotatedSecondPointY + centerOfRotation[1];\n\n      // update handles\n      const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n      const newSecondPoint = viewport.canvasToWorld([\n        secondPointX,\n        secondPointY,\n      ]);\n\n      // the fixed handle is the one that is not being moved so we\n      // don't need to update it\n      data.handles.points[movingHandleIndex] = proposedPoint;\n      data.handles.points[2] = newFirstPoint;\n      data.handles.points[3] = newSecondPoint;\n    } else {\n      // Translation manipulator\n      const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n\n      const canvasCoordsCurrent = {\n        longLineSegment: {\n          start: firstLineSegment.start,\n          end: firstLineSegment.end,\n        },\n        shortLineSegment: {\n          start: secondLineSegment.start,\n          end: secondLineSegment.end,\n        },\n      };\n\n      const longLineSegmentVec = vec2.subtract(\n        vec2.create(),\n        [\n          canvasCoordsCurrent.longLineSegment.end.x,\n          canvasCoordsCurrent.longLineSegment.end.y,\n        ],\n        [\n          canvasCoordsCurrent.longLineSegment.start.x,\n          canvasCoordsCurrent.longLineSegment.start.y,\n        ]\n      );\n\n      const longLineSegmentVecNormalized = vec2.normalize(\n        vec2.create(),\n        longLineSegmentVec\n      );\n\n      const proposedToCurrentVec = vec2.subtract(\n        vec2.create(),\n        [proposedCanvasCoord[0], proposedCanvasCoord[1]],\n        [\n          canvasCoordHandlesCurrent[movingHandleIndex][0],\n          canvasCoordHandlesCurrent[movingHandleIndex][1],\n        ]\n      );\n\n      const movementLength = vec2.length(proposedToCurrentVec);\n\n      const angle = this._getSignedAngle(\n        longLineSegmentVecNormalized,\n        proposedToCurrentVec\n      );\n\n      const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n\n      const newTranslatedPoint = vec2.scaleAndAdd(\n        vec2.create(),\n        [\n          canvasCoordHandlesCurrent[translateHandleIndex][0],\n          canvasCoordHandlesCurrent[translateHandleIndex][1],\n        ],\n        longLineSegmentVecNormalized,\n        movementAlongLineSegmentLength\n      );\n\n      // don't update if it passes through the other line segment\n      if (\n        this._movingLongAxisWouldPutItThroughShortAxis(\n          {\n            start: {\n              x: proposedCanvasCoord[0],\n              y: proposedCanvasCoord[1],\n            },\n            end: {\n              x: newTranslatedPoint[0],\n              y: newTranslatedPoint[1],\n            },\n          },\n          {\n            start: {\n              x: canvasCoordsCurrent.longLineSegment.start.x,\n              y: canvasCoordsCurrent.longLineSegment.start.y,\n            },\n            end: {\n              x: canvasCoordsCurrent.longLineSegment.end.x,\n              y: canvasCoordsCurrent.longLineSegment.end.y,\n            },\n          }\n        )\n      ) {\n        return;\n      }\n\n      const intersectionPoint = lineSegment.intersectLine(\n        [proposedCanvasCoord[0], proposedCanvasCoord[1]],\n        [newTranslatedPoint[0], newTranslatedPoint[1]],\n        [firstLineSegment.start.x, firstLineSegment.start.y],\n        [firstLineSegment.end.x, firstLineSegment.end.y]\n      );\n\n      // don't update if it doesn't intersect\n      if (!intersectionPoint) {\n        return;\n      }\n\n      data.handles.points[translateHandleIndex] = viewport.canvasToWorld(\n        newTranslatedPoint as Types.Point2\n      );\n      data.handles.points[movingHandleIndex] = proposedPoint;\n    }\n  };\n\n  /**\n   * Cancels an ongoing drawing of a bidirectional annotation\n   * @param element - HTML Element\n   */\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragDrawCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragDrawCallback as EventListener\n    );\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragModifyCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragModifyCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the bidirectional annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = true;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as BidirectionalAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].unit === undefined\n      ) {\n        data.cachedStats[targetId] = {\n          length: null,\n          width: null,\n          unit: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId1 = `${annotationUID}-line-1`;\n      const dataId2 = `${annotationUID}-line-2`;\n\n      const lineUID = '0';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          lineDash,\n          lineWidth,\n          shadow,\n        },\n        dataId1\n      );\n\n      const secondLineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        secondLineUID,\n        canvasCoordinates[2],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n          shadow,\n        },\n        dataId2\n      );\n\n      renderStatus = true;\n\n      const textLines = this._getTextLines(data, targetId);\n\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _movingLongAxisWouldPutItThroughShortAxis = (\n    firstLineSegment,\n    secondLineSegment\n  ) => {\n    const vectorInSecondLineDirection = vec2.create();\n\n    vec2.set(\n      vectorInSecondLineDirection,\n      secondLineSegment.end.x - secondLineSegment.start.x,\n      secondLineSegment.end.y - secondLineSegment.start.y\n    );\n\n    vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n\n    const extendedSecondLineSegment = {\n      start: {\n        x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n        y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n      },\n      end: {\n        x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n        y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n      },\n    };\n\n    // Add some buffer in the secondLineSegment when finding the proposedIntersectionPoint\n    // Of points to stop us getting stack when rotating quickly.\n\n    const proposedIntersectionPoint = lineSegment.intersectLine(\n      [extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y],\n      [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y],\n      [firstLineSegment.start.x, firstLineSegment.start.y],\n      [firstLineSegment.end.x, firstLineSegment.end.y]\n    );\n\n    const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n\n    return wouldPutThroughShortAxis;\n  };\n\n  /**\n   * get text box content\n   */\n  _getTextLines = (data, targetId) => {\n    const { cachedStats } = data;\n    const { length, width, unit } = cachedStats[targetId];\n\n    if (length === undefined) {\n      return;\n    }\n\n    // spaceBetweenSlices & pixelSpacing &\n    // magnitude in each direction? Otherwise, this is \"px\"?\n    const textLines = [\n      `L: ${roundNumber(length)} ${unit}`,\n      `W: ${roundNumber(width)} ${unit}`,\n    ];\n\n    return textLines;\n  };\n\n  _calculateLength(pos1, pos2) {\n    const dx = pos1[0] - pos2[0];\n    const dy = pos1[1] - pos2[1];\n    const dz = pos1[2] - pos2[2];\n\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  }\n\n  _calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n    const { data } = annotation;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const worldPos3 = data.handles.points[2];\n    const worldPos4 = data.handles.points[3];\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData, dimensions } = image;\n      const scale = getCalibratedScale(image);\n      const dist1 = this._calculateLength(worldPos1, worldPos2) / scale;\n      const dist2 = this._calculateLength(worldPos3, worldPos4) / scale;\n      const length = dist1 > dist2 ? dist1 : dist2;\n      const width = dist1 > dist2 ? dist2 : dist1;\n\n      const index1 = transformWorldToIndex(imageData, worldPos1);\n      const index2 = transformWorldToIndex(imageData, worldPos2);\n      const index3 = transformWorldToIndex(imageData, worldPos3);\n      const index4 = transformWorldToIndex(imageData, worldPos4);\n\n      this._isInsideVolume(index1, index2, index3, index4, dimensions)\n        ? (this.isHandleOutsideImage = false)\n        : (this.isHandleOutsideImage = true);\n\n      cachedStats[targetId] = {\n        length,\n        width,\n        unit: getCalibratedLengthUnits(null, image),\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, index3, index4, dimensions): boolean => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions) &&\n      csUtils.indexWithinDimensions(index3, dimensions) &&\n      csUtils.indexWithinDimensions(index4, dimensions)\n    );\n  };\n\n  _getSignedAngle = (vector1, vector2) => {\n    return Math.atan2(\n      vector1[0] * vector2[1] - vector1[1] * vector2[0],\n      vector1[0] * vector2[0] + vector1[1] * vector2[1]\n    );\n  };\n}\n\nBidirectionalTool.toolName = 'Bidirectional';\nexport default BidirectionalTool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedLengthUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport * as lineSegment from '../../utilities/math/line';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { LengthAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * LengthTool let you draw annotations that measures the length of two drawing\n * points on a slice. You can use the LengthTool in all imaging planes even in oblique\n * reconstructed planes. Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(LengthTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(LengthTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(LengthTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n\n */\n\nclass LengthTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): LengthAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: LengthAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: LengthAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: LengthAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as LengthAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      // Todo: move these into annotationTool class\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      let activeHandleCanvasCoords;\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].unit === undefined\n      ) {\n        data.cachedStats[targetId] = {\n          length: null,\n          unit: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-line`;\n      const lineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n          shadow,\n        },\n        dataId\n      );\n\n      renderStatus = true;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      const textLines = this._getTextLines(data, targetId);\n\n      // Need to update to sync with annotation while unlinked/not moved\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  // text line for the current active length annotation\n  _getTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { length, unit } = cachedVolumeStats;\n\n    // Can be null on load\n    if (length === undefined || length === null || isNaN(length)) {\n      return;\n    }\n\n    const textLines = [`${roundNumber(length)} ${unit}`];\n\n    return textLines;\n  }\n\n  _calculateLength(pos1, pos2) {\n    const dx = pos1[0] - pos2[0];\n    const dy = pos1[1] - pos2[1];\n    const dz = pos1[2] - pos2[2];\n\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  }\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    // TODO clean up, this doesn't need a length per volume, it has no stats derived from volumes.\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData, dimensions } = image;\n      const scale = getCalibratedScale(image);\n\n      const length = this._calculateLength(worldPos1, worldPos2) / scale;\n\n      const index1 = transformWorldToIndex(imageData, worldPos1);\n      const index2 = transformWorldToIndex(imageData, worldPos2);\n\n      this._isInsideVolume(index1, index2, dimensions)\n        ? (this.isHandleOutsideImage = false)\n        : (this.isHandleOutsideImage = true);\n\n      // TODO -> Do we instead want to clip to the bounds of the volume and only include that portion?\n      // Seems like a lot of work for an unrealistic case. At the moment bail out of stat calculation if either\n      // corner is off the canvas.\n\n      // todo: add insideVolume calculation, for removing tool if outside\n      cachedStats[targetId] = {\n        length,\n        unit: getCalibratedLengthUnits(null, image),\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n\n  _isInsideVolume(index1, index2, dimensions) {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  }\n}\n\nLengthTool.toolName = 'Length';\nexport default LengthTool;\n","import { metaData } from '@cornerstonejs/core';\n\ntype ModalityUnitOptions = {\n  isPreScaled: boolean;\n  isSuvScaled: boolean;\n};\n\nfunction getModalityUnit(\n  modality: string,\n  imageId: string,\n  options: ModalityUnitOptions\n): string {\n  if (modality === 'CT') {\n    return 'HU';\n  } else if (modality === 'PT') {\n    return _handlePTModality(imageId, options);\n  } else {\n    return '';\n  }\n}\n\nfunction _handlePTModality(imageId: string, options: ModalityUnitOptions) {\n  if (!options.isPreScaled) {\n    return 'raw';\n  }\n\n  if (options.isSuvScaled) {\n    return 'SUV';\n  }\n\n  const petSeriesModule = metaData.get('petSeriesModule', imageId);\n  return petSeriesModule?.units || 'unitless';\n}\n\nexport { getModalityUnit, ModalityUnitOptions };\n","import {\n  cache,\n  StackViewport,\n  Types,\n  BaseVolumeViewport,\n} from '@cornerstonejs/core';\n\nfunction isViewportPreScaled(\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  targetId: string\n): boolean {\n  if (viewport instanceof BaseVolumeViewport) {\n    const volumeId = targetId.split('volumeId:')[1];\n    const volume = cache.getVolume(volumeId);\n    return !!volume?.scaling && Object.keys(volume.scaling).length > 0;\n  } else if (viewport instanceof StackViewport) {\n    const { preScale } = viewport.getImageData() || {};\n    return !!preScale?.scaled;\n  } else {\n    throw new Error('Viewport is not a valid type');\n  }\n}\n\nexport { isViewportPreScaled };\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { vec2 } from 'gl-matrix';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n  utilities,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { ProbeAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * ProbeTool let you get the underlying voxel value by putting a probe in that\n * location. It will give index of the location and value of the voxel.\n * You can use ProbeTool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Probe tool's text box are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * To use the ProbeTool, you first need to add it to cornerstoneTools, then create\n * a toolGroup and add the ProbeTool to it. Finally, setToolActive on the toolGroup\n *\n * ```js\n * cornerstoneTools.addTool(ProbeTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(ProbeTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(ProbeTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n *\n */\nclass ProbeTool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    newAnnotation?: boolean;\n  } | null;\n  eventDispatchDetail: {\n    viewportId: string;\n    renderingEngineId: string;\n  };\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  // Not necessary for this tool but needs to be defined since it's an abstract\n  // method from the parent class.\n  isPointNearTool(): boolean {\n    return false;\n  }\n\n  toolSelectedCallback() {}\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Probe Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: { points: [<Types.Point3>[...worldPos]] },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      newAnnotation: true,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It checks if the mouse click is near ProveTool, it overwrites the baseAnnotationTool\n   * getHandleNearImagePoint method.\n   *\n   * @param element - The element that the tool is attached to.\n   * @param annotation - The annotation object associated with the annotation\n   * @param canvasCoords - The coordinates of the mouse click on canvas\n   * @param proximity - The distance from the mouse cursor to the point\n   * that is considered \"near\".\n   * @returns The handle that is closest to the cursor, or null if the cursor\n   * is not near any of the handles.\n   */\n  getHandleNearImagePoint(\n    element: HTMLDivElement,\n    annotation: ProbeAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): ToolHandle | undefined {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const point = data.handles.points[0];\n    const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n\n    const near =\n      vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n\n    if (near === true) {\n      return point;\n    }\n  }\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: ProbeAnnotation\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    // Find viewports to render on drag.\n\n    this.editData = {\n      //handle, // This would be useful for other tools with more than one handle\n      annotation,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const { viewportId } = enabledElement;\n    this.eventDispatchDetail = {\n      viewportId,\n      renderingEngineId: renderingEngine.id,\n    };\n\n    this._deactivateModify(element);\n\n    resetElementCursor(element);\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragCallback = (evt) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { data } = annotation;\n\n    data.handles.points[0] = [...worldPos];\n    annotation.invalidated = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the probe annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ProbeAnnotation;\n      const annotationUID = annotation.annotationUID;\n      const data = annotation.data;\n      const point = data.handles.points[0];\n      const canvasCoordinates = viewport.worldToCanvas(point);\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      if (!data.cachedStats[targetId]) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          index: null,\n          value: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n      } else if (annotation.invalidated) {\n        this._calculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related stackViewports data if\n        // they are not at the referencedImageId, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      const handleGroupUID = '0';\n\n      drawHandlesSvg(\n        svgDrawingHelper,\n        annotationUID,\n        handleGroupUID,\n        [canvasCoordinates],\n        { color }\n      );\n\n      renderStatus = true;\n\n      const textLines = this._getTextLines(data, targetId);\n      if (textLines) {\n        const textCanvasCoordinates = [\n          canvasCoordinates[0] + 6,\n          canvasCoordinates[1] - 6,\n        ];\n\n        const textUID = '0';\n        drawTextBoxSvg(\n          svgDrawingHelper,\n          annotationUID,\n          textUID,\n          textLines,\n          [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n          this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n        );\n      }\n    }\n\n    return renderStatus;\n  };\n\n  _getTextLines(data, targetId: string): string[] | undefined {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n\n    if (value === undefined) {\n      return;\n    }\n\n    const textLines = [];\n\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n\n    textLines.push(`${value.toFixed(2)} ${modalityUnit}`);\n\n    return textLines;\n  }\n\n  _calculateCachedStats(\n    annotation,\n    renderingEngine,\n    enabledElement,\n    modalityUnitOptions: ModalityUnitOptions\n  ) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const worldPos = data.handles.points[0];\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata } = image;\n      const scalarData =\n        'getScalarData' in image ? image.getScalarData() : image.scalarData;\n\n      const modality = metadata.Modality;\n      const index = transformWorldToIndex(imageData, worldPos);\n\n      index[0] = Math.round(index[0]);\n      index[1] = Math.round(index[1]);\n      index[2] = Math.round(index[2]);\n\n      if (csUtils.indexWithinDimensions(index, dimensions)) {\n        this.isHandleOutsideImage = false;\n        const yMultiple = dimensions[0];\n        const zMultiple = dimensions[0] * dimensions[1];\n\n        const value =\n          scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\n\n        // Index[2] for stackViewport is always 0, but for visualization\n        // we reset it to be imageId index\n        if (targetId.startsWith('imageId:')) {\n          const imageId = targetId.split('imageId:')[1];\n          const imageURI = csUtils.imageIdToURI(imageId);\n          const viewports = utilities.getViewportsWithImageURI(\n            imageURI,\n            renderingEngineId\n          );\n\n          const viewport = viewports[0];\n\n          index[2] = viewport.getCurrentImageIdIndex();\n        }\n\n        const modalityUnit = getModalityUnit(\n          modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        cachedStats[targetId] = {\n          index,\n          value,\n          Modality: modality,\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n        cachedStats[targetId] = {\n          index,\n          Modality: modality,\n        };\n      }\n\n      annotation.invalidated = false;\n\n      // Dispatching annotation modified\n      const eventType = Events.ANNOTATION_MODIFIED;\n\n      const eventDetail: AnnotationModifiedEventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    return cachedStats;\n  }\n}\n\nProbeTool.toolName = 'Probe';\nexport default ProbeTool;\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  PublicToolProps,\n  SVGDrawingHelper,\n  ToolProps,\n} from '../../types';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport ProbeTool from './ProbeTool';\nimport { ProbeAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\n\nclass DragProbeTool extends ProbeTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    newAnnotation?: boolean;\n  } | null;\n  eventDispatchDetail: {\n    viewportId: string;\n    renderingEngineId: string;\n  };\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  postMouseDownCallback = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const annotation: ProbeAnnotation = {\n      invalidated: true,\n      highlighted: true,\n      isVisible: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: { points: [<Types.Point3>[...worldPos]] },\n        cachedStats: {},\n      },\n    };\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      newAnnotation: true,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  postTouchStartCallback = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    return this.postMouseDownCallback(evt);\n  };\n\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const annotations = this.filterInteractableAnnotationsForElement(\n      viewport.element,\n      [this.editData.annotation]\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const annotation = this.editData.annotation;\n    const annotationUID = annotation.annotationUID;\n    const data = annotation.data;\n    const point = data.handles.points[0];\n    const canvasCoordinates = viewport.worldToCanvas(point);\n\n    styleSpecifier.annotationUID = annotationUID;\n\n    const color = this.getStyle('color', styleSpecifier, annotation);\n\n    const modalityUnitOptions = {\n      isPreScaled: isViewportPreScaled(viewport, targetId),\n\n      isSuvScaled: this.isSuvScaled(\n        viewport,\n        targetId,\n        annotation.metadata.referencedImageId\n      ),\n    };\n\n    if (!data.cachedStats[targetId]) {\n      data.cachedStats[targetId] = {\n        Modality: null,\n        index: null,\n        value: null,\n      };\n\n      this._calculateCachedStats(\n        annotation,\n        renderingEngine,\n        enabledElement,\n        modalityUnitOptions\n      );\n    } else if (annotation.invalidated) {\n      this._calculateCachedStats(\n        annotation,\n        renderingEngine,\n        enabledElement,\n        modalityUnitOptions\n      );\n    }\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const handleGroupUID = '0';\n\n    drawHandlesSvg(\n      svgDrawingHelper,\n      annotationUID,\n      handleGroupUID,\n      [canvasCoordinates],\n      { color }\n    );\n\n    renderStatus = true;\n\n    const textLines = this._getTextLines(data, targetId);\n    if (textLines) {\n      const textCanvasCoordinates = [\n        canvasCoordinates[0] + 6,\n        canvasCoordinates[1] - 6,\n      ];\n\n      const textUID = '0';\n      drawTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textUID,\n        textLines,\n        [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n    }\n\n    return renderStatus;\n  };\n}\n\nDragProbeTool.toolName = 'DragProbe';\nexport default DragProbeTool;\n","import type { Types } from '@cornerstonejs/core';\nimport * as lineSegment from '../line';\n\ntype rectLineSegments = {\n  top: Types.Point2[];\n  right: Types.Point2[];\n  bottom: Types.Point2[];\n  left: Types.Point2[];\n};\n\n/**\n * Given a rectangle left, top, width and height, return an object containing the\n * line segments that make up the rectangle's four sides\n * @param left - The x-coordinate of the left edge of the rectangle.\n * @param top - The y-coordinate of the top edge of the rectangle.\n * @param width - The width of the rectangle.\n * @param height - The height of the rectangle.\n * @returns An object with four keys, each of which contains an array of two\n * points.\n */\nfunction rectToLineSegments(\n  left: number,\n  top: number,\n  width: number,\n  height: number\n): rectLineSegments {\n  const topLineStart: Types.Point2 = [left, top];\n  const topLineEnd: Types.Point2 = [left + width, top];\n\n  const rightLineStart: Types.Point2 = [left + width, top];\n  const rightLineEnd: Types.Point2 = [left + width, top + height];\n\n  const bottomLineStart: Types.Point2 = [left + width, top + height];\n  const bottomLineEnd: Types.Point2 = [left, top + height];\n\n  const leftLineStart: Types.Point2 = [left, top + height];\n  const leftLineEnd: Types.Point2 = [left, top];\n\n  const lineSegments = {\n    top: [topLineStart, topLineEnd],\n    right: [rightLineStart, rightLineEnd],\n    bottom: [bottomLineStart, bottomLineEnd],\n    left: [leftLineStart, leftLineEnd],\n  };\n\n  return lineSegments;\n}\n\n/**\n * Calculates distance of the point to the rectangle. It calculates the minimum\n * distance between the point and each line segment of the rectangle.\n *\n * @param rect - coordinates of the rectangle [left, top, width, height]\n * @param point - [x,y] coordinates of a point\n * @returns\n */\nexport default function distanceToPoint(\n  rect: number[],\n  point: Types.Point2\n): number {\n  if (rect.length !== 4 || point.length !== 2) {\n    throw Error(\n      'rectangle:[left, top, width, height] or point: [x,y] not defined correctly'\n    );\n  }\n\n  const [left, top, width, height] = rect;\n\n  let minDistance = 655535;\n  const lineSegments = rectToLineSegments(left, top, width, height);\n\n  Object.keys(lineSegments).forEach((segment) => {\n    const [lineStart, lineEnd] = lineSegments[segment];\n    const distance = lineSegment.distanceToPoint(lineStart, lineEnd, point);\n\n    if (distance < minDistance) {\n      minDistance = distance;\n    }\n  });\n\n  return minDistance;\n}\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  ToolProps,\n  PublicToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { getModalityUnit } from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * RectangleROIAnnotation let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of a Rectangular region of interest.\n * You can use RectangleROIAnnotation in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. RectangleROI tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(RectangleROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(RectangleROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(RectangleROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n */\nclass RectangleROITool extends AnnotationTool {\n  static toolName;\n\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a RectangleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): RectangleROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: RectangleROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasPoint1 = viewport.worldToCanvas(points[0]);\n    const canvasPoint2 = viewport.worldToCanvas(points[3]);\n\n    const rect = this._getRectangleImageCoordinates([\n      canvasPoint1,\n      canvasPoint2,\n    ]);\n\n    const point = [canvasCoords[0], canvasCoords[1]];\n    const { left, top, width, height } = rect;\n\n    const distanceToPoint = rectangle.distanceToPoint(\n      [left, top, width, height],\n      point as Types.Point2\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: RectangleROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: RectangleROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - Move the text boxes world position\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - Moving tool, so move all points by the world points delta\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { points } = data.handles;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Moving handle.\n      const { currentPoints } = eventDetail;\n      const enabledElement = getEnabledElement(element);\n      const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n      const worldPos = currentPoints.world;\n\n      const { points } = data.handles;\n\n      // Move this handle.\n      points[handleIndex] = [...worldPos];\n\n      let bottomLeftCanvas;\n      let bottomRightCanvas;\n      let topLeftCanvas;\n      let topRightCanvas;\n\n      let bottomLeftWorld;\n      let bottomRightWorld;\n      let topLeftWorld;\n      let topRightWorld;\n\n      switch (handleIndex) {\n        case 0:\n        case 3:\n          // Moving bottomLeft or topRight\n\n          bottomLeftCanvas = worldToCanvas(points[0]);\n          topRightCanvas = worldToCanvas(points[3]);\n\n          bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n          topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n\n          bottomRightWorld = canvasToWorld(bottomRightCanvas);\n          topLeftWorld = canvasToWorld(topLeftCanvas);\n\n          points[1] = bottomRightWorld;\n          points[2] = topLeftWorld;\n\n          break;\n        case 1:\n        case 2:\n          // Moving bottomRight or topLeft\n          bottomRightCanvas = worldToCanvas(points[1]);\n          topLeftCanvas = worldToCanvas(points[2]);\n\n          bottomLeftCanvas = <Types.Point2>[\n            topLeftCanvas[0],\n            bottomRightCanvas[1],\n          ];\n          topRightCanvas = <Types.Point2>[\n            bottomRightCanvas[0],\n            topLeftCanvas[1],\n          ];\n\n          bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n          topRightWorld = canvasToWorld(topRightCanvas);\n\n          points[0] = bottomLeftWorld;\n          points[3] = topRightWorld;\n\n          break;\n      }\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Remove event handlers for the modify event loop, and enable default event propagation.\n   */\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the rectangleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as RectangleROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit === undefined\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          viewPlaneNormal,\n          viewUp,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewPlaneNormal,\n          viewUp,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related stackViewports data if\n        // they are not at the referencedImageId, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-rect`;\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      renderStatus = true;\n\n      const textLines = this._getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _getRectangleImageCoordinates = (\n    points: Array<Types.Point2>\n  ): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n  } => {\n    const [point0, point1] = points;\n\n    return {\n      left: Math.min(point0[0], point1[0]),\n      top: Math.min(point0[1], point1[1]),\n      width: Math.abs(point0[0] - point1[0]),\n      height: Math.abs(point0[1] - point1[1]),\n    };\n  };\n\n  /**\n   * _getTextLines - Returns the Area, mean and std deviation of the area of the\n   * target volume enclosed by the rectangle.\n   *\n   * @param data - The annotation tool-specific data.\n   * @param targetId - The volumeId of the volume to display the stats for.\n   * @param isPreScaled - Whether the viewport is pre-scaled or not.\n   */\n  _getTextLines = (data, targetId: string): string[] | undefined => {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } =\n      cachedVolumeStats;\n\n    if (mean === undefined) {\n      return;\n    }\n\n    const textLines: string[] = [];\n\n    textLines.push(`Area: ${roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n\n    return textLines;\n  };\n\n  /**\n   * _calculateCachedStats - For each volume in the frame of reference that a\n   * tool instance in particular viewport defines as its target volume, find the\n   * volume coordinates (i,j,k) being probed by the two corners. One of i,j or k\n   * will be constant across the two points. In the other two directions iterate\n   * over the voxels and calculate the first and second-order statistics.\n   *\n   * @param data - The annotation tool-specific data.\n   * @param viewPlaneNormal - The normal vector of the camera.\n   * @param viewUp - The viewUp vector of the camera.\n   */\n  _calculateCachedStats = (\n    annotation,\n    viewPlaneNormal,\n    viewUp,\n    renderingEngine,\n    enabledElement,\n    modalityUnitOptions\n  ) => {\n    const { data } = annotation;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[3];\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata } = image;\n      const scalarData =\n        'getScalarData' in image ? image.getScalarData() : image.scalarData;\n\n      const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        this.isHandleOutsideImage = false;\n\n        // Calculate index bounds to iterate over\n\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n        const scale = getCalibratedScale(image);\n\n        const area = Math.abs(worldWidth * worldHeight) / (scale * scale);\n\n        let count = 0;\n        let mean = 0;\n        let stdDev = 0;\n        let max = -Infinity;\n\n        const yMultiple = dimensions[0];\n        const zMultiple = dimensions[0] * dimensions[1];\n\n        //Todo: this can be replaced by pointInShapeCallback....\n        // This is a triple loop, but one of these 3 values will be constant\n        // In the planar view.\n        for (let k = kMin; k <= kMax; k++) {\n          for (let j = jMin; j <= jMax; j++) {\n            for (let i = iMin; i <= iMax; i++) {\n              const value = scalarData[k * zMultiple + j * yMultiple + i];\n\n              if (value > max) {\n                max = value;\n              }\n\n              count++;\n              mean += value;\n            }\n          }\n        }\n\n        mean /= count;\n\n        for (let k = kMin; k <= kMax; k++) {\n          for (let j = jMin; j <= jMax; j++) {\n            for (let i = iMin; i <= iMax; i++) {\n              const value = scalarData[k * zMultiple + j * yMultiple + i];\n\n              const valueMinusMean = value - mean;\n\n              stdDev += valueMinusMean * valueMinusMean;\n            }\n          }\n        }\n\n        stdDev /= count;\n        stdDev = Math.sqrt(stdDev);\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean,\n          stdDev,\n          max,\n          areaUnit: getCalibratedAreaUnits(null, image),\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n}\n\nRectangleROITool.toolName = 'RectangleROI';\nexport default RectangleROITool;\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Given two world positions and an orthogonal view to an `imageVolume` defined by\n * a `viewPlaneNormal` and a `viewUp`, get the width and height in world coordinates of the rectangle\n * defined by the two points. The implementation works both with orthogonal\n * non-orthogonal rectangles.\n *\n * @param viewPlaneNormal - The normal of the view.\n * @param viewUp - The up direction of the view.\n * @param imageVolume - The imageVolume to use to measure.\n * @param worldPos1 - The first world position.\n * @param worldPos2 - The second world position.\n *\n * @returns The `worldWidth` and `worldHeight`.\n */\nexport default function getWorldWidthAndHeightFromTwoPoints(\n  viewPlaneNormal: Types.Point3,\n  viewUp: Types.Point3,\n  worldPos1: Types.Point3,\n  worldPos2: Types.Point3\n): { worldWidth: number; worldHeight: number } {\n  const viewRight = vec3.create();\n\n  vec3.cross(viewRight, <vec3>viewUp, <vec3>viewPlaneNormal);\n\n  const pos1 = vec3.fromValues(...worldPos1);\n  const pos2 = vec3.fromValues(...worldPos2);\n\n  const diagonal = vec3.create();\n  vec3.subtract(diagonal, pos1, pos2);\n\n  const diagonalLength = vec3.length(diagonal);\n\n  // When the two points are very close to each other return width as 0\n  // to avoid NaN the cosTheta formula calculation\n  if (diagonalLength < 0.0001) {\n    return { worldWidth: 0, worldHeight: 0 };\n  }\n\n  const cosTheta =\n    vec3.dot(diagonal, viewRight) / (diagonalLength * vec3.length(viewRight));\n\n  const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);\n\n  const worldWidth = sinTheta * diagonalLength;\n  const worldHeight = cosTheta * diagonalLength;\n\n  return { worldWidth, worldHeight };\n}\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  eventTarget,\n  triggerEvent,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawCircle as drawCircleSvg,\n  drawEllipse as drawEllipseSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport {\n  pointInEllipse,\n  getCanvasEllipseCorners,\n} from '../../utilities/math/ellipse';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { EllipticalROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n  MouseDragEventType,\n  MouseMoveEventType,\n} from '../../types/EventTypes';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { pointInShapeCallback } from '../../utilities/';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * EllipticalROITool let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of an elliptical region of interest.\n * You can use EllipticalROITool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Elliptical tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * Changing tool configuration (see below) you can make the tool to draw the center\n * point circle with a given radius.\n *\n * ```js\n * cornerstoneTools.addTool(EllipticalROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(EllipticalROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(EllipticalROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n *\n * // draw a circle at the center point with 4px radius.\n * toolGroup.setToolConfiguration(EllipticalROITool.toolName, {\n *   centerPointRadius: 4,\n * });\n * ```\n *\n * Read more in the Docs section of the website.\n */\nclass EllipticalROITool extends AnnotationTool {\n  static toolName;\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    centerCanvas?: Array<number>;\n    canvasWidth?: number;\n    canvasHeight?: number;\n    originalHandleCanvas?: Array<number>;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        // Radius of the circle to draw  at the center point of the ellipse.\n        // Set this zero(0) in order not to draw the circle.\n        centerPointRadius: 0,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a EllipticalROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): EllipticalROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          points: [\n            [...worldPos],\n            [...worldPos],\n            [...worldPos],\n            [...worldPos],\n          ] as [Types.Point3, Types.Point3, Types.Point3, Types.Point3],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n        initialRotation: viewport.getRotation(),\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      centerCanvas: canvasPos,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: EllipticalROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // For some reason Typescript doesn't understand this, so we need to be\n    // more specific about the type\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p)) as [\n      Types.Point2,\n      Types.Point2,\n      Types.Point2,\n      Types.Point2\n    ];\n    const canvasCorners = getCanvasEllipseCorners(canvasCoordinates);\n\n    const [canvasPoint1, canvasPoint2] = canvasCorners;\n\n    const minorEllipse = {\n      left: Math.min(canvasPoint1[0], canvasPoint2[0]) + proximity / 2,\n      top: Math.min(canvasPoint1[1], canvasPoint2[1]) + proximity / 2,\n      width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) - proximity,\n      height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) - proximity,\n    };\n\n    const majorEllipse = {\n      left: Math.min(canvasPoint1[0], canvasPoint2[0]) - proximity / 2,\n      top: Math.min(canvasPoint1[1], canvasPoint2[1]) - proximity / 2,\n      width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) + proximity,\n      height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) + proximity,\n    };\n\n    const pointInMinorEllipse = this._pointInEllipseCanvas(\n      minorEllipse,\n      canvasCoords\n    );\n    const pointInMajorEllipse = this._pointInEllipseCanvas(\n      majorEllipse,\n      canvasCoords\n    );\n\n    if (pointInMajorEllipse && !pointInMinorEllipse) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: EllipticalROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: EllipticalROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    let centerCanvas;\n    let canvasWidth;\n    let canvasHeight;\n    let originalHandleCanvas;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      const { points } = data.handles;\n      const enabledElement = getEnabledElement(element);\n      const { worldToCanvas } = enabledElement.viewport;\n\n      handleIndex = points.findIndex((p) => p === handle);\n\n      const pointsCanvas = points.map(worldToCanvas);\n\n      originalHandleCanvas = pointsCanvas[handleIndex];\n\n      canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);\n      canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);\n\n      centerCanvas = [\n        (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,\n        (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,\n      ];\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      canvasWidth,\n      canvasHeight,\n      centerCanvas,\n      originalHandleCanvas,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    // Elliptical ROI tool should reset its highlight to false on mouse up (as opposed\n    // to other tools that keep it highlighted until the user moves. The reason\n    // is that we use top-left and bottom-right handles to define the ellipse,\n    // and they are by definition not in the ellipse on mouse up.\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n    const { data } = annotation;\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n\n    // Todo: why bottom is -dY, it should be +dY\n    const bottomCanvas = <Types.Point2>[centerCanvas[0], centerCanvas[1] - dY];\n    const topCanvas = <Types.Point2>[centerCanvas[0], centerCanvas[1] + dY];\n    const leftCanvas = <Types.Point2>[centerCanvas[0] - dX, centerCanvas[1]];\n    const rightCanvas = <Types.Point2>[centerCanvas[0] + dX, centerCanvas[1]];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { canvasToWorld } = enabledElement.viewport;\n\n    const {\n      annotation,\n      canvasWidth,\n      canvasHeight,\n      handleIndex,\n      centerCanvas,\n      originalHandleCanvas,\n    } = this.editData;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // Move current point in that direction.\n    // Move other points in opposite direction.\n\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n\n    if (handleIndex === 0 || handleIndex === 1) {\n      // Dragging top or bottom point\n      const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n      const canvasBottom = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] - dYCanvas,\n      ];\n      const canvasTop = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] + dYCanvas,\n      ];\n\n      points[0] = canvasToWorld(canvasBottom);\n      points[1] = canvasToWorld(canvasTop);\n\n      const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];\n      const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;\n      const canvasLeft = <Types.Point2>[\n        centerCanvas[0] - newHalfCanvasWidth,\n        centerCanvas[1],\n      ];\n      const canvasRight = <Types.Point2>[\n        centerCanvas[0] + newHalfCanvasWidth,\n        centerCanvas[1],\n      ];\n\n      points[2] = canvasToWorld(canvasLeft);\n      points[3] = canvasToWorld(canvasRight);\n    } else {\n      // Dragging left or right point\n      const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n      const canvasLeft = <Types.Point2>[\n        centerCanvas[0] - dXCanvas,\n        centerCanvas[1],\n      ];\n      const canvasRight = <Types.Point2>[\n        centerCanvas[0] + dXCanvas,\n        centerCanvas[1],\n      ];\n\n      points[2] = canvasToWorld(canvasLeft);\n      points[3] = canvasToWorld(canvasRight);\n\n      const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];\n      const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;\n      const canvasBottom = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] - newHalfCanvasHeight,\n      ];\n      const canvasTop = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] + newHalfCanvasHeight,\n      ];\n\n      points[0] = canvasToWorld(canvasBottom);\n      points[1] = canvasToWorld(canvasTop);\n    }\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the ellipticalROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as EllipticalROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2, Types.Point2, Types.Point2, Types.Point2];\n\n      const rotation = Math.abs(\n        viewport.getRotation() - (data.initialRotation || 0)\n      );\n      let canvasCorners;\n\n      if (rotation == 90 || rotation == 270) {\n        canvasCorners = <Array<Types.Point2>>getCanvasEllipseCorners([\n          canvasCoordinates[2], // bottom\n          canvasCoordinates[3], // top\n          canvasCoordinates[0], // left\n          canvasCoordinates[1], // right\n        ]);\n      } else {\n        canvasCorners = <Array<Types.Point2>>(\n          getCanvasEllipseCorners(canvasCoordinates) // bottom, top, left, right, keep as is\n        );\n      }\n\n      const { centerPointRadius } = this.configuration;\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit === undefined\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related viewports data, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-ellipse`;\n      const ellipseUID = '0';\n      drawEllipseSvg(\n        svgDrawingHelper,\n        annotationUID,\n        ellipseUID,\n        canvasCorners[0],\n        canvasCorners[1],\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      // draw center point, if \"centerPointRadius\" configuration is valid.\n      if (centerPointRadius > 0) {\n        const minRadius = Math.min(\n          Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, // horizontal radius\n          Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2 // vertical radius\n        );\n        if (minRadius > 3 * centerPointRadius) {\n          const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);\n          drawCircleSvg(\n            svgDrawingHelper,\n            annotationUID,\n            `${ellipseUID}-center`,\n            centerPoint,\n            centerPointRadius,\n            {\n              color,\n              lineDash,\n              lineWidth,\n            }\n          );\n        }\n      }\n\n      renderStatus = true;\n\n      const textLines = this._getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      // Poor man's cached?\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _getTextLines = (data, targetId: string): string[] => {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit } =\n      cachedVolumeStats;\n\n    const textLines: string[] = [];\n\n    if (area) {\n      const areaLine = isEmptyArea\n        ? `Area: Oblique not supported`\n        : `Area: ${roundNumber(area)} ${areaUnit}`;\n      textLines.push(areaLine);\n    }\n\n    if (mean) {\n      textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n    }\n\n    if (max) {\n      textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n    }\n\n    if (stdDev) {\n      textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n    }\n\n    return textLines;\n  };\n\n  _calculateCachedStats = (\n    annotation,\n    viewport,\n    renderingEngine,\n    enabledElement,\n    modalityUnitOptions: ModalityUnitOptions\n  ) => {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n    const [topLeftCanvas, bottomRightCanvas] = <Array<Types.Point2>>(\n      getCanvasEllipseCorners(canvasCoordinates)\n    );\n\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n    const worldPos1 = topLeftWorld;\n    const worldPos2 = bottomRightWorld;\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata, hasPixelSpacing } = image;\n\n      const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const center = [\n          (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n          (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n          (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n        ] as Types.Point3;\n\n        const ellipseObj = {\n          center,\n          xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n          yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n          zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n        };\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n        const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n        const scale = getCalibratedScale(image);\n        const area =\n          Math.abs(Math.PI * (worldWidth / 2) * (worldHeight / 2)) /\n          scale /\n          scale;\n\n        let count = 0;\n        let mean = 0;\n        let stdDev = 0;\n        let max = -Infinity;\n\n        const meanMaxCalculator = ({ value: newValue }) => {\n          if (newValue > max) {\n            max = newValue;\n          }\n\n          mean += newValue;\n          count += 1;\n        };\n\n        pointInShapeCallback(\n          imageData,\n          (pointLPS, pointIJK) => pointInEllipse(ellipseObj, pointLPS),\n          meanMaxCalculator,\n          boundsIJK\n        );\n\n        mean /= count;\n\n        const stdCalculator = ({ value }) => {\n          const valueMinusMean = value - mean;\n\n          stdDev += valueMinusMean * valueMinusMean;\n        };\n\n        pointInShapeCallback(\n          imageData,\n          (pointLPS, pointIJK) => pointInEllipse(ellipseObj, pointLPS),\n          stdCalculator,\n          boundsIJK\n        );\n\n        stdDev /= count;\n        stdDev = Math.sqrt(stdDev);\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean,\n          max,\n          stdDev,\n          isEmptyArea,\n          areaUnit: getCalibratedAreaUnits(null, image),\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n\n  /**\n   * This is a temporary function to use the old ellipse's canvas-based\n   * calculation for isPointNearTool, we should move the the world-based\n   * calculation to the tool's isPointNearTool function.\n   *\n   * @param ellipse - The ellipse object\n   * @param location - The location to check\n   * @returns True if the point is inside the ellipse\n   */\n  _pointInEllipseCanvas(ellipse, location: Types.Point2): boolean {\n    const xRadius = ellipse.width / 2;\n    const yRadius = ellipse.height / 2;\n\n    if (xRadius <= 0.0 || yRadius <= 0.0) {\n      return false;\n    }\n\n    const center = [ellipse.left + xRadius, ellipse.top + yRadius];\n    const normalized = [location[0] - center[0], location[1] - center[1]];\n\n    const inEllipse =\n      (normalized[0] * normalized[0]) / (xRadius * xRadius) +\n        (normalized[1] * normalized[1]) / (yRadius * yRadius) <=\n      1.0;\n\n    return inEllipse;\n  }\n\n  /**\n   * It takes the canvas coordinates of the ellipse corners and returns the center point of it\n   *\n   * @param ellipseCanvasPoints - The coordinates of the ellipse in the canvas.\n   * @returns center point.\n   */\n  _getCanvasEllipseCenter(ellipseCanvasPoints: Types.Point2[]): Types.Point2 {\n    const [bottom, top, left, right] = ellipseCanvasPoints;\n    const topLeft = [left[0], top[1]];\n    const bottomRight = [right[0], bottom[1]];\n    return [\n      (topLeft[0] + bottomRight[0]) / 2,\n      (topLeft[1] + bottomRight[1]) / 2,\n    ] as Types.Point2;\n  }\n}\n\nEllipticalROITool.toolName = 'EllipticalROI';\nexport default EllipticalROITool;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Calculates the distance of a point to another point\n *\n * @param p1 - x,y of the point\n * @param p2 - x,y of the point\n * @returns distance\n */\nexport default function distanceToPoint(\n  p1: Types.Point2,\n  p2: Types.Point2\n): number {\n  if (p1?.length !== 2 || p2?.length !== 2) {\n    throw Error('points should have 2 elements of [x, y]');\n  }\n\n  const [x1, y1] = p1;\n  const [x2, y2] = p2;\n\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n","import { distanceToPoint } from '../point';\nimport { canvasCoordinates } from './_types';\n\n/**\n * It takes the canvas coordinates of the circle corners and returns the top left and bottom right\n * corners of it\n *\n * @param circleCanvasPoints - The coordinates of the circle in the canvas.\n * @returns An array of two points.\n */\nexport default function getCanvasCircleRadius(\n  circleCanvasPoints: canvasCoordinates\n): number {\n  const [center, end] = circleCanvasPoints;\n  return distanceToPoint(center, end);\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { distanceToPoint } from '../point';\nimport { canvasCoordinates } from './_types';\n\n/**\n * It takes the canvas coordinates of the circle corners (wrapping square rectangle)\n * and returns the top left and bottom right\n * corners of it\n *\n * @param circleCanvasPoints - The coordinates of the circle in the canvas.\n * @returns An array of two points.\n */\nexport default function getCanvasCircleCorners(\n  circleCanvasPoints: canvasCoordinates\n): Array<Types.Point2> {\n  const [center, end] = circleCanvasPoints;\n  const radius = distanceToPoint(center, end);\n\n  const topLeft = <Types.Point2>[center[0] - radius, center[1] - radius];\n  const bottomRight = <Types.Point2>[center[0] + radius, center[1] + radius];\n\n  return [topLeft, bottomRight];\n}\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  eventTarget,\n  triggerEvent,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedLengthUnits,\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n  getCalibratedAspect,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawCircle as drawCircleSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { CircleROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n  MouseDragEventType,\n  MouseMoveEventType,\n} from '../../types/EventTypes';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { pointInShapeCallback } from '../../utilities';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport {\n  getCanvasCircleCorners,\n  getCanvasCircleRadius,\n} from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * CircleROITool let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of an elliptical region of interest.\n * You can use CircleROITool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Circle tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * Changing tool configuration (see below) you can make the tool to draw the center\n * point circle with a given radius.\n *\n * ```js\n * cornerstoneTools.addTool(CircleROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(CircleROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(CircleROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n *\n * // draw a circle at the center point with 4px radius.\n * toolGroup.setToolConfiguration(CircleROITool.toolName, {\n *   centerPointRadius: 4,\n * });\n * ```\n *\n * Read more in the Docs section of the website.\n */\nclass CircleROITool extends AnnotationTool {\n  static toolName;\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        // Radius of the circle to draw  at the center point of the circle.\n        // Set this zero(0) in order not to draw the circle.\n        centerPointRadius: 0,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a CircleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): CircleROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          points: [[...worldPos], [...worldPos]] as [\n            Types.Point3, // center\n            Types.Point3 // end\n          ],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: CircleROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // For some reason Typescript doesn't understand this, so we need to be\n    // more specific about the type\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p)) as [\n      Types.Point2,\n      Types.Point2\n    ];\n\n    const radius = getCanvasCircleRadius(canvasCoordinates);\n    const radiusPoint = getCanvasCircleRadius([\n      canvasCoordinates[0],\n      canvasCoords,\n    ]);\n\n    if (Math.abs(radiusPoint - radius) < proximity / 2) return true;\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: CircleROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: CircleROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      const { points } = data.handles;\n\n      handleIndex = points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    // Circle ROI tool should reset its highlight to false on mouse up (as opposed\n    // to other tools that keep it highlighted until the user moves. The reason\n    // is that we use top-left and bottom-right handles to define the circle,\n    // and they are by definition not in the circle on mouse up.\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { data } = annotation;\n\n    data.handles.points = [\n      data.handles.points[0], // center stays\n      canvasToWorld(currentCanvasPoints), // end point moves (changing radius)\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n\n    const { annotation, handleIndex } = this.editData;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => worldToCanvas(p));\n\n    // Move current point in that direction.\n    // Move other points in opposite direction.\n\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n\n    if (handleIndex === 0) {\n      // Dragging center, move the circle ROI\n      const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n      const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n\n      const canvasCenter = currentCanvasPoints as Types.Point2;\n      const canvasEnd = <Types.Point2>[\n        canvasCoordinates[1][0] + dXCanvas,\n        canvasCoordinates[1][1] + dYCanvas,\n      ];\n\n      points[0] = canvasToWorld(canvasCenter);\n      points[1] = canvasToWorld(canvasEnd);\n    } else {\n      // Dragging end point, center stays\n      points[1] = canvasToWorld(currentCanvasPoints);\n    }\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the circleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as CircleROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2, Types.Point2];\n      const center = canvasCoordinates[0];\n      const radius = getCanvasCircleRadius(canvasCoordinates);\n      const canvasCorners = getCanvasCircleCorners(canvasCoordinates);\n\n      const { centerPointRadius } = this.configuration;\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit === undefined\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n          radius: null,\n          radiusUnit: null,\n          perimeter: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related viewports data, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-circle`;\n      const circleUID = '0';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID,\n        center,\n        radius,\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      // draw center point, if \"centerPointRadius\" configuration is valid.\n      if (centerPointRadius > 0) {\n        if (radius > 3 * centerPointRadius) {\n          drawCircleSvg(\n            svgDrawingHelper,\n            annotationUID,\n            `${circleUID}-center`,\n            center,\n            centerPointRadius,\n            {\n              color,\n              lineDash,\n              lineWidth,\n            }\n          );\n        }\n      }\n\n      renderStatus = true;\n\n      const textLines = this._getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      // Poor man's cached?\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _getTextLines = (data, targetId: string): string[] => {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const {\n      radius,\n      radiusUnit,\n      area,\n      mean,\n      stdDev,\n      max,\n      isEmptyArea,\n      Modality,\n      areaUnit,\n      modalityUnit,\n    } = cachedVolumeStats;\n\n    const textLines: string[] = [];\n\n    if (radius) {\n      const radiusLine = isEmptyArea\n        ? `Radius: Oblique not supported`\n        : `Radius: ${roundNumber(radius)} ${radiusUnit}`;\n      textLines.push(radiusLine);\n    }\n\n    if (area) {\n      const areaLine = isEmptyArea\n        ? `Area: Oblique not supported`\n        : `Area: ${roundNumber(area)} ${areaUnit}`;\n      textLines.push(areaLine);\n    }\n\n    if (mean) {\n      textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n    }\n\n    if (max) {\n      textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n    }\n\n    if (stdDev) {\n      textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n    }\n\n    return textLines;\n  };\n\n  _calculateCachedStats = (\n    annotation,\n    viewport,\n    renderingEngine,\n    enabledElement,\n    modalityUnitOptions: ModalityUnitOptions\n  ) => {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n    const [topLeftCanvas, bottomRightCanvas] = <Array<Types.Point2>>(\n      getCanvasCircleCorners(canvasCoordinates)\n    );\n\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n    const worldPos1 = topLeftWorld;\n    const worldPos2 = bottomRightWorld;\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata, hasPixelSpacing } = image;\n\n      const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const center = [\n          (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n          (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n          (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n        ] as Types.Point3;\n\n        const ellipseObj = {\n          center,\n          xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n          yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n          zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n        };\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n        const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n        const scale = getCalibratedScale(image);\n        const aspect = getCalibratedAspect(image);\n        const area = Math.abs(\n          Math.PI *\n            (worldWidth / scale / 2) *\n            (worldHeight / aspect / scale / 2)\n        );\n\n        let count = 0;\n        let mean = 0;\n        let stdDev = 0;\n        let max = -Infinity;\n\n        const meanMaxCalculator = ({ value: newValue }) => {\n          if (newValue > max) {\n            max = newValue;\n          }\n\n          mean += newValue;\n          count += 1;\n        };\n\n        pointInShapeCallback(\n          imageData,\n          (pointLPS, pointIJK) => pointInEllipse(ellipseObj, pointLPS),\n          meanMaxCalculator,\n          boundsIJK\n        );\n\n        mean /= count;\n\n        const stdCalculator = ({ value }) => {\n          const valueMinusMean = value - mean;\n\n          stdDev += valueMinusMean * valueMinusMean;\n        };\n\n        pointInShapeCallback(\n          imageData,\n          (pointLPS, pointIJK) => pointInEllipse(ellipseObj, pointLPS),\n          stdCalculator,\n          boundsIJK\n        );\n\n        stdDev /= count;\n        stdDev = Math.sqrt(stdDev);\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean,\n          max,\n          stdDev,\n          isEmptyArea,\n          areaUnit: getCalibratedAreaUnits(null, image),\n          radius: worldWidth / 2 / scale,\n          radiusUnit: getCalibratedLengthUnits(null, image),\n          perimeter: (2 * Math.PI * (worldWidth / 2)) / scale,\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n}\n\nCircleROITool.toolName = 'CircleROI';\nexport default CircleROITool;\n","import { vec2 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Orientation algoritm to determine if two lines cross.\n * Credit and details: geeksforgeeks.org/check-if-two-given-line-segments-intersect/\n */\n\nfunction getAllIntersectionsWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): Types.Point2[] {\n  let initialI;\n  let j;\n  const intersections: Types.Point2[] = [];\n\n  if (closed) {\n    j = points.length - 1;\n    initialI = 0;\n  } else {\n    j = 0;\n    initialI = 1;\n  }\n\n  for (let i = initialI; i < points.length; i++) {\n    const p2 = points[j];\n    const q2 = points[i];\n\n    if (doesIntersect(p1, q1, p2, q2)) {\n      intersections.push([j, i]);\n    }\n\n    j = i;\n  }\n\n  return intersections;\n}\n\n/**\n * Returns all intersections points\n * between a line and a polyline\n */\nfunction getIntersectionCoordinatesWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): Types.Point2[] {\n  const result = [];\n  const polylineIndexes = getAllIntersectionsWithPolyline(\n    points,\n    p1,\n    q1,\n    closed\n  );\n\n  for (let i = 0; i < polylineIndexes.length; i++) {\n    const p2 = points[polylineIndexes[i][0]];\n    const q2 = points[polylineIndexes[i][1]];\n    const intersection = getIntersection(p1, q1, p2, q2);\n    result.push(intersection);\n  }\n  return result;\n}\n\n/**\n * Checks whether the line (`p1`,`q1`) intersects any of the other lines in the\n * `points`, and returns the first value.\n */\nfunction getFirstIntersectionWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): Types.Point2 | undefined {\n  let initialI;\n  let j;\n\n  if (closed) {\n    j = points.length - 1;\n    initialI = 0;\n  } else {\n    j = 0;\n    initialI = 1;\n  }\n\n  for (let i = initialI; i < points.length; i++) {\n    const p2 = points[j];\n    const q2 = points[i];\n\n    if (doesIntersect(p1, q1, p2, q2)) {\n      return [j, i];\n    }\n\n    j = i;\n  }\n}\n\n/**\n * Checks whether the line (`p1`,`q1`) intersects any of the other lines in the\n * `points`, and returns the closest value.\n */\nfunction getClosestIntersectionWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): { segment: Types.Point2; distance: number } | undefined {\n  let initialI;\n  let j;\n\n  if (closed) {\n    j = points.length - 1;\n    initialI = 0;\n  } else {\n    j = 0;\n    initialI = 1;\n  }\n\n  const intersections = [];\n\n  for (let i = initialI; i < points.length; i++) {\n    const p2 = points[j];\n    const q2 = points[i];\n\n    if (doesIntersect(p1, q1, p2, q2)) {\n      intersections.push([j, i]);\n    }\n\n    j = i;\n  }\n\n  if (intersections.length === 0) {\n    return;\n  }\n\n  // Find intersection closest to the start point\n  const distances = [];\n\n  intersections.forEach((intersection) => {\n    const intersectionPoints = [\n      points[intersection[0]],\n      points[intersection[1]],\n    ];\n\n    const midpoint = [\n      (intersectionPoints[0][0] + intersectionPoints[1][0]) / 2,\n      (intersectionPoints[0][1] + intersectionPoints[1][1]) / 2,\n    ];\n\n    distances.push(vec2.distance(<vec2>midpoint, p1));\n  });\n\n  const minDistance = Math.min(...distances);\n  const indexOfMinDistance = distances.indexOf(minDistance);\n\n  return {\n    segment: intersections[indexOfMinDistance],\n    distance: minDistance,\n  };\n}\n\n/**\n * Checks whether the line (`p1`,`q1`) intersects the line (`p2`,`q2`) via an orientation algorithm.\n */\nfunction doesIntersect(\n  p1: Types.Point2,\n  q1: Types.Point2,\n  p2: Types.Point2,\n  q2: Types.Point2\n): boolean {\n  let result = false;\n\n  const orient = [\n    orientation(p1, q1, p2),\n    orientation(p1, q1, q2),\n    orientation(p2, q2, p1),\n    orientation(p2, q2, q1),\n  ];\n\n  // General Case\n  if (orient[0] !== orient[1] && orient[2] !== orient[3]) {\n    return true;\n  }\n\n  // Special Cases\n  if (orient[0] === 0 && onSegment(p1, p2, q1)) {\n    // If p1, q1 and p2 are colinear and p2 lies on segment p1q1\n    result = true;\n  } else if (orient[1] === 0 && onSegment(p1, q2, q1)) {\n    // If p1, q1 and p2 are colinear and q2 lies on segment p1q1\n    result = true;\n  } else if (orient[2] === 0 && onSegment(p2, p1, q2)) {\n    // If p2, q2 and p1 are colinear and p1 lies on segment p2q2\n    result = true;\n  } else if (orient[3] === 0 && onSegment(p2, q1, q2)) {\n    // If p2, q2 and q1 are colinear and q1 lies on segment p2q2\n    result = true;\n  }\n\n  return result;\n}\n\n/**\n * Checks the orientation of 3 points, returns a 0, 1 or 2 based on\n * the orientation of the points.\n */\nfunction orientation(\n  p: Types.Point2,\n  q: Types.Point2,\n  r: Types.Point2\n): number {\n  const orientationValue =\n    (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);\n\n  if (orientationValue === 0) {\n    return 0; // Colinear\n  }\n\n  return orientationValue > 0 ? 1 : 2;\n}\n\n/**\n * Checks if point `q` lies on the segment (`p`,`r`).\n */\nfunction onSegment(p: Types.Point2, q: Types.Point2, r: Types.Point2): boolean {\n  if (\n    q[0] <= Math.max(p[0], r[0]) &&\n    q[0] >= Math.min(p[0], r[0]) &&\n    q[1] <= Math.max(p[1], r[1]) &&\n    q[1] >= Math.min(p[1], r[1])\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Gets the intersection between the line (`p1`,`q1`) and the line (`p2`,`q2`)\n * http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\n * https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line\n */\nfunction getIntersection(\n  p1: Types.Point2,\n  q1: Types.Point2,\n  p2: Types.Point2,\n  q2: Types.Point2\n): Types.Point2 {\n  const denominator =\n    (q2[1] - p2[1]) * (q1[0] - p1[0]) - (q2[0] - p2[0]) * (q1[1] - p1[1]);\n  if (denominator == 0) {\n    return;\n  }\n  let a = p1[1] - p2[1];\n  let b = p1[0] - p2[0];\n  const numerator1 = (q2[0] - p2[0]) * a - (q2[1] - p2[1]) * b;\n  const numerator2 = (q1[0] - p1[0]) * a - (q1[1] - p1[1]) * b;\n  a = numerator1 / denominator;\n  b = numerator2 / denominator;\n\n  const resultX = p1[0] + a * (q1[0] - p1[0]);\n  const resultY = p1[1] + a * (q1[1] - p1[1]);\n\n  return [resultX, resultY];\n}\n\nexport {\n  getAllIntersectionsWithPolyline,\n  getFirstIntersectionWithPolyline,\n  getClosestIntersectionWithPolyline,\n  getIntersectionCoordinatesWithPolyline,\n};\n","import { StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\nconst EPSILON = 1e-3;\n\n/**\n * Gets the desired spacing for points in the polyline for the\n * `PlanarFreehandROITool` in the x and y canvas directions, as well as\n * returning these canvas directions in world space.\n *\n * @param viewport - The Cornerstone3D `StackViewport` or `VolumeViewport`.\n * @param subPixelResolution - The number to divide the image pixel spacing by\n * to get the sub pixel spacing. E.g. `10` will return spacings 10x smaller than\n * the native image spacing.\n * @returns The spacings of the X and Y directions, and the 3D directions of the\n * x and y directions.\n */\nconst getSubPixelSpacingAndXYDirections = (\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  subPixelResolution: number\n): { spacing: Types.Point2; xDir: Types.Point3; yDir: Types.Point3 } => {\n  let spacing;\n  let xDir;\n  let yDir;\n\n  if (viewport instanceof StackViewport) {\n    // Check XY directions\n    const imageData = viewport.getImageData();\n\n    xDir = imageData.direction.slice(0, 3);\n    yDir = imageData.direction.slice(3, 6);\n\n    spacing = imageData.spacing;\n  } else {\n    // Check volume directions\n    const imageData = viewport.getImageData();\n    const { direction, spacing: volumeSpacing } = imageData;\n    const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n    // Calculate size of spacing vector in normal direction\n    const iVector = direction.slice(0, 3) as Types.Point3;\n    const jVector = direction.slice(3, 6) as Types.Point3;\n    const kVector = direction.slice(6, 9) as Types.Point3;\n\n    const viewRight = vec3.create(); // Get the X direction of the viewport\n\n    vec3.cross(viewRight, <vec3>viewUp, <vec3>viewPlaneNormal);\n\n    const absViewRightDotI = Math.abs(vec3.dot(viewRight, iVector));\n    const absViewRightDotJ = Math.abs(vec3.dot(viewRight, jVector));\n    const absViewRightDotK = Math.abs(vec3.dot(viewRight, kVector));\n\n    // Get X spacing\n    let xSpacing;\n    if (Math.abs(1 - absViewRightDotI) < EPSILON) {\n      xSpacing = volumeSpacing[0];\n      xDir = iVector;\n    } else if (Math.abs(1 - absViewRightDotJ) < EPSILON) {\n      xSpacing = volumeSpacing[1];\n      xDir = jVector;\n    } else if (Math.abs(1 - absViewRightDotK) < EPSILON) {\n      xSpacing = volumeSpacing[2];\n      xDir = kVector;\n    } else {\n      throw new Error('No support yet for oblique plane planar contours');\n    }\n\n    const absViewUpDotI = Math.abs(vec3.dot(viewUp, iVector));\n    const absViewUpDotJ = Math.abs(vec3.dot(viewUp, jVector));\n    const absViewUpDotK = Math.abs(vec3.dot(viewUp, kVector));\n\n    // Get Y spacing\n    let ySpacing;\n    if (Math.abs(1 - absViewUpDotI) < EPSILON) {\n      ySpacing = volumeSpacing[0];\n      yDir = iVector;\n    } else if (Math.abs(1 - absViewUpDotJ) < EPSILON) {\n      ySpacing = volumeSpacing[1];\n      yDir = jVector;\n    } else if (Math.abs(1 - absViewUpDotK) < EPSILON) {\n      ySpacing = volumeSpacing[2];\n      yDir = kVector;\n    } else {\n      throw new Error('No support yet for oblique plane planar contours');\n    }\n\n    spacing = [xSpacing, ySpacing];\n  }\n\n  const subPixelSpacing: Types.Point2 = [\n    spacing[0] / subPixelResolution,\n    spacing[1] / subPixelResolution,\n  ];\n\n  return { spacing: subPixelSpacing, xDir, yDir };\n};\n\nexport default getSubPixelSpacingAndXYDirections;\n","import { vec2 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Returns true if points `p1` and `p2` are within `closeContourProximity`.\n */\nconst pointsAreWithinCloseContourProximity = (\n  p1: Types.Point2,\n  p2: Types.Point2,\n  closeContourProximity: number\n): boolean => {\n  return vec2.dist(p1, p2) < closeContourProximity;\n};\n\nexport default pointsAreWithinCloseContourProximity;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { PlanarFreehandROICommonData } from './planarFreehandROIInternalTypes';\n\n/**\n * Adds one or more points to the array at a resolution defined by the underlying image.\n */\nconst addCanvasPointsToArray = (\n  element: HTMLDivElement,\n  canvasPoints: Types.Point2[],\n  newCanvasPoint: Types.Point2,\n  commonData: PlanarFreehandROICommonData\n): number => {\n  const { xDir, yDir, spacing } = commonData;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const lastWorldPos = viewport.canvasToWorld(\n    canvasPoints[canvasPoints.length - 1]\n  );\n  const newWorldPos = viewport.canvasToWorld(newCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, newWorldPos, lastWorldPos);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  const numPointsToAdd = Math.max(\n    Math.floor(xDist / spacing[0]),\n    Math.floor(yDist / spacing[0])\n  );\n\n  if (numPointsToAdd > 1) {\n    const lastCanvasPoint = canvasPoints[canvasPoints.length - 1];\n\n    const canvasDist = vec2.dist(lastCanvasPoint, newCanvasPoint);\n\n    const canvasDir = vec2.create();\n\n    vec2.subtract(canvasDir, newCanvasPoint, lastCanvasPoint);\n\n    vec2.set(canvasDir, canvasDir[0] / canvasDist, canvasDir[1] / canvasDist);\n\n    const distPerPoint = canvasDist / numPointsToAdd;\n\n    for (let i = 1; i <= numPointsToAdd; i++) {\n      canvasPoints.push([\n        lastCanvasPoint[0] + distPerPoint * canvasDir[0] * i,\n        lastCanvasPoint[1] + distPerPoint * canvasDir[1] * i,\n      ]);\n    }\n  } else {\n    canvasPoints.push(newCanvasPoint);\n  }\n\n  return numPointsToAdd;\n};\n\nexport default addCanvasPointsToArray;\n","import type { Types } from '@cornerstonejs/core';\nimport { vec2 } from 'gl-matrix';\n\n/**\n * Returns `true` if the point `p` can project onto point (`p1`, `p2`), and if\n * this projected point is less than `proximity` units away.\n */\nconst pointCanProjectOnLine = (\n  p: Types.Point2,\n  p1: Types.Point2,\n  p2: Types.Point2,\n  proximity: number\n): boolean => {\n  // Perfom checks in order of computational complexity.\n  const p1p = [p[0] - p1[0], p[1] - p1[1]];\n  const p1p2 = [p2[0] - p1[0], p2[1] - p1[1]];\n\n  const dot = p1p[0] * p1p2[0] + p1p[1] * p1p2[1];\n\n  // Dot product needs to be positive to be a candidate for projection onto line segment.\n  if (dot < 0) {\n    return false;\n  }\n\n  const p1p2Mag = Math.sqrt(p1p2[0] * p1p2[0] + p1p2[1] * p1p2[1]);\n\n  if (p1p2Mag === 0) {\n    return false;\n  }\n\n  const projectionVectorMag = dot / p1p2Mag;\n  const p1p2UnitVector = [p1p2[0] / p1p2Mag, p1p2[1] / p1p2Mag];\n  const projectionVector = [\n    p1p2UnitVector[0] * projectionVectorMag,\n    p1p2UnitVector[1] * projectionVectorMag,\n  ];\n  const projectionPoint = <Types.Point2>[\n    p1[0] + projectionVector[0],\n    p1[1] + projectionVector[1],\n  ];\n\n  const distance = vec2.distance(p, projectionPoint);\n\n  if (distance > proximity) {\n    // point is too far away.\n    return false;\n  }\n\n  // Check projects onto line segment.\n  if (vec2.distance(p1, projectionPoint) > vec2.distance(p1, p2)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default pointCanProjectOnLine;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Calculates the area of an array of `Point2` points using the shoelace algorithm.\n *\n * The units of the area are in the same units as the points are in. E.g. if\n * the points are in canvas, then the result is in canvas pixels ^2; If they are\n * in mm, then the result is in mm^2; etc.\n */\nexport default function calculateAreaOfPoints(points: Types.Point2[]): number {\n  // Shoelace algorithm.\n  const n = points.length;\n  let area = 0.0;\n  let j = n - 1;\n\n  for (let i = 0; i < n; i++) {\n    area += (points[j][0] + points[i][0]) * (points[j][1] - points[i][1]);\n    j = i; // j is previous vertex to i\n  }\n\n  // Return absolute value of half the sum (half as summing up traingles).\n  return Math.abs(area / 2.0);\n}\n","import { Types } from '@cornerstonejs/core';\nimport { interpolatePoints } from './algorithms/bspline';\n\n/**\n * Returns a list of uniform distributed values. This list contains the max amount of values which has at least a minimum distance between two consecutive values.\n * minDistributionDistance means the min distance between two consecutive distributed values.\n * Closed interval contains the min/max values.\n *\n * Formula for reference\n * For given {x ∈ R | x ≥ 0} and {minDis ∈ R | minDis ≥ 0}, ∃ D(x) where D(x) ≥ a and D(x) ≤ b  =>\n *         |\n * D(x)  = |                  (b - a)\n *         |  round( ------------------------ * x  )   + a\n *         |                (b - a + 1)\n *         |        round( -----------  )\n *         |                 minDis\n */\nfunction getContinuousUniformDistributionValues(\n  minDistributionDistance: number,\n  closedInterval: [number, number]\n): number[] {\n  const result = [];\n  const [intervalIni, intervalEnd] = closedInterval;\n\n  const intervalSize = intervalEnd - intervalIni + 1;\n  const intensity = Math.floor(intervalSize / minDistributionDistance);\n\n  let x = 0;\n  let continuosDistributionValue =\n    Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n\n  while (continuosDistributionValue <= intervalEnd) {\n    result.push(continuosDistributionValue);\n    x++;\n    continuosDistributionValue =\n      Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n  }\n\n  return result;\n}\n\n/**\n * Interpolates a segment of points from iniIndex until endIndex.\n * The process of interpolation considers the param knotsRatioPercentage as being the percentage of points from Segment that are likely to be considered.\n * By default it uses b-spline algorithm.\n * The result total of points is equal to original points.\n */\nexport default function interpolateSegmentPoints(\n  points: (Types.Point2 | Types.Point3)[],\n  iniIndex: number,\n  endIndex: number,\n  knotsRatioPercentage: number\n): (Types.Point2 | Types.Point3)[] {\n  const segmentSize = endIndex - iniIndex + 1;\n\n  const amountOfKnots =\n    Math.floor((knotsRatioPercentage / 100) * segmentSize) ?? 1;\n  const minKnotDistance = Math.floor(segmentSize / amountOfKnots) ?? 1;\n\n  if (isNaN(segmentSize) || !segmentSize || !minKnotDistance) {\n    return points;\n  }\n\n  // segment should be at least the double of desired minKnot distance. This will ensure at there will enough knots to interpolate.\n  if (segmentSize / minKnotDistance < 2) {\n    return points;\n  }\n\n  const interpolationIniIndex = Math.max(0, iniIndex);\n  const interpolationEndIndex = Math.min(points.length - 1, endIndex);\n  const segmentPointsUnchangedBeg = points.slice(0, interpolationIniIndex);\n\n  const segmentPointsUnchangedEnd = points.slice(\n    interpolationEndIndex + 1,\n    points.length\n  );\n\n  const knotsIndexes = getContinuousUniformDistributionValues(minKnotDistance, [\n    interpolationIniIndex,\n    interpolationEndIndex,\n  ]);\n\n  const interpolatedPoints = interpolatePoints(points, knotsIndexes);\n\n  return [\n    ...segmentPointsUnchangedBeg,\n    ...interpolatedPoints,\n    ...segmentPointsUnchangedEnd,\n  ];\n}\n","import {\n  interpolateBasis as d3InterpolateBasis,\n  quantize as d3Quantize,\n} from 'd3-interpolate';\nimport { zip as d3Zip } from 'd3-array';\nimport { Types } from '@cornerstonejs/core';\n\nfunction isPoints3D(\n  points: (Types.Point2 | Types.Point3)[]\n): points is Types.Point3[] {\n  return (points as Types.Point3[])[0]?.length === 3;\n}\n\n/**\n * Returns an array of the originalPoints length containing the interpolated data.\n * It interpolates a set of points indexed by knotsIndexes.\n * That is, it DISCARDS all points except those in knotsIndexes. Then, a new set of points is created by using a b-spline on the remaining points, in order to re-create a new set of points.\n */\nexport function interpolatePoints(\n  originalPoints: (Types.Point2 | Types.Point3)[],\n  knotsIndexes: number[]\n): (Types.Point2 | Types.Point3)[] {\n  if (\n    !knotsIndexes ||\n    knotsIndexes.length === 0 ||\n    knotsIndexes.length === originalPoints.length\n  ) {\n    return originalPoints;\n  }\n\n  const n = knotsIndexes[knotsIndexes.length - 1] - knotsIndexes[0] + 1;\n  const xInterpolator = d3InterpolateBasis(\n    knotsIndexes.map((k) => originalPoints[k][0])\n  );\n  const yInterpolator = d3InterpolateBasis(\n    knotsIndexes.map((k) => originalPoints[k][1])\n  );\n\n  if (isPoints3D(originalPoints)) {\n    const zInterpolator = d3InterpolateBasis(\n      knotsIndexes.map((k) => originalPoints[k][2])\n    );\n    return <Types.Point3[]>(\n      d3Zip(\n        d3Quantize(xInterpolator, n),\n        d3Quantize(yInterpolator, n),\n        d3Quantize(zInterpolator, n)\n      )\n    );\n  } else {\n    return <Types.Point2[]>(\n      d3Zip(d3Quantize(xInterpolator, n), d3Quantize(yInterpolator, n))\n    );\n  }\n}\n","import { Types } from '@cornerstonejs/core';\nimport { point } from '../math';\nimport interpolateSegmentPoints from './interpolation/interpolateSegmentPoints';\n\nexport function shouldInterpolate(configuration: Record<any, any>): boolean {\n  return (\n    configuration?.interpolation?.interpolateOnAdd === true ||\n    configuration?.interpolation?.interpolateOnEdit === true\n  );\n}\n\n/**\n * Tells whether two points are equal by proximity or not as far as interpolation goes.\n */\nfunction isEqualByProximity(pointA, pointB) {\n  return point.distanceToPoint(pointA, pointB) < 0.001;\n}\n\n/**\n * Tells whether two points are strictly equal or not as far as interpolation goes.\n */\nfunction isEqual(pointA, pointB) {\n  return point.distanceToPoint(pointA, pointB) === 0;\n}\n\n/**\n * Finds the indexes of points list and otherPoints list that points are identical.\n */\nfunction findMatchIndexes(\n  points: Types.Point2[],\n  otherPoints: Types.Point2[]\n): [number, number] | undefined {\n  for (let i = 0; i < points.length; i++) {\n    for (let j = 0; j < otherPoints.length; j++) {\n      if (isEqual(points[i], otherPoints[j])) {\n        return [i, j];\n      }\n    }\n  }\n}\n/**\n * Returns the following index value (on circular basis) of index param on the given direction.\n */\nfunction followingIndex(\n  index: number,\n  size: number,\n  direction: number\n): number {\n  return (index + size + direction) % size;\n}\n/**\n * Array of params to be used on circular find next index.\n * The values respresent start index, indexDelimiter, list of points\n */\ntype ListParamsType = [number, number, Types.Point2[]];\n\n/**\n * Circular finding that returns the next index for two list where the criteria is met.\n *\n * It can compare two lists out of sync considering it does a circular iteration over them.\n *\n * @example\n *\n * ```\n * const pointsA = [[0, 1], [1, 3], [1, 5], [1,2]];\n * const pointsB = [[1, 2], [1, 5], [1, 3], [0,0]];\n * let firstParam = [0, 0, pointsA]\n * let secondParam = [1, 1, pointsB]\n * const criteria = (pointA, pointB) => areSamePosition(pointA, pointB)\n * const direction = 1;\n * let result = circularFindNextIndexBy(firstParam, secondParam, criteria,direction);\n * console.log(result);\n * // prints [1, 2]\n * // use this result and find again\n * firstParam = [result[0]+1, result[0], pointsA]\n * secondParam = [result[1]+1, result[1], pointsB]\n * result = circularFindNextIndexBy(firstParam, secondParam, criteria,direction);\n * * // prints [3, 0]\n *\n */\nfunction circularFindNextIndexBy(\n  listParams: ListParamsType,\n  otherListParams: ListParamsType,\n  criteria: (pointA: Types.Point2, pointB: Types.Point2) => boolean,\n  direction: number\n): [number | undefined, number | undefined] {\n  const [, indexDelimiter, points] = listParams;\n  const [, otherIndexDelimiter, otherPoints] = otherListParams;\n\n  const pointsLength = points.length;\n  const otherPointsLength = otherPoints.length;\n\n  let startIndex = listParams[0];\n  let otherStartIndex = otherListParams[0];\n\n  if (\n    !points[startIndex] ||\n    !otherPoints[otherStartIndex] ||\n    !points[indexDelimiter] ||\n    !otherPoints[otherIndexDelimiter]\n  ) {\n    return [undefined, undefined];\n  }\n\n  while (\n    startIndex !== indexDelimiter &&\n    otherStartIndex !== otherIndexDelimiter\n  ) {\n    if (criteria(otherPoints[otherStartIndex], points[startIndex])) {\n      return [startIndex, otherStartIndex];\n    }\n\n    startIndex = followingIndex(startIndex, pointsLength, direction);\n    otherStartIndex = followingIndex(\n      otherStartIndex,\n      otherPointsLength,\n      direction\n    );\n  }\n\n  return [undefined, undefined];\n}\n\n/**\n * Given two list it will find the first and last index of segment from points that diverges from previousPoints\n */\nfunction findChangedSegment(\n  points: Types.Point2[],\n  previousPoints: Types.Point2[]\n): [number, number] {\n  const [firstMatchIndex, previousFirstMatchIndex] =\n    findMatchIndexes(points, previousPoints) || [];\n\n  const toBeNotEqualCriteria = (pointA, pointB) =>\n    isEqualByProximity(pointA, pointB) === false;\n\n  const [lowDiffIndex, lowOtherDiffIndex] = circularFindNextIndexBy(\n    [\n      followingIndex(firstMatchIndex, points.length, 1),\n      firstMatchIndex,\n      points,\n    ],\n    [\n      followingIndex(previousFirstMatchIndex, previousPoints.length, 1),\n      previousFirstMatchIndex,\n      previousPoints,\n    ],\n    toBeNotEqualCriteria,\n    1\n  );\n\n  const [highIndex] = circularFindNextIndexBy(\n    [followingIndex(lowDiffIndex, points.length, -1), lowDiffIndex, points],\n    [\n      followingIndex(lowOtherDiffIndex, previousPoints.length, -1),\n      lowOtherDiffIndex,\n      previousPoints,\n    ],\n    toBeNotEqualCriteria,\n    -1\n  );\n\n  return [lowDiffIndex, highIndex];\n}\n\n/**\n * Interpolates the given list of points. In case there is a pointsOfReference the interpolation will occur only on segment disjoint of two list. I.e list of points from param points that are not on list of points from param pointsOfReference.\n */\nexport function getInterpolatedPoints(\n  configuration: Record<any, any>,\n  points: Types.Point2[],\n  pointsOfReference?: Types.Point2[]\n): Types.Point2[] {\n  const { interpolation } = configuration;\n\n  const result = points;\n\n  if (interpolation) {\n    const {\n      knotsRatioPercentageOnAdd,\n      knotsRatioPercentageOnEdit,\n      interpolateOnAdd = false,\n      interpolateOnEdit = false,\n    } = interpolation;\n\n    const knotsRatioPercentage = pointsOfReference\n      ? knotsRatioPercentageOnEdit\n      : knotsRatioPercentageOnAdd;\n    const isEnabled = pointsOfReference ? interpolateOnEdit : interpolateOnAdd;\n\n    if (isEnabled) {\n      // partial or total interpolation\n      const [changedIniIndex, changedEndIndex] = pointsOfReference\n        ? findChangedSegment(points, pointsOfReference)\n        : [0, points.length - 1];\n\n      // do not interpolate if there is no valid segment\n      if (!points[changedIniIndex] || !points[changedEndIndex]) {\n        return points;\n      }\n\n      return <Types.Point2[]>(\n        interpolateSegmentPoints(\n          points,\n          changedIniIndex,\n          changedEndIndex,\n          knotsRatioPercentage\n        )\n      );\n    }\n  }\n\n  return result;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport { vec2 } from 'gl-matrix';\n\n/**\n * Finds the length of the longest line from the midpoint of the line\n * that joins the start and end of the open contour, to the surface of the\n * open contour.\n */\nexport default function findOpenUShapedContourVectorToPeak(\n  canvasPoints: Types.Point2[],\n  viewport: Types.IStackViewport | Types.IVolumeViewport\n): Types.Point3[] {\n  // Find chord from first to last point.\n  const first = canvasPoints[0];\n  const last = canvasPoints[canvasPoints.length - 1];\n\n  const firstToLastUnitVector = vec2.create();\n\n  vec2.set(firstToLastUnitVector, last[0] - first[0], last[1] - first[1]);\n  vec2.normalize(firstToLastUnitVector, firstToLastUnitVector);\n\n  // Get the two possible normal vector to this vector\n  // Note: Use the identity that the perpendicular line must have a gradient of\n  // 1 / gradient of the line.\n\n  const normalVector1 = vec2.create();\n  const normalVector2 = vec2.create();\n\n  vec2.set(normalVector1, -firstToLastUnitVector[1], firstToLastUnitVector[0]);\n  vec2.set(normalVector2, firstToLastUnitVector[1], -firstToLastUnitVector[0]);\n\n  // Find the center of the chord.\n  const centerOfFirstToLast: Types.Point2 = [\n    (first[0] + last[0]) / 2,\n    (first[1] + last[1]) / 2,\n  ];\n\n  // Get furthest point.\n\n  const furthest = {\n    dist: 0,\n    index: null,\n  };\n\n  for (let i = 0; i < canvasPoints.length; i++) {\n    const canvasPoint = canvasPoints[i];\n\n    const distance = vec2.dist(canvasPoint, <vec2>centerOfFirstToLast);\n\n    if (distance > furthest.dist) {\n      furthest.dist = distance;\n      furthest.index = i;\n    }\n  }\n\n  const toFurthest: [Types.Point2, Types.Point2] = [\n    canvasPoints[furthest.index],\n    centerOfFirstToLast,\n  ];\n  const toFurthestWorld = toFurthest.map(viewport.canvasToWorld);\n\n  return toFurthestWorld;\n}\n\nexport function findOpenUShapedContourVectorToPeakOnRender(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation\n): Types.Point3[] {\n  const { viewport } = enabledElement;\n  const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n\n  return findOpenUShapedContourVectorToPeak(canvasPoints, viewport);\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../../cursors/elementCursor';\nimport { Events } from '../../../enums';\nimport { EventTypes } from '../../../types';\nimport { state } from '../../../store';\nimport { vec3 } from 'gl-matrix';\nimport {\n  shouldInterpolate,\n  getInterpolatedPoints,\n} from '../../../utilities/planarFreehandROITool/interpolatePoints';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport findOpenUShapedContourVectorToPeak from './findOpenUShapedContourVectorToPeak';\nimport { polyline } from '../../../utilities/math';\nimport { removeAnnotation } from '../../../stateManagement/annotation/annotationState';\n\nconst {\n  addCanvasPointsToArray,\n  pointsAreWithinCloseContourProximity,\n  getFirstIntersectionWithPolyline,\n  getSubPixelSpacingAndXYDirections,\n} = polyline;\n\n/**\n * Activates the contour drawing event loop.\n */\nfunction activateDraw(\n  evt: EventTypes.InteractionEventType,\n  annotation: PlanarFreehandROIAnnotation,\n  viewportIdsToRender: string[]\n): void {\n  this.isDrawing = true;\n\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  this.drawData = {\n    canvasPoints: [canvasPos],\n    polylineIndex: 0,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox: false,\n  };\n\n  state.isInteractingWithTool = true;\n\n  element.addEventListener(Events.MOUSE_UP, this.mouseUpDrawCallback);\n  element.addEventListener(Events.MOUSE_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.MOUSE_CLICK, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_END, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.TOUCH_TAP, this.mouseUpDrawCallback);\n\n  hideElementCursor(element);\n}\n/**\n * Dectivates and cleans up the contour drawing event loop.\n */\nfunction deactivateDraw(element: HTMLDivElement): void {\n  state.isInteractingWithTool = false;\n\n  element.removeEventListener(Events.MOUSE_UP, this.mouseUpDrawCallback);\n  element.removeEventListener(Events.MOUSE_DRAG, this.mouseDragDrawCallback);\n  element.removeEventListener(Events.MOUSE_CLICK, this.mouseUpDrawCallback);\n  element.removeEventListener(Events.TOUCH_END, this.mouseUpDrawCallback);\n  element.removeEventListener(Events.TOUCH_DRAG, this.mouseDragDrawCallback);\n  element.removeEventListener(Events.TOUCH_TAP, this.mouseUpDrawCallback);\n\n  resetElementCursor(element);\n}\n\n/**\n * Adds points to a set of preview canvas points of the contour being created.\n * Checks if crossing of lines means early completion and editing needs to be started.\n */\nfunction mouseDragDrawCallback(evt: EventTypes.InteractionEventType): void {\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const worldPos = currentPoints.world;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n\n  const {\n    annotation,\n    viewportIdsToRender,\n    xDir,\n    yDir,\n    spacing,\n    movingTextBox,\n  } = this.commonData;\n  const { polylineIndex, canvasPoints } = this.drawData;\n\n  const lastCanvasPoint = canvasPoints[canvasPoints.length - 1];\n  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  // Check that we have moved at least one voxel in each direction.\n  if (xDist <= spacing[0] && yDist <= spacing[1]) {\n    // Haven't changed world point enough, don't render\n    return;\n  }\n\n  if (movingTextBox) {\n    this.isDrawing = false;\n\n    // Drag mode - Move the text boxes world position\n    const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n    const worldPosDelta = deltaPoints.world;\n\n    const { textBox } = annotation.data.handles;\n    const { worldPosition } = textBox;\n\n    worldPosition[0] += worldPosDelta[0];\n    worldPosition[1] += worldPosDelta[1];\n    worldPosition[2] += worldPosDelta[2];\n\n    textBox.hasMoved = true;\n  } else {\n    const crossingIndex = this.findCrossingIndexDuringCreate(evt);\n\n    if (crossingIndex !== undefined) {\n      // If we have crossed our drawing line, create a closed contour and then\n      // start an edit.\n      this.applyCreateOnCross(evt, crossingIndex);\n    } else {\n      const numPointsAdded = addCanvasPointsToArray(\n        element,\n        canvasPoints,\n        canvasPos,\n        this.commonData\n      );\n\n      this.drawData.polylineIndex = polylineIndex + numPointsAdded;\n    }\n  }\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Completes the contour on mouse up. If the `allowOpenContours` configuration\n * option is `true`, checks if we should create an open or closed contour.\n * If the `allowOpenContours` configuration option is `false`, always creates a\n * closed contour.\n */\nfunction mouseUpDrawCallback(evt: EventTypes.InteractionEventType): void {\n  const { allowOpenContours } = this.configuration;\n  const { canvasPoints } = this.drawData;\n  const firstPoint = canvasPoints[0];\n  const lastPoint = canvasPoints[canvasPoints.length - 1];\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  if (\n    allowOpenContours &&\n    !pointsAreWithinCloseContourProximity(\n      firstPoint,\n      lastPoint,\n      this.configuration.closeContourProximity\n    )\n  ) {\n    this.completeDrawOpenContour(element);\n  } else {\n    this.completeDrawClosedContour(element);\n  }\n}\n\n/**\n * Completes the contour being drawn, creating a closed contour annotation. It will return true if contour is completed or false in case contour drawing is halted.\n */\nfunction completeDrawClosedContour(element: HTMLDivElement): boolean {\n  this.removeCrossedLinesOnCompleteDraw();\n  const { canvasPoints } = this.drawData;\n\n  // check and halt if necessary the drawing process, last chance to complete drawing and fire events.\n  if (this.haltDrawing(element, canvasPoints)) {\n    return false;\n  }\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  // Convert annotation to world coordinates\n  addCanvasPointsToArray(\n    element,\n    canvasPoints,\n    canvasPoints[0],\n    this.commonData\n  );\n  // Remove last point which will be a duplicate now.\n  canvasPoints.pop();\n\n  const updatedPoints = shouldInterpolate(this.configuration)\n    ? getInterpolatedPoints(this.configuration, canvasPoints)\n    : canvasPoints;\n\n  // Note: -> This is pretty expensive and may not scale well with hundreds of\n  // contours. A future optimisation if we use this for segmentation is to re-do\n  // this rendering with the GPU rather than SVG.\n  const worldPoints = updatedPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = false;\n  const { textBox } = annotation.data.handles;\n\n  if (!textBox.hasMoved) {\n    this.triggerAnnotationCompleted(annotation);\n  }\n\n  this.isDrawing = false;\n  this.drawData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateDraw(element);\n\n  return true;\n}\n\n/**\n * If lines are crossed during the draw loop, remove the points drawn over the\n * crossing.\n */\nfunction removeCrossedLinesOnCompleteDraw(): void {\n  const { canvasPoints } = this.drawData;\n  const numPoints = canvasPoints.length;\n\n  const endToStart = [canvasPoints[0], canvasPoints[numPoints - 1]];\n  const canvasPointsMinusEnds = canvasPoints.slice(0, -1).slice(1);\n\n  const lineSegment = getFirstIntersectionWithPolyline(\n    canvasPointsMinusEnds,\n    endToStart[0],\n    endToStart[1],\n    false\n  );\n\n  if (lineSegment) {\n    const indexToRemoveUpTo = lineSegment[1];\n\n    this.drawData.canvasPoints = canvasPoints.splice(0, indexToRemoveUpTo);\n  }\n}\n\n/**\n * Completes the contour being drawn, creating an open contour annotation. It will return true if contour is completed or false in case contour drawing is halted.\n */\nfunction completeDrawOpenContour(element: HTMLDivElement): boolean {\n  const { canvasPoints } = this.drawData;\n\n  // check and halt if necessary the drawing process, last chance to complete drawing and fire events.\n  if (this.haltDrawing(element, canvasPoints)) {\n    return false;\n  }\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const updatedPoints = shouldInterpolate(this.configuration)\n    ? getInterpolatedPoints(this.configuration, canvasPoints)\n    : canvasPoints;\n\n  // Note: -> This is pretty expensive and may not scale well with hundreds of\n  // contours. A future optimisation if we use this for segmentation is to re-do\n  // this rendering with the GPU rather than SVG.\n  const worldPoints = updatedPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = true;\n  const { textBox } = annotation.data.handles;\n\n  // Add the first and last points to the list of handles. These means they\n  // will render handles on mouse hover.\n  annotation.data.handles.points = [\n    worldPoints[0],\n    worldPoints[worldPoints.length - 1],\n  ];\n\n  // If the annotation is an open U-shaped annotation, find the annotation vector.\n  if (annotation.data.isOpenUShapeContour) {\n    annotation.data.openUShapeContourVectorToPeak =\n      findOpenUShapedContourVectorToPeak(canvasPoints, viewport);\n  }\n\n  if (!textBox.hasMoved) {\n    this.triggerAnnotationCompleted(annotation);\n  }\n\n  this.isDrawing = false;\n  this.drawData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateDraw(element);\n\n  return true;\n}\n\n/**\n * Searches for a crossing of the contour during create. If found, returns the\n * index of the point just before the lines cross.\n */\nfunction findCrossingIndexDuringCreate(\n  evt: EventTypes.InteractionEventType\n): number | undefined {\n  // Note as we super sample the added points, we need to check the whole last mouse move, not the points\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n\n  const { canvasPoints } = this.drawData;\n  const pointsLessLastOne = canvasPoints.slice(0, -1);\n\n  const lineSegment = getFirstIntersectionWithPolyline(\n    pointsLessLastOne,\n    canvasPos,\n    lastCanvasPoint,\n    false\n  );\n\n  if (lineSegment === undefined) {\n    return;\n  }\n\n  const crossingIndex = lineSegment[0];\n\n  return crossingIndex;\n}\n\n/**\n * On crossing of the draw line, create a closed contour, and then start an edit\n * since this occurs during a mouse drag.\n */\nfunction applyCreateOnCross(\n  evt: EventTypes.InteractionEventType,\n  crossingIndex: number\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const { canvasPoints } = this.drawData;\n  const { annotation, viewportIdsToRender } = this.commonData;\n\n  // Add points between the end point and crossing point\n  addCanvasPointsToArray(\n    element,\n    canvasPoints,\n    canvasPoints[crossingIndex],\n    this.commonData\n  );\n  // Remove last point which will be a duplicate now.\n  canvasPoints.pop();\n\n  // Remove points up to just before the crossing index\n  for (let i = 0; i < crossingIndex; i++) {\n    canvasPoints.shift();\n  }\n\n  if (this.completeDrawClosedContour(element)) {\n    // pos complete operation\n    this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);\n  }\n}\n\n/**\n * Completes the contour on a cancel method call during the draw loop.\n */\nfunction cancelDrawing(element: HTMLElement) {\n  const { allowOpenContours } = this.configuration;\n  const { canvasPoints } = this.drawData;\n  const firstPoint = canvasPoints[0];\n  const lastPoint = canvasPoints[canvasPoints.length - 1];\n\n  if (\n    allowOpenContours &&\n    !pointsAreWithinCloseContourProximity(\n      firstPoint,\n      lastPoint,\n      this.configuration.closeContourProximity\n    )\n  ) {\n    this.completeDrawOpenContour(element);\n  } else {\n    this.completeDrawClosedContour(element);\n  }\n}\n\n/**\n * Tell whether a drawing should be halted or not. It will be true when canvas points is less than the minimum required.\n */\nfunction shouldHaltDrawing(\n  canvasPoints: any,\n  subPixelResolution: number\n): boolean {\n  const minPoints = Math.max(\n    /**\n     * The number of points to span 3 voxels in length, this is a realistically\n     * smallest open contour one could reasonably define (2 voxels should probably be a line).\n     */\n    subPixelResolution * 3,\n    /**\n     * Minimum 3 points, there are other annotations for one point (probe)\n     * or 2 points (line), so this comes only from a mistake in practice.\n     */\n    3\n  );\n  return canvasPoints.length < minPoints;\n}\n\n/**\n * Check and halt a drawing for a given event. It returns true in case drawing is halted, otherswise false.\n */\nfunction haltDrawing(element: HTMLDivElement, canvasPoints: any): boolean {\n  const { subPixelResolution } = this.configuration;\n\n  if (shouldHaltDrawing(canvasPoints, subPixelResolution)) {\n    // Remove annotation instead of completing it.\n    const { annotation, viewportIdsToRender } = this.commonData;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    removeAnnotation(annotation.annotationUID);\n\n    this.isDrawing = false;\n    this.drawData = undefined;\n    this.commonData = undefined;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.deactivateDraw(element);\n\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Registers the contour drawing loop to the tool instance.\n */\nfunction registerDrawLoop(toolInstance): void {\n  toolInstance.activateDraw = activateDraw.bind(toolInstance);\n  toolInstance.deactivateDraw = deactivateDraw.bind(toolInstance);\n\n  toolInstance.applyCreateOnCross = applyCreateOnCross.bind(toolInstance);\n  toolInstance.findCrossingIndexDuringCreate =\n    findCrossingIndexDuringCreate.bind(toolInstance);\n  toolInstance.completeDrawOpenContour =\n    completeDrawOpenContour.bind(toolInstance);\n  toolInstance.removeCrossedLinesOnCompleteDraw =\n    removeCrossedLinesOnCompleteDraw.bind(toolInstance);\n  toolInstance.mouseDragDrawCallback = mouseDragDrawCallback.bind(toolInstance);\n  toolInstance.mouseUpDrawCallback = mouseUpDrawCallback.bind(toolInstance);\n  toolInstance.completeDrawClosedContour =\n    completeDrawClosedContour.bind(toolInstance);\n  toolInstance.cancelDrawing = cancelDrawing.bind(toolInstance);\n  toolInstance.haltDrawing = haltDrawing.bind(toolInstance);\n}\n\nexport default registerDrawLoop;\n","import { Types } from '@cornerstonejs/core';\nimport { vec2 } from 'gl-matrix';\nimport { polyline } from '../../../utilities/math';\nimport { EventTypes } from '../../../types';\n\nconst { addCanvasPointsToArray, getFirstIntersectionWithPolyline } = polyline;\n\n/**\n * Check if the `editCanvasPoints` have crossed the `prevCanvasPoints` during\n * an edit.\n *\n * @privateRemarks The following tricks are required to make the UX smooth and\n * the editing not very picky on exactly where you click:\n * - If we don't cross after 2 points, but projecting the line backwards the\n * proximity distance means we cross, extend the line back.\n * - If we travel the full proximity in canvas points but don't cross a line, we\n * are likely drawing along the line, which is intuitive to the user. At this point\n * snap the start of the edit to the closest place on the `prevCanvasPoints`,\n * so that the edit can be executed in-line.\n */\nfunction checkForFirstCrossing(\n  evt: EventTypes.InteractionEventType,\n  isClosedContour: boolean\n): void {\n  const eventDetail = evt.detail;\n  const { element, currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n  const { editCanvasPoints, prevCanvasPoints } = this.editData;\n\n  const crossedLineSegment = getFirstIntersectionWithPolyline(\n    prevCanvasPoints,\n    canvasPos,\n    lastCanvasPoint,\n    isClosedContour\n  );\n\n  if (crossedLineSegment) {\n    this.editData.startCrossingIndex = crossedLineSegment[0];\n\n    // On the first crossing, remove the first lines prior to the crossing\n    this.removePointsUpUntilFirstCrossing(isClosedContour);\n    // prevent continue if there are not the minimum of points for this op.\n  } else if (prevCanvasPoints.length >= 2) {\n    if (\n      editCanvasPoints.length >\n      this.configuration.checkCanvasEditFallbackProximity\n    ) {\n      // At this point, likely we are drawing along the line, we are past the proximity for grabbing.\n      // Search for nearest line segment to the start of the edit.\n      // Set the crossing index to the lower index of the segment.\n\n      const firstEditCanvasPoint = editCanvasPoints[0];\n\n      const distanceIndexPairs = [];\n\n      for (let i = 0; i < prevCanvasPoints.length; i++) {\n        const prevCanvasPoint = prevCanvasPoints[i];\n        const distance = vec2.distance(prevCanvasPoint, firstEditCanvasPoint);\n\n        distanceIndexPairs.push({ distance, index: i });\n      }\n\n      distanceIndexPairs.sort((a, b) => a.distance - b.distance);\n\n      const twoClosestDistanceIndexPairs = [\n        distanceIndexPairs[0],\n        distanceIndexPairs[1],\n      ];\n\n      const lowestIndex = Math.min(\n        twoClosestDistanceIndexPairs[0].index,\n        twoClosestDistanceIndexPairs[1].index\n      );\n\n      this.editData.startCrossingIndex = lowestIndex;\n    } else {\n      // Check if extending a line back 6 (Proximity) canvas pixels would cross a line.\n\n      // Extend point back 6 canvas pixels from first point.\n      const dir = vec2.create();\n\n      vec2.subtract(dir, editCanvasPoints[1], editCanvasPoints[0]);\n      vec2.normalize(dir, dir);\n\n      const proximity = 6;\n\n      const extendedPoint: Types.Point2 = [\n        editCanvasPoints[0][0] - dir[0] * proximity,\n        editCanvasPoints[0][1] - dir[1] * proximity,\n      ];\n\n      const crossedLineSegmentFromExtendedPoint =\n        getFirstIntersectionWithPolyline(\n          prevCanvasPoints,\n          extendedPoint,\n          editCanvasPoints[0],\n          isClosedContour\n        );\n\n      if (crossedLineSegmentFromExtendedPoint) {\n        // Add points.\n        const pointsToPrepend = [extendedPoint];\n\n        addCanvasPointsToArray(\n          element,\n          pointsToPrepend,\n          editCanvasPoints[0],\n          this.commonData\n        );\n\n        editCanvasPoints.unshift(...pointsToPrepend);\n\n        this.removePointsUpUntilFirstCrossing(isClosedContour);\n\n        this.editData.editIndex = editCanvasPoints.length - 1;\n        this.editData.startCrossingIndex =\n          crossedLineSegmentFromExtendedPoint[0];\n      }\n    }\n  }\n}\n\n/**\n * Removes the points from the `editCanvasPoints` up until the first crossing of\n * the `prevCanvasPoints`. This is so we can just insert this line segment\n * into the contour.\n */\nfunction removePointsUpUntilFirstCrossing(isClosedContour: boolean): void {\n  const { editCanvasPoints, prevCanvasPoints } = this.editData;\n  let numPointsToRemove = 0;\n\n  for (let i = 0; i < editCanvasPoints.length - 1; i++) {\n    const firstLine = [editCanvasPoints[i], editCanvasPoints[i + 1]];\n\n    const didCrossLine = !!getFirstIntersectionWithPolyline(\n      prevCanvasPoints,\n      firstLine[0],\n      firstLine[1],\n      isClosedContour\n    );\n\n    // Remove last element\n    numPointsToRemove++;\n\n    if (didCrossLine) {\n      break;\n    }\n  }\n\n  // Remove the points\n  editCanvasPoints.splice(0, numPointsToRemove);\n\n  this.editData.editIndex = editCanvasPoints.length - 1;\n}\n\n/**\n * Returns `true` if the `editCanvasPoints` crosses the `prevCanvasPoints` a\n * second time.\n */\nfunction checkForSecondCrossing(\n  evt: EventTypes.InteractionEventType,\n  isClosedContour: boolean\n): boolean {\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n  const { prevCanvasPoints } = this.editData;\n\n  // Note this method is looking for the first corssing found of\n  // *the lines given* to it. The parameters given to it are specified to search\n  // for the second crossing of the prevCanvasPoints, by checking if the last\n  // mouse drag crossed these. This class method is only called if the edit loop\n  // has already has a crossing earlier in the edit.\n  const crossedLineSegment = getFirstIntersectionWithPolyline(\n    prevCanvasPoints,\n    canvasPos,\n    lastCanvasPoint,\n    isClosedContour\n  );\n\n  if (!crossedLineSegment) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Removes the points from the `editCanvasPoints` after the second crossing of\n * the `prevCanvasPoints`. This is so we can just insert this line segment\n * into the contour.\n */\nfunction removePointsAfterSecondCrossing(isClosedContour: boolean): void {\n  const { prevCanvasPoints, editCanvasPoints } = this.editData;\n\n  // Remove points after the crossing\n  for (let i = editCanvasPoints.length - 1; i > 0; i--) {\n    const lastLine = [editCanvasPoints[i], editCanvasPoints[i - 1]];\n\n    const didCrossLine = !!getFirstIntersectionWithPolyline(\n      prevCanvasPoints,\n      lastLine[0],\n      lastLine[1],\n      isClosedContour\n    );\n\n    // Remove last element\n    editCanvasPoints.pop();\n\n    if (didCrossLine) {\n      break;\n    }\n  }\n}\n\n/**\n * During an edit, finds the index on the `prevCanvasPoints` that the\n * `editCanvasPoints` should snap to to create one continuous contour.\n *\n * Returns the index, but returns -1 if there is no index on the\n * `prevCanvasPoints` that can be snapped to with causing a crossing of the\n * `editCanvasPoints`.\n */\nfunction findSnapIndex(): number {\n  const { editCanvasPoints, prevCanvasPoints, startCrossingIndex } =\n    this.editData;\n\n  if (\n    startCrossingIndex === undefined // Haven't crossed line yet\n  ) {\n    return;\n  }\n\n  const lastEditCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n\n  const distanceIndexPairs = [];\n\n  for (let i = 0; i < prevCanvasPoints.length; i++) {\n    const prevCanvasPoint = prevCanvasPoints[i];\n    const distance = vec2.distance(prevCanvasPoint, lastEditCanvasPoint);\n\n    distanceIndexPairs.push({ distance, index: i });\n  }\n\n  distanceIndexPairs.sort((a, b) => a.distance - b.distance);\n\n  // Search through from shortest distance and check which snap line doesn't\n  // Cross the edit line, in most cases the snap index will just be the first one.\n  const editCanvasPointsLessLastOne = editCanvasPoints.slice(0, -1);\n\n  for (let i = 0; i < distanceIndexPairs.length; i++) {\n    const { index } = distanceIndexPairs[i];\n    const snapCanvasPosition = prevCanvasPoints[index];\n    const lastEditCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n\n    const crossedLineSegment = getFirstIntersectionWithPolyline(\n      editCanvasPointsLessLastOne,\n      snapCanvasPosition,\n      lastEditCanvasPoint,\n      false // The edit line is not a closed contour\n    );\n\n    if (!crossedLineSegment) {\n      return index;\n    }\n  }\n\n  // If all of the lines caused a crossing, this means we should start a new edit.\n  // Use -1 to signify this.\n  return -1;\n}\n\n/**\n * Checks if the `editCanvasPoints` cross themselves. If they do, remove the\n * region after the cross index, these removes isolated \"island\" loops that the\n * user can draw which make closed contours no longer simple polygons, or open\n * contours twisted.\n */\nfunction checkAndRemoveCrossesOnEditLine(\n  evt: EventTypes.InteractionEventType\n): number | undefined {\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n\n  const { editCanvasPoints } = this.editData;\n\n  const editCanvasPointsLessLastOne = editCanvasPoints.slice(0, -2);\n\n  const crossedLineSegment = getFirstIntersectionWithPolyline(\n    editCanvasPointsLessLastOne,\n    canvasPos,\n    lastCanvasPoint,\n    false\n  );\n\n  if (!crossedLineSegment) {\n    return;\n  }\n\n  // We have found a crossing, remove points after the crossing, cutting off\n  // the \"island\" loop drawn.\n\n  const editIndexCrossed = crossedLineSegment[0];\n  const numPointsToRemove = editCanvasPoints.length - editIndexCrossed;\n\n  for (let i = 0; i < numPointsToRemove; i++) {\n    editCanvasPoints.pop();\n  }\n}\n\n/**\n * Registers the contour drawing loop to the tool instance.\n */\nfunction registerEditLoopCommon(toolInstance) {\n  toolInstance.checkForFirstCrossing = checkForFirstCrossing.bind(toolInstance);\n  toolInstance.removePointsUpUntilFirstCrossing =\n    removePointsUpUntilFirstCrossing.bind(toolInstance);\n  toolInstance.checkForSecondCrossing =\n    checkForSecondCrossing.bind(toolInstance);\n  toolInstance.findSnapIndex = findSnapIndex.bind(toolInstance);\n  toolInstance.removePointsAfterSecondCrossing =\n    removePointsAfterSecondCrossing.bind(toolInstance);\n  toolInstance.checkAndRemoveCrossesOnEditLine =\n    checkAndRemoveCrossesOnEditLine.bind(toolInstance);\n}\n\nexport default registerEditLoopCommon;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { state } from '../../../store';\nimport { Events } from '../../../enums';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../../cursors/elementCursor';\nimport { EventTypes } from '../../../types';\nimport { polyline } from '../../../utilities/math';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport {\n  getInterpolatedPoints,\n  shouldInterpolate,\n} from '../../../utilities/planarFreehandROITool/interpolatePoints';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\n\nconst {\n  getSubPixelSpacingAndXYDirections,\n  addCanvasPointsToArray,\n  calculateAreaOfPoints,\n} = polyline;\n\n/**\n * Activates the closed contour edit event loop.\n */\nfunction activateClosedContourEdit(\n  evt: EventTypes.InteractionEventType,\n  annotation: PlanarFreehandROIAnnotation,\n  viewportIdsToRender: string[]\n): void {\n  this.isEditingClosed = true;\n\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const prevCanvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  this.editData = {\n    prevCanvasPoints,\n    editCanvasPoints: [canvasPos],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox: false,\n  };\n\n  state.isInteractingWithTool = true;\n\n  element.addEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  element.addEventListener(\n    Events.TOUCH_END,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  hideElementCursor(element);\n}\n\n/**\n * Dectivates and cleans up the closed contour edit event loop.\n */\nfunction deactivateClosedContourEdit(element: HTMLDivElement): void {\n  state.isInteractingWithTool = false;\n\n  element.removeEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  element.removeEventListener(\n    Events.TOUCH_END,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  resetElementCursor(element);\n}\n\n/**\n * Adds points to the edit line and calculates the preview of the edit to render.\n * Checks if an edit needs to be completed by crossing of lines, or by editing in\n * a way that requires a new edit to keep the contour a simple polygon.\n */\nfunction mouseDragClosedContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): Types.Point2[] {\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const worldPos = currentPoints.world;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n\n  const { viewportIdsToRender, xDir, yDir, spacing } = this.commonData;\n  const { editIndex, editCanvasPoints, startCrossingIndex } = this.editData;\n\n  const lastCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  // Check that we have moved at least one voxel in each direction.\n  if (xDist <= spacing[0] && yDist <= spacing[1]) {\n    // Haven't changed world point enough, don't render\n    return;\n  }\n\n  if (startCrossingIndex !== undefined) {\n    // Edge case: If the edit line itself crosses, remove part of that edit line so we don't\n    // Get isolated regions.\n    this.checkAndRemoveCrossesOnEditLine(evt);\n  }\n\n  const numPointsAdded = addCanvasPointsToArray(\n    element,\n    editCanvasPoints,\n    canvasPos,\n    this.commonData\n  );\n\n  const currentEditIndex = editIndex + numPointsAdded;\n\n  this.editData.editIndex = currentEditIndex;\n\n  if (startCrossingIndex === undefined && editCanvasPoints.length > 1) {\n    // If we haven't found the index of the first crossing yet,\n    // see if we can find it.\n    this.checkForFirstCrossing(evt, true);\n  }\n\n  this.editData.snapIndex = this.findSnapIndex();\n\n  if (this.editData.snapIndex === -1) {\n    // No point on the prevCanvasPoints for the editCanvasPoints line to\n    // snap to. Apply edit, and start a new edit as we've gone back on ourselves.\n    this.finishEditAndStartNewEdit(evt);\n    return;\n  }\n\n  this.editData.fusedCanvasPoints = this.fuseEditPointsWithClosedContour(evt);\n\n  if (\n    startCrossingIndex !== undefined &&\n    this.checkForSecondCrossing(evt, true)\n  ) {\n    // Crossed a second time, apply edit, and start a new edit from the crossing.\n    this.removePointsAfterSecondCrossing(true);\n    this.finishEditAndStartNewEdit(evt);\n  }\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Finish the current edit, and start a new one.\n */\nfunction finishEditAndStartNewEdit(evt: EventTypes.InteractionEventType): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, editCanvasPoints } = this.editData;\n\n  const worldPoints = fusedCanvasPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = false;\n\n  this.triggerAnnotationModified(annotation, enabledElement);\n\n  const lastEditCanvasPoint = editCanvasPoints.pop();\n\n  this.editData = {\n    prevCanvasPoints: fusedCanvasPoints,\n    editCanvasPoints: [lastEditCanvasPoint],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n    snapIndex: undefined,\n  };\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * This method combines the contour before editing (prevCanvasPoints) with\n * the current edit (editCanvasPoints), to produce a renderable preview of the\n * edit. Upon finishing the contour, the preview generated here is written back\n * into the contour state.\n *\n * @privateRemarks In this method we combine a few tricks to find the optimal\n * contour:\n * - As the contour is closed, our edit might stradle the boundary between the\n * last and 0th point of the contour, e.g. a small edit might go from e.g. index\n * 960 to index 4. We therefore calculate two possible contours, and find the\n * one with the biggest area, which will define the actual edit the user desired.\n * - As the contour and the edit can be drawn with different chiralities, we find if\n * the edit line aligns better with the intended cross points in its current order\n * or reversed. We do this by minimising the distance between its ends and the\n * intended crossing points.\n */\nfunction fuseEditPointsWithClosedContour(\n  evt: EventTypes.InteractionEventType\n): Types.Point2[] {\n  const { prevCanvasPoints, editCanvasPoints, startCrossingIndex, snapIndex } =\n    this.editData;\n\n  if (startCrossingIndex === undefined || snapIndex === undefined) {\n    return;\n  }\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Augment the editCanvasPoints array, between the end of edit and the snap index.\n  const augmentedEditCanvasPoints = [...editCanvasPoints];\n\n  addCanvasPointsToArray(\n    element,\n    augmentedEditCanvasPoints,\n    prevCanvasPoints[snapIndex],\n    this.commonData\n  );\n\n  if (augmentedEditCanvasPoints.length > editCanvasPoints.length) {\n    // If any points added, remove the last point, which will be a clone of the snapIndex\n    augmentedEditCanvasPoints.pop();\n  }\n\n  // Calculate the distances between the first and last edit points and the origin of the\n  // Contour with the snap point. These will be used to see which way around the edit array should be\n  // Placed within the preview.\n  let lowIndex;\n  let highIndex;\n\n  if (startCrossingIndex > snapIndex) {\n    lowIndex = snapIndex;\n    highIndex = startCrossingIndex;\n  } else {\n    lowIndex = startCrossingIndex;\n    highIndex = snapIndex;\n  }\n\n  const distanceBetweenLowAndFirstPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenLowAndLastPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  const distanceBetweenHighAndFirstPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenHighAndLastPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  // Generate two possible contours that could be intepreted from the edit:\n  //\n  // pointSet1 => 0 -> low -> edit -> high - max.\n  // pointSet2 => low -> high -> edit\n  //\n  // Depending on the placement of the edit and the origin, either of these could be the intended edit.\n  // We'll choose the one with the largest area, as edits are considered to be changes to the original area with\n  // A relative change of much less than unity.\n\n  // Point Set 1\n  const pointSet1 = [];\n\n  // Add points from the orignal contour origin up to the low index.\n  for (let i = 0; i < lowIndex; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  // Check which orientation of the edit line minimizes the distance between the\n  // origial contour low/high points and the start/end nodes of the edit line.\n\n  let inPlaceDistance =\n    distanceBetweenLowAndFirstPoint + distanceBetweenHighAndLastPoint;\n\n  let reverseDistance =\n    distanceBetweenLowAndLastPoint + distanceBetweenHighAndFirstPoint;\n\n  if (inPlaceDistance < reverseDistance) {\n    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  // Add points from the orignal contour's high index up to to its end point.\n  for (let i = highIndex; i < prevCanvasPoints.length; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  // Point Set 2\n  const pointSet2 = [];\n\n  for (let i = lowIndex; i < highIndex; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointSet2.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  inPlaceDistance =\n    distanceBetweenHighAndFirstPoint + distanceBetweenLowAndLastPoint;\n\n  reverseDistance =\n    distanceBetweenHighAndLastPoint + distanceBetweenLowAndFirstPoint;\n\n  if (inPlaceDistance < reverseDistance) {\n    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet2.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet2.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  const areaPointSet1 = calculateAreaOfPoints(pointSet1);\n  const areaPointSet2 = calculateAreaOfPoints(pointSet2);\n\n  const pointsToRender: Types.Point2[] =\n    areaPointSet1 > areaPointSet2 ? pointSet1 : pointSet2;\n\n  return pointsToRender;\n}\n\n/**\n * Completes the edit of the closed contour when the mouse button is released.\n */\nfunction mouseUpClosedContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  this.completeClosedContourEdit(element);\n}\n\n/**\n * Completes the edit of the closed contour when the mouse button is released.\n */\nfunction completeClosedContourEdit(element: HTMLDivElement) {\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, prevCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints) {\n    const updatedPoints = shouldInterpolate(this.configuration)\n      ? getInterpolatedPoints(\n          this.configuration,\n          fusedCanvasPoints,\n          prevCanvasPoints\n        )\n      : fusedCanvasPoints;\n\n    const worldPoints = updatedPoints.map((canvasPoint) =>\n      viewport.canvasToWorld(canvasPoint)\n    );\n    annotation.data.polyline = worldPoints;\n    annotation.data.isOpenContour = false;\n\n    annotation.invalidated = true;\n\n    this.triggerAnnotationModified(annotation, enabledElement);\n  }\n\n  this.isEditingClosed = false;\n  this.editData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateClosedContourEdit(element);\n}\n\n/**\n * Completes the edit on a cancel method call during the closed\n * contour edit loop.\n */\nfunction cancelClosedContourEdit(element: HTMLDivElement) {\n  this.completeClosedContourEdit(element);\n}\n\n/**\n * Registers the closed contour edit loop to the tool instance.\n */\nfunction registerClosedContourEditLoop(toolInstance): void {\n  toolInstance.activateClosedContourEdit =\n    activateClosedContourEdit.bind(toolInstance);\n  toolInstance.deactivateClosedContourEdit =\n    deactivateClosedContourEdit.bind(toolInstance);\n  toolInstance.mouseDragClosedContourEditCallback =\n    mouseDragClosedContourEditCallback.bind(toolInstance);\n  toolInstance.mouseUpClosedContourEditCallback =\n    mouseUpClosedContourEditCallback.bind(toolInstance);\n  toolInstance.finishEditAndStartNewEdit =\n    finishEditAndStartNewEdit.bind(toolInstance);\n  toolInstance.fuseEditPointsWithClosedContour =\n    fuseEditPointsWithClosedContour.bind(toolInstance);\n  toolInstance.cancelClosedContourEdit =\n    cancelClosedContourEdit.bind(toolInstance);\n  toolInstance.completeClosedContourEdit =\n    completeClosedContourEdit.bind(toolInstance);\n}\n\nexport default registerClosedContourEditLoop;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { state } from '../../../store';\nimport { Events } from '../../../enums';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../../cursors/elementCursor';\nimport type { EventTypes, Annotation } from '../../../types';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { polyline } from '../../../utilities/math';\nimport {\n  shouldInterpolate,\n  getInterpolatedPoints,\n} from '../../../utilities/planarFreehandROITool/interpolatePoints';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport findOpenUShapedContourVectorToPeak from './findOpenUShapedContourVectorToPeak';\n\nconst { addCanvasPointsToArray, getSubPixelSpacingAndXYDirections } = polyline;\n\n/**\n * Activates the open contour edit event loop.\n */\nfunction activateOpenContourEdit(\n  evt: EventTypes.InteractionEventType,\n  annotation: Annotation,\n  viewportIdsToRender: string[]\n): void {\n  this.isEditingOpen = true;\n\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const prevCanvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  this.editData = {\n    prevCanvasPoints,\n    editCanvasPoints: [canvasPos],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox: false,\n  };\n\n  state.isInteractingWithTool = true;\n\n  element.addEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpOpenContourEditCallback\n  );\n\n  element.addEventListener(\n    Events.TOUCH_END,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpOpenContourEditCallback\n  );\n  hideElementCursor(element);\n}\n\n/**\n * Deactivates and cleans up the closed contour edit event loop.\n */\nfunction deactivateOpenContourEdit(element: HTMLDivElement) {\n  state.isInteractingWithTool = false;\n\n  element.removeEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpOpenContourEditCallback\n  );\n\n  element.removeEventListener(\n    Events.TOUCH_END,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpOpenContourEditCallback\n  );\n  resetElementCursor(element);\n}\n\n/**\n * Adds points to the edit line and calculates the preview of the edit to render.\n * Checks if an edit needs to be completed by crossing of lines, or by dragging\n * the edit line past the end of the open contour.\n */\nfunction mouseDragOpenContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): boolean {\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const worldPos = currentPoints.world;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n\n  const { viewportIdsToRender, xDir, yDir, spacing } = this.commonData;\n  const { editIndex, editCanvasPoints, startCrossingIndex } = this.editData;\n\n  const lastCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  // Get pixel spacing in the direction.\n  // Check that we have moved at least one voxel in each direction.\n\n  if (xDist <= spacing[0] && yDist <= spacing[1]) {\n    // Haven't changed world point enough, don't render\n    return;\n  }\n\n  if (startCrossingIndex !== undefined) {\n    // Edge case: If the edit line itself crosses, remove part of that edit line so we don't\n    // Get isolated regions.\n    this.checkAndRemoveCrossesOnEditLine(evt);\n  }\n\n  const numPointsAdded = addCanvasPointsToArray(\n    element,\n    editCanvasPoints,\n    canvasPos,\n    this.commonData\n  );\n\n  const currentEditIndex = editIndex + numPointsAdded;\n\n  this.editData.editIndex = currentEditIndex;\n\n  if (startCrossingIndex === undefined && editCanvasPoints.length > 1) {\n    this.checkForFirstCrossing(evt, false);\n  }\n\n  this.editData.snapIndex = this.findSnapIndex();\n\n  this.editData.fusedCanvasPoints = this.fuseEditPointsWithOpenContour(evt);\n\n  if (\n    startCrossingIndex !== undefined &&\n    this.checkForSecondCrossing(evt, false)\n  ) {\n    this.removePointsAfterSecondCrossing(false);\n    this.finishEditOpenOnSecondCrossing(evt);\n  } else if (this.checkIfShouldOverwriteAnEnd(evt)) {\n    this.openContourEditOverwriteEnd(evt);\n  }\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Overwrite the end of the contour with the edit, and then switch to the\n * open contour end edit loop.\n */\nfunction openContourEditOverwriteEnd(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const fusedCanvasPoints = this.fuseEditPointsForOpenContourEndEdit();\n\n  const worldPoints = fusedCanvasPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = true;\n  // Note: Contours generate from fusedCanvasPoints will be in the direction\n  // with the last point being the current mouse position\n  annotation.data.handles.points = [\n    worldPoints[0],\n    worldPoints[worldPoints.length - 1],\n  ];\n  annotation.data.handles.activeHandleIndex = 1;\n\n  this.triggerAnnotationModified(annotation, enabledElement);\n\n  this.isEditingOpen = false;\n  this.editData = undefined;\n  this.commonData = undefined;\n\n  // Jump to a normal line edit now.\n  this.deactivateOpenContourEdit(element);\n  this.activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, null);\n}\n\n/**\n * Checks if we are moving the `editCanvasPoints` past the end of one of the\n * open contour's `prevCanvasPoint`s.\n */\nfunction checkIfShouldOverwriteAnEnd(\n  evt: EventTypes.InteractionEventType\n): boolean {\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPos = lastPoints.canvas;\n\n  const { snapIndex, prevCanvasPoints, startCrossingIndex } = this.editData;\n\n  if (startCrossingIndex === undefined || snapIndex === undefined) {\n    // Edit not started\n    return false;\n  }\n\n  // No snap index can be found, so contour is being edited away from line.\n  if (snapIndex === -1) {\n    return true;\n  }\n\n  if (snapIndex !== 0 && snapIndex !== prevCanvasPoints.length - 1) {\n    // Not snapping to final index\n    return false;\n  }\n\n  // Work out the angle between the last mouse move and\n  // And the current point to the snapped point.\n  const p1 = canvasPos;\n  const p2 = lastCanvasPos;\n  const p3 = prevCanvasPoints[snapIndex];\n\n  const a = vec2.create();\n  const b = vec2.create();\n\n  vec2.set(a, p1[0] - p2[0], p1[1] - p2[1]);\n  vec2.set(b, p1[0] - p3[0], p1[1] - p3[1]);\n\n  const aDotb = vec2.dot(a, b);\n  const magA = Math.sqrt(a[0] * a[0] + a[1] * a[1]);\n  const magB = Math.sqrt(b[0] * b[0] + b[1] * b[1]);\n\n  const theta = Math.acos(aDotb / (magA * magB));\n\n  if (theta < Math.PI / 2) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * This method combines the contour before editing (prevCanvasPoints) with\n * the current edit (editCanvasPoints), to produce a single contour ready for\n * end editing.\n *\n * @privateRemarks In this method we use the following trick to find the\n * optimal contour:\n * - As the contour and the edit can be drawn with different chiralities, we find if\n * the edit line aligns better with the intended cross points in its current order\n * or reversed. We do this by minimising the distance between its ends and the\n * intended crossing points.\n */\nfunction fuseEditPointsForOpenContourEndEdit(): Types.Point2[] {\n  const { snapIndex, prevCanvasPoints, editCanvasPoints, startCrossingIndex } =\n    this.editData;\n\n  const newCanvasPoints = [];\n\n  // Note: Generated contours will both be in the direction with the\n  // last point being the current mouse position\n\n  if (snapIndex === 0) {\n    // end -> crossingpoint -> edit\n    // Add points from the end of the previous contour, to the crossing point.\n    for (let i = prevCanvasPoints.length - 1; i >= startCrossingIndex; i--) {\n      const canvasPoint = prevCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    // start -> crossingpoint -> edit\n    // Add points from the orignal contour origin up to the low index.\n    for (let i = 0; i < startCrossingIndex; i++) {\n      const canvasPoint = prevCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  const distanceBetweenCrossingIndexAndFirstPoint = vec2.distance(\n    prevCanvasPoints[startCrossingIndex],\n    editCanvasPoints[0]\n  );\n\n  const distanceBetweenCrossingIndexAndLastPoint = vec2.distance(\n    prevCanvasPoints[startCrossingIndex],\n    editCanvasPoints[editCanvasPoints.length - 1]\n  );\n\n  if (\n    distanceBetweenCrossingIndexAndFirstPoint <\n    distanceBetweenCrossingIndexAndLastPoint\n  ) {\n    // In order\n    for (let i = 0; i < editCanvasPoints.length; i++) {\n      const canvasPoint = editCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    // reverse\n    for (let i = editCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = editCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  return newCanvasPoints;\n}\n\n/**\n * This method combines the contour before editing (prevCanvasPoints) with\n * the current edit (editCanvasPoints), to produce a renderable preview of the\n * edit. Upon finishing the contour, the preview generated here is written back\n * into the contour state.\n *\n * @privateRemarks In this method we use the following trick to find the\n * optimal contour:\n * - As the contour and the edit can be drawn with different chiralities, we find if\n * the edit line aligns better with the intended cross points in its current order\n * or reversed. We do this by minimising the distance between its ends and the\n * intended crossing points.\n */\nfunction fuseEditPointsWithOpenContour(\n  evt: EventTypes.InteractionEventType\n): Types.Point2[] {\n  const { prevCanvasPoints, editCanvasPoints, startCrossingIndex, snapIndex } =\n    this.editData;\n\n  if (startCrossingIndex === undefined || snapIndex === undefined) {\n    return undefined;\n  }\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Augment the editCanvasPoints array, between the end of edit and the snap index.\n  const augmentedEditCanvasPoints = [...editCanvasPoints];\n\n  addCanvasPointsToArray(\n    element,\n    augmentedEditCanvasPoints,\n    prevCanvasPoints[snapIndex],\n    this.commonData\n  );\n\n  if (augmentedEditCanvasPoints.length > editCanvasPoints.length) {\n    // If any points added, remove the last point, which will be a clone of the snapIndex\n    augmentedEditCanvasPoints.pop();\n  }\n\n  // Calculate the distances between the first and last edit points and the origin of the\n  // Contour with the snap point. These will be used to see which way around the edit array should be\n  // Placed within the preview.\n\n  let lowIndex;\n  let highIndex;\n\n  if (startCrossingIndex > snapIndex) {\n    lowIndex = snapIndex;\n    highIndex = startCrossingIndex;\n  } else {\n    lowIndex = startCrossingIndex;\n    highIndex = snapIndex;\n  }\n\n  const distanceBetweenLowAndFirstPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenLowAndLastPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  const distanceBetweenHighAndFirstPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenHighAndLastPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  const pointsToRender = [];\n\n  // Add points from the orignal contour origin up to the low index.\n  for (let i = 0; i < lowIndex; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  // Check which orientation of the edit line minimizes the distance between the\n  // origial contour low/high points and the start/end nodes of the edit line.\n\n  const inPlaceDistance =\n    distanceBetweenLowAndFirstPoint + distanceBetweenHighAndLastPoint;\n\n  const reverseDistance =\n    distanceBetweenLowAndLastPoint + distanceBetweenHighAndFirstPoint;\n\n  if (inPlaceDistance < reverseDistance) {\n    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  // Add points from the original contour's high index up to to its end point.\n  for (let i = highIndex; i < prevCanvasPoints.length; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  return pointsToRender;\n}\n\n/**\n * On a second crossing, apply edit, and start a new edit from the crossing.\n */\nfunction finishEditOpenOnSecondCrossing(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, editCanvasPoints } = this.editData;\n\n  const worldPoints = fusedCanvasPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = true;\n  annotation.data.handles.points = [\n    worldPoints[0],\n    worldPoints[worldPoints.length - 1],\n  ];\n\n  this.triggerAnnotationModified(annotation, enabledElement);\n\n  const lastEditCanvasPoint = editCanvasPoints.pop();\n\n  this.editData = {\n    prevCanvasPoints: fusedCanvasPoints,\n    editCanvasPoints: [lastEditCanvasPoint],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n  };\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Completes the edit of the open contour when the mouse button is released.\n */\nfunction mouseUpOpenContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  this.completeOpenContourEdit(element);\n}\n\n/**\n * Completes the edit of the open contour.\n */\nfunction completeOpenContourEdit(element: HTMLDivElement) {\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, prevCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints) {\n    const updatedPoints = shouldInterpolate(this.configuration)\n      ? getInterpolatedPoints(\n          this.configuration,\n          fusedCanvasPoints,\n          prevCanvasPoints\n        )\n      : fusedCanvasPoints;\n\n    const worldPoints = updatedPoints.map((canvasPoint) =>\n      viewport.canvasToWorld(canvasPoint)\n    );\n    annotation.data.polyline = worldPoints;\n    annotation.data.isOpenContour = true;\n    annotation.data.handles.points = [\n      worldPoints[0],\n      worldPoints[worldPoints.length - 1],\n    ];\n\n    // If the annotation is an open U-shaped annotation, find the annotation vector.\n    if (annotation.data.isOpenUShapeContour) {\n      annotation.data.openUShapeContourVectorToPeak =\n        findOpenUShapedContourVectorToPeak(fusedCanvasPoints, viewport);\n    }\n\n    annotation.invalidated = true;\n\n    this.triggerAnnotationModified(annotation, enabledElement);\n  }\n\n  this.isEditingOpen = false;\n  this.editData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateOpenContourEdit(element);\n}\n\n/**\n * Completes the edit on a cancel method call during the open\n * contour edit loop.\n */\nfunction cancelOpenContourEdit(element: HTMLDivElement) {\n  this.completeOpenContourEdit(element);\n}\n\n/**\n * Registers the open contour edit loop to the tool instance.\n */\nfunction registerOpenContourEditLoop(toolInstance) {\n  toolInstance.activateOpenContourEdit =\n    activateOpenContourEdit.bind(toolInstance);\n  toolInstance.deactivateOpenContourEdit =\n    deactivateOpenContourEdit.bind(toolInstance);\n  toolInstance.mouseDragOpenContourEditCallback =\n    mouseDragOpenContourEditCallback.bind(toolInstance);\n  toolInstance.mouseUpOpenContourEditCallback =\n    mouseUpOpenContourEditCallback.bind(toolInstance);\n  toolInstance.fuseEditPointsWithOpenContour =\n    fuseEditPointsWithOpenContour.bind(toolInstance);\n  toolInstance.finishEditOpenOnSecondCrossing =\n    finishEditOpenOnSecondCrossing.bind(toolInstance);\n  toolInstance.checkIfShouldOverwriteAnEnd =\n    checkIfShouldOverwriteAnEnd.bind(toolInstance);\n  toolInstance.fuseEditPointsForOpenContourEndEdit =\n    fuseEditPointsForOpenContourEndEdit.bind(toolInstance);\n  toolInstance.openContourEditOverwriteEnd =\n    openContourEditOverwriteEnd.bind(toolInstance);\n  toolInstance.cancelOpenContourEdit = cancelOpenContourEdit.bind(toolInstance);\n  toolInstance.completeOpenContourEdit =\n    completeOpenContourEdit.bind(toolInstance);\n}\n\nexport default registerOpenContourEditLoop;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { state } from '../../../store';\nimport { Events } from '../../../enums';\nimport { hideElementCursor } from '../../../cursors/elementCursor';\nimport type {\n  EventTypes,\n  Annotation,\n  ToolHandle,\n  TextBoxHandle,\n} from '../../../types';\nimport { polyline } from '../../../utilities/math';\n\nconst { getSubPixelSpacingAndXYDirections } = polyline;\n\n/**\n * Activates the open contour end edit. This actually just sets up the state so\n * that the tool thinks we are mid draw, and then jumps into the drawing loop.\n */\nfunction activateOpenContourEndEdit(\n  evt: EventTypes.InteractionEventType,\n  annotation: Annotation,\n  viewportIdsToRender: string[],\n  handle: ToolHandle | null\n): void {\n  this.isDrawing = true;\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n  const handleIndexGrabbed = annotation.data.handles.activeHandleIndex;\n\n  // If 0, invert point direction, if 1, keep point direction the same.\n  // This is so we can just jump as into the state as if the annotation was just being drawn.\n  if (handleIndexGrabbed === 0) {\n    canvasPoints.reverse();\n  }\n\n  let movingTextBox = false;\n  if ((handle as TextBoxHandle).worldPosition) {\n    movingTextBox = true;\n  }\n\n  this.drawData = {\n    canvasPoints: canvasPoints,\n    polylineIndex: canvasPoints.length - 1,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox,\n  };\n\n  state.isInteractingWithTool = true;\n\n  // Jump into drawing loop.\n  element.addEventListener(Events.MOUSE_UP, this.mouseUpDrawCallback);\n  element.addEventListener(Events.MOUSE_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.MOUSE_CLICK, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_END, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.TOUCH_TAP, this.mouseUpDrawCallback);\n\n  hideElementCursor(element);\n}\n\n/**\n * Registers the open contour end edit loop to the tool instance.\n */\nfunction registerOpenContourEndEditLoop(toolInstance): void {\n  toolInstance.activateOpenContourEndEdit =\n    activateOpenContourEndEdit.bind(toolInstance);\n}\n\nexport default registerOpenContourEndEditLoop;\n","import type { Types } from '@cornerstonejs/core';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawPolyline as drawPolylineSvg,\n} from '../../../drawingSvg';\nimport { polyline } from '../../../utilities/math';\nimport { findOpenUShapedContourVectorToPeakOnRender } from './findOpenUShapedContourVectorToPeak';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../../types/AnnotationStyle';\nimport { SVGDrawingHelper } from '../../../types';\n\nconst { pointsAreWithinCloseContourProximity } = polyline;\n\ntype PlanarFreehandROIRenderOptions = {\n  color?: string;\n  width?: number;\n  connectFirstToLast?: boolean;\n};\n\nfunction _getRenderingOptions(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation\n): PlanarFreehandROIRenderOptions {\n  const styleSpecifier: StyleSpecifier = {\n    toolGroupId: this.toolGroupId,\n    toolName: this.getToolName(),\n    viewportId: enabledElement.viewport.id,\n    annotationUID: annotation.annotationUID,\n  };\n\n  const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n  const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n  const color = this.getStyle('color', styleSpecifier, annotation);\n\n  const isOpenContour = annotation.data.isOpenContour;\n\n  const options = {\n    color: color === undefined ? undefined : <string>color,\n    width: lineWidth === undefined ? undefined : <number>lineWidth,\n    lineDash: lineDash === undefined ? undefined : <number[]>lineDash,\n    connectLastToFirst: !isOpenContour,\n  };\n\n  return options;\n}\n\n/**\n * Renders a `PlanarFreehandROIAnnotation` that is not currently being drawn or edited.\n */\nfunction renderContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  // prevent drawing or further calculation in case viewport data is not ready yet\n  if (!enabledElement?.viewport?.getImageData()) {\n    return;\n  }\n  // Check if the contour is an open contour\n  if (annotation.data.isOpenContour) {\n    // If its an open contour, check i its a U-shaped contour\n    if (annotation.data.isOpenUShapeContour) {\n      calculateUShapeContourVectorToPeakIfNotPresent(\n        enabledElement,\n        annotation\n      );\n\n      this.renderOpenUShapedContour(\n        enabledElement,\n        svgDrawingHelper,\n        annotation\n      );\n    } else {\n      // If not a U-shaped contour, render standard open contour.\n      this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n    }\n  } else {\n    this.renderClosedContour(enabledElement, svgDrawingHelper, annotation);\n  }\n}\n\n/**\n * If the open U-shaped contour does not have a peak.\n */\nfunction calculateUShapeContourVectorToPeakIfNotPresent(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  if (!annotation.data.openUShapeContourVectorToPeak) {\n    // Annotation just been set to be an open U-shaped contour.\n    // calculate its peak vector here.\n    annotation.data.openUShapeContourVectorToPeak =\n      findOpenUShapedContourVectorToPeakOnRender(enabledElement, annotation);\n  }\n}\n\n/**\n * Renders an closed `PlanarFreehandROIAnnotation` annotation.\n */\nfunction renderClosedContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { viewport } = enabledElement;\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  // Its unfortunate that we have to do this for each annotation,\n  // Even if its unchanged. In the future we could cache the canvas points per\n  // element on the tool? That feels very weird also as we'd need to manage\n  // it/clean them up. Its a pre-optimisation for now and we can tackle it if it\n  // becomes a problem.\n  const canvasPoints = annotation.data.polyline.map((worldPos) =>\n    viewport.worldToCanvas(worldPos)\n  );\n\n  const polylineUID = '1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUID,\n    canvasPoints,\n    options\n  );\n}\n\n/**\n * Renders an open `PlanarFreehandROIAnnotation` annotation.\n */\nfunction renderOpenContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { viewport } = enabledElement;\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const canvasPoints = annotation.data.polyline.map((worldPos) =>\n    viewport.worldToCanvas(worldPos)\n  );\n\n  const polylineUID = '1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUID,\n    canvasPoints,\n    options\n  );\n\n  const activeHandleIndex = annotation.data.handles.activeHandleIndex;\n\n  if (this.configuration.alwaysRenderOpenContourHandles?.enabled === true) {\n    const radius = this.configuration.alwaysRenderOpenContourHandles.radius;\n\n    // Draw highlighted points\n    const handleGroupUID = '0';\n\n    // We already mapped all the points, so don't do the mapping again.\n    // The activeHandleIndex can only be one of two points.\n    const handlePoints = [\n      canvasPoints[0],\n      canvasPoints[canvasPoints.length - 1],\n    ];\n\n    // Don't render a hovered handle, as this will be rendered larger in\n    // the next block.\n    if (activeHandleIndex === 0) {\n      handlePoints.shift();\n    } else if (activeHandleIndex === 1) {\n      handlePoints.pop();\n    }\n\n    drawHandlesSvg(\n      svgDrawingHelper,\n      annotation.annotationUID,\n      handleGroupUID,\n      handlePoints,\n      {\n        color: options.color,\n        handleRadius: radius,\n      }\n    );\n  }\n\n  if (activeHandleIndex !== null) {\n    // Draw highlighted points\n    const handleGroupUID = '1';\n\n    // We already mapped all the points, so don't do the mapping again.\n    // The activeHandleIndex can only be one of two points.\n    const indexOfCanvasPoints =\n      activeHandleIndex === 0 ? 0 : canvasPoints.length - 1;\n\n    const handlePoint = canvasPoints[indexOfCanvasPoints];\n\n    drawHandlesSvg(\n      svgDrawingHelper,\n      annotation.annotationUID,\n      handleGroupUID,\n      [handlePoint],\n      { color: options.color }\n    );\n  }\n}\n\nfunction renderOpenUShapedContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { viewport } = enabledElement;\n  const { polyline, openUShapeContourVectorToPeak } = annotation.data;\n\n  this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n\n  // prevent rendering u shape in case openUShapeContourVectorToPeak is not set yet\n  if (!openUShapeContourVectorToPeak) {\n    return;\n  }\n\n  const firstCanvasPoint = viewport.worldToCanvas(polyline[0]);\n  const lastCanvasPoint = viewport.worldToCanvas(polyline[polyline.length - 1]);\n\n  const openUShapeContourVectorToPeakCanvas = [\n    viewport.worldToCanvas(openUShapeContourVectorToPeak[0]),\n    viewport.worldToCanvas(openUShapeContourVectorToPeak[1]),\n  ];\n\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  // Join first and last points\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    'first-to-last',\n    [firstCanvasPoint, lastCanvasPoint],\n    {\n      color: options.color,\n      width: options.width,\n      connectLastToFirst: false,\n      lineDash: '2,2',\n    }\n  );\n\n  // Render midpoint to open contour surface line\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    'midpoint-to-open-contour',\n    [\n      openUShapeContourVectorToPeakCanvas[0],\n      openUShapeContourVectorToPeakCanvas[1],\n    ],\n    {\n      color: options.color,\n      width: options.width,\n      connectLastToFirst: false,\n      lineDash: '2,2',\n    }\n  );\n}\n\n/**\n * Renders a new `PlanarFreehandROIAnnotation` annotation during\n * creation/drawing.\n */\nfunction renderContourBeingDrawn(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const { allowOpenContours } = this.configuration;\n  const { canvasPoints } = this.drawData;\n\n  // Override rendering whilst drawing the contour, we don't know if its open\n  // or closed yet\n  options.connectLastToFirst = false;\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    '1',\n    canvasPoints,\n    options\n  );\n\n  if (allowOpenContours) {\n    const firstPoint = canvasPoints[0];\n    const lastPoint = canvasPoints[canvasPoints.length - 1];\n\n    // Check if start and end are within close proximity\n    if (\n      pointsAreWithinCloseContourProximity(\n        firstPoint,\n        lastPoint,\n        this.configuration.closeContourProximity\n      )\n    ) {\n      // Preview join last points\n      drawPolylineSvg(\n        svgDrawingHelper,\n        annotation.annotationUID,\n        '2',\n        [lastPoint, firstPoint],\n        options\n      );\n    } else {\n      // Draw start point\n      const handleGroupUID = '0';\n\n      drawHandlesSvg(\n        svgDrawingHelper,\n        annotation.annotationUID,\n        handleGroupUID,\n        [firstPoint],\n        { color: options.color, handleRadius: 2 }\n      );\n    }\n  }\n}\n\n/**\n * Renders a closed `PlanarFreehandROIAnnotation` being edited.\n */\nfunction renderClosedContourBeingEdited(\n  enabledElement,\n  svgDrawingHelper,\n  annotation\n): void {\n  const { fusedCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints === undefined) {\n    // No edit to render yet, render closed contour.\n    this.renderClosedContour(enabledElement, svgDrawingHelper, annotation);\n\n    return;\n  }\n\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const polylineUIDToRender = 'preview-1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUIDToRender,\n    fusedCanvasPoints,\n    options\n  );\n}\n\n/**\n * Renders an open `PlanarFreehandROIAnnotation` being edited.\n */\nfunction renderOpenContourBeingEdited(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { fusedCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints === undefined) {\n    // No edit to render yet, render closed contour.\n    this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n\n    return;\n  }\n\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const polylineUIDToRender = 'preview-1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUIDToRender,\n    fusedCanvasPoints,\n    options\n  );\n}\n\n/**\n * Registers the render methods of various contour states to the tool instance.\n */\nfunction registerRenderMethods(toolInstance) {\n  toolInstance.renderContour = renderContour.bind(toolInstance);\n  toolInstance.renderClosedContour = renderClosedContour.bind(toolInstance);\n  toolInstance.renderOpenContour = renderOpenContour.bind(toolInstance);\n  toolInstance.renderOpenUShapedContour =\n    renderOpenUShapedContour.bind(toolInstance);\n\n  toolInstance.renderContourBeingDrawn =\n    renderContourBeingDrawn.bind(toolInstance);\n\n  toolInstance.renderClosedContourBeingEdited =\n    renderClosedContourBeingEdited.bind(toolInstance);\n  toolInstance.renderOpenContourBeingEdited =\n    renderOpenContourBeingEdited.bind(toolInstance);\n  toolInstance._getRenderingOptions = _getRenderingOptions.bind(toolInstance);\n}\n\nexport default registerRenderMethods;\n","import {\n  CONSTANTS,\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  StackViewport,\n  VolumeViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\nimport {\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport { Events } from '../../enums';\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../../stateManagement/annotation/annotationState';\nimport { polyline } from '../../utilities/math';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport registerDrawLoop from './planarFreehandROITool/drawLoop';\nimport registerEditLoopCommon from './planarFreehandROITool/editLoopCommon';\nimport registerClosedContourEditLoop from './planarFreehandROITool/closedContourEditLoop';\nimport registerOpenContourEditLoop from './planarFreehandROITool/openContourEditLoop';\nimport registerOpenContourEndEditLoop from './planarFreehandROITool/openContourEndEditLoop';\nimport registerRenderMethods from './planarFreehandROITool/renderMethods';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\nimport {\n  EventTypes,\n  ToolHandle,\n  Annotation,\n  Annotations,\n  AnnotationStyle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { drawLine, drawCircle, drawLinkedTextBox } from '../../drawingSvg';\nimport { PlanarFreehandROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { PlanarFreehandROICommonData } from '../../utilities/math/polyline/planarFreehandROIInternalTypes';\nimport pointInPolyline from '../../utilities/math/polyline/pointInPolyline';\nimport { getIntersectionCoordinatesWithPolyline } from '../../utilities/math/polyline/getIntersectionWithPolyline';\nimport pointInShapeCallback from '../../utilities/pointInShapeCallback';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\n\nconst { pointCanProjectOnLine } = polyline;\nconst { EPSILON } = CONSTANTS;\n\nconst PARALLEL_THRESHOLD = 1 - EPSILON;\n/**\n * PlanarFreehandROITool lets you draw annotations that define an arbitrarily drawn region.\n * You can use the PlanarFreehandROITool in all perpendicular views (axial, sagittal, coronal),\n * support for oblique views is possible, but not yet supported, due to the implementation of\n * `getSubPixelSpacingAndXYDirections`.\n *\n * The resulting annotation's data and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * PlanarFreehandROITool annotation can be smoothed on drawing completion. This is a configured based approach.\n * The interpolation process uses b-spline algorithm and consider 4 configurations properties:\n * - interpolation.interpolateOnAdd: to tell whether it should be interpolated or not (for editing it is considered the property interpolateOnEdit) (default: false)\n * - interpolation.interpolateOnEdit: to tell whether it should be interpolated or not when editing (default: false)\n * - interpolation.knotsRatioPercentageOnAdd: percentage of points from Segment that are likely to be considered knots during interpolation (for editing it is considered the property knotsRatioPercentageOnEdit) ( default: 40)\n * - interpolation.knotsRatioPercentageOnEdit: same as knotsRatioPercentageOnAdd but applicable only when editing the tool (default: 40)\n *\n * So, with that said the interpolation might occur when:\n * - drawing is done (i.e mouse is released) and interpolation.interpolateOnAdd is true. Interpolation algorithm uses knotsRatioPercentageOnAdd\n * - edit drawing is done (i.e mouse is released) and interpolation.interpolateOnEdit is true. Interpolation algorithm uses knotsRatioPercentageOnEdit and its only applied to changed segment\n * Interpolation does not occur when:\n * - interpolation.interpolateOnAdd is false and drawing is completed\n * - interpolation.interpolateOnEdit is false and edit is completed\n * - drawing still happening (editing or not)\n *\n * The result of interpolation will be a smoother set of segments.\n * Changing tool configuration (see below) you can fine-tune the interpolation process by changing knotsRatioPercentageOnAdd and knotsRatioPercentageOnEdit value, which smaller values produces a more agressive interpolation.\n * A smaller value of knotsRatioPercentageOnAdd/knotsRatioPercentageOnEdit produces a more agressive interpolation.\n *\n * ```js\n * cornerstoneTools.addTool(PlanarFreehandROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(PlanarFreehandROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(PlanarFreehandROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n *\n * // set interpolation agressiveness while adding new annotation (ps: this does not change if interpolation is ON or OFF)\n * toolGroup.setToolConfiguration(PlanarFreehandROITool.toolName, {\n *   interpolation: { knotsRatioPercentageOnAdd: 30 },\n * });\n *\n * // set interpolation to be ON while editing only\n * toolGroup.setToolConfiguration(PlanarFreehandROITool.toolName, {\n *   interpolation: { interpolateOnAdd: false, interpolateOnEdit: true  },\n * });\n * ```\n *\n * Read more in the Docs section of the website.\n */\nclass PlanarFreehandROITool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  private commonData?: PlanarFreehandROICommonData;\n  isDrawing = false;\n  isEditingClosed = false;\n  isEditingOpen = false;\n\n  private activateDraw: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[]\n  ) => void;\n  private activateClosedContourEdit: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[]\n  ) => void;\n  private activateOpenContourEdit: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[]\n  ) => void;\n  private activateOpenContourEndEdit: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[],\n    handle: ToolHandle | null\n  ) => void;\n  private cancelDrawing: (element: HTMLDivElement) => void;\n  private cancelClosedContourEdit: (element: HTMLDivElement) => void;\n  private cancelOpenContourEdit: (element: HTMLDivElement) => void;\n\n  private renderContour: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n  private renderContourBeingDrawn: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n  private renderClosedContourBeingEdited: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n  private renderOpenContourBeingEdited: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        alwaysRenderOpenContourHandles: {\n          // When true, always render end points when you have an open contour, rather\n          // than just rendering a line.\n          enabled: false,\n          // When enabled, use this radius to draw the endpoints whilst not hovering.\n          radius: 2,\n        },\n        allowOpenContours: true,\n        // Proximity in canvas coordinates used to join contours.\n        closeContourProximity: 10,\n        // The proximity at which we fallback to the simplest grabbing logic for\n        // determining what index of the contour to start editing.\n        checkCanvasEditFallbackProximity: 6,\n        // The relative distance that points should be dropped along the polyline\n        // in units of the image pixel spacing. A value of 1 means that nodes must\n        // be placed no closed than the image spacing apart. A value of 4 means that 4\n        // nodes should be placed within the space of one image pixel size. A higher\n        // value gives more finese to the tool/smoother lines, but the value cannot\n        // be infinite as the lines become very computationally expensive to draw.\n        subPixelResolution: 4,\n        interpolation: {\n          interpolateOnAdd: false,\n          interpolateOnEdit: false, // used for edit only\n          knotsRatioPercentageOnAdd: 40,\n          knotsRatioPercentageOnEdit: 40,\n        },\n        calculateStats: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    // Register event loops and rendering logic, which are stored in different\n    // Files due to their complexity/size.\n    registerDrawLoop(this);\n    registerEditLoopCommon(this);\n    registerClosedContourEditLoop(this);\n    registerOpenContourEditLoop(this);\n    registerOpenContourEndEditLoop(this);\n    registerRenderMethods(this);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current image, creates\n   * a `PlanarFreehandROIAnnotation` and stores it in the annotationManager.\n   *\n   * @param evt - `EventTypes.NormalizedMouseEventType`\n   * @returns The `PlanarFreehandROIAnnotation` object.\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): PlanarFreehandROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation: PlanarFreehandROIAnnotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        toolName: this.getToolName(),\n      },\n      data: {\n        handles: {\n          points: [], // Handle points for open contours\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        polyline: [<Types.Point3>[...worldPos]], // Polyline coordinates\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    this.activateDraw(evt, annotation, viewportIdsToRender);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * Begins an edit of an open contour, when the mouse has selected a handle\n   * (end) of the open contour.\n   *\n   * @param evt - `EventTypes.MouseDownEventType`\n   * @param annotation - `PlanarFreehandROIAnnotation` annotation.\n   * @param handle - The handle index, 0 for the start and 1 for the end.\n   * @param interactionType - interaction type (mouse, touch)\n   */\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.activateOpenContourEndEdit(\n      evt,\n      annotation,\n      viewportIdsToRender,\n      handle\n    );\n  };\n\n  /**\n   * Edits the open or closed contour when the line is grabbed and dragged.\n   */\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    if (annotation.data.isOpenContour) {\n      this.activateOpenContourEdit(evt, annotation, viewportIdsToRender);\n    } else {\n      this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);\n    }\n  };\n\n  /**\n   * Returns if the canvas point is near the line of the given annotation in the\n   * provided element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - The `PlanarFreehandROIAnnotation`.\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: PlanarFreehandROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const points = annotation.data.polyline;\n\n    // NOTE: It is implemented this way so that we do not double calculate\n    // points when number crunching adjacent line segments.\n    let previousPoint = viewport.worldToCanvas(points[0]);\n\n    for (let i = 1; i < points.length; i++) {\n      const p1 = previousPoint;\n      const p2 = viewport.worldToCanvas(points[i]);\n\n      const distance = pointCanProjectOnLine(canvasCoords, p1, p2, proximity);\n\n      if (distance === true) {\n        return true;\n      }\n\n      previousPoint = p2;\n    }\n\n    if (annotation.data.isOpenContour) {\n      // Contour is open, don't check last point to first point.\n      return false;\n    }\n\n    // check last point to first point\n    const pStart = viewport.worldToCanvas(points[0]);\n    const pEnd = viewport.worldToCanvas(points[points.length - 1]);\n\n    const distance = pointCanProjectOnLine(\n      canvasCoords,\n      pStart,\n      pEnd,\n      proximity\n    );\n\n    if (distance === true) {\n      return true;\n    }\n\n    return false;\n  };\n\n  cancel = (element: HTMLDivElement): void => {\n    const isDrawing = this.isDrawing;\n    const isEditingOpen = this.isEditingOpen;\n    const isEditingClosed = this.isEditingClosed;\n\n    if (isDrawing) {\n      this.cancelDrawing(element);\n    } else if (isEditingOpen) {\n      this.cancelOpenContourEdit(element);\n    } else if (isEditingClosed) {\n      this.cancelClosedContourEdit(element);\n    }\n  };\n\n  /**\n   * Triggers an annotation modified event.\n   */\n  triggerAnnotationModified = (\n    annotation: PlanarFreehandROIAnnotation,\n    enabledElement: Types.IEnabledElement\n  ): void => {\n    const { viewportId, renderingEngineId } = enabledElement;\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n  };\n\n  /**\n   * Triggers an annotation completed event.\n   */\n  triggerAnnotationCompleted = (\n    annotation: PlanarFreehandROIAnnotation\n  ): void => {\n    const eventType = Events.ANNOTATION_COMPLETED;\n\n    const eventDetail: AnnotationCompletedEventDetail = {\n      annotation,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n  };\n\n  /**\n   * @override We need to override this method as the tool doesn't always have\n   * `handles`, which means `filterAnnotationsForDisplay` fails inside\n   * `filterAnnotationsWithinSlice`.\n   */\n  filterInteractableAnnotationsForElement(\n    element: HTMLDivElement,\n    annotations: Annotations\n  ): Annotations | undefined {\n    if (!annotations || !annotations.length) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    let annotationsToDisplay;\n\n    if (viewport instanceof StackViewport) {\n      // Use the default `filterAnnotationsForDisplay` utility, as the stack\n      // path doesn't require handles.\n      annotationsToDisplay = filterAnnotationsForDisplay(viewport, annotations);\n    } else if (viewport instanceof VolumeViewport) {\n      const camera = viewport.getCamera();\n\n      const { spacingInNormalDirection } =\n        csUtils.getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n\n      // Get data with same normal and within the same slice\n      annotationsToDisplay = this.filterAnnotationsWithinSlice(\n        annotations,\n        camera,\n        spacingInNormalDirection\n      );\n    } else {\n      throw new Error(`Viewport Type ${viewport.type} not supported`);\n    }\n\n    return annotationsToDisplay;\n  }\n\n  /**\n   * Altered version of the `utilities.planar.filterAnnotationsWithinSlice`,\n   * which uses the polyline position rather than the handle. As the polyline is\n   * always present.\n   */\n  private filterAnnotationsWithinSlice(\n    annotations: Annotations,\n    camera: Types.ICamera,\n    spacingInNormalDirection: number\n  ): Annotations {\n    const { viewPlaneNormal } = camera;\n\n    const annotationsWithParallelNormals = annotations.filter(\n      (td: Annotation) => {\n        const annotationViewPlaneNormal = td.metadata.viewPlaneNormal;\n\n        const isParallel =\n          Math.abs(vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >\n          PARALLEL_THRESHOLD;\n\n        return annotationViewPlaneNormal && isParallel;\n      }\n    );\n\n    // No in plane annotations.\n    if (!annotationsWithParallelNormals.length) {\n      return [];\n    }\n\n    // Annotation should be within the slice, which means that it should be between\n    // camera's focalPoint +/- spacingInNormalDirection.\n\n    const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n    const { focalPoint } = camera;\n\n    const annotationsWithinSlice = [];\n\n    for (const annotation of annotationsWithParallelNormals) {\n      const data = annotation.data;\n      const point = data.polyline[0];\n\n      if (!annotation.isVisible) {\n        continue;\n      }\n\n      // A = point\n      // B = focal point\n      // P = normal\n\n      // B-A dot P  => Distance in the view direction.\n      // this should be less than half the slice distance.\n\n      const dir = vec3.create();\n\n      vec3.sub(dir, focalPoint, point);\n\n      const dot = vec3.dot(dir, viewPlaneNormal);\n\n      if (Math.abs(dot) < halfSpacingInNormalDirection) {\n        annotationsWithinSlice.push(annotation);\n      }\n    }\n\n    return annotationsWithinSlice;\n  }\n\n  /**\n   * Draws the `PlanarFreehandROIAnnotation`s at each request animation frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, renderingEngine } = enabledElement;\n    const { element } = viewport;\n\n    const targetId = this.getTargetId(viewport);\n\n    let annotations = <PlanarFreehandROIAnnotation[]>(\n      getAnnotations(this.getToolName(), element)\n    );\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    ) as PlanarFreehandROIAnnotation[];\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const isDrawing = this.isDrawing;\n    const isEditingOpen = this.isEditingOpen;\n    const isEditingClosed = this.isEditingClosed;\n\n    if (!(isDrawing || isEditingOpen || isEditingClosed)) {\n      // No annotations are currently being modified, so we can just use the\n      // render contour method to render all of them\n      annotations.forEach((annotation) => {\n        this.renderContour(enabledElement, svgDrawingHelper, annotation);\n      });\n    } else {\n      // One of the annotations will need special rendering treatment, render all\n      // other annotations not being interacted with using the standard renderContour\n      // rendering path.\n      const activeAnnotationUID = this.commonData.annotation.annotationUID;\n\n      annotations.forEach((annotation) => {\n        if (annotation.annotationUID === activeAnnotationUID) {\n          if (isDrawing) {\n            this.renderContourBeingDrawn(\n              enabledElement,\n              svgDrawingHelper,\n              annotation\n            );\n          } else if (isEditingClosed) {\n            this.renderClosedContourBeingEdited(\n              enabledElement,\n              svgDrawingHelper,\n              annotation\n            );\n          } else if (isEditingOpen) {\n            this.renderOpenContourBeingEdited(\n              enabledElement,\n              svgDrawingHelper,\n              annotation\n            );\n          } else {\n            throw new Error(\n              `Unknown ${this.getToolName()} annotation rendering state`\n            );\n          }\n        } else {\n          this.renderContour(enabledElement, svgDrawingHelper, annotation);\n        }\n      });\n\n      // Todo: return boolean flag for each rendering route in the planar tool.\n      renderStatus = true;\n    }\n\n    if (!this.configuration.calculateStats) return;\n\n    annotations.forEach((annotation) => {\n      const activeAnnotationUID = this.commonData?.annotation.annotationUID;\n      if (\n        annotation.annotationUID === activeAnnotationUID &&\n        !this.commonData?.movingTextBox\n      )\n        return;\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      if (!this.commonData?.movingTextBox) {\n        const { data } = annotation;\n        if (\n          !data.cachedStats[targetId] ||\n          data.cachedStats[targetId].areaUnit === undefined\n        ) {\n          data.cachedStats[targetId] = {\n            Modality: null,\n            area: null,\n            max: null,\n            mean: null,\n            stdDev: null,\n            areaUnit: null,\n          };\n\n          this._calculateCachedStats(\n            annotation,\n            viewport,\n            renderingEngine,\n            enabledElement,\n            modalityUnitOptions\n          );\n        } else if (annotation.invalidated) {\n          this._throttledCalculateCachedStats(\n            annotation,\n            viewport,\n            renderingEngine,\n            enabledElement,\n            modalityUnitOptions\n          );\n        }\n      }\n\n      this._renderStats(annotation, viewport, enabledElement, svgDrawingHelper);\n    });\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats = (\n    annotation,\n    viewport,\n    renderingEngine,\n    enabledElement,\n    modalityUnitOptions: ModalityUnitOptions\n  ) => {\n    const data = annotation.data;\n    const { cachedStats, polyline: points } = data;\n\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData, metadata } = image;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n      const scale = getCalibratedScale(image);\n      const area =\n        polyline.calculateAreaOfPoints(canvasCoordinates) / scale / scale;\n\n      const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[0]);\n      worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n      worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n      worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n\n      let iMin = worldPosIndex[0];\n      let iMax = worldPosIndex[0];\n\n      let jMin = worldPosIndex[1];\n      let jMax = worldPosIndex[1];\n\n      let kMin = worldPosIndex[2];\n      let kMax = worldPosIndex[2];\n\n      for (let j = 1; j < points.length; j++) {\n        const worldPosIndex = csUtils.transformWorldToIndex(\n          imageData,\n          points[j]\n        );\n        worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n        worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n        worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n        iMin = Math.min(iMin, worldPosIndex[0]);\n        iMax = Math.max(iMax, worldPosIndex[0]);\n\n        jMin = Math.min(jMin, worldPosIndex[1]);\n        jMax = Math.max(jMax, worldPosIndex[1]);\n\n        kMin = Math.min(kMin, worldPosIndex[2]);\n        kMax = Math.max(kMax, worldPosIndex[2]);\n      }\n\n      // Expand bounding box\n      const iDelta = 0.01 * (iMax - iMin);\n      const jDelta = 0.01 * (jMax - jMin);\n      const kDelta = 0.01 * (kMax - kMin);\n\n      iMin = Math.floor(iMin - iDelta);\n      iMax = Math.ceil(iMax + iDelta);\n      jMin = Math.floor(jMin - jDelta);\n      jMax = Math.ceil(jMax + jDelta);\n      kMin = Math.floor(kMin - kDelta);\n      kMax = Math.ceil(kMax + kDelta);\n\n      const boundsIJK = [\n        [iMin, iMax],\n        [jMin, jMax],\n        [kMin, kMax],\n      ] as [Types.Point2, Types.Point2, Types.Point2];\n\n      const worldPosEnd = imageData.indexToWorld([iMax, jMax, kMax]);\n      const canvasPosEnd = viewport.worldToCanvas(worldPosEnd);\n\n      let count = 0;\n      let sum = 0;\n      let sumSquares = 0;\n      let max = -Infinity;\n\n      const statCalculator = ({ value: newValue }) => {\n        if (newValue > max) {\n          max = newValue;\n        }\n\n        sum += newValue;\n        sumSquares += newValue ** 2;\n        count += 1;\n      };\n\n      let curRow = 0;\n      let intersections = [];\n      let intersectionCounter = 0;\n      pointInShapeCallback(\n        imageData,\n        (pointLPS, pointIJK) => {\n          let result = true;\n          const point = viewport.worldToCanvas(pointLPS);\n          if (point[1] != curRow) {\n            intersectionCounter = 0;\n            curRow = point[1];\n            intersections = getIntersectionCoordinatesWithPolyline(\n              canvasCoordinates,\n              point,\n              [canvasPosEnd[0], point[1]]\n            );\n            intersections.sort(\n              (function (index) {\n                return function (a, b) {\n                  return a[index] === b[index]\n                    ? 0\n                    : a[index] < b[index]\n                    ? -1\n                    : 1;\n                };\n              })(0)\n            );\n          }\n          if (intersections.length && point[0] > intersections[0][0]) {\n            intersections.shift();\n            intersectionCounter++;\n          }\n          if (intersectionCounter % 2 === 0) {\n            result = false;\n          }\n          return result;\n        },\n        statCalculator,\n        boundsIJK\n      );\n\n      const mean = sum / count;\n\n      // https://www.strchr.com/standard_deviation_in_one_pass?allcomments=1\n      let stdDev = sumSquares / count - mean ** 2;\n      stdDev = Math.sqrt(stdDev);\n\n      const modalityUnit = getModalityUnit(\n        metadata.Modality,\n        annotation.metadata.referencedImageId,\n        modalityUnitOptions\n      );\n\n      cachedStats[targetId] = {\n        Modality: metadata.Modality,\n        area,\n        mean,\n        max,\n        stdDev,\n        areaUnit: getCalibratedAreaUnits(null, image),\n        modalityUnit,\n      };\n    }\n\n    this.triggerAnnotationModified(annotation, enabledElement);\n\n    annotation.invalidated = false;\n\n    return cachedStats;\n  };\n\n  _renderStats = (annotation, viewport, enabledElement, svgDrawingHelper) => {\n    const data = annotation.data;\n    const targetId = this.getTargetId(viewport);\n\n    const textLines = this._getTextLines(data, targetId);\n    if (!textLines || textLines.length === 0) return;\n\n    const canvasCoordinates = data.polyline.map((p) =>\n      viewport.worldToCanvas(p)\n    );\n    if (!data.handles.textBox.hasMoved) {\n      const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n      data.handles.textBox.worldPosition =\n        viewport.canvasToWorld(canvasTextBoxCoords);\n    }\n\n    const textBoxPosition = viewport.worldToCanvas(\n      data.handles.textBox.worldPosition\n    );\n\n    const styleSpecifier: AnnotationStyle.StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const textBoxUID = '1';\n    const boundingBox = drawLinkedTextBox(\n      svgDrawingHelper,\n      annotation.annotationUID ?? '',\n      textBoxUID,\n      textLines,\n      textBoxPosition,\n      canvasCoordinates,\n      {},\n      this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n    );\n\n    const { x: left, y: top, width, height } = boundingBox;\n\n    data.handles.textBox.worldBoundingBox = {\n      topLeft: viewport.canvasToWorld([left, top]),\n      topRight: viewport.canvasToWorld([left + width, top]),\n      bottomLeft: viewport.canvasToWorld([left, top + height]),\n      bottomRight: viewport.canvasToWorld([left + width, top + height]),\n    };\n  };\n\n  _getTextLines = (data, targetId: string): string[] => {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit } =\n      cachedVolumeStats;\n\n    const textLines: string[] = [];\n\n    if (area) {\n      const areaLine = isEmptyArea\n        ? `Area: Oblique not supported`\n        : `Area: ${roundNumber(area)} ${areaUnit}`;\n      textLines.push(areaLine);\n    }\n\n    if (mean) {\n      textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n    }\n\n    if (max) {\n      textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n    }\n\n    if (stdDev) {\n      textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n    }\n\n    return textLines;\n  };\n}\n\nPlanarFreehandROITool.toolName = 'PlanarFreehandROI';\nexport default PlanarFreehandROITool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawArrow as drawArrowSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { ArrowAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass ArrowAnnotateTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        getTextCallback,\n        changeTextCallback,\n        preventHandleOutsideImage: false,\n        arrowFirst: true,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): ArrowAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const { arrowFirst } = this.configuration;\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        text: '',\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          arrowFirst,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: ArrowAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: ArrowAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: ArrowAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewportId, renderingEngineId, renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    if (newAnnotation) {\n      this.configuration.getTextCallback((text) => {\n        if (!text) {\n          removeAnnotation(annotation.annotationUID);\n          triggerAnnotationRenderForViewportIds(\n            renderingEngine,\n            viewportIdsToRender\n          );\n          this.editData = null;\n          this.isDrawing = false;\n          return;\n        }\n        annotation.data.text = text;\n\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n\n        triggerAnnotationRenderForViewportIds(\n          renderingEngine,\n          viewportIdsToRender\n        );\n      });\n    } else {\n      const eventType = Events.ANNOTATION_MODIFIED;\n\n      const eventDetail: AnnotationModifiedEventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  touchTapCallback = (evt: EventTypes.TouchTapEventType) => {\n    if (evt.detail.taps == 2) {\n      this.doubleClickCallback(evt);\n    }\n  };\n\n  doubleClickCallback = (evt: EventTypes.TouchTapEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return;\n    }\n\n    const clickedAnnotation = annotations.find((annotation) =>\n      this.isPointNearTool(\n        element,\n        annotation as ArrowAnnotation,\n        eventDetail.currentPoints.canvas,\n        6 // Todo: get from configuration\n      )\n    );\n\n    if (!clickedAnnotation) {\n      return;\n    }\n\n    const annotation = clickedAnnotation as ArrowAnnotation;\n\n    this.configuration.changeTextCallback(\n      clickedAnnotation,\n      evt.detail,\n      this._doneChangingTextCallback.bind(this, element, annotation)\n    );\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    // This double click was handled and the dialogue was displayed.\n    // No need for any other listener to handle it too - stopImmediatePropagation\n    // helps ensure this primarily so that no other listeners on the target element\n    // get called.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  };\n\n  _doneChangingTextCallback(element, annotation, updatedText): void {\n    annotation.data.text = updatedText;\n\n    const { renderingEngine, viewportId, renderingEngineId } =\n      getEnabledElement(element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    triggerEvent(eventTarget, eventType, {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    });\n  }\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ArrowAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles, text } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineWidth,\n          }\n        );\n      }\n\n      const arrowUID = '1';\n      if (this.configuration.arrowFirst) {\n        drawArrowSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arrowUID,\n          canvasCoordinates[1],\n          canvasCoordinates[0],\n          {\n            color,\n            width: lineWidth,\n            lineDash: lineDash,\n          }\n        );\n      } else {\n        drawArrowSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arrowUID,\n          canvasCoordinates[0],\n          canvasCoordinates[1],\n          {\n            color,\n            width: lineWidth,\n            lineDash: lineDash,\n          }\n        );\n      }\n\n      renderStatus = true;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (!text) {\n        continue;\n      }\n\n      // Need to update to sync w/ annotation while unlinked/not moved\n      if (!data.handles.textBox.hasMoved) {\n        // linked to the point that doesn't have the arrowhead by default\n        const canvasTextBoxCoords = canvasCoordinates[1];\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        [text],\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _isInsideVolume(index1, index2, dimensions) {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  }\n}\n\nfunction getTextCallback(doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nArrowAnnotateTool.toolName = 'ArrowAnnotate';\nexport default ArrowAnnotateTool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport roundNumber from '../../utilities/roundNumber';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { AngleAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass AngleTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  angleStartedNotYetCompleted: boolean;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.InteractionEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): AngleAnnotation => {\n    if (this.angleStartedNotYetCompleted) {\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: AngleAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2, point3] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line1 = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line1.start.x, line1.start.y],\n      [line1.end.x, line1.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) return true;\n    if (!point3) return false;\n\n    const canvasPoint3 = viewport.worldToCanvas(point3);\n\n    const line2 = {\n      start: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n      end: {\n        x: canvasPoint3[0],\n        y: canvasPoint3[1],\n      },\n    };\n\n    const distanceToPoint2 = lineSegment.distanceToPoint(\n      [line2.start.x, line2.start.y],\n      [line2.end.x, line2.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint2 <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: AngleAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: AngleAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n\n    const { data } = annotation;\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    // If preventing new measurement means we are in the middle of an existing measurement\n    // we shouldn't deactivate modify or draw\n    if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {\n      // adds the last point to the measurement\n      this.editData.handleIndex = 2;\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      this.angleStartedNotYetCompleted = false;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as AngleAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n      if (!data.cachedStats[targetId]) {\n        data.cachedStats[targetId] = {\n          angle: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      let lineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      renderStatus = true;\n\n      // Don't add textBox until annotation has 3 anchor points (actually 4 because of the center point)\n      if (canvasCoordinates.length !== 3) {\n        return renderStatus;\n      }\n\n      lineUID = '2';\n\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[1],\n        canvasCoordinates[2],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      if (!data.cachedStats[targetId]?.angle) {\n        continue;\n      }\n\n      const textLines = this._getTextLines(data, targetId);\n\n      if (!data.handles.textBox.hasMoved) {\n        // linked to the vertex by default\n        const canvasTextBoxCoords = canvasCoordinates[1];\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  // text line for the current active angle annotation\n  _getTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n\n    if (angle === undefined) {\n      return;\n    }\n\n    const textLines = [`${roundNumber(angle)} ${String.fromCharCode(176)}`];\n\n    return textLines;\n  }\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    // Until we have all three anchors bail out\n    if (data.handles.points.length !== 3) {\n      return;\n    }\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const worldPos3 = data.handles.points[2];\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n      const angle = angleBetweenLines(\n        [worldPos1, worldPos2],\n        [worldPos2, worldPos3]\n      );\n\n      cachedStats[targetId] = {\n        angle,\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n}\n\nAngleTool.toolName = 'Angle';\nexport default AngleTool;\n","import { Types } from '@cornerstonejs/core';\n\n/**\n * Return the midpoint (think average) of all the provided points.\n */\nconst midPoint = (\n  ...args: (Types.Point2 | Types.Point3)[]\n): Types.Point2 | Types.Point3 => {\n  const ret =\n    args[0].length === 2 ? <Types.Point2>[0, 0] : <Types.Point3>[0, 0, 0];\n  const len = args.length;\n  for (const arg of args) {\n    ret[0] += arg[0] / len;\n    ret[1] += arg[1] / len;\n    if (ret.length === 3) ret[2] += arg[2] / len;\n  }\n  return ret;\n};\n\nconst midPoint2 = midPoint as (...args: Types.Point2[]) => Types.Point2;\n\nexport default midPoint;\n\nexport { midPoint2 };\n","import { vec3 } from 'gl-matrix';\nimport { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { midPoint2 } from '../../utilities/math/midPoint';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { AngleAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass CobbAngleTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  angleStartedNotYetCompleted: boolean;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.MouseDownActivateEventType\n  ): AngleAnnotation => {\n    if (this.angleStartedNotYetCompleted) {\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: AngleAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2, point3, point4] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n    const canvasPoint3 = viewport.worldToCanvas(point3);\n    const canvasPoint4 = viewport.worldToCanvas(point4);\n\n    const line1 = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const line2 = {\n      start: {\n        x: canvasPoint3[0],\n        y: canvasPoint3[1],\n      },\n      end: {\n        x: canvasPoint4[0],\n        y: canvasPoint4[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line1.start.x, line1.start.y],\n      [line1.end.x, line1.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    const distanceToPoint2 = lineSegment.distanceToPoint(\n      [line2.start.x, line2.start.y],\n      [line2.end.x, line2.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.MouseDownEventType,\n    annotation: AngleAnnotation,\n    interactionType: InteractionTypes\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.MouseDownEventType,\n    annotation: AngleAnnotation,\n    handle: ToolHandle,\n    interactionType = 'mouse'\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _mouseUpCallback = (\n    evt: EventTypes.MouseUpEventType | EventTypes.MouseClickEventType\n  ) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n\n    const { data } = annotation;\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    // If preventing new measurement means we are in the middle of an existing measurement\n    // we shouldn't deactivate modify or draw\n    if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {\n      resetElementCursor(element);\n\n      // adds the first point of the second line\n      this.editData.handleIndex = data.handles.points.length;\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  /**\n   * Handles the mouse down for all points that follow the very first mouse down.\n   * The very first mouse down is handled by addAnnotation.\n   * This method ensures that the state of the tool is correct for the drawing of the second line segment.\n   * In particular it ensures that the second segment can be created via a mouse down and drag.\n   */\n  _mouseDownCallback = (\n    evt: EventTypes.MouseUpEventType | EventTypes.MouseClickEventType\n  ) => {\n    const { annotation, handleIndex } = this.editData;\n    const eventDetail = evt.detail;\n    const { element, currentPoints } = eventDetail;\n    const worldPos = currentPoints.world;\n    const { data } = annotation;\n\n    if (handleIndex === 1) {\n      // This is the mouse down for the second point of the first segment.\n      // The mouse up takes care of adding the first point of the second segment.\n      data.handles.points[1] = worldPos;\n      this.editData.hasMoved =\n        data.handles.points[1][0] !== data.handles.points[0][0] ||\n        data.handles.points[1][1] !== data.handles.points[0][0];\n      return;\n    }\n\n    if (handleIndex === 3) {\n      // This is the mouse down for the second point of the second segment (i.e. the last point)\n      data.handles.points[3] = worldPos;\n      this.editData.hasMoved =\n        data.handles.points[3][0] !== data.handles.points[2][0] ||\n        data.handles.points[3][1] !== data.handles.points[2][0];\n\n      this.angleStartedNotYetCompleted = false;\n      return;\n    }\n\n    // This is the first mouse down of the first point of the second line segment.\n    // It is as if we have not moved yet because Cobb Angle has two, disjoint sections, each with its own move.\n    this.editData.hasMoved = false;\n    hideElementCursor(element);\n\n    // Add the last segment points for the subsequent drag/mouse move.\n    data.handles.points[2] = data.handles.points[3] = worldPos;\n    this.editData.handleIndex = data.handles.points.length - 1;\n  };\n\n  _mouseDragCallback = (\n    evt: EventTypes.MouseDragEventType | EventTypes.MouseMoveEventType\n  ) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      this.angleStartedNotYetCompleted = false;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n\n    // element.addEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n\n    // element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DOWN,\n      this._mouseDownCallback as EventListener\n    );\n\n    // element.addEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DOWN,\n      this._mouseDownCallback as EventListener\n    );\n\n    // element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as AngleAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n      if (!data.cachedStats[targetId]) {\n        data.cachedStats[targetId] = {\n          angle: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      let lineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      renderStatus = true;\n\n      // Don't add textBox until annotation has 4 anchor points\n      if (canvasCoordinates.length < 4) {\n        return renderStatus;\n      }\n\n      lineUID = '2';\n\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[2],\n        canvasCoordinates[3],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      lineUID = '3';\n      const mid1 = midPoint2(canvasCoordinates[0], canvasCoordinates[1]);\n      const mid2 = midPoint2(canvasCoordinates[2], canvasCoordinates[3]);\n      drawLineSvg(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {\n        color,\n        lineWidth: '1',\n        lineDash: '1,4',\n      });\n\n      if (!data.cachedStats[targetId]?.angle) {\n        continue;\n      }\n\n      const textLines = this._getTextLines(data, targetId);\n\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  // text line for the current active angle annotation\n  _getTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n\n    if (angle === undefined) {\n      return;\n    }\n\n    const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];\n\n    return textLines;\n  }\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    // Until we have all four anchors bail out\n    if (data.handles.points.length !== 4) {\n      return;\n    }\n\n    const seg1: [Types.Point3, Types.Point3] = [null, null];\n    const seg2: [Types.Point3, Types.Point3] = [null, null];\n    let minDist = Number.MAX_VALUE;\n\n    // Order the endpoints of each line segment such that seg1[1] and seg2[0]\n    // are the closest (Euclidean distance-wise) to each other. Thus\n    // the angle formed between the vectors seg1[1]->seg1[0] and seg2[0]->seg[1]\n    // is calculated.\n    // The assumption here is that the Cobb angle line segments are drawn\n    // such that the segments intersect nearest the segment endpoints\n    // that are closest AND those closest endpoints are the tails of the\n    // vectors used to calculate the angle between the vectors/line segments.\n    for (let i = 0; i < 2; i += 1) {\n      for (let j = 2; j < 4; j += 1) {\n        const dist = vec3.distance(\n          data.handles.points[i],\n          data.handles.points[j]\n        );\n        if (dist < minDist) {\n          minDist = dist;\n          seg1[1] = data.handles.points[i];\n          seg1[0] = data.handles.points[(i + 1) % 2];\n          seg2[0] = data.handles.points[j];\n          seg2[1] = data.handles.points[2 + ((j - 1) % 2)];\n        }\n      }\n    }\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n      const angle = angleBetweenLines(seg1, seg2);\n\n      cachedStats[targetId] = {\n        angle,\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n}\n\nCobbAngleTool.toolName = 'CobbAngle';\nexport default CobbAngleTool;\n","import {\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  utilities,\n  getEnabledElementByIds,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { drawLine } from '../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport {\n  EventTypes,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n  Annotation,\n  Annotations,\n} from '../types';\nimport { ReferenceCursor } from '../types/ToolSpecificAnnotationTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport { vec3 } from 'gl-matrix';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport {\n  hideElementCursor,\n  resetElementCursor,\n} from '../cursors/elementCursor';\nimport { getToolGroup } from '../store/ToolGroupManager';\n\n/**\n * ReferenceCursors is a tool that will show your cursors position in all other elements in the toolGroup if they have a matching FrameOfReference relative to its position in world space.\n * Also when positionSync is enabled, it will try to sync viewports so that the cursor can be displayed in the correct position in all viewports.\n *\n * Configuration:\n * - positionSync: boolean, if true, it will try to sync viewports so that the cursor can be displayed in the correct position in all viewports.\n * - disableCursor: boolean, if true, it will hide the cursor in all viewports. You need to disable and reactivate the tool for this to apply.\n * - displayThreshold: number, if the distance of the cursor in a viewport is bigger than this threshold the cursor will not be displayed.\n *\n * Only uses Active and Disabled state\n */\nclass ReferenceCursors extends AnnotationDisplayTool {\n  static toolName;\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  isDrawing = false;\n  isHandleOutsideImage = false;\n  _elementWithCursor: null | HTMLDivElement = null;\n  _currentCursorWorldPosition: null | Types.Point3 = null;\n  _currentCanvasPosition: null | Types.Point2 = null;\n  //need to keep track if this was enabled when tool was enabled because we need to know if we should reset cursors\n  _disableCursorEnabled = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        displayThreshold: 5,\n        positionSync: true,\n        disableCursor: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this._disableCursorEnabled = this.configuration.disableCursor;\n  }\n\n  /**\n   * Overwritten mouseMoveCallback since we want to keep track of the current mouse position and redraw on mouseMove\n   * @virtual Event handler for Cornerstone MOUSE_MOVE event.\n   *\n   *\n   * @param evt - The normalized mouse event\n   * @param filteredAnnotations - The annotations to check for hover interactions\n   * @returns True if the annotation needs to be re-drawn by the annotationRenderingEngine.\n   */\n  mouseMoveCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const { detail } = evt;\n    const { element, currentPoints } = detail;\n\n    //save current positions and current element the curser is hovering over\n    this._currentCursorWorldPosition = currentPoints.world;\n    this._currentCanvasPosition = currentPoints.canvas;\n    this._elementWithCursor = element;\n\n    const annotation = this.getActiveAnnotation(element);\n    if (annotation === null) {\n      this.createInitialAnnotation(currentPoints.world, element);\n      return false;\n    }\n    this.updateAnnotationPosition(element, annotation);\n    return false;\n  };\n\n  onSetToolActive(): void {\n    this._disableCursorEnabled = this.configuration.disableCursor;\n    if (!this._disableCursorEnabled) return;\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n    if (!viewportIds) return;\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n\n    enabledElements.forEach((element) => {\n      if (element) hideElementCursor(element.viewport.element);\n    });\n  }\n  onSetToolDisabled(): void {\n    if (!this._disableCursorEnabled) return;\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n    if (!viewportIds) return;\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n    enabledElements.forEach((element) => {\n      if (element) resetElementCursor(element.viewport.element);\n    });\n  }\n\n  createInitialAnnotation = (\n    worldPos: Types.Point3,\n    element: HTMLDivElement\n  ): void => {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) throw new Error('No enabled element found');\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    if (!viewPlaneNormal || !viewUp) throw new Error('Camera not found');\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          points: [[...worldPos]] as [Types.Point3],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n      },\n    };\n\n    const annotations = getAnnotations(this.getToolName(), element);\n\n    if (annotations.length > 0) return null;\n    const annotationId = addAnnotation(annotation, element);\n\n    if (annotationId === null) return;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  getActiveAnnotation(element: HTMLDivElement): null | Annotation {\n    const annotations = getAnnotations(this.getToolName(), element);\n    if (!annotations.length) {\n      return null;\n    }\n    const targetAnnotation = annotations[0];\n    return targetAnnotation;\n  }\n\n  /**\n   * updates the position of the annotation to match the currently set world position\n   */\n  updateAnnotationPosition(\n    element: HTMLDivElement,\n    annotation: Annotation\n  ): void {\n    const worldPos = this._currentCursorWorldPosition;\n    if (!worldPos) return;\n    if (!annotation.data?.handles?.points) return;\n    annotation.data.handles.points = [[...worldPos]];\n    annotation.invalidated = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) return;\n    const { renderingEngine } = enabledElement;\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  }\n\n  //checks if we need to update the annotation position due to camera changes\n  onCameraModified = (evt: any): void => {\n    const eventDetail = evt.detail;\n    const { element, previousCamera, camera } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const viewport = enabledElement.viewport as\n      | Types.IVolumeViewport\n      | Types.IStackViewport;\n\n    //only react to changes for element with cursor, otherwise would cause infinite loop\n    if (element !== this._elementWithCursor) return;\n    //check if camera moved along its normal\n    const oldFocalPoint = previousCamera.focalPoint;\n    const cameraNormal = camera.viewPlaneNormal;\n    const newFocalPoint = camera.focalPoint;\n\n    const deltaCameraFocalPoint: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);\n    //check if focal point changed\n    if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) return;\n    //if nomrmal is perpendicular to focal point change, then we are not moving along the normal\n    const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);\n    //dot product is 0 -> perpendicular\n    if (Math.abs(dotProduct) < 1e-2) return;\n\n    //need to update the position of the annotation since camera changed\n    if (!this._currentCanvasPosition) return;\n\n    const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);\n    this._currentCursorWorldPosition = newWorldPos;\n    this.updateAnnotationPosition(element, this.getActiveAnnotation(element));\n  };\n\n  //display annotation if current viewing plane has a max distance of \"displayThreshold\" from the annotation\n  filterInteractableAnnotationsForElement(\n    element: HTMLDivElement,\n    annotations: Annotations\n  ): Annotations {\n    //calculate distance of current viewport to annotation\n    if (!(annotations instanceof Array) || annotations.length === 0) return [];\n    const annotation = annotations[0];\n    const viewport = getEnabledElement(element)?.viewport;\n    if (!viewport) return [];\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, focalPoint } = camera;\n    if (!viewPlaneNormal || !focalPoint) return [];\n    const points = annotation.data?.handles?.points;\n    if (!(points instanceof Array) || points.length !== 1) return [];\n    const worldPos = points[0];\n    const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n    const distance = utilities.planar.planeDistanceToPoint(plane, worldPos);\n    return distance < this.configuration.displayThreshold ? [annotation] : [];\n  }\n\n  /**\n   * Draws the cursor representation on the enabledElement\n   * Checks if a stack change has happened and updates annotation in that case\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, FrameOfReferenceUID } = enabledElement;\n\n    const isElementWithCursor = this._elementWithCursor === viewport.element;\n\n    //update stack position if position sync is enabled\n    if (this.configuration.positionSync && !isElementWithCursor) {\n      this.updateViewportImage(viewport);\n    }\n\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    //the viewport change from updateStackPosition might not be applied yet, so sometimes the annotation might not be immediately visible\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    ) as Annotations;\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ReferenceCursor;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points } = handles;\n\n      if (!annotationUID) return renderStatus;\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidthBase = parseFloat(\n        this.getStyle('lineWidth', styleSpecifier, annotation) as string\n      );\n\n      const lineWidth =\n        typeof lineWidthBase === 'number' && isElementWithCursor\n          ? lineWidthBase\n          : lineWidthBase;\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      if (points[0].some((e) => isNaN(e))) return renderStatus;\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2];\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      const crosshairUIDs = {\n        upper: 'upper',\n        right: 'right',\n        lower: 'lower',\n        left: 'left',\n      };\n      const [x, y] = canvasCoordinates[0];\n      const centerSpace = isElementWithCursor ? 20 : 7;\n      const lineLength = isElementWithCursor ? 5 : 7;\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.upper,\n        [x, y - (centerSpace / 2 + lineLength)],\n        [x, y - centerSpace / 2],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.lower,\n        [x, y + (centerSpace / 2 + lineLength)],\n        [x, y + centerSpace / 2],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.right,\n        [x + (centerSpace / 2 + lineLength), y],\n        [x + centerSpace / 2, y],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.left,\n        [x - (centerSpace / 2 + lineLength), y],\n        [x - centerSpace / 2, y],\n        { color, lineDash, lineWidth }\n      );\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n\n  updateViewportImage(\n    viewport: Types.IStackViewport | Types.IVolumeViewport\n  ): void {\n    const currentMousePosition = this._currentCursorWorldPosition;\n\n    if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e)))\n      return;\n\n    if (viewport instanceof StackViewport) {\n      const closestIndex = utilities.getClosestStackImageIndexForPoint(\n        currentMousePosition,\n        viewport\n      );\n\n      if (closestIndex === null) return;\n      if (closestIndex !== viewport.getCurrentImageIdIndex())\n        viewport.setImageIdIndex(closestIndex);\n    } else if (viewport instanceof VolumeViewport) {\n      const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n      if (!focalPoint || !viewPlaneNormal) return;\n      const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n      const currentDistance = utilities.planar.planeDistanceToPoint(\n        plane,\n        currentMousePosition,\n        true\n      );\n\n      if (Math.abs(currentDistance) < 0.5) return;\n      const normalizedViewPlane = vec3.normalize(\n        vec3.create(),\n        vec3.fromValues(...viewPlaneNormal)\n      );\n      const scaledPlaneNormal = vec3.scale(\n        vec3.create(),\n        normalizedViewPlane,\n        currentDistance\n      );\n      const newFocalPoint = vec3.add(\n        vec3.create(),\n        vec3.fromValues(...focalPoint),\n        scaledPlaneNormal\n      ) as Types.Point3;\n      //TODO: make check if new focal point is within bounds of volume\n      const isInBounds = true;\n      if (isInBounds) {\n        viewport.setCamera({ focalPoint: newFocalPoint });\n        const renderingEngine = viewport.getRenderingEngine();\n        if (renderingEngine) renderingEngine.renderViewport(viewport.id);\n      }\n    }\n  }\n}\n\nReferenceCursors.toolName = 'ReferenceCursors';\nexport default ReferenceCursors;\n","import AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { vec3 } from 'gl-matrix';\nimport {\n  getEnabledElementByIds,\n  getRenderingEngines,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { ScaleOverlayAnnotation } from '../types/ToolSpecificAnnotationTypes';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport {\n  drawLine as drawLineSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../drawingSvg';\nimport {\n  EventTypes,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../types';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport { getToolGroup } from '../store/ToolGroupManager';\n\nconst SCALEOVERLAYTOOL_ID = 'scaleoverlay-viewport';\nconst viewportsWithAnnotations = [];\n\n/**\n * @public\n * @class ScaleOverlayTool\n * @memberof Tools\n *\n * @classdesc Tool for displaying a scale overlay on the image.\n * @extends Tools.Base.BaseTool\n */\nclass ScaleOverlayTool extends AnnotationDisplayTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    renderingEngine: any;\n    viewport: any;\n    annotation: ScaleOverlayAnnotation;\n  } | null = {} as any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {\n        viewportId: '',\n        scaleLocation: 'bottom',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  _init = (): void => {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n\n    if (!renderingEngine) {\n      return;\n    }\n\n    // get viewports with tool enabled\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    if (!viewportIds) return;\n\n    // get enabled elements\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n\n    let { viewport } = enabledElements[0];\n    const { FrameOfReferenceUID } = enabledElements[0];\n\n    // onCameraModified, configuration.viewportId is set to the active\n    // viewport Id, here we are setting the viewport variable to the\n    // viewport with the matching Id\n    if (this.configuration.viewportId) {\n      enabledElements.forEach((element) => {\n        if (element.viewport.id == this.configuration.viewportId) {\n          viewport = element.viewport;\n        }\n      });\n    }\n\n    if (!viewport) {\n      return;\n    }\n\n    const { viewUp, viewPlaneNormal } = viewport.getCamera();\n\n    const viewportCanvasCornersInWorld =\n      csUtils.getViewportImageCornersInWorld(viewport);\n\n    let annotation = this.editData.annotation;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n\n    // if annotations have been created, get the annotation for the\n    // current viewport Id\n    if (annotations.length) {\n      annotation = annotations.filter(\n        (thisAnnotation) => thisAnnotation.data.viewportId == viewport.id\n      )[0] as ScaleOverlayAnnotation;\n    }\n\n    // viewportsWithAnnotations stores which viewports have an annotation,\n    // if the viewport does not have an annotation, create a new one\n    if (!viewportsWithAnnotations.includes(viewport.id)) {\n      const newAnnotation: ScaleOverlayAnnotation = {\n        metadata: {\n          toolName: this.getToolName(),\n          viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n          viewUp: <Types.Point3>[...viewUp],\n          FrameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          handles: {\n            points: viewportCanvasCornersInWorld,\n          },\n          viewportId: viewport.id,\n        },\n      };\n\n      viewportsWithAnnotations.push(viewport.id);\n\n      addAnnotation(newAnnotation, viewport.element);\n      annotation = newAnnotation;\n    } else if (this.editData.annotation.data.viewportId == viewport.id) {\n      this.editData.annotation.data.handles.points =\n        viewportCanvasCornersInWorld;\n      this.editData.annotation.data.viewportId = viewport.id;\n    }\n\n    this.editData = {\n      viewport,\n      renderingEngine,\n      annotation,\n    };\n  };\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onCameraModified = (evt: Types.EventTypes.CameraModifiedEvent): void => {\n    // If the camera is modified, we need to update the viewport\n    // that the camera was modified on\n    this.configuration.viewportId = evt.detail.viewportId;\n    this._init();\n  };\n\n  /**\n   * Used to draw the scale annotation in each request animation\n   * frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   * @returns\n   */\n\n  renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ) {\n    if (!this.editData.viewport) {\n      return;\n    }\n    const location = this.configuration.scaleLocation;\n    const { viewport } = enabledElement;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n    const annotation = annotations.filter(\n      (thisAnnotation) => thisAnnotation.data.viewportId == viewport.id\n    )[0];\n    const canvas = enabledElement.viewport.canvas;\n\n    const renderStatus = false;\n\n    if (!viewport) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const canvasSize = {\n      width: canvas.width,\n      height: canvas.height,\n    };\n\n    const topLeft = annotation.data.handles.points[0];\n    const topRight = annotation.data.handles.points[1];\n    const bottomLeft = annotation.data.handles.points[2];\n    const bottomRight = annotation.data.handles.points[3];\n\n    const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n\n    const worldWidthViewport = vec3.distance(bottomLeft, bottomRight);\n    const worldHeightViewport = vec3.distance(topLeft, bottomLeft);\n\n    // hscaleBounds and vscaleBounds compute the max bound for scales on the image\n    const hscaleBounds = this.computeScaleBounds(\n      canvasSize,\n      0.05,\n      0.05,\n      location\n    );\n\n    const vscaleBounds = this.computeScaleBounds(\n      canvasSize,\n      0.05,\n      0.05,\n      location\n    );\n\n    // Computes which scale size to use, ex: 100mm, 50mm\n    const scaleSize = this.computeScaleSize(\n      worldWidthViewport,\n      worldHeightViewport,\n      location\n    );\n\n    // Applies the scale with the predetermined size to the image in\n    // world coordinates, then converts them to canvas coordinates\n    const canvasCoordinates = this.computeWorldScaleCoordinates(\n      scaleSize,\n      location,\n      pointSet1\n    ).map((world) => viewport.worldToCanvas(world));\n\n    // Uses the bounds and canvas size to center the scale\n    // based on the location\n    const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(\n      canvasSize,\n      canvasCoordinates,\n      vscaleBounds,\n      hscaleBounds,\n      location\n    );\n\n    // Computes the end scale ticks coordinates\n    const scaleTicks = this.computeEndScaleTicks(\n      scaleCanvasCoordinates,\n      location\n    );\n\n    const { annotationUID } = annotation;\n\n    styleSpecifier.annotationUID = annotationUID;\n    const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n    const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n    const color = this.getStyle('color', styleSpecifier, annotation);\n    const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n    const scaleId = `${annotationUID}-scaleline`;\n    const scaleLineUID = '1';\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      scaleLineUID,\n      scaleCanvasCoordinates[0],\n      scaleCanvasCoordinates[1],\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      scaleId\n    );\n    const leftTickId = `${annotationUID}-left`;\n    const leftTickUID = '2';\n\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      leftTickUID,\n      scaleTicks.endTick1[0] as Types.Point2,\n      scaleTicks.endTick1[1] as Types.Point2,\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      leftTickId\n    );\n    const rightTickId = `${annotationUID}-right`;\n    const rightTickUID = '3';\n\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      rightTickUID,\n      scaleTicks.endTick2[0] as Types.Point2,\n      scaleTicks.endTick2[1] as Types.Point2,\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      rightTickId\n    );\n\n    const locationTextOffest = {\n      bottom: [-10, -42],\n      top: [-12, -35],\n      left: [-40, -20],\n      right: [-50, -20],\n    };\n\n    const textCanvasCoordinates = [\n      scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],\n      scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],\n    ];\n    const textBoxLines = this._getTextLines(scaleSize);\n\n    const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(\n      scaleSize,\n      location,\n      annotationUID,\n      scaleTicks.endTick1,\n      scaleTicks.endTick2\n    );\n\n    // draws inner ticks for scale\n    for (let i = 0; i < tickUIDs.length; i++) {\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        tickUIDs[i],\n        tickCoordinates[i][0],\n        tickCoordinates[i][1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n          shadow,\n        },\n        tickIds[i]\n      );\n    }\n\n    const textUID = 'text0';\n    drawTextBoxSvg(\n      svgDrawingHelper,\n      annotationUID,\n      textUID,\n      textBoxLines,\n      [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n      {\n        fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n        fontSize: '14px',\n        lineDash: '2,3',\n        lineWidth: '1',\n        shadow: true,\n        color: color,\n      }\n    );\n\n    return renderStatus;\n  }\n\n  _getTextLines(scaleSize: number): string[] | undefined {\n    let scaleSizeDisplayValue;\n    let scaleSizeUnits;\n    if (scaleSize >= 50) {\n      scaleSizeDisplayValue = scaleSize / 10; //convert to cm\n      scaleSizeUnits = ' cm';\n    } else {\n      scaleSizeDisplayValue = scaleSize; //convert to cm\n      scaleSizeUnits = ' mm';\n    }\n\n    const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];\n\n    return textLines;\n  }\n\n  /**\n   *\n   * @param worldWidthViewport\n   * @returns currentScaleSize\n   */\n  computeScaleSize = (\n    worldWidthViewport: number,\n    worldHeightViewport: number,\n    location: any\n  ) => {\n    const scaleSizes = [\n      16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,\n    ];\n    let currentScaleSize;\n    if (location == 'top' || location == 'bottom') {\n      currentScaleSize = scaleSizes.filter(\n        (scaleSize) =>\n          scaleSize < worldWidthViewport * 0.6 &&\n          scaleSize > worldWidthViewport * 0.2\n      );\n    } else {\n      currentScaleSize = scaleSizes.filter(\n        (scaleSize) =>\n          scaleSize < worldHeightViewport * 0.6 &&\n          scaleSize > worldHeightViewport * 0.2\n      );\n    }\n\n    return currentScaleSize[0];\n  };\n\n  /**\n   *  calculates scale ticks for ends of the scale\n   * @param canvasCoordinates\n   * @returns leftTick, rightTick\n   */\n  computeEndScaleTicks = (canvasCoordinates, location) => {\n    const locationTickOffset = {\n      bottom: [\n        [0, -10],\n        [0, -10],\n      ],\n      top: [\n        [0, 10],\n        [0, 10],\n      ],\n      left: [\n        [0, 0],\n        [10, 0],\n      ],\n      right: [\n        [0, 0],\n        [-10, 0],\n      ],\n    };\n\n    const endTick1 = [\n      [\n        canvasCoordinates[1][0] + locationTickOffset[location][0][0],\n        canvasCoordinates[1][1] + locationTickOffset[location][0][0],\n      ],\n      [\n        canvasCoordinates[1][0] + locationTickOffset[location][1][0],\n        canvasCoordinates[1][1] + locationTickOffset[location][1][1],\n      ],\n    ];\n    const endTick2 = [\n      [\n        canvasCoordinates[0][0] + locationTickOffset[location][0][0],\n        canvasCoordinates[0][1] + locationTickOffset[location][0][0],\n      ],\n      [\n        canvasCoordinates[0][0] + locationTickOffset[location][1][0],\n        canvasCoordinates[0][1] + locationTickOffset[location][1][1],\n      ],\n    ];\n\n    return {\n      endTick1: endTick1,\n      endTick2: endTick2,\n    };\n  };\n\n  computeInnerScaleTicks = (\n    scaleSize: number,\n    location: string,\n    annotationUID: string,\n    leftTick: any[][],\n    rightTick: any[][]\n  ) => {\n    let canvasScaleSize;\n    if (location == 'bottom' || location == 'top') {\n      canvasScaleSize = rightTick[0][0] - leftTick[0][0];\n    } else if (location == 'left' || location == 'right') {\n      canvasScaleSize = rightTick[0][1] - leftTick[0][1];\n    }\n    const tickIds = [];\n    const tickUIDs = [];\n    const tickCoordinates = [];\n    let numberSmallTicks = scaleSize;\n\n    if (scaleSize >= 50) {\n      numberSmallTicks = scaleSize / 10;\n    }\n\n    const tickSpacing = canvasScaleSize / numberSmallTicks;\n\n    for (let i = 0; i < numberSmallTicks - 1; i++) {\n      const locationOffset = {\n        bottom: [\n          [tickSpacing * (i + 1), 0],\n          [tickSpacing * (i + 1), 5],\n        ],\n        top: [\n          [tickSpacing * (i + 1), 0],\n          [tickSpacing * (i + 1), -5],\n        ],\n        left: [\n          [0, tickSpacing * (i + 1)],\n          [-5, tickSpacing * (i + 1)],\n        ],\n        right: [\n          [0, tickSpacing * (i + 1)],\n          [5, tickSpacing * (i + 1)],\n        ],\n      };\n      tickIds.push(`${annotationUID}-tick${i}`);\n      tickUIDs.push(`tick${i}`);\n      if ((i + 1) % 5 == 0) {\n        tickCoordinates.push([\n          [\n            leftTick[0][0] + locationOffset[location][0][0],\n            leftTick[0][1] + locationOffset[location][0][1],\n          ],\n          [\n            leftTick[1][0] + locationOffset[location][0][0],\n            leftTick[1][1] + locationOffset[location][0][1],\n          ],\n        ]);\n      } else {\n        tickCoordinates.push([\n          [\n            leftTick[0][0] + locationOffset[location][0][0],\n            leftTick[0][1] + locationOffset[location][0][1],\n          ],\n          [\n            leftTick[1][0] + locationOffset[location][1][0],\n            leftTick[1][1] + locationOffset[location][1][1],\n          ],\n        ]);\n      }\n    }\n\n    return { tickIds, tickUIDs, tickCoordinates };\n  };\n\n  computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {\n    let worldCoordinates;\n    let topBottomVec = vec3.subtract(vec3.create(), pointSet[0], pointSet[1]);\n    topBottomVec = vec3.normalize(vec3.create(), topBottomVec) as Types.Point3;\n\n    let topRightVec = vec3.subtract(vec3.create(), pointSet[2], pointSet[0]);\n    topRightVec = vec3.normalize(vec3.create(), topRightVec);\n\n    const midpointLocation = {\n      bottom: [pointSet[1], pointSet[2]],\n      top: [pointSet[0], pointSet[3]],\n      right: [pointSet[2], pointSet[3]],\n      left: [pointSet[0], pointSet[1]],\n    };\n\n    const midpoint = vec3\n      .add(\n        vec3.create(),\n        midpointLocation[location][0],\n        midpointLocation[location][0]\n      )\n      .map((i) => i / 2) as Types.Point3;\n\n    const offset =\n      scaleSize /\n      2 /\n      Math.sqrt(\n        Math.pow(topBottomVec[0], 2) +\n          Math.pow(topBottomVec[1], 2) +\n          Math.pow(topBottomVec[2], 2)\n      );\n\n    if (location == 'top' || location == 'bottom') {\n      worldCoordinates = [\n        vec3.subtract(\n          vec3.create(),\n          midpoint,\n          topRightVec.map((i) => i * offset) as Types.Point3\n        ),\n        vec3.add(\n          vec3.create(),\n          midpoint,\n          topRightVec.map((i) => i * offset) as Types.Point3\n        ),\n      ];\n    } else if (location == 'left' || location == 'right') {\n      worldCoordinates = [\n        vec3.add(\n          vec3.create(),\n          midpoint,\n          topBottomVec.map((i) => i * offset) as Types.Point3\n        ),\n        vec3.subtract(\n          vec3.create(),\n          midpoint,\n          topBottomVec.map((i) => i * offset) as Types.Point3\n        ),\n      ];\n    }\n\n    return worldCoordinates;\n  };\n\n  /**\n   * Computes the centered canvas coordinates for scale\n   * @param canvasSize\n   * @param canvasCoordinates\n   * @param vscaleBounds\n   * @returns scaleCanvasCoordinates\n   */\n  computeCanvasScaleCoordinates = (\n    canvasSize,\n    canvasCoordinates,\n    vscaleBounds,\n    hscaleBounds,\n    location\n  ) => {\n    let scaleCanvasCoordinates;\n    if (location == 'top' || location == 'bottom') {\n      const worldDistanceOnCanvas =\n        canvasCoordinates[0][0] - canvasCoordinates[1][0];\n      scaleCanvasCoordinates = [\n        [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],\n        [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],\n      ];\n    } else if (location == 'left' || location == 'right') {\n      const worldDistanceOnCanvas =\n        canvasCoordinates[0][1] - canvasCoordinates[1][1];\n      scaleCanvasCoordinates = [\n        [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],\n        [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],\n      ];\n    }\n\n    return scaleCanvasCoordinates;\n  };\n\n  /**\n   * Computes the max bound for scales on the image\n   * @param  {{width: number, height: number}} canvasSize\n   * @param  {number} horizontalReduction\n   * @param  {number} verticalReduction\n   * @returns {Object.<string, { x:number, y:number }>}\n   */\n  computeScaleBounds = (\n    canvasSize,\n    horizontalReduction,\n    verticalReduction,\n    location\n  ) => {\n    const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);\n    const vReduction = verticalReduction * Math.min(1000, canvasSize.height);\n    const locationBounds = {\n      bottom: [-vReduction, -hReduction],\n      top: [vReduction, hReduction],\n      left: [vReduction, hReduction],\n      right: [-vReduction, -hReduction],\n    };\n    const canvasBounds = {\n      bottom: [canvasSize.height, canvasSize.width],\n      top: [0, canvasSize.width],\n      left: [canvasSize.height, 0],\n      right: [canvasSize.height, canvasSize.width],\n    };\n\n    return {\n      height: canvasBounds[location][0] + locationBounds[location][0],\n      width: canvasBounds[location][1] + locationBounds[location][1],\n    };\n  };\n}\n\nScaleOverlayTool.toolName = 'ScaleOverlay';\nexport default ScaleOverlayTool;\n","import { ImageVolume, utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { getBoundingBoxAroundShape } from '../../../utilities/boundingBox';\nimport { pointInShapeCallback } from '../../../utilities';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\n\nconst { transformWorldToIndex } = csUtils;\n\ntype OperationData = {\n  segmentationId: string;\n  points: [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n  volume: ImageVolume;\n  constraintFn: (x: [number, number, number]) => boolean;\n  segmentIndex: number;\n  segmentsLocked: number[];\n};\n\n/**\n * For each point in the bounding box around the rectangle, if the point is inside\n * the rectangle, set the scalar value to the segmentIndex\n * @param toolGroupId - string\n * @param operationData - OperationData\n * @param constraintFn - can be used to perform threshold segmentation\n * @param inside - boolean\n */\n// Todo: why we have another constraintFn? in addition to the one in the operationData?\nfunction fillRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData,\n  inside = true\n): void {\n  const {\n    volume: segmentation,\n    points,\n    segmentsLocked,\n    segmentIndex,\n    segmentationId,\n    constraintFn,\n  } = operationData;\n  const { imageData, dimensions } = segmentation;\n  const scalarData = segmentation.getScalarData();\n\n  let rectangleCornersIJK = points.map((world) => {\n    return transformWorldToIndex(imageData, world);\n  });\n\n  // math round\n  rectangleCornersIJK = rectangleCornersIJK.map((point) => {\n    return point.map((coord) => {\n      return Math.round(coord);\n    });\n  });\n\n  const boundsIJK = getBoundingBoxAroundShape(rectangleCornersIJK, dimensions);\n\n  // Since always all points inside the boundsIJK is inside the rectangle...\n  const pointInRectangle = () => true;\n\n  const callback = ({ value, index, pointIJK }) => {\n    if (segmentsLocked.includes(value)) {\n      return;\n    }\n\n    if (!constraintFn) {\n      scalarData[index] = segmentIndex;\n      return;\n    }\n\n    if (constraintFn(pointIJK)) {\n      scalarData[index] = segmentIndex;\n    }\n  };\n\n  pointInShapeCallback(imageData, pointInRectangle, callback, boundsIJK);\n\n  triggerSegmentationDataModified(segmentationId);\n}\n\n/**\n * Fill the inside of a rectangle\n * @param toolGroupId - The unique identifier of the tool group.\n * @param operationData - The data that will be used to create the\n * new rectangle.\n * @param constraintFn - can be used to perform threshold segmentation\n */\nexport function fillInsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillRectangle(enabledElement, operationData, true);\n}\n\n/**\n * Fill the area outside of a rectangle for the toolGroupId and segmentationRepresentationUID.\n * @param toolGroupId - The unique identifier of the tool group.\n * @param operationData - The data that will be used to create the\n * new rectangle.\n * @param constraintFn - can be used to perform threshold segmentation\n */\nexport function fillOutsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillRectangle(enabledElement, operationData, false);\n}\n","import { ImageVolume, utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { getBoundingBoxAroundShape } from '../../../utilities/boundingBox';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { pointInShapeCallback } from '../../../utilities';\n\nconst { transformWorldToIndex } = csUtils;\n\ntype EraseOperationData = {\n  segmentationId: string;\n  points: [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n  volume: ImageVolume;\n  constraintFn: (x: [number, number, number]) => boolean;\n  segmentsLocked: number[];\n};\n\nfunction eraseRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: EraseOperationData,\n  inside = true\n): void {\n  const {\n    volume: segmentation,\n    points,\n    segmentsLocked,\n    segmentationId,\n  } = operationData;\n  const { imageData, dimensions } = segmentation;\n  const scalarData = segmentation.getScalarData();\n\n  const rectangleCornersIJK = points.map((world) => {\n    return transformWorldToIndex(imageData, world);\n  });\n\n  const boundsIJK = getBoundingBoxAroundShape(rectangleCornersIJK, dimensions);\n\n  // Since always all points inside the boundsIJK is inside the rectangle...\n  const pointInShape = () => true;\n\n  const callback = ({ value, index }) => {\n    if (segmentsLocked.includes(value)) {\n      return;\n    }\n    scalarData[index] = 0;\n  };\n\n  pointInShapeCallback(imageData, pointInShape, callback, boundsIJK);\n\n  triggerSegmentationDataModified(segmentationId);\n}\n\n/**\n * Erase the rectangle region segment inside the segmentation defined by the operationData.\n * It erases the segmentation pixels inside the defined rectangle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function eraseInsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: EraseOperationData\n): void {\n  eraseRectangle(enabledElement, operationData, true);\n}\n\n/**\n * Erase the rectangle region segment inside the segmentation defined by the operationData.\n * It erases the segmentation pixels outside the defined rectangle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function eraseOutsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: EraseOperationData\n): void {\n  eraseRectangle(enabledElement, operationData, false);\n}\n","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\n\nimport { Events } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\n/**\n * Tool for manipulating segmentation data by drawing a rectangle. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex.\n */\nclass RectangleScissorsTool extends BaseTool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    segmentationId: string;\n    segmentation: any;\n    segmentIndex: number;\n    segmentsLocked: number[];\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideRectangle,\n          ERASE_INSIDE: eraseInsideRectangle,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId, type } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const { representationData } = getSegmentation(segmentationId);\n\n    // Todo: are we going to support contour editing with rectangle scissors?\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n\n    // Todo: Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        handles: {\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n      },\n    };\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      segmentation,\n      segmentIndex,\n      segmentsLocked,\n      segmentColor,\n      segmentationId,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    // Moving handle.\n    const { currentPoints } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n    const worldPos = currentPoints.world;\n\n    const { points } = data.handles;\n\n    // Move this handle.\n    points[handleIndex] = [...worldPos];\n\n    let bottomLeftCanvas;\n    let bottomRightCanvas;\n    let topLeftCanvas;\n    let topRightCanvas;\n\n    let bottomLeftWorld;\n    let bottomRightWorld;\n    let topLeftWorld;\n    let topRightWorld;\n\n    switch (handleIndex) {\n      case 0:\n      case 3:\n        // Moving bottomLeft or topRight\n\n        bottomLeftCanvas = worldToCanvas(points[0]);\n        topRightCanvas = worldToCanvas(points[3]);\n\n        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n\n        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n        topLeftWorld = canvasToWorld(topLeftCanvas);\n\n        points[1] = bottomRightWorld;\n        points[2] = topLeftWorld;\n\n        break;\n      case 1:\n      case 2:\n        // Moving bottomRight or topLeft\n        bottomRightCanvas = worldToCanvas(points[1]);\n        topLeftCanvas = worldToCanvas(points[2]);\n\n        bottomLeftCanvas = <Types.Point2>[\n          topLeftCanvas[0],\n          bottomRightCanvas[1],\n        ];\n        topRightCanvas = <Types.Point2>[bottomRightCanvas[0], topLeftCanvas[1]];\n\n        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n        topRightWorld = canvasToWorld(topRightCanvas);\n\n        points[0] = bottomLeftWorld;\n        points[3] = topRightWorld;\n\n        break;\n    }\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      newAnnotation,\n      hasMoved,\n      segmentation,\n      segmentationId,\n      segmentIndex,\n      segmentsLocked,\n    } = this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation,\n      segmentationId,\n      segmentIndex,\n      segmentsLocked,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n  };\n\n  /**\n   * it is used to draw the rectangleScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const rectangleUID = '0';\n    drawRectSvg(\n      svgDrawingHelper,\n      annotationUID,\n      rectangleUID,\n      canvasCoordinates[0],\n      canvasCoordinates[3],\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n}\n\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;\n","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\n\nimport { fillInsideCircle } from './strategies/fillCircle';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  segmentLocking,\n  activeSegmentation,\n  segmentIndex as segmentIndexController,\n  config as segmentationConfig,\n} from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\n/**\n * Tool for manipulating segmentation data by drawing a circle. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex.\n */\nclass CircleScissorsTool extends BaseTool {\n  static toolName;\n  editData: {\n    annotation: any;\n    segmentation: any;\n    segmentIndex: number;\n    segmentationId: string;\n    segmentsLocked: number[];\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    centerCanvas?: Array<number>;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideCircle,\n          // ERASE_INSIDE: eraseInsideCircle,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId, type } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const { representationData } = getSegmentation(segmentationId);\n\n    // Todo: are we going to support contour editing with rectangle scissors?\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n\n    // Todo: Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        handles: {\n          points: [[...worldPos], [...worldPos], [...worldPos], [...worldPos]],\n          activeHandleIndex: null,\n        },\n        isDrawing: true,\n        cachedStats: {},\n      },\n    };\n\n    const viewportIdsToRender = [viewport.id];\n\n    this.editData = {\n      annotation,\n      segmentation,\n      centerCanvas: canvasPos,\n      segmentIndex,\n      segmentationId,\n      segmentsLocked,\n      segmentColor,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n    const { data } = annotation;\n\n    // Center of circle in canvas Coordinates\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n    const radius = Math.sqrt(dX * dX + dY * dY);\n\n    const bottomCanvas: Types.Point2 = [\n      centerCanvas[0],\n      centerCanvas[1] + radius,\n    ];\n    const topCanvas: Types.Point2 = [centerCanvas[0], centerCanvas[1] - radius];\n    const leftCanvas: Types.Point2 = [\n      centerCanvas[0] - radius,\n      centerCanvas[1],\n    ];\n    const rightCanvas: Types.Point2 = [\n      centerCanvas[0] + radius,\n      centerCanvas[1],\n    ];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      newAnnotation,\n      hasMoved,\n      segmentation,\n      segmentIndex,\n      segmentsLocked,\n      segmentationId,\n    } = this.editData;\n    const { data } = annotation;\n    const { viewPlaneNormal, viewUp } = annotation.metadata;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation,\n      segmentIndex,\n      segmentsLocked,\n      viewPlaneNormal,\n      segmentationId,\n      viewUp,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the circleScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { viewportIdsToRender } = this.editData;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return renderStatus;\n    }\n\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n    return renderStatus;\n  };\n}\n\nCircleScissorsTool.toolName = 'CircleScissor';\nexport default CircleScissorsTool;\n","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\n\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\n/**\n * Tool for manipulating segmentation data by drawing a sphere in 3d space. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex. Todo: sphere scissor has some memory problem which\n * lead to ui blocking behavior that needs to be fixed.\n */\nclass SphereScissorsTool extends BaseTool {\n  static toolName;\n  editData: {\n    annotation: any;\n    segmentation: any;\n    segmentIndex: number;\n    segmentsLocked: number[];\n    segmentationId: string;\n    toolGroupId: string;\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    centerCanvas?: Array<number>;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideSphere,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): true => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId, type } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const { representationData } = getSegmentation(segmentationId);\n\n    // Todo: are we going to support contour editing with rectangle scissors?\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n\n    this.isDrawing = true;\n\n    // Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        invalidated: true,\n        handles: {\n          points: [[...worldPos], [...worldPos], [...worldPos], [...worldPos]],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n        highlighted: true,\n      },\n    };\n\n    const viewportIdsToRender = [viewport.id];\n\n    this.editData = {\n      annotation,\n      segmentation,\n      centerCanvas: canvasPos,\n      segmentIndex,\n      segmentsLocked,\n      segmentColor,\n      segmentationId,\n      toolGroupId,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n    const { data } = annotation;\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n    const radius = Math.sqrt(dX * dX + dY * dY);\n\n    const bottomCanvas: Types.Point2 = [\n      centerCanvas[0],\n      centerCanvas[1] + radius,\n    ];\n    const topCanvas: Types.Point2 = [centerCanvas[0], centerCanvas[1] - radius];\n    const leftCanvas: Types.Point2 = [\n      centerCanvas[0] - radius,\n      centerCanvas[1],\n    ];\n    const rightCanvas: Types.Point2 = [\n      centerCanvas[0] + radius,\n      centerCanvas[1],\n    ];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      newAnnotation,\n      hasMoved,\n      segmentation,\n      segmentIndex,\n      segmentsLocked,\n      segmentationId,\n    } = this.editData;\n    const { data } = annotation;\n    const { viewPlaneNormal, viewUp } = annotation.metadata;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation,\n      segmentIndex,\n      segmentsLocked,\n      segmentationId,\n      viewPlaneNormal,\n      viewUp,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the sphereScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { viewportIdsToRender } = this.editData;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return renderStatus;\n    }\n\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n}\n\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;\n","import {\n  getEnabledElement,\n  cache,\n  StackViewport,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { Events } from '../../enums';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIThresholdAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { AnnotationModifiedEventDetail } from '../../types/EventTypes';\nimport RectangleROITool from '../annotation/RectangleROITool';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\n/**\n * This tool is exactly the RectangleROITool but only draws a rectangle on the image,\n * and by using utility functions such as thresholdByRange and thresholdByROIStat it can be used to\n * create a segmentation. This tool, however, does not calculate the statistics\n * as RectangleROITool does.\n */\nclass RectangleROIThresholdTool extends RectangleROITool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement it creates\n   * the edit data for the tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const targetId = this.getTargetId(viewport);\n    let referencedImageId, volumeId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    } else {\n      volumeId = targetId.split('volumeId:')[1];\n      const imageVolume = cache.getVolume(volumeId);\n      referencedImageId = csUtils.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n    // Todo: how not to store enabledElement on the annotation, segmentationModule needs the element to\n    // decide on the active segmentIndex, active segmentationIndex etc.\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        enabledElement,\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        toolName: this.getToolName(),\n        volumeId,\n      },\n      data: {\n        label: '',\n        handles: {\n          // No need a textBox\n          textBox: {\n            hasMoved: false,\n            worldPosition: null,\n            worldBoundingBox: null,\n          },\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n        segmentationId: null,\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * it is used to draw the RectangleROI Threshold annotation in each\n   * request animation frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, renderingEngineId } = enabledElement;\n    const { element } = viewport;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as RectangleROIThresholdAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      // Todo: This is not correct way to add the event trigger,\n      // this will trigger on all mouse hover too. Problem is that we don't\n      // have a cached stats mechanism for this tool yet?\n      const eventType = Events.ANNOTATION_MODIFIED;\n\n      const eventDetail: AnnotationModifiedEventDetail = {\n        annotation,\n        viewportId: viewport.id,\n        renderingEngineId,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n        }\n      );\n\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n}\n\nRectangleROIThresholdTool.toolName = 'RectangleROIThreshold';\nexport default RectangleROIThresholdTool;\n","import {\n  getEnabledElement,\n  cache,\n  StackViewport,\n  metaData,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { vec3 } from 'gl-matrix';\nimport { Events } from '../../enums';\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport throttle from '../../utilities/throttle';\nimport { AnnotationModifiedEventDetail } from '../../types/EventTypes';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIStartEndThresholdAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport RectangleROITool from '../annotation/RectangleROITool';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * This tool is similar to the RectangleROIThresholdTool which\n * only draws a rectangle on the image, and by using utility functions\n * such as thresholdByRange and thresholdByROIStat it can be used to\n * create a segmentation. The only difference is that it only acts on the\n * acquisition plane and not the 3D volume, and accepts a start and end\n * slice, and renders a dashed rectangle on the image between the start and end\n * but a solid rectangle on start and end slice. Utility functions should be used\n * to modify the start and end slice.\n * // Todo: right now only the first slice has grabbable handles, need to make\n * // it so that the handles are grabbable on all slices.\n */\nclass RectangleROIStartEndThresholdTool extends RectangleROITool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {\n        numSlicesToPropagate: 10,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStatsTool,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement it creates\n   * the edit data for the tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    let referencedImageId, imageVolume, volumeId;\n    if (viewport instanceof StackViewport) {\n      throw new Error('Stack Viewport Not implemented');\n    } else {\n      const targetId = this.getTargetId(viewport);\n      volumeId = targetId.split('volumeId:')[1];\n      imageVolume = cache.getVolume(volumeId);\n      referencedImageId = csUtils.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    if (!referencedImageId) {\n      throw new Error('This tool does not work on non-acquisition planes');\n    }\n\n    const startIndex = viewport.getCurrentImageIdIndex();\n    const spacingInNormal = csUtils.getSpacingInNormalDirection(\n      imageVolume,\n      viewPlaneNormal\n    );\n\n    // We cannot simply add numSlicesToPropagate to startIndex because\n    // the order of imageIds can be from top to bottom or bottom to top and\n    // we want to make sure it is always propagated in the direction of the\n    // view and also to make sure we don't go out of bounds.\n    const endIndex = this._getEndSliceIndex(\n      imageVolume,\n      worldPos,\n      spacingInNormal,\n      viewPlaneNormal\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        enabledElement,\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        toolName: this.getToolName(),\n        volumeId,\n        spacingInNormal,\n      },\n      data: {\n        label: '',\n        startSlice: startIndex,\n        endSlice: endIndex,\n        cachedStats: {\n          projectionPoints: [],\n          projectionPointsImageIds: [referencedImageId],\n        },\n        handles: {\n          // No need a textBox\n          textBox: {\n            hasMoved: false,\n            worldPosition: null,\n            worldBoundingBox: null,\n          },\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n        labelmapUID: null,\n      },\n    };\n\n    // update the projection points in 3D space, since we are projecting\n    // the points to the slice plane, we need to make sure the points are\n    // computed for later export\n    this._computeProjectionPoints(annotation, imageVolume);\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  // Todo: make it work for planes other than acquisition planes\n  _computeProjectionPoints(\n    annotation: RectangleROIStartEndThresholdAnnotation,\n    imageVolume: Types.IImageVolume\n  ): void {\n    const { data, metadata } = annotation;\n    const { viewPlaneNormal, spacingInNormal } = metadata;\n    const { imageData } = imageVolume;\n    const { startSlice, endSlice } = data;\n    const { points } = data.handles;\n\n    const startIJK = transformWorldToIndex(imageData, points[0]);\n\n    if (startIJK[2] !== startSlice) {\n      throw new Error('Start slice does not match');\n    }\n\n    // substitute the end slice index 2 with startIJK index 2\n    const endIJK = vec3.fromValues(startIJK[0], startIJK[1], endSlice);\n\n    const startWorld = vec3.create();\n    imageData.indexToWorldVec3(startIJK, startWorld);\n\n    const endWorld = vec3.create();\n    imageData.indexToWorldVec3(endIJK, endWorld);\n\n    // distance between start and end slice in the world coordinate\n    const distance = vec3.distance(startWorld, endWorld);\n\n    // for each point inside points, navigate in the direction of the viewPlaneNormal\n    // with amount of spacingInNormal, and calculate the next slice until we reach the distance\n    const newProjectionPoints = [];\n    for (let dist = 0; dist < distance; dist += spacingInNormal) {\n      newProjectionPoints.push(\n        points.map((point) => {\n          const newPoint = vec3.create();\n          vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);\n          return Array.from(newPoint);\n        })\n      );\n    }\n\n    data.cachedStats.projectionPoints = newProjectionPoints;\n\n    // Find the imageIds for the projection points\n    const projectionPointsImageIds = [];\n    for (const RectanglePoints of newProjectionPoints) {\n      const imageId = csUtils.getClosestImageId(\n        imageVolume,\n        RectanglePoints[0],\n        viewPlaneNormal\n      );\n      projectionPointsImageIds.push(imageId);\n    }\n\n    data.cachedStats.projectionPointsImageIds = projectionPointsImageIds;\n  }\n\n  _calculateCachedStatsTool(annotation, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId, viewport } = enabledElement;\n\n    const { cachedStats } = data;\n    const volumeId = this.getTargetId(viewport);\n    const imageVolume = cache.getVolume(volumeId.split('volumeId:')[1]);\n\n    // Todo: this shouldn't be here, this is a performance issue\n    // Since we are extending the RectangleROI class, we need to\n    // bring the logic for handle to some cachedStats calculation\n    this._computeProjectionPoints(annotation, imageVolume);\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n\n  /**\n   * it is used to draw the rectangleROIStartEnd annotation in each\n   * request animation frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const sliceIndex = viewport.getCurrentImageIdIndex();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[\n        i\n      ] as RectangleROIStartEndThresholdAnnotation;\n      const { annotationUID, data } = annotation;\n      const { startSlice, endSlice } = data;\n      const { points, activeHandleIndex } = data.handles;\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      // range of slices to render based on the start and end slice, like\n      // np.arange\n\n      // if indexIJK is outside the start/end slice, we don't render\n      if (\n        sliceIndex < Math.min(startSlice, endSlice) ||\n        sliceIndex > Math.max(startSlice, endSlice)\n      ) {\n        continue;\n      }\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n\n      if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(annotation, enabledElement);\n      }\n\n      // if it is inside the start/end slice, but not exactly the first or\n      // last slice, we render the line in dash, but not the handles\n      let firstOrLastSlice = false;\n      if (sliceIndex === startSlice || sliceIndex === endSlice) {\n        firstOrLastSlice = true;\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null &&\n        firstOrLastSlice\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      let lineDashToUse = lineDash;\n\n      if (!firstOrLastSlice) {\n        lineDashToUse = 2;\n      }\n\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash: lineDashToUse,\n          lineWidth,\n        }\n      );\n\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n\n  _getEndSliceIndex(\n    imageVolume: Types.IImageVolume,\n    worldPos: Types.Point3,\n    spacingInNormal: number,\n    viewPlaneNormal: Types.Point3\n  ): number | undefined {\n    const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n\n    // get end position by moving from worldPos in the direction of viewplaneNormal\n    // with amount of numSlicesToPropagate * spacingInNormal\n    const endPos = vec3.create();\n    vec3.scaleAndAdd(\n      endPos,\n      worldPos,\n      viewPlaneNormal,\n      numSlicesToPropagate * spacingInNormal\n    );\n\n    const halfSpacingInNormalDirection = spacingInNormal / 2;\n    // Loop through imageIds of the imageVolume and find the one that is closest to endPos\n    const { imageIds } = imageVolume;\n    let imageIdIndex;\n    for (let i = 0; i < imageIds.length; i++) {\n      const imageId = imageIds[i];\n\n      const { imagePositionPatient } = metaData.get(\n        'imagePlaneModule',\n        imageId\n      );\n\n      const dir = vec3.create();\n      vec3.sub(dir, endPos, imagePositionPatient);\n\n      const dot = vec3.dot(dir, viewPlaneNormal);\n\n      if (Math.abs(dot) < halfSpacingInNormalDirection) {\n        imageIdIndex = i;\n      }\n    }\n\n    return imageIdIndex;\n  }\n}\n\nRectangleROIStartEndThresholdTool.toolName = 'RectangleROIStartEndThreshold';\nexport default RectangleROIStartEndThresholdTool;\n","import type {\n  FloodFillResult,\n  FloodFillGetter,\n  FloodFillOptions,\n} from '../../types';\nimport { Types } from '@cornerstonejs/core';\n\n/**\n * floodFill.js - Taken from MIT OSS lib - https://github.com/tuzz/n-dimensional-flood-fill\n * Refactored to ES6.\n *\n * @param {function} getter The getter to the elements of your data structure,\n *                          e.g. getter(x,y) for a 2D interprettation of your structure.\n * @param {number[]} seed The seed for your fill. The dimensionality is infered\n *                        by the number of dimensions of the seed.\n * @param {function} [options.onFlood] An optional callback to execute when each pixel is flooded.\n *                             e.g. onFlood(x,y).\n * @param {function} [options.onBoundary] An optional callback to execute whenever a boundary is reached.\n *                                a boundary could be another segmentIndex, or the edge of your\n *                                data structure (i.e. when your getter returns undefined).\n * @param {function} [options.equals] An optional equality method for your datastructure.\n *                            Default is simply value1 = value2.\n * @param {boolean} [options.diagonals] Whether you allow flooding through diagonals. Defaults to false.\n *\n * @returns {Object}\n */\nfunction floodFill(\n  getter: FloodFillGetter,\n  seed: Types.Point2 | Types.Point3,\n  options: FloodFillOptions = {}\n): FloodFillResult {\n  const onFlood = options.onFlood;\n  const onBoundary = options.onBoundary;\n  const equals = options.equals || defaultEquals;\n  const diagonals = options.diagonals || false;\n  const startNode = get(seed);\n  const permutations = prunedPermutations();\n  const stack = [];\n  const flooded = [];\n  const visits = {};\n  const bounds = {};\n\n  stack.push({ currentArgs: seed });\n\n  while (stack.length > 0) {\n    flood(stack.pop());\n  }\n\n  return {\n    flooded,\n    boundaries: boundaries(),\n  };\n\n  function flood(job) {\n    const getArgs = job.currentArgs;\n    const prevArgs = job.previousArgs;\n\n    if (visited(getArgs)) {\n      return;\n    }\n    markAsVisited(getArgs);\n\n    if (member(getArgs)) {\n      markAsFlooded(getArgs);\n      pushAdjacent(getArgs);\n    } else {\n      markAsBoundary(prevArgs);\n    }\n  }\n\n  function visited(key) {\n    return visits[key] === true;\n  }\n\n  function markAsVisited(key) {\n    visits[key] = true;\n  }\n\n  function member(getArgs) {\n    const node = safely(get, [getArgs]);\n\n    return safely(equals, [node, startNode]);\n  }\n\n  function markAsFlooded(getArgs) {\n    flooded.push(getArgs);\n    if (onFlood) {\n      //@ts-ignore\n      onFlood(...getArgs);\n    }\n  }\n\n  function markAsBoundary(prevArgs) {\n    bounds[prevArgs] = prevArgs;\n    if (onBoundary) {\n      //@ts-ignore\n      onBoundary(...prevArgs);\n    }\n  }\n\n  function pushAdjacent(getArgs) {\n    for (let i = 0; i < permutations.length; i += 1) {\n      const perm = permutations[i];\n      const nextArgs = getArgs.slice(0);\n\n      for (let j = 0; j < getArgs.length; j += 1) {\n        nextArgs[j] += perm[j];\n      }\n\n      stack.push({\n        currentArgs: nextArgs,\n        previousArgs: getArgs,\n      });\n    }\n  }\n\n  function get(getArgs) {\n    //@ts-ignore\n    return getter(...getArgs);\n  }\n\n  function safely(f, args) {\n    try {\n      return f(...args);\n    } catch (error) {\n      return;\n    }\n  }\n\n  function prunedPermutations() {\n    const permutations = permute(seed.length);\n\n    return permutations.filter(function (perm) {\n      const count = countNonZeroes(perm);\n\n      return count !== 0 && (count === 1 || diagonals);\n    });\n  }\n\n  function permute(length) {\n    const perms = [];\n\n    const permutation = function (string) {\n      return string.split('').map(function (c) {\n        return parseInt(c, 10) - 1;\n      });\n    };\n\n    for (let i = 0; i < Math.pow(3, length); i += 1) {\n      const string = lpad(i.toString(3), '0', length);\n\n      perms.push(permutation(string));\n    }\n\n    return perms;\n  }\n\n  function boundaries() {\n    const array = [];\n\n    for (const key in bounds) {\n      if (bounds[key] !== undefined) {\n        array.unshift(bounds[key]);\n      }\n    }\n\n    return array;\n  }\n}\n\nfunction defaultEquals(a, b) {\n  return a === b;\n}\n\nfunction countNonZeroes(array) {\n  let count = 0;\n\n  for (let i = 0; i < array.length; i += 1) {\n    if (array[i] !== 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n}\n\nfunction lpad(string, character, length) {\n  const array = new Array(length + 1);\n  const pad = array.join(character);\n\n  return (pad + string).slice(-length);\n}\n\nexport default floodFill;\n","import {\n  cache,\n  getEnabledElement,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport { PublicToolProps, ToolProps, EventTypes } from '../../types';\n\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport {\n  segmentLocking,\n  activeSegmentation,\n  segmentIndex as segmentIndexController,\n} from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { FloodFillResult, FloodFillGetter } from '../../types';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\nconst { transformWorldToIndex, isEqual } = csUtils;\n\ntype PaintFillToolHelpers = {\n  getScalarDataPositionFromPlane: (x: number, y: number) => number;\n  getLabelValue: (x: number, y: number, z: number) => number;\n  floodFillGetter: FloodFillGetter;\n  inPlaneSeedPoint: Types.Point2;\n  fixedDimensionValue: number;\n};\n\n/**\n * Tool for manipulating segmentation data by filling in regions. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will fill a given labelled\n * or empty region with the the activeSegmentIndex label. You can use the\n * SegmentationModule to set the active segmentation and segmentIndex.\n */\nclass PaintFillTool extends BaseTool {\n  static toolName;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationId, type } = activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked: number[] =\n      segmentLocking.getLockedSegments(segmentationId);\n    const { representationData } = getSegmentation(segmentationId);\n\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n    const { dimensions, direction } = segmentation;\n    const scalarData = segmentation.getScalarData();\n\n    const index = transformWorldToIndex(segmentation.imageData, worldPos);\n\n    const fixedDimension = this.getFixedDimension(viewPlaneNormal, direction);\n\n    if (fixedDimension === undefined) {\n      console.warn('Oblique paint fill not yet supported');\n      return;\n    }\n\n    const {\n      floodFillGetter,\n      getLabelValue,\n      getScalarDataPositionFromPlane,\n      inPlaneSeedPoint,\n      fixedDimensionValue,\n    } = this.generateHelpers(scalarData, dimensions, index, fixedDimension);\n\n    // Check if within volume\n    if (\n      index[0] < 0 ||\n      index[0] >= dimensions[0] ||\n      index[1] < 0 ||\n      index[1] >= dimensions[1] ||\n      index[2] < 0 ||\n      index[2] >= dimensions[2]\n    ) {\n      // Clicked outside segmentation volume, no good way to fill.\n      return;\n    }\n    //@ts-ignore // todo type\n    const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n\n    if (segmentsLocked.includes(clickedLabelValue)) {\n      // Label is locked, cannot fill.\n      return;\n    }\n\n    const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n\n    const { flooded } = floodFillResult;\n\n    flooded.forEach((index) => {\n      const scalarDataPosition = getScalarDataPositionFromPlane(\n        index[0],\n        index[1]\n      );\n\n      scalarData[scalarDataPosition] = segmentIndex;\n    });\n\n    const framesModified = this.getFramesModified(\n      fixedDimension,\n      fixedDimensionValue,\n      floodFillResult\n    );\n\n    triggerSegmentationDataModified(segmentationId, framesModified);\n\n    return true;\n  };\n\n  private getFramesModified = (\n    fixedDimension: number,\n    fixedDimensionValue: number,\n    floodFillResult: FloodFillResult\n  ): number[] => {\n    const { boundaries } = floodFillResult;\n\n    if (fixedDimension === 2) {\n      return [fixedDimensionValue];\n    }\n\n    // For both the fixedDimensions being 0 and 1, the Z (stack) direction is j,\n    // so we don't need to find min/max i.\n\n    let minJ = Infinity;\n    let maxJ = -Infinity;\n\n    for (let b = 0; b < boundaries.length; b++) {\n      const j = boundaries[b][1];\n\n      if (j < minJ) minJ = j;\n      if (j > maxJ) maxJ = j;\n    }\n\n    const framesModified = [];\n\n    for (let frame = minJ; frame <= maxJ; frame++) {\n      framesModified.push(frame);\n    }\n\n    return framesModified;\n  };\n\n  private generateHelpers = (\n    scalarData: Float32Array | Uint8Array | Uint16Array | Int16Array,\n    dimensions: Types.Point3,\n    seedIndex3D: Types.Point3,\n    fixedDimension = 2\n  ): PaintFillToolHelpers => {\n    let fixedDimensionValue: number;\n    let inPlaneSeedPoint: Types.Point2;\n\n    switch (fixedDimension) {\n      case 0:\n        fixedDimensionValue = seedIndex3D[0]; // X\n        inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]]; // Y,Z\n        break;\n      case 1:\n        fixedDimensionValue = seedIndex3D[1]; // Y\n        inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]]; // X,Z\n        break;\n      case 2:\n        fixedDimensionValue = seedIndex3D[2]; // Z\n        inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]]; // X, Y\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    const getScalarDataPosition = (x: number, y: number, z: number): number => {\n      return z * dimensions[1] * dimensions[0] + y * dimensions[0] + x;\n    };\n\n    const getLabelValue = (x: number, y: number, z: number): number => {\n      return scalarData[getScalarDataPosition(x, y, z)];\n    };\n\n    const floodFillGetter = this.generateFloodFillGetter(\n      dimensions,\n      fixedDimension,\n      fixedDimensionValue,\n      getLabelValue\n    );\n\n    const getScalarDataPositionFromPlane =\n      this.generateGetScalarDataPositionFromPlane(\n        getScalarDataPosition,\n        fixedDimension,\n        fixedDimensionValue\n      );\n\n    return {\n      getScalarDataPositionFromPlane,\n      getLabelValue,\n      floodFillGetter,\n      inPlaneSeedPoint,\n      fixedDimensionValue,\n    };\n  };\n\n  private getFixedDimension(\n    viewPlaneNormal: Types.Point3,\n    direction: number[]\n  ): number | undefined {\n    const xDirection = direction.slice(0, 3);\n    const yDirection = direction.slice(3, 6);\n    const zDirection = direction.slice(6, 9);\n\n    const absoluteOfViewPlaneNormal = [\n      Math.abs(viewPlaneNormal[0]),\n      Math.abs(viewPlaneNormal[1]),\n      Math.abs(viewPlaneNormal[2]),\n    ];\n\n    const absoluteOfXDirection = [\n      Math.abs(xDirection[0]),\n      Math.abs(xDirection[1]),\n      Math.abs(xDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n      return 0;\n    }\n\n    const absoluteOfYDirection = [\n      Math.abs(yDirection[0]),\n      Math.abs(yDirection[1]),\n      Math.abs(yDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n      return 1;\n    }\n\n    const absoluteOfZDirection = [\n      Math.abs(zDirection[0]),\n      Math.abs(zDirection[1]),\n      Math.abs(zDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n      return 2;\n    }\n  }\n\n  // Define a getter for the fill routine to access the working label map.\n  private generateFloodFillGetter = (\n    dimensions: Types.Point3,\n    fixedDimension: number,\n    fixedDimensionValue: number,\n    getLabelValue: PaintFillToolHelpers['getLabelValue']\n  ): FloodFillGetter => {\n    let floodFillGetter;\n\n    // In each helper we first check if out of bounds, as the flood filler\n    // doesn't know about the dimensions of the data structure that sits on top\n    // of the scalarData. E.g. if cols is 10, (0,1) and (10, 0) would point to\n    // the same position in these getters.\n\n    switch (fixedDimension) {\n      case 0:\n        floodFillGetter = (y, z) => {\n          if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n            return;\n          }\n\n          return getLabelValue(fixedDimensionValue, y, z);\n        };\n        break;\n\n      case 1:\n        floodFillGetter = (x, z) => {\n          if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n            return;\n          }\n\n          return getLabelValue(x, fixedDimensionValue, z);\n        };\n        break;\n\n      case 2:\n        floodFillGetter = (x, y) => {\n          if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n            return;\n          }\n\n          return getLabelValue(x, y, fixedDimensionValue);\n        };\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    return floodFillGetter;\n  };\n\n  private generateGetScalarDataPositionFromPlane = (\n    getScalarDataPosition: (x: number, y: number, z: number) => number,\n    fixedDimension: number,\n    fixedDimensionValue: number\n  ): PaintFillToolHelpers['getScalarDataPositionFromPlane'] => {\n    let getScalarDataPositionFromPlane;\n\n    switch (fixedDimension) {\n      case 0:\n        getScalarDataPositionFromPlane = (y, z) => {\n          return getScalarDataPosition(fixedDimensionValue, y, z);\n        };\n        break;\n      case 1:\n        getScalarDataPositionFromPlane = (x, z) => {\n          return getScalarDataPosition(x, fixedDimensionValue, z);\n        };\n        break;\n      case 2:\n        getScalarDataPositionFromPlane = (x, y) => {\n          return getScalarDataPosition(x, y, fixedDimensionValue);\n        };\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    return getScalarDataPositionFromPlane;\n  };\n}\n\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport getBoundingBoxAroundShape from '../boundingBox/getBoundingBoxAroundShape';\nimport extend2DBoundingBoxInViewAxis from '../boundingBox/extend2DBoundingBoxInViewAxis';\n\ntype Options = {\n  numSlicesToProject?: number;\n};\n\nfunction getBoundsIJKFromRectangleAnnotations(\n  annotations,\n  referenceVolume,\n  options = {} as Options\n) {\n  const AllBoundsIJK = [];\n  annotations.forEach((annotation) => {\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const { imageData, dimensions } = referenceVolume;\n\n    let pointsToUse = points;\n    // If the tool is a 2D tool but has projection points, use them\n    if (data.cachedStats?.projectionPoints) {\n      const { projectionPoints } = data.cachedStats;\n      pointsToUse = [].concat(...projectionPoints); // cannot use flat() because of typescript compiler right now\n    }\n\n    const rectangleCornersIJK = pointsToUse.map(\n      (world) => csUtils.transformWorldToIndex(imageData, world) as Types.Point3\n    );\n    let boundsIJK = getBoundingBoxAroundShape(rectangleCornersIJK, dimensions);\n\n    // If the tool is 2D but it is configured to project to X amount of slices\n    // Don't project the slices if projectionPoints have been used to define the extents\n    if (options.numSlicesToProject && !data.cachedStats?.projectionPoints) {\n      boundsIJK = extend2DBoundingBoxInViewAxis(\n        boundsIJK,\n        options.numSlicesToProject\n      );\n    }\n\n    AllBoundsIJK.push(boundsIJK);\n  });\n\n  if (AllBoundsIJK.length === 1) {\n    return AllBoundsIJK[0];\n  }\n\n  // Get the intersection of all the bounding boxes\n  // This is the bounding box that contains all the ROIs\n  const boundsIJK = AllBoundsIJK.reduce(\n    (accumulator, currentValue) => {\n      return {\n        iMin: Math.min(accumulator.iMin, currentValue.iMin),\n        jMin: Math.min(accumulator.jMin, currentValue.jMin),\n        kMin: Math.min(accumulator.kMin, currentValue.kMin),\n        iMax: Math.max(accumulator.iMax, currentValue.iMax),\n        jMax: Math.max(accumulator.jMax, currentValue.jMax),\n        kMax: Math.max(accumulator.kMax, currentValue.kMax),\n      };\n    },\n    {\n      iMin: Infinity,\n      jMin: Infinity,\n      kMin: Infinity,\n      iMax: -Infinity,\n      jMax: -Infinity,\n      kMax: -Infinity,\n    }\n  );\n\n  return boundsIJK;\n}\n\nexport default getBoundsIJKFromRectangleAnnotations;\n","import type { Types } from '@cornerstonejs/core';\nimport { state } from '../../stateManagement/annotation';\nimport {\n  RectangleROIStartEndThresholdTool,\n  RectangleROIThresholdTool,\n} from '../../tools';\n\nimport thresholdVolumeByRange from './thresholdVolumeByRange';\nimport getBoundsIJKFromRectangleAnnotations from '../rectangleROITool/getBoundsIJKFromRectangleAnnotations';\nimport { ThresholdInformation } from './utilities';\n\nexport type ThresholdOptions = {\n  numSlicesToProject?: number; // number of slices to project before and after current slice\n  overwrite: boolean;\n  overlapType?: number; // type of the voxel overlap\n};\n\nexport type AnnotationForThresholding = {\n  data: {\n    handles: {\n      points: Types.Point3[];\n    };\n    cachedStats?: {\n      projectionPoints?: Types.Point3[][];\n    };\n  };\n};\n\n/**\n * It uses the provided rectangleROI annotations (either RectangleROIThreshold, or\n * RectangleROIStartEndThreshold) to compute an ROI that is the intersection of\n * all the annotations. Then it uses the rectangleROIThreshold utility to threshold\n * the volume.\n * @param annotationUIDs - rectangleROI annotationsUIDs to use for ROI\n * @param segmentationVolume - the segmentation volume\n * @param thresholdVolumeInformation - object array containing the volume data and range threshold values\n * @param options - options for thresholding\n * @returns\n */\nfunction rectangleROIThresholdVolumeByRange(\n  annotationUIDs: string[],\n  segmentationVolume: Types.IImageVolume,\n  thresholdVolumeInformation: ThresholdInformation[],\n  options: ThresholdOptions\n): Types.IImageVolume {\n  const annotations = annotationUIDs.map((annotationUID) => {\n    return state.getAnnotation(annotationUID);\n  });\n\n  _validateAnnotations(annotations);\n\n  let boundsIJK;\n  for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n    // make sure that the boundsIJK are generated by the correct volume\n    const volumeSize =\n      thresholdVolumeInformation[i].volume.getScalarData().length;\n    if (volumeSize === segmentationVolume.getScalarData().length || i === 0) {\n      boundsIJK = getBoundsIJKFromRectangleAnnotations(\n        annotations,\n        thresholdVolumeInformation[i].volume,\n        options\n      );\n    }\n  }\n\n  const outputSegmentationVolume = thresholdVolumeByRange(\n    segmentationVolume,\n    thresholdVolumeInformation,\n    { ...options, boundsIJK }\n  );\n\n  return outputSegmentationVolume;\n}\n\nfunction _validateAnnotations(annotations) {\n  const validToolNames = [\n    RectangleROIThresholdTool.toolName,\n    RectangleROIStartEndThresholdTool.toolName,\n  ];\n\n  for (const annotation of annotations) {\n    const name = annotation.metadata.toolName;\n    if (!validToolNames.includes(name)) {\n      throw new Error(\n        'rectangleROIThresholdVolumeByRange only supports RectangleROIThreshold and RectangleROIStartEndThreshold annotations'\n      );\n    }\n  }\n}\n\nexport default rectangleROIThresholdVolumeByRange;\n","import { Types } from '@cornerstonejs/core';\nimport { volumeLoader, utilities as csUtils } from '@cornerstonejs/core';\n\n/**\n * Given a list of labelmaps (with the possibility of overlapping regions), and\n * a segmentIndex it creates a new labelmap with the same dimensions as the input labelmaps,\n * but merges them into a single labelmap for the segmentIndex. It wipes out\n * all other segment Indices. This is useful for calculating statistics regarding\n * a specific segment when there are overlapping regions between labelmap (e.g. TMTV)\n *\n * @param labelmaps - Array of labelmaps\n * @param segmentIndex - The segment index to merge\n * @returns Merged labelmap\n */\nfunction createMergedLabelmapForIndex(\n  labelmaps: Array<Types.IImageVolume>,\n  segmentIndex = 1,\n  volumeId = 'mergedLabelmap'\n): Types.IImageVolume {\n  labelmaps.forEach(({ direction, dimensions, origin, spacing }) => {\n    if (\n      !csUtils.isEqual(dimensions, labelmaps[0].dimensions) ||\n      !csUtils.isEqual(direction, labelmaps[0].direction) ||\n      !csUtils.isEqual(spacing, labelmaps[0].spacing) ||\n      !csUtils.isEqual(origin, labelmaps[0].origin)\n    ) {\n      throw new Error('labelmaps must have the same size and shape');\n    }\n  });\n\n  const labelmap = labelmaps[0];\n\n  const arrayType = (labelmap.getScalarData() as any).constructor;\n  const outputData = new arrayType(labelmap.getScalarData().length);\n\n  labelmaps.forEach((labelmap) => {\n    const scalarData = labelmap.getScalarData();\n    for (let i = 0; i < scalarData.length; i++) {\n      if (scalarData[i] === segmentIndex) {\n        outputData[i] = segmentIndex;\n      }\n    }\n  });\n\n  const options = {\n    scalarData: outputData,\n    metadata: labelmap.metadata,\n    spacing: labelmap.spacing,\n    origin: labelmap.origin,\n    direction: labelmap.direction,\n    dimensions: labelmap.dimensions,\n  };\n\n  const preventCache = true;\n  // Todo: following should be async\n  const mergedVolume = volumeLoader.createLocalVolume(\n    options,\n    volumeId,\n    preventCache\n  );\n\n  return mergedVolume;\n}\n\nexport default createMergedLabelmapForIndex;\n","import { isValidLabelmapConfig } from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport SegmentationRepresentation from '../../enums/SegmentationRepresentations';\nimport { RepresentationConfig } from '../../types/SegmentationStateTypes';\n\n/**\n * Given a representation type and a configuration, return true if the\n * configuration is valid for that representation type\n * @param representationType - The type of segmentation representation\n * @param config - RepresentationConfig\n * @returns A boolean value.\n */\nexport default function isValidRepresentationConfig(\n  representationType: string,\n  config: RepresentationConfig\n): boolean {\n  switch (representationType) {\n    case SegmentationRepresentation.Labelmap:\n      return isValidLabelmapConfig(config);\n    default:\n      throw new Error(`Unknown representation type: ${representationType}`);\n  }\n}\n","import getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport SegmentationRepresentation from '../../enums/SegmentationRepresentations';\nimport { Segmentation } from '../../types/SegmentationStateTypes';\n\n/**\n * It returns a configuration object for the given representation type.\n * @param representationType - The type of segmentation representation\n * @returns A representation configuration object.\n */\nexport default function getDefaultRepresentationConfig(\n  segmentation: Segmentation\n) {\n  const { type: representationType } = segmentation;\n  switch (representationType) {\n    case SegmentationRepresentation.Labelmap:\n      return getDefaultLabelmapConfig();\n    default:\n      throw new Error(`Unknown representation type: ${representationType}`);\n  }\n}\n","import { _cloneDeep } from 'lodash.clonedeep';\nimport {\n  getEnabledElementByIds,\n  volumeLoader,\n  VolumeViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Create a new 3D segmentation volume from the default imageData presented in\n * the first actor of the viewport. It looks at the metadata of the imageData\n * to determine the volume dimensions and spacing if particular options are not provided.\n *\n * @param viewportId - The Id of the viewport from which to derive the volume from.\n * @param renderingEngineId - The Id of the rendering engine the viewport belongs to.\n * @param [segmentationId] - The Id to name the generated segmentation. Autogenerated if not given.\n * @param [options] - LabelmapOptions\n * @returns A promise that resolves to the Id of the new labelmap volume.\n */\nexport default async function createLabelmapVolumeForViewport(input: {\n  viewportId: string;\n  renderingEngineId: string;\n  segmentationId?: string;\n  options?: {\n    volumeId?: string;\n    scalarData?: Float32Array | Uint8Array | Uint16Array | Int16Array;\n    targetBuffer?: {\n      type: 'Float32Array' | 'Uint8Array' | 'Uint16Array' | 'Int8Array';\n    };\n    metadata?: any;\n    dimensions?: Types.Point3;\n    spacing?: Types.Point3;\n    origin?: Types.Point3;\n    direction?: Float32Array;\n  };\n}): Promise<string> {\n  const { viewportId, renderingEngineId, options } = input;\n  let { segmentationId } = input;\n  const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n\n  if (!enabledElement) {\n    throw new Error('element disabled');\n  }\n\n  const { viewport } = enabledElement;\n  if (!(viewport instanceof VolumeViewport)) {\n    throw new Error('Segmentation only supports VolumeViewport');\n  }\n\n  const { uid } = viewport.getDefaultActor();\n\n  if (segmentationId === undefined) {\n    // Name the segmentation volume with the viewport Id\n    segmentationId = `${uid}-based-segmentation-${\n      options?.volumeId ?? csUtils.uuidv4().slice(0, 8)\n    }`;\n  }\n\n  if (options) {\n    // create a new labelmap with its own properties\n    // This allows creation of a higher resolution labelmap vs reference volume\n    const properties = _cloneDeep(options);\n    await volumeLoader.createLocalVolume(properties, segmentationId);\n  } else {\n    // create a labelmap from a reference volume\n    const { uid: volumeId } = viewport.getDefaultActor();\n    await volumeLoader.createAndCacheDerivedVolume(volumeId, {\n      volumeId: segmentationId,\n    });\n  }\n\n  return segmentationId;\n}\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport getBrushToolInstances from './utilities';\n\nexport function setBrushSizeForToolGroup(\n  toolGroupId: string,\n  brushSize: number\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n\n  brushBasedToolInstances.forEach((tool: BrushTool) => {\n    tool.configuration.brushSize = brushSize;\n\n    // Invalidate the brush being rendered so it can update.\n    tool.invalidateBrushCursor();\n  });\n\n  // Trigger an annotation render for any viewports on the toolgroup\n  const viewportsInfo = toolGroup.getViewportsInfo();\n\n  const viewportsInfoArray = Object.keys(viewportsInfo).map(\n    (key) => viewportsInfo[key]\n  );\n\n  if (!viewportsInfoArray.length) {\n    return;\n  }\n\n  const { renderingEngineId } = viewportsInfoArray[0];\n\n  // Use helper to get array of viewportIds, or we just end up doing this mapping\n  // ourselves here.\n  const viewportIds = toolGroup.getViewportIds();\n\n  const renderingEngine = getRenderingEngine(renderingEngineId);\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIds);\n}\n\nexport function getBrushSizeForToolGroup(toolGroupId: string): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const toolInstances = toolGroup._toolInstances;\n\n  if (!Object.keys(toolInstances).length) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n\n  // one is enough as they share the same brush size\n  const brushToolInstance = brushBasedToolInstances[0];\n\n  if (!brushToolInstance) {\n    return;\n  }\n\n  // TODO -> Assumes the brush sizes are the same and set via these helpers.\n  return brushToolInstance.configuration.brushSize;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport getBrushToolInstances from './utilities';\n\nexport function setBrushThresholdForToolGroup(\n  toolGroupId: string,\n  threshold: Types.Point2\n) {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n\n  brushBasedToolInstances.forEach((tool) => {\n    tool.configuration.strategySpecificConfiguration.THRESHOLD_INSIDE_CIRCLE.threshold =\n      threshold;\n  });\n\n  // Trigger an annotation render for any viewports on the toolgroup\n  const viewportsInfo = toolGroup.getViewportsInfo();\n\n  if (!viewportsInfo.length) {\n    return;\n  }\n\n  const { renderingEngineId } = viewportsInfo[0];\n\n  // Use helper to get array of viewportIds, or we just end up doing this mapping\n  // ourselves here.\n  const viewportIds = toolGroup.getViewportIds();\n\n  const renderingEngine = getRenderingEngine(renderingEngineId);\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIds);\n}\n\nexport function getBrushThresholdForToolGroup(toolGroupId: string) {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const toolInstances = toolGroup._toolInstances;\n\n  if (!Object.keys(toolInstances).length) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n  const brushToolInstance = brushBasedToolInstances[0];\n\n  if (!brushToolInstance) {\n    return;\n  }\n\n  // TODO -> Assumes the\n  return brushToolInstance.configuration.strategySpecificConfiguration\n    .THRESHOLD_INSIDE_CIRCLE.threshold;\n}\n","import { Types } from '@cornerstonejs/core';\nimport { pointInShapeCallback } from '../../utilities';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport {\n  getVoxelOverlap,\n  processVolumes,\n  ThresholdInformation,\n} from './utilities';\n\n/**\n * It thresholds a segmentation volume based on a set of threshold values with\n * respect to a list of volumes and respective threshold ranges.\n * @param segmentationVolume - the segmentation volume to be modified\n * @param segmentationIndex - the index of the segmentation to modify\n * @param thresholdVolumeInformation - array of objects containing volume data\n * and a range (lower and upper values) to threshold\n * @param overlapType - indicates if the user requires all voxels pass\n * (overlapType = 1) or any voxel pass (overlapType = 0)\n * @returns\n */\nfunction thresholdSegmentationByRange(\n  segmentationVolume: Types.IImageVolume,\n  segmentationIndex: number,\n  thresholdVolumeInformation: ThresholdInformation[],\n  overlapType: number\n): Types.IImageVolume {\n  const scalarData = segmentationVolume.getScalarData();\n\n  // prepare a list of volume information objects for callback functions\n  const { baseVolumeIdx, volumeInfoList } = processVolumes(\n    segmentationVolume,\n    thresholdVolumeInformation\n  );\n\n  /**\n   * This function will test all overlaps between a voxel in base volume\n   * (the reference for segmentation volume creation) and voxels in other\n   * volumes.\n   * If the segmentation volume and the image volume are the same size,\n   * checks if the scalar data at each point is within the threshold values.\n   * If the segmentation volume and the image volume are different sizes,\n   * checks the voxel overlap\n   */\n  volumeInfoList.forEach((volumeInfo) => {\n    const { volumeSize } = volumeInfo;\n\n    if (volumeSize === scalarData.length) {\n      _handleSameSizeVolume(scalarData, segmentationIndex, volumeInfo);\n    } else {\n      _handleDifferentSizeVolume(\n        scalarData,\n        segmentationIndex,\n        volumeInfo,\n        volumeInfoList,\n        baseVolumeIdx,\n        overlapType\n      );\n    }\n  });\n\n  triggerSegmentationDataModified(segmentationVolume.volumeId);\n\n  return segmentationVolume;\n}\n\nfunction _handleDifferentSizeVolume(\n  scalarData: Types.VolumeScalarData,\n  segmentationIndex: number,\n  volumeInfo: any,\n  volumeInfoList: any,\n  baseVolumeIdx: number,\n  overlapType: number\n) {\n  const { imageData, lower, upper, dimensions } = volumeInfo;\n\n  let total, overlaps, range;\n\n  for (let i = 0; i < scalarData.length; i++) {\n    if (scalarData[i] === segmentationIndex) {\n      const overlapBounds = getVoxelOverlap(\n        imageData,\n        dimensions,\n        volumeInfoList[baseVolumeIdx].spacing,\n        volumeInfoList[baseVolumeIdx].imageData.getPoint(i)\n      );\n\n      const callbackOverlap = ({ value }) => {\n        total = total + 1;\n        if (value >= range.lower && value <= range.upper) {\n          overlaps = overlaps + 1;\n        }\n      };\n\n      total = 0;\n      overlaps = 0;\n      range = { lower, upper };\n      let overlapTest = false;\n\n      // check all voxel overlaps\n      pointInShapeCallback(\n        imageData,\n        () => true,\n        callbackOverlap,\n        overlapBounds\n      );\n\n      overlapTest = overlapType === 0 ? overlaps > 0 : overlaps === total;\n      scalarData[i] = overlapTest ? segmentationIndex : 0;\n    }\n  }\n  return { total, range, overlaps };\n}\n\nfunction _handleSameSizeVolume(\n  scalarData: Types.VolumeScalarData,\n  segmentationIndex: number,\n  volumeInfo: any\n) {\n  const { referenceValues, lower, upper } = volumeInfo;\n\n  for (let i = 0; i < scalarData.length; i++) {\n    if (scalarData[i] === segmentationIndex) {\n      const value = referenceValues[i];\n      scalarData[i] = value >= lower && value <= upper ? segmentationIndex : 0;\n    }\n  }\n}\n\nexport default thresholdSegmentationByRange;\n","import { Types } from '@cornerstonejs/core';\n\n/**\n * Returns the orientation of the vector in the patient coordinate system.\n * @public\n *\n * @param vector - Input array\n * @returns The orientation in the patient coordinate system.\n */\nexport default function getOrientationStringLPS(vector: Types.Point3): string {\n  // Thanks to David Clunie\n  // https://sites.google.com/site/dicomnotes/\n\n  let orientation = '';\n  const orientationX = vector[0] < 0 ? 'R' : 'L';\n  const orientationY = vector[1] < 0 ? 'A' : 'P';\n  const orientationZ = vector[2] < 0 ? 'F' : 'H';\n\n  // Should probably make this a function vector3.abs\n  const abs = [Math.abs(vector[0]), Math.abs(vector[1]), Math.abs(vector[2])];\n\n  const MIN = 0.0001;\n\n  for (let i = 0; i < 3; i++) {\n    if (abs[0] > MIN && abs[0] > abs[1] && abs[0] > abs[2]) {\n      orientation += orientationX;\n      abs[0] = 0;\n    } else if (abs[1] > MIN && abs[1] > abs[0] && abs[1] > abs[2]) {\n      orientation += orientationY;\n      abs[1] = 0;\n    } else if (abs[2] > MIN && abs[2] > abs[0] && abs[2] > abs[1]) {\n      orientation += orientationZ;\n      abs[2] = 0;\n    } else if (abs[0] > MIN && abs[1] > MIN && abs[0] === abs[1]) {\n      orientation += orientationX + orientationY;\n      abs[0] = 0;\n      abs[1] = 0;\n    } else if (abs[0] > MIN && abs[2] > MIN && abs[0] === abs[2]) {\n      orientation += orientationX + orientationZ;\n      abs[0] = 0;\n      abs[2] = 0;\n    } else if (abs[1] > MIN && abs[2] > MIN && abs[1] === abs[2]) {\n      orientation += orientationY + orientationZ;\n      abs[1] = 0;\n      abs[2] = 0;\n    } else {\n      break;\n    }\n  }\n\n  return orientation;\n}\n","/**\n * Inverts an orientation string.\n * @public\n *\n * @param orientationString - The orientation.\n * @returns The inverted orientationString.\n */\nexport default function invertOrientationStringLPS(\n  orientationString: string\n): string {\n  let inverted = orientationString.replace('H', 'f');\n\n  inverted = inverted.replace('F', 'h');\n  inverted = inverted.replace('R', 'l');\n  inverted = inverted.replace('L', 'r');\n  inverted = inverted.replace('A', 'p');\n  inverted = inverted.replace('P', 'a');\n  inverted = inverted.toUpperCase();\n\n  return inverted;\n}\n","/**\n * CINE Tool Events\n */\nenum Events {\n  CLIP_STOPPED = 'CORNERSTONE_CINE_TOOL_STOPPED',\n  CLIP_STARTED = 'CORNERSTONE_CINE_TOOL_STARTED',\n}\n\nexport default Events;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { CINETypes } from '../../types';\n\nconst state: Record<string, CINETypes.ToolData> = {};\n\nfunction addToolState(element: HTMLDivElement, data: CINETypes.ToolData): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  state[viewportId] = data;\n}\n\nfunction getToolState(element: HTMLDivElement): CINETypes.ToolData | undefined {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  return state[viewportId];\n}\n\nexport { addToolState, getToolState };\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport {\n  utilities as csUtils,\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  cache,\n  BaseVolumeViewport,\n} from '@cornerstonejs/core';\n\nimport { Types } from '@cornerstonejs/core';\nimport CINE_EVENTS from './events';\nimport { addToolState, getToolState } from './state';\nimport { CINETypes } from '../../types';\nimport scroll from '../scroll';\n\nconst { triggerEvent } = csUtils;\n\nconst debounced = true;\nconst loop = true;\nconst dynamicVolumesPlayingMap = new Map();\n\n/**\n * Starts playing a clip or adjusts the frame rate of an already playing clip.  framesPerSecond is\n * optional and defaults to 30 if not specified.  A negative framesPerSecond will play the clip in reverse.\n * The element must be a stack of images\n * @param element - HTML Element\n * @param framesPerSecond - Number of frames per second\n */\nfunction playClip(\n  element: HTMLDivElement,\n  playClipOptions: CINETypes.PlayClipOptions\n): void {\n  let playClipTimeouts;\n  let playClipIsTimeVarying;\n\n  if (element === undefined) {\n    throw new Error('playClip: element must not be undefined');\n  }\n\n  const enabledElement = getEnabledElement(element);\n\n  if (!enabledElement) {\n    throw new Error(\n      'playClip: element must be a valid Cornerstone enabled element'\n    );\n  }\n\n  // 4D Cine is enabled by default\n  playClipOptions.dynamicCineEnabled =\n    playClipOptions.dynamicCineEnabled ?? true;\n\n  const { viewport } = enabledElement;\n  const volume = _getVolumeFromViewport(viewport);\n  const playClipContext = _createCinePlayContext(viewport, playClipOptions);\n  let playClipData = getToolState(element);\n\n  const isDynamicCinePlaying =\n    playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume();\n\n  // If user is trying to play CINE for a 4D volume it first needs\n  // to stop CINE that has may be playing for any other viewport.\n  if (isDynamicCinePlaying) {\n    _stopDynamicVolumeCine(element);\n  }\n\n  if (!playClipData) {\n    playClipData = {\n      intervalId: undefined,\n      framesPerSecond: 30,\n      lastFrameTimeStamp: undefined,\n      ignoreFrameTimeVector: false,\n      usingFrameTimeVector: false,\n      frameTimeVector: playClipOptions.frameTimeVector ?? undefined,\n      speed: playClipOptions.frameTimeVectorSpeedMultiplier ?? 1,\n      reverse: playClipOptions.reverse ?? false,\n      loop: playClipOptions.loop ?? true,\n    };\n    addToolState(element, playClipData);\n  } else {\n    // Make sure the specified clip is not running before any property update.\n    // If a 3D CINE was playing it passes isDynamicCinePlaying as FALSE to\n    // prevent stopping a 4D CINE in case it is playing on another viewport.\n    _stopClip(element, isDynamicCinePlaying);\n  }\n\n  playClipData.dynamicCineEnabled = playClipOptions.dynamicCineEnabled;\n\n  // If a framesPerSecond is specified and is valid, update the playClipData now\n  if (\n    playClipOptions.framesPerSecond < 0 ||\n    playClipOptions.framesPerSecond > 0\n  ) {\n    playClipData.framesPerSecond = Number(playClipOptions.framesPerSecond);\n    playClipData.reverse = playClipData.framesPerSecond < 0;\n    // If framesPerSecond is given, frameTimeVector will be ignored...\n    playClipData.ignoreFrameTimeVector = true;\n  }\n\n  // Determine if frame time vector should be used instead of a fixed frame rate...\n  if (\n    playClipData.ignoreFrameTimeVector !== true &&\n    playClipData.frameTimeVector &&\n    playClipData.frameTimeVector.length === playClipContext.numScrollSteps &&\n    playClipContext.frameTimeVectorEnabled\n  ) {\n    const { timeouts, isTimeVarying } = _getPlayClipTimeouts(\n      playClipData.frameTimeVector,\n      playClipData.speed\n    );\n\n    playClipTimeouts = timeouts;\n    playClipIsTimeVarying = isTimeVarying;\n  }\n\n  // This function encapsulates the frame rendering logic...\n  const playClipAction = () => {\n    const { numScrollSteps, currentStepIndex } = playClipContext;\n    let newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n    const newStepIndexOutOfRange =\n      newStepIndex < 0 || newStepIndex >= numScrollSteps;\n\n    if (!loop && newStepIndexOutOfRange) {\n      // If a 3D CINE was playing it passes isDynamicCinePlaying as FALSE to\n      // prevent stopping a 4D CINE in case it is playing on another viewport.\n      _stopClip(element, isDynamicCinePlaying);\n\n      const eventDetail = { element };\n\n      triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, eventDetail);\n      return;\n    }\n\n    // Loop around if newStepIndex is out of range\n    if (newStepIndex >= numScrollSteps) {\n      newStepIndex = 0;\n    } else if (newStepIndex < 0) {\n      newStepIndex = numScrollSteps - 1;\n    }\n\n    const delta = newStepIndex - currentStepIndex;\n\n    if (delta) {\n      playClipContext.scroll(delta);\n    }\n  };\n\n  if (isDynamicCinePlaying) {\n    dynamicVolumesPlayingMap.set(volume.volumeId, element);\n  }\n\n  // If playClipTimeouts array is available, not empty and its elements are NOT uniform ...\n  // ... (at least one timeout is different from the others), use alternate setTimeout implementation\n  if (\n    playClipTimeouts &&\n    playClipTimeouts.length > 0 &&\n    playClipIsTimeVarying\n  ) {\n    playClipData.usingFrameTimeVector = true;\n    playClipData.intervalId = window.setTimeout(\n      function playClipTimeoutHandler() {\n        playClipData.intervalId = window.setTimeout(\n          playClipTimeoutHandler,\n          playClipTimeouts[playClipContext.currentStepIndex]\n        );\n        playClipAction();\n      },\n      0\n    );\n  } else {\n    // ... otherwise user setInterval implementation which is much more efficient.\n    playClipData.usingFrameTimeVector = false;\n    playClipData.intervalId = window.setInterval(\n      playClipAction,\n      1000 / Math.abs(playClipData.framesPerSecond)\n    );\n  }\n\n  const eventDetail = {\n    element,\n  };\n\n  triggerEvent(element, CINE_EVENTS.CLIP_STARTED, eventDetail);\n}\n\n/**\n * Stops an already playing clip.\n * @param element - HTML Element\n */\nfunction stopClip(element: HTMLDivElement): void {\n  _stopClip(element, true);\n}\n\nfunction _stopClip(element: HTMLDivElement, stopDynamicCine: boolean): void {\n  const enabledElement = getEnabledElement(element);\n  if (!enabledElement) return;\n  const { viewport } = enabledElement;\n  const cineToolData = getToolState(viewport.element);\n\n  if (cineToolData) {\n    _stopClipWithData(cineToolData);\n  }\n\n  if (stopDynamicCine && viewport instanceof BaseVolumeViewport) {\n    _stopDynamicVolumeCine(element);\n  }\n}\n\n/**\n * [private] Stops any CINE playing for the dynamic volume loaded on this viewport\n * @param element - HTML Element\n */\nfunction _stopDynamicVolumeCine(element) {\n  const { viewport } = getEnabledElement(element);\n  const volume = _getVolumeFromViewport(viewport);\n\n  // If the current viewport has a 4D volume loaded it may be playing\n  // if it is also loaded on another viewport and user has started CINE\n  // for that one. This guarantees the other viewport will also be stopped.\n  if (volume?.isDynamicVolume()) {\n    const dynamicCineElement = dynamicVolumesPlayingMap.get(volume.volumeId);\n\n    dynamicVolumesPlayingMap.delete(volume.volumeId);\n\n    if (dynamicCineElement && dynamicCineElement !== element) {\n      stopClip(<HTMLDivElement>dynamicCineElement);\n    }\n  }\n}\n\n/**\n * [private] Turns a Frame Time Vector (0018,1065) array into a normalized array of timeouts. Each element\n * ... of the resulting array represents the amount of time each frame will remain on the screen.\n * @param vector - A Frame Time Vector (0018,1065) as specified in section C.7.6.5.1.2 of DICOM standard.\n * @param speed - A speed factor which will be applied to each element of the resulting array.\n * @returns An array with timeouts for each animation frame.\n */\nfunction _getPlayClipTimeouts(vector: number[], speed: number) {\n  let i;\n  let sample;\n  let delay;\n  let sum = 0;\n  const limit = vector.length;\n  const timeouts = [];\n\n  // Initialize time varying to false\n  let isTimeVarying = false;\n\n  if (typeof speed !== 'number' || speed <= 0) {\n    speed = 1;\n  }\n\n  // First element of a frame time vector must be discarded\n  for (i = 1; i < limit; i++) {\n    // eslint-disable-next-line no-bitwise\n    delay = (Number(vector[i]) / speed) | 0; // Integral part only\n    timeouts.push(delay);\n    if (i === 1) {\n      // Use first item as a sample for comparison\n      sample = delay;\n    } else if (delay !== sample) {\n      isTimeVarying = true;\n    }\n\n    sum += delay;\n  }\n\n  if (timeouts.length > 0) {\n    if (isTimeVarying) {\n      // If it's a time varying vector, make the last item an average...\n      // eslint-disable-next-line no-bitwise\n      delay = (sum / timeouts.length) | 0;\n    } else {\n      delay = timeouts[0];\n    }\n\n    timeouts.push(delay);\n  }\n\n  return { timeouts, isTimeVarying };\n}\n\n/**\n * [private] Performs the heavy lifting of stopping an ongoing animation.\n * @param element - HTML Element\n * @param playClipData - The data from playClip that needs to be stopped.\n */\nfunction _stopClipWithData(playClipData) {\n  const id = playClipData.intervalId;\n\n  if (typeof id !== 'undefined') {\n    playClipData.intervalId = undefined;\n    if (playClipData.usingFrameTimeVector) {\n      clearTimeout(id);\n    } else {\n      clearInterval(id);\n    }\n  }\n}\n\nfunction _getVolumesFromViewport(viewport): Types.IImageVolume[] {\n  return viewport\n    .getActors()\n    .map((actor) => cache.getVolume(actor.uid))\n    .filter((volume) => !!volume);\n}\n\nfunction _getVolumeFromViewport(viewport): Types.IImageVolume {\n  const volumes = _getVolumesFromViewport(viewport);\n  const dynamicVolume = volumes.find((volume) => volume.isDynamicVolume());\n\n  return dynamicVolume ?? volumes[0];\n}\n\nfunction _createStackViewportCinePlayContext(\n  viewport: StackViewport\n): CINETypes.CinePlayContext {\n  const imageIds = viewport.getImageIds();\n\n  return {\n    get numScrollSteps(): number {\n      return imageIds.length;\n    },\n    get currentStepIndex(): number {\n      return viewport.getTargetImageIdIndex();\n    },\n    get frameTimeVectorEnabled(): boolean {\n      // It is always in acquired orientation\n      return true;\n    },\n    scroll(delta: number): void {\n      scroll(viewport, { delta, debounceLoading: debounced });\n    },\n  };\n}\n\nfunction _createVolumeViewportCinePlayContext(\n  viewport: VolumeViewport,\n  volume: Types.IImageVolume\n): CINETypes.CinePlayContext {\n  const { volumeId } = volume;\n  const cachedScrollInfo = {\n    viewPlaneNormal: vec3.create(),\n    scrollInfo: null,\n  };\n\n  const getScrollInfo = () => {\n    const camera = viewport.getCamera();\n    const updateCache =\n      !cachedScrollInfo.scrollInfo ||\n      !vec3.equals(camera.viewPlaneNormal, cachedScrollInfo.viewPlaneNormal);\n\n    // Number of steps would change only after rotating the volume so it\n    // caches the result and recomputes only when necessary. Until it is\n    // rotated the current frame is updated locally\n    if (updateCache) {\n      const scrollInfo = csUtils.getVolumeViewportScrollInfo(\n        viewport,\n        volumeId\n      );\n\n      cachedScrollInfo.viewPlaneNormal = camera.viewPlaneNormal;\n      cachedScrollInfo.scrollInfo = scrollInfo;\n    }\n\n    return cachedScrollInfo.scrollInfo;\n  };\n\n  return {\n    get numScrollSteps(): number {\n      return getScrollInfo().numScrollSteps;\n    },\n    get currentStepIndex(): number {\n      return getScrollInfo().currentStepIndex;\n    },\n    get frameTimeVectorEnabled(): boolean {\n      const camera = viewport.getCamera();\n      const volumeViewPlaneNormal = volume.direction\n        .slice(6, 9)\n        .map((x) => -x) as Types.Point3;\n      const dot = vec3.dot(volumeViewPlaneNormal, camera.viewPlaneNormal);\n\n      // Check if the volume is in acquired orientation\n      // it may be flipped or rotated in plane\n      return glMatrix.equals(dot, 1);\n    },\n    scroll(delta: number): void {\n      getScrollInfo().currentStepIndex += delta;\n      scroll(viewport, { delta });\n    },\n  };\n}\n\nfunction _createDynamicVolumeViewportCinePlayContext(\n  volume: Types.IDynamicImageVolume\n): CINETypes.CinePlayContext {\n  return {\n    get numScrollSteps(): number {\n      return volume.numTimePoints;\n    },\n    get currentStepIndex(): number {\n      return volume.timePointIndex;\n    },\n    get frameTimeVectorEnabled(): boolean {\n      // Looping throught time does not uses frameTimeVector\n      return false;\n    },\n    scroll(delta: number): void {\n      // Updating this property (setter) makes it move to the desired time point\n      volume.timePointIndex += delta;\n    },\n  };\n}\n\nfunction _createCinePlayContext(\n  viewport,\n  playClipOptions: CINETypes.PlayClipOptions\n): CINETypes.CinePlayContext {\n  if (viewport instanceof StackViewport) {\n    return _createStackViewportCinePlayContext(viewport);\n  }\n\n  if (viewport instanceof VolumeViewport) {\n    const volume = _getVolumeFromViewport(viewport);\n\n    if (playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume()) {\n      return _createDynamicVolumeViewportCinePlayContext(\n        <Types.IDynamicImageVolume>volume\n      );\n    }\n\n    return _createVolumeViewportCinePlayContext(viewport, volume);\n  }\n\n  throw new Error('Unknown viewport type');\n}\n\nexport { playClip, stopClip };\n","import { Types } from '@cornerstonejs/core';\nimport { PlanarFreehandROITool } from '../../tools';\nimport { ToolGroupManager } from '../../store';\nimport { PlanarFreehandROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport interpolateSegmentPoints from './interpolation/interpolateSegmentPoints';\n\nfunction shouldPreventInterpolation(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation,\n  knotsRatioPercentage: number\n): boolean {\n  if (!annotation?.data?.polyline || knotsRatioPercentage <= 0) {\n    return true;\n  }\n\n  if (!enabledElement.viewport) {\n    return true;\n  }\n\n  const { renderingEngineId, viewportId, FrameOfReferenceUID } = enabledElement;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (annotation.metadata.FrameOfReferenceUID !== FrameOfReferenceUID) {\n    return true;\n  }\n\n  if (!toolGroup) {\n    return true;\n  }\n\n  const toolInstance = toolGroup.getToolInstance(annotation.metadata.toolName);\n\n  // strategy to prevent non PlanarFreehandTool\n  if (!(toolInstance instanceof PlanarFreehandROITool)) {\n    return true;\n  }\n\n  return (\n    toolInstance.isDrawing ||\n    toolInstance.isEditingOpen ||\n    toolInstance.isEditingClosed\n  );\n}\n/**\n * Interpolates a given annotation from a given enabledElement.\n * It mutates annotation param.\n * The param knotsRatioPercentage defines the percentage of points to be considered as knots on the interpolation process.\n * Interpolation will be skipped in case: annotation is not present in enabledElement (or there is no toolGroup associated with it), related tool is being modified.\n */\nexport default function interpolateAnnotation(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation,\n  knotsRatioPercentage: number\n): boolean {\n  // prevent running while there is any tool annotation being modified\n  if (\n    shouldPreventInterpolation(enabledElement, annotation, knotsRatioPercentage)\n  ) {\n    return false;\n  }\n\n  const { viewport } = enabledElement;\n  // use only 2 dimensions on interpolation (what visually matters),\n  // otherwise a 3d interpolation might have a totally different output as it consider one more dimension.\n  const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n  const interpolatedCanvasPoints = <Types.Point2[]>(\n    interpolateSegmentPoints(\n      canvasPoints,\n      0,\n      canvasPoints.length,\n      knotsRatioPercentage\n    )\n  );\n\n  if (interpolatedCanvasPoints === canvasPoints) {\n    return false;\n  }\n\n  annotation.data.polyline = interpolatedCanvasPoints.map(\n    viewport.canvasToWorld\n  );\n\n  return true;\n}\n","import interpolateAnnotation from './interpolateAnnotation';\n\nexport default {\n  interpolateAnnotation,\n};\n\nexport { interpolateAnnotation };\n","import { getEnabledElement } from '@cornerstonejs/core';\n\nconst state: Record<number, any> = {};\n\nfunction addToolState(element: HTMLDivElement, data): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  state[viewportId] = data;\n}\n\nfunction getToolState(element: HTMLDivElement): any {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  return state[viewportId];\n}\n\nexport { addToolState, getToolState };\n","import {\n  getEnabledElement,\n  StackViewport,\n  imageLoader,\n  Enums,\n  eventTarget,\n  imageLoadPoolManager,\n  cache,\n  getConfiguration as getCoreConfiguration,\n} from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\n\nconst requestType = Enums.RequestType.Prefetch;\nconst priority = 0;\nconst addToBeginning = true;\n\nlet configuration = {\n  maxImagesToPrefetch: Infinity,\n  preserveExistingPool: false,\n};\n\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 10;\n\nfunction range(lowEnd, highEnd) {\n  // Javascript version of Python's range function\n  // http://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-an-array-based-on-suppl\n  lowEnd = Math.round(lowEnd) || 0;\n  highEnd = Math.round(highEnd) || 0;\n\n  const arr = [];\n  let c = highEnd - lowEnd + 1;\n\n  if (c <= 0) {\n    return arr;\n  }\n\n  while (c--) {\n    arr[c] = highEnd--;\n  }\n\n  return arr;\n}\n\nfunction nearestIndex(arr, x) {\n  // Return index of nearest values in array\n  // http://stackoverflow.com/questions/25854212/return-index-of-nearest-values-in-an-array\n  let low = 0;\n  let high = arr.length - 1;\n\n  arr.forEach((v, idx) => {\n    if (v < x) {\n      low = Math.max(idx, low);\n    } else if (v > x) {\n      high = Math.min(idx, high);\n    }\n  });\n\n  return { low, high };\n}\n\nfunction getStackData(element) {\n  const enabledElement = getEnabledElement(element);\n\n  if (!enabledElement) {\n    throw new Error(\n      'stackPrefetch: element must be a valid Cornerstone enabled element'\n    );\n  }\n\n  const { viewport } = enabledElement;\n\n  if (!(viewport instanceof StackViewport)) {\n    throw new Error(\n      'stackPrefetch: element must be a StackViewport, VolumeViewport stackPrefetch not yet implemented'\n    );\n  }\n\n  return {\n    currentImageIdIndex: viewport.getCurrentImageIdIndex(),\n    imageIds: viewport.getImageIds(),\n  };\n}\n\nfunction prefetch(element) {\n  // Get the stackPrefetch tool data\n  const stackPrefetchData = getToolState(element);\n\n  if (!stackPrefetchData) {\n    return;\n  }\n\n  const stackPrefetch = stackPrefetchData || {};\n  const stack = getStackData(element);\n\n  if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n    console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n    return;\n  }\n\n  // If all the requests are complete, disable the stackPrefetch tool\n  if (\n    !stackPrefetch.indicesToRequest ||\n    !stackPrefetch.indicesToRequest.length\n  ) {\n    stackPrefetch.enabled = false;\n  }\n\n  // Make sure the tool is still enabled\n  if (stackPrefetch.enabled === false) {\n    return;\n  }\n\n  // Remove an imageIdIndex from the list of indices to request\n  // This fires when the individual image loading deferred is resolved\n  function removeFromList(imageIdIndex) {\n    const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n\n    if (index > -1) {\n      // Don't remove last element if imageIdIndex not found\n      stackPrefetch.indicesToRequest.splice(index, 1);\n    }\n  }\n\n  // Remove all already cached images from the\n  // IndicesToRequest array\n  stackPrefetchData.indicesToRequest.sort((a, b) => a - b);\n  const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n\n  indicesToRequestCopy.forEach(function (imageIdIndex) {\n    const imageId = stack.imageIds[imageIdIndex];\n\n    if (!imageId) {\n      return;\n    }\n\n    const imageLoadObject = cache.getImageLoadObject(imageId);\n\n    if (imageLoadObject) {\n      removeFromList(imageIdIndex);\n    }\n  });\n\n  // Stop here if there are no images left to request\n  // After those in the cache have been removed\n  if (!stackPrefetch.indicesToRequest.length) {\n    return;\n  }\n\n  // Clear the requestPool of prefetch requests, if needed.\n  if (!configuration.preserveExistingPool) {\n    imageLoadPoolManager.clearRequestStack(requestType);\n  }\n\n  // Identify the nearest imageIdIndex to the currentImageIdIndex\n  const nearest = nearestIndex(\n    stackPrefetch.indicesToRequest,\n    stack.currentImageIdIndex\n  );\n\n  let imageId;\n  let nextImageIdIndex;\n  const preventCache = false;\n\n  function doneCallback(image) {\n    console.log('prefetch done: %s', image.imageId);\n    const imageIdIndex = stack.imageIds.indexOf(image.imageId);\n\n    removeFromList(imageIdIndex);\n\n    // triggerEvent(element, EVENTS.STACK_PREFETCH_IMAGE_LOADED, {\n    //   element,\n    //   imageId: image.imageId,\n    //   imageIndex: imageIdIndex,\n    //   stackPrefetch,\n    //   stack,\n    // });\n\n    // If there are no more images to fetch\n    // if (\n    //   !(\n    //     stackPrefetch.indicesToRequest &&\n    //     stackPrefetch.indicesToRequest.length > 0\n    //   )\n    // ) {\n    //   triggerEvent(element, EVENTS.STACK_PREFETCH_DONE, {\n    //     element,\n    //     stackPrefetch,\n    //     stack,\n    //   });\n    // }\n  }\n\n  // Retrieve the errorLoadingHandler if one exists\n  // const errorLoadingHandler =\n  //   loadHandlerManager.getErrorLoadingHandler(element);\n\n  // function failCallback(error) {\n  //   logger.log('prefetch errored: %o', error);\n  //   if (errorLoadingHandler) {\n  //     errorLoadingHandler(element, imageId, error, 'stackPrefetch');\n  //   }\n  // }\n\n  // Prefetch images around the current image (before and after)\n  let lowerIndex = nearest.low;\n  let higherIndex = nearest.high;\n  const imageIdsToPrefetch = [];\n\n  while (\n    lowerIndex >= 0 ||\n    higherIndex < stackPrefetch.indicesToRequest.length\n  ) {\n    const currentIndex = stack.currentImageIdIndex;\n    const shouldSkipLower =\n      currentIndex - stackPrefetch.indicesToRequest[lowerIndex] >\n      configuration.maxImagesToPrefetch;\n    const shouldSkipHigher =\n      stackPrefetch.indicesToRequest[higherIndex] - currentIndex >\n      configuration.maxImagesToPrefetch;\n\n    const shouldLoadLower = !shouldSkipLower && lowerIndex >= 0;\n    const shouldLoadHigher =\n      !shouldSkipHigher && higherIndex < stackPrefetch.indicesToRequest.length;\n\n    if (!shouldLoadHigher && !shouldLoadLower) {\n      break;\n    }\n\n    if (shouldLoadLower) {\n      nextImageIdIndex = stackPrefetch.indicesToRequest[lowerIndex--];\n      imageId = stack.imageIds[nextImageIdIndex];\n      imageIdsToPrefetch.push(imageId);\n    }\n\n    if (shouldLoadHigher) {\n      nextImageIdIndex = stackPrefetch.indicesToRequest[higherIndex++];\n      imageId = stack.imageIds[nextImageIdIndex];\n      imageIdsToPrefetch.push(imageId);\n    }\n  }\n\n  const requestFn = (imageId, options) =>\n    imageLoader.loadAndCacheImage(imageId, options);\n\n  const { useNorm16Texture } = getCoreConfiguration().rendering;\n\n  imageIdsToPrefetch.forEach((imageId) => {\n    // IMPORTANT: Request type should be passed if not the 'interaction'\n    // highest priority will be used for the request type in the imageRetrievalPool\n    const options = {\n      targetBuffer: {\n        type: useNorm16Texture ? undefined : 'Float32Array',\n      },\n      preScale: {\n        enabled: true,\n      },\n      requestType,\n    };\n\n    imageLoadPoolManager.addRequest(\n      requestFn.bind(null, imageId, options),\n      requestType,\n      // Additional details\n      {\n        imageId,\n      },\n      priority\n      // addToBeginning\n    );\n  });\n}\n\nfunction getPromiseRemovedHandler(element) {\n  return function (e) {\n    const eventData = e.detail;\n\n    // When an imagePromise has been pushed out of the cache, re-add its index\n    // It to the indicesToRequest list so that it will be retrieved later if the\n    // CurrentImageIdIndex is changed to an image nearby\n    let stackData;\n\n    try {\n      // It will throw an exception in some cases (eg: thumbnails)\n      stackData = getStackData(element);\n    } catch (error) {\n      return;\n    }\n\n    if (!stackData || !stackData.imageIds || stackData.imageIds.length === 0) {\n      return;\n    }\n\n    const stack = stackData;\n    const imageIdIndex = stack.imageIds.indexOf(eventData.imageId);\n\n    // Make sure the image that was removed is actually in this stack\n    // Before adding it to the indicesToRequest array\n    if (imageIdIndex < 0) {\n      return;\n    }\n\n    const stackPrefetchData = getToolState(element);\n\n    if (\n      !stackPrefetchData ||\n      !stackPrefetchData.data ||\n      !stackPrefetchData.data.length\n    ) {\n      return;\n    }\n\n    stackPrefetchData.indicesToRequest.push(imageIdIndex);\n  };\n}\n\nfunction onImageUpdated(e) {\n  // Start prefetching again (after a delay)\n  // When the user has scrolled to a new image\n  clearTimeout(resetPrefetchTimeout);\n  resetPrefetchTimeout = setTimeout(function () {\n    const element = e.target;\n\n    // If playClip is enabled and the user loads a different series in the viewport\n    // An exception will be thrown because the element will not be enabled anymore\n    try {\n      prefetch(element);\n    } catch (error) {\n      return;\n    }\n  }, resetPrefetchDelay);\n}\n\nfunction enable(element) {\n  const stack = getStackData(element);\n\n  if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n    console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n    return;\n  }\n\n  // Use the currentImageIdIndex from the stack as the initialImageIdIndex\n  const stackPrefetchData = {\n    indicesToRequest: range(0, stack.imageIds.length - 1),\n    enabled: true,\n    direction: 1,\n  };\n\n  // Remove the currentImageIdIndex from the list to request\n  const indexOfCurrentImage = stackPrefetchData.indicesToRequest.indexOf(\n    stack.currentImageIdIndex\n  );\n\n  stackPrefetchData.indicesToRequest.splice(indexOfCurrentImage, 1);\n\n  addToolState(element, stackPrefetchData);\n\n  prefetch(element);\n\n  element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n  element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n\n  const promiseRemovedHandler = getPromiseRemovedHandler(element);\n\n  eventTarget.removeEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n  eventTarget.addEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n}\n\nfunction disable(element) {\n  clearTimeout(resetPrefetchTimeout);\n  element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n\n  const promiseRemovedHandler = getPromiseRemovedHandler(element);\n\n  eventTarget.removeEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n\n  const stackPrefetchData = getToolState(element);\n  // If there is actually something to disable, disable it\n\n  if (stackPrefetchData && stackPrefetchData.data.length) {\n    stackPrefetchData.enabled = false;\n\n    // Clear current prefetch requests from the requestPool\n    imageLoadPoolManager.clearRequestStack(requestType);\n  }\n}\n\nfunction getConfiguration() {\n  return configuration;\n}\n\nfunction setConfiguration(config) {\n  configuration = config;\n}\n\nexport { enable, disable, getConfiguration, setConfiguration };\n","import { utilities, cache, Types } from '@cornerstonejs/core';\n\n/**\n * Gets the scalar data for a series of time points for either a single\n * coordinate or a segmentation mask, it will return the an array of scalar\n * data for a single coordinate or an array of arrays for a segmentation.\n *\n * @param dynamicVolume: 4D volume to compute time point data from\n * @param options: frameNumbers: which frames to use as timepoints, if left\n * blank, gets data timepoints over all frames\n * maskVolumeId: segmentationId to get timepoint data of\n * imageCoordinate: world coordinate to get timepoint data of\n * @returns\n */\nfunction getDataInTime(\n  dynamicVolume: Types.IDynamicImageVolume,\n  options: {\n    frameNumbers?;\n    maskVolumeId?;\n    imageCoordinate?;\n  }\n): number[] | number[][] {\n  let dataInTime;\n\n  // if frameNumbers is not provided, all frames are selected\n  const frames = options.frameNumbers || [\n    ...Array(dynamicVolume.numTimePoints).keys(),\n  ];\n\n  // You only need to provide either maskVolumeId OR imageCoordinate.\n  // Throws error if neither maskVolumeId or imageCoordinate is given,\n  // throws error if BOTH maskVolumeId and imageCoordinate is given\n  if (!options.maskVolumeId && !options.imageCoordinate) {\n    throw new Error('No ROI provided');\n  }\n\n  if (options.maskVolumeId && options.imageCoordinate) {\n    throw new Error('Please provide only one ROI');\n  }\n\n  if (options.maskVolumeId) {\n    const segmentationVolume = cache.getVolume(options.maskVolumeId);\n\n    // Get the index of every non-zero voxel in mask by mapping indexes to\n    // new array, then using the array to filter\n    const indexArray = segmentationVolume\n      .getScalarData()\n      .map((_, i) => i)\n      .filter((i) => segmentationVolume.getScalarData()[i] !== 0);\n    const dataInTime = _getTimePointDataMask(frames, indexArray, dynamicVolume);\n\n    return dataInTime;\n  }\n\n  if (options.imageCoordinate) {\n    const dataInTime = _getTimePointDataCoordinate(\n      frames,\n      options.imageCoordinate,\n      dynamicVolume\n    );\n\n    return dataInTime;\n  }\n\n  return dataInTime;\n}\n\nfunction _getTimePointDataCoordinate(frames, coordinate, volume) {\n  const { dimensions, imageData } = volume;\n  const index = imageData.worldToIndex(coordinate);\n\n  index[0] = Math.floor(index[0]);\n  index[1] = Math.floor(index[1]);\n  index[2] = Math.floor(index[2]);\n\n  if (!utilities.indexWithinDimensions(index, dimensions)) {\n    throw new Error('outside bounds');\n  }\n\n  // calculate offset for index\n  const yMultiple = dimensions[0];\n  const zMultiple = dimensions[0] * dimensions[1];\n  const allScalarData = volume.getScalarDataArrays();\n  const value = [];\n\n  frames.forEach((frame) => {\n    const activeScalarData = allScalarData[frame];\n    const scalarIndex = index[2] * zMultiple + index[1] * yMultiple + index[0];\n    value.push(activeScalarData[scalarIndex]);\n  });\n\n  return value;\n}\n\nfunction _getTimePointDataMask(frames, indexArray, volume) {\n  const allScalarData = volume.getScalarDataArrays();\n  const value = [];\n\n  for (let i = 0; i < indexArray.length; i++) {\n    const indexValues = [];\n    frames.forEach((frame) => {\n      const activeScalarData = allScalarData[frame];\n      indexValues.push(activeScalarData[indexArray[i]]);\n    });\n    value.push(indexValues);\n  }\n  return value;\n}\n\nexport default getDataInTime;\n","import { Enums, Types } from '@cornerstonejs/core';\n\n/**\n * Gets the scalar data for a series of time frames from a 4D volume, returns an\n * array of scalar data after performing AVERAGE, SUM or SUBTRACT to be used to\n * create a 3D volume\n *\n * @param dynamicVolume4D: volume to compute time frame data from\n * @param operation: operation to perform on time frame data, operations include\n * SUM, AVERAGE, and SUBTRACT (can only be used with 2 time frames provided)\n * @param frameNumbers: an array of frame indexs to perform the operation on, if\n * left empty, all frames will be used\n * @returns\n */\nfunction generateImageFromTimeData(\n  dynamicVolume: Types.IDynamicImageVolume,\n  operation: string,\n  frameNumbers?: number[]\n) {\n  // If no time frames provided, use all time frames\n  const frames = frameNumbers || [...Array(dynamicVolume.numTimePoints).keys()];\n  const numFrames = frames.length;\n\n  if (frames.length <= 1) {\n    throw new Error('Please provide two or more time points');\n  }\n\n  // Gets scalar data for all time frames\n  const typedArrays = dynamicVolume.getScalarDataArrays();\n\n  const arrayLength = typedArrays[0].length;\n  const finalArray = new Float32Array(arrayLength);\n\n  if (operation === Enums.DynamicOperatorType.SUM) {\n    for (let i = 0; i < numFrames; i++) {\n      const currentArray = typedArrays[frames[i]];\n      for (let j = 0; j < arrayLength; j++) {\n        finalArray[j] += currentArray[j];\n      }\n    }\n    return finalArray;\n  }\n\n  if (operation === Enums.DynamicOperatorType.SUBTRACT) {\n    if (frames.length > 2) {\n      throw new Error('Please provide only 2 time points for subtraction.');\n    }\n    for (let j = 0; j < arrayLength; j++) {\n      finalArray[j] += typedArrays[frames[0]][j] - typedArrays[frames[1]][j];\n    }\n    return finalArray;\n  }\n\n  if (operation === Enums.DynamicOperatorType.AVERAGE) {\n    for (let i = 0; i < numFrames; i++) {\n      const currentArray = typedArrays[frames[i]];\n      for (let j = 0; j < arrayLength; j++) {\n        finalArray[j] += currentArray[j];\n      }\n    }\n    for (let k = 0; k < arrayLength; k++) {\n      finalArray[k] = finalArray[k] / numFrames;\n    }\n    return finalArray;\n  }\n}\n\nexport default generateImageFromTimeData;\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\n\n/**\n * When an annotation is deselected, trigger an annotation render for all viewports.\n * The reason for this is that, drawing an annotation in a different viewport\n * should deselect all other annotations in other viewports. In order to achieve\n * this, we need to trigger an annotation render for all viewports.\n * Todo: Although this is inefficient, but since annotations are only rendered if necessary,\n * it's probably not going to have a noticeable impact on performance.\n * @param evt - The event object.\n */\nfunction annotationSelectionListener(evt): void {\n  const deselectedAnnotation = evt.detail.removed;\n\n  if (!deselectedAnnotation.length) {\n    return;\n  }\n\n  const renderingEngines = getRenderingEngines();\n\n  renderingEngines.forEach((renderingEngine) => {\n    const viewports = renderingEngine.getViewports();\n    const viewportIds = viewports.map((vp) => vp.id);\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIds);\n  });\n}\n\nexport default annotationSelectionListener;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\n/**\n * This is a callback function that is called when an annotation is modified.\n * Since we are throttling the cachedStats calculation for annotation tools,\n * we need to trigger a final render for the annotation. so that the annotation\n * textBox is updated.\n * Todo: This will trigger all the annotation tools to re-render, although DOM\n * will update those that have changed, but more efficient would be to only\n * update the changed annotation.\n * Todo: A better way is to extract the textBox render logic from the renderAnnotation\n * of all tools and just trigger a render for that (instead of the entire annotation., even if\n * no svg update happens since the attributes for handles are the same)\n */\nfunction annotationModifiedListener(evt): void {\n  const { viewportId, renderingEngineId } = evt.detail;\n  const renderingEngine = getRenderingEngine(renderingEngineId);\n  triggerAnnotationRenderForViewportIds(renderingEngine, [viewportId]);\n}\n\nexport default annotationModifiedListener;\n","import { Enums, Types } from '@cornerstonejs/core';\nimport triggerAnnotationRender from '../utilities/triggerAnnotationRender';\n\n/**\n *  When the image is rendered, check what tools can be rendered for this element.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `renderAnnotation` method, then we render them.\n * - Note that these tools don't necessarily have to be instances of  `AnnotationTool`,\n *   Any tool may register a `renderAnnotation` method (e.g. a tool that displays an overlay).\n *\n * @param evt - The normalized IMAGE_RENDERED event.\n */\nconst onImageRendered = function (evt: Types.EventTypes.ImageRenderedEvent) {\n  // TODO: should we do this on camera modified instead of image rendered?\n  // e.g. no need to re-render annotations if only the VOI has changed\n  triggerAnnotationRender(evt.detail.element);\n};\n\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(\n    Enums.Events.IMAGE_RENDERED,\n    onImageRendered as EventListener\n  );\n};\n\nconst disable = function (element: HTMLDivElement): void {\n  element.removeEventListener(\n    Enums.Events.IMAGE_RENDERED,\n    onImageRendered as EventListener\n  );\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import { state, ToolGroupManager } from '../../store';\nimport ToolModes from '../../enums/ToolModes';\n\nconst { Active } = ToolModes;\n\n/**\n * @function customCallbackHandler This is used as a generic event handler for tool events\n * on viewports. It:\n *\n * - Finds an \"active\" tool with:\n *    - A matching `handlerType`\n *    - A matching `customFunction` on its tool instance\n *\n * Then calls that custom function with raised event.\n *\n * @param handlerType - 'Mouse' | 'Touch' | 'MouseWheel'\n * @param customFunction - Function name that's expected to live on implementing\n *   (and event handling) active tool ex. 'doubleClickCallback'\n * @param evt\n */\nexport default function customCallbackHandler(\n  handlerType: string,\n  customFunction: string,\n  evt\n) {\n  if (state.isInteractingWithTool) {\n    return false;\n  }\n\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return false;\n  }\n\n  // TODO: Filter tools by interaction type?\n  /**\n   * Iterate tool group tools until we find a tool that is:\n   * - active\n   * - has the custom callback function\n   *\n   */\n  let activeTool;\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.toolOptions[toolName];\n    // TODO: Should be getter\n    const toolInstance = toolGroup.getToolInstance(toolName);\n\n    if (\n      // TODO: Should be enum?\n      tool.mode === Active &&\n      // TODO: Should be implements interface?\n      // Weird that we need concrete instance. Other options to filter / get callback?\n      typeof toolInstance[customFunction] === 'function'\n    ) {\n      activeTool = toolGroup.getToolInstance(toolName);\n      break;\n    }\n  }\n\n  if (!activeTool) {\n    return;\n  }\n\n  activeTool[customFunction](evt);\n}\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * mouseClick - Event handler for mouse click events. Uses `customCallbackHandler` to fire\n * the `mouseClickCallback` function on active tools.\n */\nconst mouseClick = customCallbackHandler.bind(\n  null,\n  'Mouse',\n  'mouseClickCallback'\n);\n\nexport default mouseClick;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * @function mouseDoubleClick - Event handler for mouse double click events. Uses `customCallbackHandler` to fire\n * the `doubleClickCallback` function on active tools.\n */\nconst mouseDoubleClick = customCallbackHandler.bind(\n  null,\n  'Mouse',\n  'doubleClickCallback'\n);\n\nexport default mouseDoubleClick;\n","import type { Types } from '@cornerstonejs/core';\n\nimport {\n  ToolAnnotationsPair,\n  ToolsWithMoveableHandles,\n} from '../types/InternalToolTypes';\n\n/**\n * Filters an array of tools, returning only tools with moveable handles at the mouse location that are not locked\n *\n * @param element - The element\n * @param ToolAndAnnotations - The input tool array.\n * @param canvasCoords - The coordinates of the mouse position.\n * @param interactionType - The type of interaction (e.g. 'mouse' or 'touch')\n * @returns The filtered array.\n */\nexport default function filterToolsWithMoveableHandles(\n  element: HTMLDivElement,\n  ToolAndAnnotations: ToolAnnotationsPair[],\n  canvasCoords: Types.Point2,\n  interactionType = 'mouse'\n): ToolsWithMoveableHandles[] {\n  const proximity = interactionType === 'touch' ? 36 : 6;\n  const toolsWithMoveableHandles = [];\n\n  ToolAndAnnotations.forEach(({ tool, annotations }) => {\n    for (const annotation of annotations) {\n      if (annotation.isLocked || !annotation.isVisible) {\n        continue;\n      }\n\n      const handle = tool.getHandleNearImagePoint(\n        element,\n        annotation,\n        canvasCoords,\n        proximity\n      );\n\n      if (handle) {\n        toolsWithMoveableHandles.push({\n          tool,\n          annotation,\n          handle,\n        });\n        break;\n      }\n    }\n  });\n\n  return toolsWithMoveableHandles;\n}\n","import { getAnnotations } from '../stateManagement/annotation/annotationState';\nimport { ToolAnnotationsPair } from '../types/InternalToolTypes';\nimport type AnnotationTool from '../tools/base/AnnotationTool';\nimport BaseTool from '../tools/base/BaseTool';\nimport { getEnabledElement } from '@cornerstonejs/core';\n\n/**\n * Filters an array of tools, returning only tools which have annotation.\n *\n * @param element - The cornerstone3D enabled element.\n * @param tools - The array of tools to check.\n *\n * @returns The array of tools with their found annotations.\n */\nexport default function filterToolsWithAnnotationsForElement(\n  element: HTMLDivElement,\n  tools: AnnotationTool[]\n): ToolAnnotationsPair[] {\n  const result = [];\n  for (let i = 0; i < tools.length; i++) {\n    const tool = tools[i];\n\n    if (!tool) {\n      console.warn('undefined tool in filterToolsWithAnnotationsForElement');\n      continue;\n    }\n\n    let annotations = getAnnotations(\n      (tool.constructor as typeof BaseTool).toolName,\n      element\n    );\n\n    if (!annotations?.length) {\n      continue;\n    }\n\n    if (typeof tool.filterInteractableAnnotationsForElement === 'function') {\n      // If the tool has a annotations filter (e.g. with in-plane-annotations-only filtering), use it.\n      annotations = tool.filterInteractableAnnotationsForElement(\n        element,\n        annotations\n      );\n    }\n\n    if (annotations.length > 0) {\n      result.push({ tool, annotations });\n    }\n  }\n\n  return result;\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport {\n  ToolAnnotationPair,\n  ToolAnnotationsPair,\n} from '../types/InternalToolTypes';\n\n/**\n * Filters an array of tools with annotations, returning the first annotation\n * for each tool that is moveable and at the mouse location. It results in\n * one annotation per tool.\n *\n *\n * @param element - The HTML element\n * @param ToolAndAnnotations - The input tool array.\n * @param canvasCoords - The coordinates of the mouse position.\n * @param interactionType - The type of interaction that is taking place.\n * @returns The filtered array containing ToolAndAnnotation\n */\nexport default function filterMoveableAnnotationTools(\n  element: HTMLDivElement,\n  ToolAndAnnotations: ToolAnnotationsPair[],\n  canvasCoords: Types.Point2,\n  interactionType = 'mouse'\n): ToolAnnotationPair[] {\n  const proximity = interactionType === 'touch' ? 36 : 6;\n\n  // TODO - This could get pretty expensive pretty quickly. We don't want to fetch the camera\n  // And do world to canvas on each coord.\n\n  // We want to produce a matrix from canvas to world for the viewport and just do a matrix operation on each handle.\n  // This could still be expensive for ROIs, but we probably shouldn't have \"handles\" for them anyway.\n\n  const moveableAnnotationTools = [];\n\n  ToolAndAnnotations.forEach(({ tool, annotations }) => {\n    for (const annotation of annotations) {\n      if (annotation.isLocked || !annotation.isVisible) {\n        continue;\n      }\n\n      const near = tool.isPointNearTool(\n        element,\n        annotation,\n        canvasCoords,\n        proximity,\n        interactionType\n      );\n\n      if (near) {\n        moveableAnnotationTools.push({\n          tool,\n          annotation,\n        });\n        break;\n      }\n    }\n  });\n\n  return moveableAnnotationTools;\n}\n","import { KeyboardBindings as kb } from '../../enums';\n\n/**\n * Gets the mouse modifier key from a mouse event.\n * Supports Shift, Ctrl, Alt, in singly and in combinations of 2\n * Supports Meta singly.\n */\nconst getMouseModifierKey = (evt) => {\n  // The logic is a hard coded key mapping\n  if (evt.shiftKey) {\n    if (evt.ctrlKey) return kb.ShiftCtrl;\n    if (evt.altKey) return kb.ShiftAlt;\n    if (evt.metaKey) return kb.ShiftMeta;\n    return kb.Shift;\n  }\n  if (evt.ctrlKey) {\n    if (evt.altKey) return kb.CtrlAlt;\n    if (evt.metaKey) return kb.CtrlMeta;\n    return kb.Ctrl;\n  }\n  if (evt.altKey) {\n    return (evt.metaKey && kb.AltMeta) || kb.Alt;\n  }\n  if (evt.metaKey) {\n    return kb.Meta;\n  }\n  return undefined;\n};\n\nexport default getMouseModifierKey;\n","import { ToolGroupManager } from '../../store';\nimport { MouseBindings, ToolModes } from '../../enums';\nimport { keyEventListener } from '../../eventListeners';\nimport { EventTypes } from '../../types';\nimport getMouseModifier from './getMouseModifier';\n\nconst { Active } = ToolModes;\n\n/**\n * Iterate tool group tools until we find a tool that has a \"ToolBinding\"\n * that matches our MouseEvent's `buttons`. It's possible there will be no match\n * (no active tool for that mouse button combination).\n *\n * @param evt - The event dispatcher mouse event.\n *\n * @returns tool\n */\nexport default function getActiveToolForMouseEvent(\n  evt: EventTypes.NormalizedMouseEventType\n) {\n  // Todo: we should refactor this to use getToolsWithModesForMouseEvent instead\n  const { renderingEngineId, viewportId } = evt.detail;\n  const mouseEvent = evt.detail.event;\n\n  // If any keyboard modifier key is also pressed - get the mouse version\n  // first since it handles combinations, while the key event handles non-modifier\n  // keys.\n  const modifierKey =\n    getMouseModifier(mouseEvent) || keyEventListener.getModifierKey();\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    // tool has binding that matches the mouse button, if mouseEvent is undefined\n    // it uses the primary button\n    const correctBinding =\n      toolOptions.bindings.length &&\n      toolOptions.bindings.some((binding) => {\n        return (\n          binding.mouseButton ===\n            (mouseEvent ? mouseEvent.buttons : defaultMousePrimary) &&\n          binding.modifierKey === modifierKey\n        );\n      });\n\n    if (toolOptions.mode === Active && correctBinding) {\n      return toolGroup.getToolInstance(toolName);\n    }\n  }\n}\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\n\ntype ModesFilter = Array<ToolModes>;\n\n/**\n * Given the normalized mouse event and a filter of modes,\n * find all the tools on the element that are in one of the specified modes.\n * If the evtButton is specified, only tools with a matching binding will be returned.\n * @param evt - The normalized mouseDown event.\n * @param modesFilter - An array of entries from the `ToolModes` enum.\n */\nexport default function getToolsWithModesForMouseEvent(\n  evt: EventTypes.MouseMoveEventType,\n  modesFilter: ModesFilter,\n  evtButton?: any\n) {\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return [];\n  }\n\n  const enabledTools = [];\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.toolOptions[toolName];\n\n    // tool has binding that matches the mouse button - we match those with\n    // any modifier keys too since they can be passively interacted with\n    const correctBinding =\n      evtButton != null && // not null or undefined\n      tool.bindings.length &&\n      tool.bindings.some((binding) => binding.mouseButton === evtButton);\n\n    if (\n      modesFilter.includes(tool.mode) &&\n      // Should not filter by event's button\n      // or should, and the tool binding includes the event's button\n      (!evtButton || correctBinding)\n    ) {\n      const toolInstance = toolGroup.getToolInstance(toolName);\n      enabledTools.push(toolInstance);\n    }\n  }\n\n  return enabledTools;\n}\n","import { state } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\nimport {\n  ToolAnnotationPair,\n  ToolsWithMoveableHandles,\n} from '../../types/InternalToolTypes';\n\nimport {\n  setAnnotationSelected,\n  isAnnotationSelected,\n} from '../../stateManagement/annotation/annotationSelection';\n\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\n\n// Util\nimport filterToolsWithMoveableHandles from '../../store/filterToolsWithMoveableHandles';\nimport filterToolsWithAnnotationsForElement from '../../store/filterToolsWithAnnotationsForElement';\nimport filterMoveableAnnotationTools from '../../store/filterMoveableAnnotationTools';\nimport getActiveToolForMouseEvent from '../shared/getActiveToolForMouseEvent';\nimport getToolsWithModesForMouseEvent from '../shared/getToolsWithModesForMouseEvent';\n\nconst { Active, Passive } = ToolModes;\n\n/**\n * When the mouse is depressed we check which entities can process these events in the following manner:\n *\n * - First we get the `activeTool` for the mouse button pressed.\n * - If the `activeTool` has a `preMouseDownCallback`, this is called. If the callback returns `true`,\n *   the event does not propagate further.\n * - Next we get all tools which are active or passive (`activeAndPassiveTools`), as annotation. for these tools could\n *   possibly catch and handle these events. We then filter the `activeAndPassiveTools` using `filterToolsWithAnnotationsForElement`, which filters tools with annotations\n *   for this frame of reference. Optionally a tool can employ a further filtering (via a\n *   `filterInteractableAnnotationsForElement` callback) for tools interactable within the current camera view\n *   (e.g. tools that only render when viewed from a certain direction).\n * - Next we check if any handles are interactable for each tool (`filterToolsWithMoveableHandles`). If interactable\n *   handles are found, the first tool/handle found consumes the event and the event does not propagate further.\n * - Next we check any tools are interactable (e.g. moving an entire length annotation rather than one of its handles:\n *   `filterMoveableAnnotationTools`). If interactable tools are found, the first tool found consumes the event and the\n *   event does not propagate further.\n * - Finally, if the `activeTool` has `postMouseDownCallback`, this is called.  If the callback returns `true`,\n *   the event does not propagate further.\n *\n * If the event is not consumed the event will bubble to the `mouseDownActivate` handler.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseDown(evt: EventTypes.MouseDownEventType) {\n  // If a tool has locked the current state it is dealing with an interaction within its own eventLoop.\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForMouseEvent(evt);\n\n  // Check for preMouseDownCallbacks,\n  // If the tool claims it consumed the event, prevent further checks.\n  if (activeTool && typeof activeTool.preMouseDownCallback === 'function') {\n    const consumedEvent = activeTool.preMouseDownCallback(evt);\n\n    if (consumedEvent) {\n      return;\n    }\n  }\n\n  // Find all tools that might respond to this mouse down\n  const isPrimaryClick = evt.detail.event.buttons === 1;\n  const activeToolsWithEventBinding = getToolsWithModesForMouseEvent(\n    evt,\n    [Active],\n    evt.detail.event.buttons\n  );\n  const passiveToolsIfEventWasPrimaryMouseButton = isPrimaryClick\n    ? getToolsWithModesForMouseEvent(evt, [Passive])\n    : undefined;\n  const applicableTools = [\n    ...(activeToolsWithEventBinding || []),\n    ...(passiveToolsIfEventWasPrimaryMouseButton || []),\n  ];\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Filter tools with annotations for this element\n  const annotationToolsWithAnnotations = filterToolsWithAnnotationsForElement(\n    element,\n    applicableTools\n  );\n\n  const canvasCoords = eventDetail.currentPoints.canvas;\n\n  // For the canvas coordinates, find all tools that might respond to this mouse down\n  // on their handles. This filter will call getHandleNearImagePoint for each tool\n  // instance (each annotation)\n  const annotationToolsWithMoveableHandles = filterToolsWithMoveableHandles(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'mouse'\n  );\n\n  // Preserve existing selections when shift key is pressed\n  const isMultiSelect = !!evt.detail.event.shiftKey;\n\n  // If there are annotation tools whose handle is near the mouse, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (annotationToolsWithMoveableHandles.length > 0) {\n    const { tool, annotation, handle } = getAnnotationForSelection(\n      annotationToolsWithMoveableHandles\n    ) as ToolsWithMoveableHandles;\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.handleSelectedCallback(evt, annotation, handle, 'Mouse');\n\n    return;\n  }\n\n  // If there were no annotation tools whose handle was near the mouse, try to check\n  // if any of the annotation tools are interactable (e.g. moving an entire length annotation)\n  const moveableAnnotationTools = filterMoveableAnnotationTools(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'mouse'\n  );\n\n  // If there are annotation tools that are interactable, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (moveableAnnotationTools.length > 0) {\n    const { tool, annotation } = getAnnotationForSelection(\n      moveableAnnotationTools\n    );\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.toolSelectedCallback(evt, annotation, 'Mouse');\n\n    return;\n  }\n\n  // Run the postMouseDownCallback for the active tool if it exists\n  if (activeTool && typeof activeTool.postMouseDownCallback === 'function') {\n    const consumedEvent = activeTool.postMouseDownCallback(evt);\n\n    if (consumedEvent) {\n      // If the tool claims it consumed the event, prevent further checks.\n      return;\n    }\n  }\n\n  // Don't stop propagation so that mouseDownActivate can handle the event\n}\n\n/**\n * If there are multiple annotation tools, return the first one that isn't locked neither hidden.\n * If there's only one annotation tool, return it\n * @param annotationTools - An array of tools and annotation.\n * @returns The candidate for selection\n */\nfunction getAnnotationForSelection(\n  toolsWithMovableHandles: ToolAnnotationPair[]\n): ToolAnnotationPair {\n  return (\n    (toolsWithMovableHandles.length > 1 &&\n      toolsWithMovableHandles.find(\n        (item) =>\n          !isAnnotationLocked(item.annotation) &&\n          isAnnotationVisible(item.annotation.annotationUID)\n      )) ||\n    toolsWithMovableHandles[0]\n  );\n}\n\n/**\n * If the annotation is selected, deselect it. If it's not selected, select it\n * @param annotationUID - The AnnotationUID that we\n * want to toggle the selection of.\n * @param isMultiSelect - If true, the annotation. will be deselected if it is\n * already selected, or deselected if it is selected.\n */\nfunction toggleAnnotationSelection(\n  annotationUID: string,\n  isMultiSelect = false\n): void {\n  if (isMultiSelect) {\n    if (isAnnotationSelected(annotationUID)) {\n      setAnnotationSelected(annotationUID, false);\n    } else {\n      const preserveSelected = true;\n      setAnnotationSelected(annotationUID, true, preserveSelected);\n    }\n  } else {\n    const preserveSelected = false;\n    setAnnotationSelected(annotationUID, true, preserveSelected);\n  }\n}\n","import { state } from '../../store';\nimport getActiveToolForMouseEvent from '../shared/getActiveToolForMouseEvent';\nimport { setAnnotationSelected } from '../../stateManagement/annotation/annotationSelection';\nimport { EventTypes } from '../../types';\n\n/**\n * If the `mouseDown` handler does not consume an event,\n * activate the creation loop of the active tool, if one is found for the\n * mouse button pressed.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseDownActivate(\n  evt: EventTypes.MouseDownActivateEventType\n) {\n  // If a tool has locked the current state it is dealing with an interaction within its own eventLoop.\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForMouseEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  if (state.isMultiPartToolActive) {\n    return;\n  }\n\n  if (activeTool.addNewAnnotation) {\n    const annotation = activeTool.addNewAnnotation(evt, 'mouse');\n    setAnnotationSelected(annotation.annotationUID);\n  }\n}\n","import getActiveToolForMouseEvent from '../shared/getActiveToolForMouseEvent';\nimport { state } from '../../store';\nimport { MouseDragEventType } from '../../types/EventTypes';\n\n/**\n * mouseDrag - Event handler for mouse drag events. Fires the `mouseDragCallback`\n * function on active tools.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseDrag(evt: MouseDragEventType) {\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForMouseEvent(evt);\n\n  const noFoundToolOrDoesNotHaveMouseDragCallback =\n    !activeTool || typeof activeTool.mouseDragCallback !== 'function';\n  if (noFoundToolOrDoesNotHaveMouseDragCallback) {\n    return;\n  }\n\n  activeTool.mouseDragCallback(evt);\n}\n","// // State\nimport { state } from '../../store';\nimport { ToolModes } from '../../enums';\n\n// // Util\nimport filterToolsWithAnnotationsForElement from '../../store/filterToolsWithAnnotationsForElement';\nimport getToolsWithModesForMouseEvent from '../shared/getToolsWithModesForMouseEvent';\nimport triggerAnnotationRender from '../../utilities/triggerAnnotationRender';\nimport { MouseMoveEventType } from '../../types/EventTypes';\n\nconst { Active, Passive } = ToolModes;\n\n/**\n * mouseMove - On mouse move when not dragging, fire tools `mouseMoveCallback`s.\n * This is mostly used to update the [un]hover state\n * of a tool.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseMove(evt: MouseMoveEventType) {\n  // Tool interactions when mouse moved are handled inside each tool.\n  // This function is mostly used to update the [un]hover state\n  if (state.isInteractingWithTool || state.isMultiPartToolActive) {\n    return;\n  }\n\n  const activeAndPassiveTools = getToolsWithModesForMouseEvent(evt, [\n    Active,\n    Passive,\n  ]);\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Annotation tool specific\n  const toolsWithAnnotations = filterToolsWithAnnotationsForElement(\n    element,\n    activeAndPassiveTools\n  );\n\n  const toolsWithoutAnnotations = activeAndPassiveTools.filter((tool) => {\n    const doesNotHaveAnnotations = !toolsWithAnnotations.some(\n      (toolAndAnnotation) =>\n        toolAndAnnotation.tool.getToolName() === tool.getToolName()\n    );\n\n    return doesNotHaveAnnotations;\n  });\n\n  let annotationsNeedToBeRedrawn = false;\n\n  for (const { tool, annotations } of toolsWithAnnotations) {\n    if (typeof tool.mouseMoveCallback === 'function') {\n      annotationsNeedToBeRedrawn =\n        tool.mouseMoveCallback(evt, annotations) || annotationsNeedToBeRedrawn;\n    }\n  }\n\n  // Run mouse move handlers for non-annotation tools\n  toolsWithoutAnnotations.forEach((tool) => {\n    if (typeof tool.mouseMoveCallback === 'function') {\n      tool.mouseMoveCallback(evt);\n    }\n  });\n\n  // Annotation activation status changed, redraw the annotations\n  if (annotationsNeedToBeRedrawn === true) {\n    triggerAnnotationRender(element);\n  }\n}\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * mouseClick - Event handler for mouse up events. Uses `customCallbackHandler` to fire\n * the `mouseUpCallback` function on active tools.\n */\nconst mouseUp = customCallbackHandler.bind(null, 'Mouse', 'mouseUpCallback');\n\nexport default mouseUp;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * Event handler for mouse wheel events. Uses `customCallbackHandler` to fire\n * the `mouseWheelCallback` function on active tools.\n */\nconst mouseWheel = customCallbackHandler.bind(\n  null,\n  'MouseWheel',\n  'mouseWheelCallback'\n);\n\nexport default mouseWheel;\n","import Events from '../enums/Events';\n\nimport {\n  mouseClick,\n  mouseDown,\n  mouseDownActivate,\n  mouseDoubleClick,\n  mouseDrag,\n  mouseMove,\n  mouseUp,\n  mouseWheel,\n} from './mouseEventHandlers';\n\n/**\n * Enable these listeners are emitted in order, and can be cancelled/prevented from bubbling\n * by any previous event.\n *\n * @param element - The element to add the event listeners to.\n */\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(Events.MOUSE_CLICK, mouseClick as EventListener);\n  element.addEventListener(Events.MOUSE_DOWN, mouseDown as EventListener);\n  element.addEventListener(\n    Events.MOUSE_DOWN_ACTIVATE,\n    mouseDownActivate as EventListener\n  );\n  element.addEventListener(\n    Events.MOUSE_DOUBLE_CLICK,\n    mouseDoubleClick as EventListener\n  );\n  element.addEventListener(Events.MOUSE_DRAG, mouseDrag as EventListener);\n  element.addEventListener(Events.MOUSE_MOVE, mouseMove as EventListener);\n  element.addEventListener(Events.MOUSE_UP, mouseUp as EventListener);\n  element.addEventListener(Events.MOUSE_WHEEL, mouseWheel as EventListener);\n};\n\n/**\n * Disable and Remove the MouseToolEventDispatcher handlers from the element.\n *\n * @param element - HTMLDivElement\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.MOUSE_CLICK, mouseClick as EventListener);\n  element.removeEventListener(Events.MOUSE_DOWN, mouseDown as EventListener);\n  element.removeEventListener(\n    Events.MOUSE_DOWN_ACTIVATE,\n    mouseDownActivate as EventListener\n  );\n  element.removeEventListener(\n    Events.MOUSE_DOUBLE_CLICK,\n    mouseDoubleClick as EventListener\n  );\n  element.removeEventListener(Events.MOUSE_DRAG, mouseDrag as EventListener);\n  element.removeEventListener(Events.MOUSE_MOVE, mouseMove as EventListener);\n  element.removeEventListener(Events.MOUSE_UP, mouseUp as EventListener);\n  element.removeEventListener(Events.MOUSE_WHEEL, mouseWheel as EventListener);\n};\n\nconst mouseToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default mouseToolEventDispatcher;\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes, MouseBindings } from '../../enums';\nimport { keyEventListener } from '../../eventListeners';\nimport { EventTypes } from '../../types';\nimport { getMouseButton } from '../../eventListeners/mouse/mouseDownListener';\n\nconst { Active } = ToolModes;\n\n/**\n * Iterate tool group tools until we find a tool that has a \"ToolBinding\"\n * that matches our Keyboard pressed keys. It's possible there will be no match\n * (no active tool for that mouse button combination).\n *\n * @param evt - The normalized keyboard event.\n *\n * @returns tool\n */\nexport default function getActiveToolForKeyboardEvent(\n  evt: EventTypes.KeyDownEventType\n) {\n  const { renderingEngineId, viewportId } = evt.detail;\n\n  // Get the current mouse button clicked\n  const mouseButton = getMouseButton();\n\n  // If any keyboard modifier key is also pressed\n  const modifierKey = keyEventListener.getModifierKey();\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    // tool has binding that matches the mouse button, if mouseEvent is undefined\n    // it uses the primary button\n    const correctBinding =\n      toolOptions.bindings.length &&\n      toolOptions.bindings.some(\n        (binding) =>\n          binding.mouseButton === (mouseButton ?? defaultMousePrimary) &&\n          binding.modifierKey === modifierKey\n      );\n\n    if (toolOptions.mode === Active && correctBinding) {\n      return toolGroup.getToolInstance(toolName);\n    }\n  }\n}\n","import { ToolGroupManager } from '../../store';\nimport getActiveToolForKeyboardEvent from '../shared/getActiveToolForKeyboardEvent';\nimport { KeyDownEventType } from '../../types/EventTypes';\n\n/**\n * KeyDown event listener to handle viewport cursor icon changes\n *\n * @param evt - The KeyboardEvent\n */\nexport default function keyDown(evt: KeyDownEventType): void {\n  // get the active tool given the key and mouse button\n  const activeTool = getActiveToolForKeyboardEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  const { renderingEngineId, viewportId } = evt.detail;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  const toolName = activeTool.getToolName();\n  if (Object.keys(toolGroup.toolOptions).includes(toolName)) {\n    toolGroup.setViewportsCursorByToolName(toolName);\n  }\n}\n","import { resetModifierKey } from '../../eventListeners/keyboard/keyDownListener';\nimport { ToolGroupManager } from '../../store';\nimport getActiveToolForKeyboardEvent from '../shared/getActiveToolForKeyboardEvent';\nimport { KeyDownEventType } from '../../types/EventTypes';\n\n/**\n * KeyDown event listener to handle viewport cursor icon changes\n *\n * @param evt - The KeyboardEvent\n */\nexport default function keyUp(evt: KeyDownEventType): void {\n  // get the active tool for the primary mouse button\n  const activeTool = getActiveToolForKeyboardEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  const { renderingEngineId, viewportId } = evt.detail;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  // Reset the modifier key\n  resetModifierKey();\n\n  const toolName = activeTool.getToolName();\n  if (Object.keys(toolGroup.toolOptions).includes(toolName)) {\n    toolGroup.setViewportsCursorByToolName(toolName);\n  }\n}\n","import Events from '../enums/Events';\nimport { keyDown, keyUp } from './keyboardEventHandlers';\n\n/**\n * Enable Key down and key up listeners\n *\n * @param element - The HTML element to attach the event listeners to.\n */\nconst enable = function (element: HTMLDivElement) {\n  element.addEventListener(Events.KEY_DOWN, keyDown as EventListener);\n  element.addEventListener(Events.KEY_UP, keyUp as EventListener);\n};\n\n/**\n * Disable Key down and key up listeners\n * @param element - The HTML element to attach the event listeners to.\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.KEY_DOWN, keyDown as EventListener);\n  element.removeEventListener(Events.KEY_UP, keyUp as EventListener);\n};\n\nconst keyboardToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default keyboardToolEventDispatcher;\n","import { Enums, Types } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\n\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * When the camera is modified, check what tools need to react to this.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `onCameraModified` method, we call it.\n *\n * @param evt - The normalized camera modified event.\n */\nconst onCameraModified = function (evt: Types.EventTypes.CameraModifiedEvent) {\n  // @ts-ignore\n  const enabledTools = getToolsWithModesForMouseEvent(evt, [\n    Active,\n    Passive,\n    Enabled,\n  ]);\n\n  enabledTools.forEach((tool) => {\n    if (tool.onCameraModified) {\n      tool.onCameraModified(evt);\n    }\n  });\n};\n\nconst enable = function (element) {\n  element.addEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\n\nconst disable = function (element) {\n  element.removeEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import { Enums, Types } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\n\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * When image spacing is calibrated modify the annotations for all of its tools\n * to consider the new calibration info.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `onImageSpacingCalibrated` method, we call it.\n *\n * @param evt - The normalized image calibration event.\n */\nconst onImageSpacingCalibrated = function (\n  evt: Types.EventTypes.ImageSpacingCalibratedEvent\n) {\n  // @ts-ignore\n  const enabledTools = getToolsWithModesForMouseEvent(evt, [\n    Active,\n    Passive,\n    Enabled,\n  ]);\n\n  enabledTools.forEach((tool) => {\n    if (tool.onImageSpacingCalibrated) {\n      tool.onImageSpacingCalibrated(evt);\n    }\n  });\n};\n\nconst enable = function (element: HTMLDivElement) {\n  element.addEventListener(\n    Enums.Events.IMAGE_SPACING_CALIBRATED,\n    onImageSpacingCalibrated as EventListener\n  );\n};\n\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(\n    Enums.Events.IMAGE_SPACING_CALIBRATED,\n    onImageSpacingCalibrated as EventListener\n  );\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import { ToolGroupManager } from '../../store';\nimport { MouseBindings, ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\nimport getMouseModifier from './getMouseModifier';\nimport { keyEventListener } from '../../eventListeners';\n\nconst { Active } = ToolModes;\n\n/**\n * Iterate tool group tools until we find a tool that has a \"ToolBinding\"\n * that matches our TouchEvent's `buttons`. It's possible there will be no match\n * (no active tool for that touch button combination).\n *\n * @param evt - The event dispatcher touch event.\n *\n * @returns tool\n */\nexport default function getActiveToolForTouchEvent(\n  evt: EventTypes.NormalizedTouchEventType\n) {\n  // Todo: we should refactor this to use getToolsWithModesForTouchEvent instead\n  const { renderingEngineId, viewportId } = evt.detail;\n  const touchEvent = evt.detail.event;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  const numTouchPoints = Object.keys(touchEvent.touches).length;\n\n  // If any keyboard modifier key is also pressed\n  const modifierKey =\n    getMouseModifier(touchEvent) || keyEventListener.getModifierKey();\n  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    const correctBinding =\n      toolOptions.bindings.length &&\n      /**\n       * TODO: setActiveTool treats MouseBindings.Primary in a special way\n       * which is analgous to numTouchPoints === 1 as the primary interaction\n       * for touch based applications. The ToolGroup set active and get active\n       * logic should be updated to account for numTouchPoints === 1\n       */\n      toolOptions.bindings.some(\n        (binding) =>\n          (binding.numTouchPoints === numTouchPoints ||\n            (numTouchPoints === 1 &&\n              binding.mouseButton === defaultMousePrimary)) &&\n          binding.modifierKey === modifierKey\n      );\n\n    if (toolOptions.mode === Active && correctBinding) {\n      return toolGroup.getToolInstance(toolName);\n    }\n  }\n}\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\n\ntype ModesFilter = Array<ToolModes>;\n\n/**\n * Given the normalized touch event and a filter of modes,\n * find all the tools on the element that are in one of the specified modes.\n * If the evtButton is specified, only tools with a matching binding will be returned.\n * @param evt - The normalized touchStart event.\n * @param modesFilter - An array of entries from the `ToolModes` enum.\n */\nexport default function getToolsWithModesForTouchEvent(\n  evt: EventTypes.NormalizedTouchEventType,\n  modesFilter: ModesFilter,\n  numTouchPoints?: number\n) {\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return [];\n  }\n\n  const enabledTools = [];\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.toolOptions[toolName];\n\n    const correctBinding =\n      numTouchPoints != null &&\n      tool.bindings.length &&\n      tool.bindings.some(\n        (binding) => binding.numTouchPoints === numTouchPoints\n      );\n\n    if (\n      modesFilter.includes(tool.mode) &&\n      (!numTouchPoints || correctBinding)\n    ) {\n      const toolInstance = toolGroup.getToolInstance(toolName);\n      enabledTools.push(toolInstance);\n    }\n  }\n\n  return enabledTools;\n}\n","import { state } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\nimport {\n  ToolAnnotationPair,\n  ToolsWithMoveableHandles,\n} from '../../types/InternalToolTypes';\n\nimport {\n  setAnnotationSelected,\n  isAnnotationSelected,\n} from '../../stateManagement/annotation/annotationSelection';\n\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\n\n// Util\nimport filterToolsWithMoveableHandles from '../../store/filterToolsWithMoveableHandles';\nimport filterToolsWithAnnotationsForElement from '../../store/filterToolsWithAnnotationsForElement';\nimport filterMoveableAnnotationTools from '../../store/filterMoveableAnnotationTools';\nimport getActiveToolForTouchEvent from '../shared/getActiveToolForTouchEvent';\nimport getToolsWithModesForTouchEvent from '../shared/getToolsWithModesForTouchEvent';\n\nconst { Active, Passive } = ToolModes;\n\n/**\n * touchStart - Event handler for touchStart events. Uses `customCallbackHandler` to fire\n * the `touchStartCallback` function on active tools.\n */\nexport default function touchStart(evt: EventTypes.TouchStartEventType) {\n  if (state.isInteractingWithTool) {\n    return;\n  }\n  const activeTool = getActiveToolForTouchEvent(evt);\n\n  // Check for preTouchStartCallbacks,\n  // If the tool claims it consumed the event, prevent further checks.\n  if (activeTool && typeof activeTool.preTouchStartCallback === 'function') {\n    const consumedEvent = activeTool.preTouchStartCallback(evt);\n\n    if (consumedEvent) {\n      return;\n    }\n  }\n\n  const isPrimaryClick = Object.keys(evt.detail.event.touches).length === 1;\n  const activeToolsWithEventBinding = getToolsWithModesForTouchEvent(\n    evt,\n    [Active],\n    Object.keys(evt.detail.event.touches).length\n  );\n  const passiveToolsIfEventWasPrimaryTouchButton = isPrimaryClick\n    ? getToolsWithModesForTouchEvent(evt, [Passive])\n    : undefined;\n  const applicableTools = [\n    ...(activeToolsWithEventBinding || []),\n    ...(passiveToolsIfEventWasPrimaryTouchButton || []),\n    activeTool,\n  ];\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Filter tools with annotations for this element\n  const annotationToolsWithAnnotations = filterToolsWithAnnotationsForElement(\n    element,\n    applicableTools\n  );\n\n  const canvasCoords = eventDetail.currentPoints.canvas;\n\n  // For the canvas coordinates, find all tools that might respond to this touch start\n  // on their handles. This filter will call getHandleNearImagePoint for each tool\n  // instance (each annotation)\n  const annotationToolsWithMoveableHandles = filterToolsWithMoveableHandles(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'touch'\n  );\n\n  const isMultiSelect = false;\n\n  // If there are annotation tools whose handle is near the touch, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (annotationToolsWithMoveableHandles.length > 0) {\n    const { tool, annotation, handle } = getAnnotationForSelection(\n      annotationToolsWithMoveableHandles\n    ) as ToolsWithMoveableHandles;\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.handleSelectedCallback(evt, annotation, handle, 'Touch');\n\n    return;\n  }\n\n  // If there were no annotation tools whose handle was near the touch, try to check\n  // if any of the annotation tools are interactable (e.g. moving an entire length annotation)\n  const moveableAnnotationTools = filterMoveableAnnotationTools(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'touch'\n  );\n\n  // If there are annotation tools that are interactable, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (moveableAnnotationTools.length > 0) {\n    const { tool, annotation } = getAnnotationForSelection(\n      moveableAnnotationTools\n    );\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.toolSelectedCallback(evt, annotation, 'Touch');\n\n    return;\n  }\n\n  // Run the postTouchStartCallback for the active tool if it exists\n  if (activeTool && typeof activeTool.postTouchStartCallback === 'function') {\n    const consumedEvent = activeTool.postTouchStartCallback(evt);\n\n    if (consumedEvent) {\n      // If the tool claims it consumed the event, prevent further checks.\n      return;\n    }\n  }\n\n  // Don't stop propagation so that touchStartActivate can handle the event\n}\n\n/**\n * If there are multiple annotation tools, return the first one that isn't locked neither hidden.\n * If there's only one annotation tool, return it\n * @param annotationTools - An array of tools and annotation.\n * @returns The candidate for selection\n */\nfunction getAnnotationForSelection(\n  toolsWithMovableHandles: ToolAnnotationPair[]\n): ToolAnnotationPair {\n  return (\n    (toolsWithMovableHandles.length > 1 &&\n      toolsWithMovableHandles.find(\n        (item) =>\n          !isAnnotationLocked(item.annotation) &&\n          isAnnotationVisible(item.annotation.annotationUID)\n      )) ||\n    toolsWithMovableHandles[0]\n  );\n}\n\n/**\n * If the annotation is selected, deselect it. If it's not selected, select it\n * @param annotationUID - The AnnotationUID that we\n * want to toggle the selection of.\n * @param isMultiSelect - If true, the annotation. will be deselected if it is\n * already selected, or deselected if it is selected.\n */\nfunction toggleAnnotationSelection(\n  annotationUID: string,\n  isMultiSelect = false\n): void {\n  if (isMultiSelect) {\n    if (isAnnotationSelected(annotationUID)) {\n      setAnnotationSelected(annotationUID, false);\n    } else {\n      const preserveSelected = true;\n      setAnnotationSelected(annotationUID, true, preserveSelected);\n    }\n  } else {\n    const preserveSelected = false;\n    setAnnotationSelected(annotationUID, true, preserveSelected);\n  }\n}\n","import { state } from '../../store';\nimport { EventTypes } from '../../types';\nimport { setAnnotationSelected } from '../../stateManagement/annotation/annotationSelection';\n\nimport getActiveToolForTouchEvent from '../shared/getActiveToolForTouchEvent';\n\n/**\n * If the `touchStart` handler does not consume an event,\n * activate the creation loop of the active tool, if one is found for the\n * touch button pressed.\n *\n * @param evt - The normalized touchStart event.\n */\nexport default function touchStartActivate(\n  evt: EventTypes.TouchStartActivateEventType\n) {\n  // If a tool has locked the current state it is dealing with an interaction within its own eventLoop.\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForTouchEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  if (state.isMultiPartToolActive) {\n    return;\n  }\n\n  if (activeTool.addNewAnnotation) {\n    const annotation = activeTool.addNewAnnotation(evt, 'touch');\n    setAnnotationSelected(annotation.annotationUID);\n  }\n}\n","import getActiveToolForTouchEvent from '../shared/getActiveToolForTouchEvent';\nimport { state } from '../../store';\nimport { TouchDragEventType } from '../../types/EventTypes';\n\n/**\n * touchDrag - Event handler for touchDrag events. Uses `customCallbackHandler` to fire\n * the `touchDragCallback` function on active tools.\n */\nexport default function touchDrag(evt: TouchDragEventType) {\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForTouchEvent(evt);\n\n  const noFoundToolOrDoesNotHaveTouchDragCallback =\n    !activeTool || typeof activeTool.touchDragCallback !== 'function';\n  if (noFoundToolOrDoesNotHaveTouchDragCallback) {\n    return;\n  }\n\n  activeTool.touchDragCallback(evt);\n}\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * touchEnd - Event handler for touchEnd events. Uses `customCallbackHandler` to fire\n * the `touchEndCallback` function on active tools.\n */\nconst touchEnd = customCallbackHandler.bind(null, 'Touch', 'touchEndCallback');\n\nexport default touchEnd;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * touchTap - Event handler for touch tap events. Uses `customCallbackHandler` to fire\n * the `touchTapCallback` function on active tools.\n */\nconst touchTap = customCallbackHandler.bind(null, 'Touch', 'touchTapCallback');\n\nexport default touchTap;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * touchPress - Event handler for touch press events. Uses `customCallbackHandler` to fire\n * the `touchPressCallback` function on active tools.\n */\nconst touchPress = customCallbackHandler.bind(\n  null,\n  'Touch',\n  'touchPressCallback'\n);\n\nexport default touchPress;\n","import Events from '../enums/Events';\n\nimport {\n  touchStart,\n  touchStartActivate,\n  touchDrag,\n  touchEnd,\n  touchTap,\n  touchPress,\n} from './touchEventHandlers';\n\n/**\n * Enable these listeners are emitted in order, and can be cancelled/prevented from bubbling\n * by any previous event.\n *\n * @param element - The element to add the event listeners to.\n */\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(Events.TOUCH_START, touchStart as EventListener);\n  element.addEventListener(\n    Events.TOUCH_START_ACTIVATE,\n    touchStartActivate as EventListener\n  );\n  element.addEventListener(Events.TOUCH_DRAG, touchDrag as EventListener);\n  element.addEventListener(Events.TOUCH_END, touchEnd as EventListener);\n  element.addEventListener(Events.TOUCH_TAP, touchTap as EventListener);\n  element.addEventListener(Events.TOUCH_PRESS, touchPress as EventListener);\n};\n\n/**\n * Disable and Remove the MouseToolEventDispatcher handlers from the element.\n *\n * @param element - HTMLDivElement\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.TOUCH_START, touchStart as EventListener);\n  element.removeEventListener(\n    Events.TOUCH_START_ACTIVATE,\n    touchStartActivate as EventListener\n  );\n  element.removeEventListener(Events.TOUCH_DRAG, touchDrag as EventListener);\n  element.removeEventListener(Events.TOUCH_END, touchEnd as EventListener);\n  element.removeEventListener(Events.TOUCH_PRESS, touchPress as EventListener);\n};\n\nconst touchToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default touchToolEventDispatcher;\n","import { Types } from '@cornerstonejs/core';\nimport {\n  mouseEventListeners,\n  wheelEventListener,\n  touchEventListeners,\n  keyEventListener,\n} from '../eventListeners';\nimport {\n  imageRenderedEventDispatcher,\n  cameraModifiedEventDispatcher,\n  mouseToolEventDispatcher,\n  touchToolEventDispatcher,\n  keyboardToolEventDispatcher,\n  imageSpacingCalibratedEventDispatcher,\n} from '../eventDispatchers';\nimport { state } from './state';\n\nimport { annotationRenderingEngine } from '../utilities/triggerAnnotationRender';\n\n/**\n * When an element is \"enabled\", add event listeners and dispatchers to it\n * so we can use interactions to affect tool behaviors\n *\n * @param evt - The ELEMENT_ENABLED event\n */\nexport default function addEnabledElement(\n  evt: Types.EventTypes.ElementEnabledEvent\n): void {\n  const { element, viewportId } = evt.detail;\n  const svgLayer = _createSvgAnnotationLayer(viewportId);\n\n  // Reset/Create svgNodeCache for element\n  _setSvgNodeCache(element);\n  _appendChild(svgLayer, element);\n\n  // Add this element to the annotation rendering engine\n  annotationRenderingEngine.addViewportElement(viewportId, element);\n\n  // Listeners\n  mouseEventListeners.enable(element);\n  wheelEventListener.enable(element);\n  touchEventListeners.enable(element);\n  keyEventListener.enable(element);\n\n  // Dispatchers: renderer\n  imageRenderedEventDispatcher.enable(element);\n  cameraModifiedEventDispatcher.enable(element);\n  imageSpacingCalibratedEventDispatcher.enable(element);\n  // Dispatchers: interaction\n  mouseToolEventDispatcher.enable(element);\n  keyboardToolEventDispatcher.enable(element);\n  touchToolEventDispatcher.enable(element);\n\n  // labelmap\n  // State\n  state.enabledElements.push(element);\n}\n\n/**\n *\n */\nfunction _createSvgAnnotationLayer(viewportId: string): SVGElement {\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgLayer = document.createElementNS(svgns, 'svg');\n\n  const svgLayerId = `svg-layer-${viewportId}`;\n  svgLayer.classList.add('svg-layer');\n  svgLayer.setAttribute('id', svgLayerId);\n  svgLayer.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n  svgLayer.style.width = '100%';\n  svgLayer.style.height = '100%';\n  svgLayer.style.pointerEvents = 'none';\n  svgLayer.style.position = 'absolute';\n  // TODO: we should test this on high-res monitors\n  //svgLayer.style.textRendering = 'optimizeSpeed'\n\n  // Single dropshadow config for now\n  const defs = document.createElementNS(svgns, 'defs');\n  const filter = document.createElementNS(svgns, 'filter');\n  const feOffset = document.createElementNS(svgns, 'feOffset');\n  const feColorMatrix = document.createElementNS(svgns, 'feColorMatrix');\n  const feBlend = document.createElementNS(svgns, 'feBlend');\n\n  //\n  filter.setAttribute('id', `shadow-${svgLayerId}`);\n  filter.setAttribute('filterUnits', 'userSpaceOnUse');\n\n  //\n  feOffset.setAttribute('result', 'offOut');\n  feOffset.setAttribute('in', 'SourceGraphic');\n  feOffset.setAttribute('dx', '0.5');\n  feOffset.setAttribute('dy', '0.5');\n\n  //\n  feColorMatrix.setAttribute('result', 'matrixOut');\n  feColorMatrix.setAttribute('in', 'offOut');\n  feColorMatrix.setAttribute('in2', 'matrix');\n  feColorMatrix.setAttribute(\n    'values',\n    '0.2 0 0 0 0 0 0.2 0 0 0 0 0 0.2 0 0 0 0 0 1 0'\n  );\n\n  //\n  feBlend.setAttribute('in', 'SourceGraphic');\n  feBlend.setAttribute('in2', 'matrixOut');\n  feBlend.setAttribute('mode', 'normal');\n\n  filter.appendChild(feOffset);\n  filter.appendChild(feColorMatrix);\n  filter.appendChild(feBlend);\n  defs.appendChild(filter);\n  svgLayer.appendChild(defs);\n\n  return svgLayer;\n}\n\nfunction _setSvgNodeCache(element) {\n  const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } =\n    element.dataset;\n  const elementHash = `${viewportId}:${renderingEngineId}`;\n\n  // Create or reset\n  // TODO: If... Reset, we should blow out any nodes in DOM\n  state.svgNodeCache[elementHash] = {};\n}\n\n/**\n *\n * @param newNode\n * @param referenceNode\n */\nfunction _appendChild(\n  newNode: SVGElement,\n  referenceNode: HTMLDivElement\n): void {\n  referenceNode.querySelector('div.viewport-element').appendChild(newNode);\n}\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * It returns all synchronizers that are not disabled and have a source viewport\n * with the given rendering engine Id and viewport Id\n * @param renderingEngineId - The Id of the rendering engine\n * @param viewportId - The Id of the viewport\n * @returns An array of synchronizers\n */\nfunction getSynchronizersForViewport(\n  viewportId: string,\n  renderingEngineId: string\n): Array<Synchronizer> {\n  const synchronizersFilteredByIds = [];\n\n  if (!renderingEngineId && !viewportId) {\n    throw new Error(\n      'At least one of renderingEngineId or viewportId should be given'\n    );\n  }\n\n  for (let i = 0; i < state.synchronizers.length; i++) {\n    const synchronizer = state.synchronizers[i];\n    const notDisabled = !synchronizer.isDisabled();\n    const hasSourceViewport = synchronizer.hasSourceViewport(\n      renderingEngineId,\n      viewportId\n    );\n\n    const hasTargetViewport = synchronizer.hasTargetViewport(\n      renderingEngineId,\n      viewportId\n    );\n\n    if (notDisabled && (hasSourceViewport || hasTargetViewport)) {\n      synchronizersFilteredByIds.push(synchronizer);\n    }\n  }\n\n  return synchronizersFilteredByIds;\n}\n\nexport default getSynchronizersForViewport;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\n\n/**\n * Given a rendering engine Id and a viewport Id, return the tool group that\n * contains that rendering engine and viewport. Note: A viewport can only be\n * associated with a single tool group. You cannot have a viewport that belongs\n * to multiple tool groups. To achieve so, create a new viewport and a new toolGroup\n * for it. This will not impact memory usage much as the volume textures are\n * shared across all viewports rendering the same image.\n *\n * @param viewportId - The Id of the viewport that the tool is being\n * added to.\n * @param renderingEngineId - The Id of the rendering engine that the\n * tool group is associated with.\n * @returns A tool group.\n */\nfunction getToolGroupForViewport(\n  viewportId: string,\n  renderingEngineId: string\n): IToolGroup | undefined {\n  const toolGroupFilteredByIds = state.toolGroups.filter((tg) =>\n    tg.viewportsInfo.some(\n      (vp) =>\n        vp.renderingEngineId === renderingEngineId &&\n        (!vp.viewportId || vp.viewportId === viewportId)\n    )\n  );\n\n  if (!toolGroupFilteredByIds.length) {\n    return;\n  }\n\n  if (toolGroupFilteredByIds.length > 1) {\n    throw new Error(\n      `Multiple tool groups found for renderingEngineId: ${renderingEngineId} and viewportId: ${viewportId}. You should only\n      have one tool group per viewport in a renderingEngine.`\n    );\n  }\n\n  return toolGroupFilteredByIds[0];\n}\n\nexport default getToolGroupForViewport;\n","import { getEnabledElement, Types } from '@cornerstonejs/core';\nimport {\n  mouseEventListeners,\n  wheelEventListener,\n  touchEventListeners,\n  keyEventListener,\n} from '../eventListeners';\nimport {\n  imageRenderedEventDispatcher,\n  cameraModifiedEventDispatcher,\n  mouseToolEventDispatcher,\n  keyboardToolEventDispatcher,\n  imageSpacingCalibratedEventDispatcher,\n  touchToolEventDispatcher,\n} from '../eventDispatchers';\n// ~~\n\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\nimport { state } from './state';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport { ToolModes } from '../enums';\nimport { removeAnnotation } from '../stateManagement';\nimport getSynchronizersForViewport from './SynchronizerManager/getSynchronizersForViewport';\nimport getToolGroupForViewport from './ToolGroupManager/getToolGroupForViewport';\nimport { annotationRenderingEngine } from '../utilities/triggerAnnotationRender';\n\nconst VIEWPORT_ELEMENT = 'viewport-element';\n\nfunction removeEnabledElement(\n  elementDisabledEvt: Types.EventTypes.ElementDisabledEvent\n): void {\n  // Is DOM element\n  const { element, viewportId } = elementDisabledEvt.detail;\n\n  _resetSvgNodeCache(element);\n  _removeSvgNode(element);\n\n  // Remove this element from the annotation rendering engine\n  annotationRenderingEngine.removeViewportElement(viewportId, element);\n\n  // Listeners\n  mouseEventListeners.disable(element);\n  wheelEventListener.disable(element);\n  touchEventListeners.disable(element);\n  keyEventListener.disable(element);\n  // labelmap\n\n  // Dispatchers: renderer\n  imageRenderedEventDispatcher.disable(element);\n  cameraModifiedEventDispatcher.disable(element);\n  imageSpacingCalibratedEventDispatcher.disable(element);\n  // Dispatchers: interaction\n  mouseToolEventDispatcher.disable(element);\n  keyboardToolEventDispatcher.disable(element);\n  touchToolEventDispatcher.disable(element);\n\n  // State\n  // @TODO: We used to \"disable\" the tool before removal. Should we preserve the hook that would call on tools?\n  _removeViewportFromSynchronizers(element);\n  _removeViewportFromToolGroup(element);\n\n  // _removeAllToolsForElement(canvas)\n  _removeEnabledElement(element);\n}\n\nconst _removeViewportFromSynchronizers = (element: HTMLDivElement) => {\n  const enabledElement = getEnabledElement(element);\n\n  const synchronizers = getSynchronizersForViewport(\n    enabledElement.viewportId,\n    enabledElement.renderingEngineId\n  );\n  synchronizers.forEach((sync) => {\n    sync.remove(enabledElement);\n  });\n};\n\nconst _removeViewportFromToolGroup = (element: HTMLDivElement) => {\n  const { renderingEngineId, viewportId } = getEnabledElement(element);\n\n  const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n\n  if (toolGroup) {\n    toolGroup.removeViewports(renderingEngineId, viewportId);\n  }\n};\n\nconst _removeAllToolsForElement = function (element) {\n  const tools = getToolsWithModesForElement(element, [\n    ToolModes.Active,\n    ToolModes.Passive,\n  ]);\n\n  const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n  toolsWithData.forEach(({ annotations }) => {\n    annotations.forEach((annotation) => {\n      removeAnnotation(annotation.annotationUID);\n    });\n  });\n};\n\nfunction _resetSvgNodeCache(element: HTMLDivElement) {\n  const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } =\n    element.dataset;\n  const elementHash = `${viewportId}:${renderingEngineId}`;\n\n  delete state.svgNodeCache[elementHash];\n}\n\nfunction _removeSvgNode(element: HTMLDivElement) {\n  const internalViewportNode = element.querySelector(`div.${VIEWPORT_ELEMENT}`);\n  const svgLayer = internalViewportNode.querySelector('svg');\n  if (svgLayer) {\n    internalViewportNode.removeChild(svgLayer);\n  }\n}\n\n/**\n * @private\n * @param enabledElement\n */\nconst _removeEnabledElement = function (element: HTMLDivElement) {\n  const foundElementIndex = state.enabledElements.findIndex(\n    (el) => el === element\n  );\n\n  if (foundElementIndex > -1) {\n    state.enabledElements.splice(foundElementIndex, 1);\n  }\n};\n\nexport default removeEnabledElement;\n","import { ToolModes } from '../enums';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\n\n/**\n * Cancel the current active manipulation that is being performed on the provided\n * element. It filters all the active and passive tools for the enabledElement\n * and calls cancel() method for all of them, and returns the tool that has executed its\n * cancellation (returned its annotationUID), since tools that are not being manipulated will\n * short circuit early. Note: not all tools currently implement a cancel method.\n *\n * @param element - canvas element\n * @returns annotationUID that is cancelled\n */\nexport default function cancelActiveManipulations(\n  element: HTMLDivElement\n): string | undefined {\n  const tools = getToolsWithModesForElement(element, [\n    ToolModes.Active,\n    ToolModes.Passive,\n  ]);\n\n  const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n  for (const { tool } of toolsWithData) {\n    const annotationUID = tool.cancel(element);\n    if (annotationUID) {\n      return annotationUID;\n    }\n  }\n}\n","import {\n  getRenderingEngine,\n  getEnabledElement,\n  Enums,\n  Types,\n} from '@cornerstonejs/core';\n\nimport { ISynchronizerEventHandler } from '../../types';\n\n/**\n * Synchronizer is a class that listens to a specific event on a specific source\n * targets and fires a specific event on a specific target elements. Use cases\n * include: synchronizing a camera between two viewports, synchronizing a\n * windowLevel between various viewports.\n */\nclass Synchronizer {\n  //\n  private _enabled: boolean;\n  private _eventName: string;\n  private _eventHandler: ISynchronizerEventHandler;\n  private _ignoreFiredEvents: boolean;\n  private _sourceViewports: Array<Types.IViewportId>;\n  private _targetViewports: Array<Types.IViewportId>;\n  private _viewportOptions: Record<string, Record<string, unknown>> = {};\n  private _options: any;\n  public id: string;\n\n  constructor(\n    synchronizerId: string,\n    eventName: string,\n    eventHandler: ISynchronizerEventHandler,\n    options?: any\n  ) {\n    this._enabled = true;\n    this._eventName = eventName;\n    this._eventHandler = eventHandler;\n    this._ignoreFiredEvents = false;\n    this._sourceViewports = [];\n    this._targetViewports = [];\n    this._options = options || {};\n\n    //\n    this.id = synchronizerId;\n  }\n\n  /**\n   * \"Returns true if the synchronizer is disabled.\"\n   * @returns A boolean value.\n   */\n  public isDisabled(): boolean {\n    return !this._enabled || !this._hasSourceElements();\n  }\n\n  /**\n   * Sets the options for the viewport id.  This can be used to\n   * provide configuration on a viewport basis for things like offsets\n   * to the general synchronization, or turn on/off synchronization of certain\n   * attributes.\n   */\n  public setOptions(\n    viewportId: string,\n    options: Record<string, unknown> = {}\n  ): void {\n    this._viewportOptions[viewportId] = options;\n  }\n\n  /** Gets the options for the given viewport id */\n  public getOptions(viewportId: string): Record<string, unknown> | undefined {\n    return this._viewportOptions[viewportId];\n  }\n\n  /**\n   * Add a viewport to the list of targets and sources both.\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public add(viewportInfo: Types.IViewportId): void {\n    this.addTarget(viewportInfo);\n    this.addSource(viewportInfo);\n  }\n\n  /**\n   * Add a viewport to the list of sources (source ONLY)\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public addSource(viewportInfo: Types.IViewportId): void {\n    if (_containsViewport(this._sourceViewports, viewportInfo)) {\n      return;\n    }\n\n    const { renderingEngineId, viewportId } = viewportInfo;\n\n    const { element } =\n      getRenderingEngine(renderingEngineId).getViewport(viewportId);\n\n    // @ts-ignore\n    element.addEventListener(this._eventName, this._onEvent.bind(this));\n    this._updateDisableHandlers();\n\n    this._sourceViewports.push(viewportInfo);\n  }\n\n  /**\n   * Add a viewport to the list of viewports that will get the eventHandler\n   * executed when the event is fired on the source viewport.\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public addTarget(viewportInfo: Types.IViewportId): void {\n    if (_containsViewport(this._targetViewports, viewportInfo)) {\n      return;\n    }\n\n    this._targetViewports.push(viewportInfo);\n    this._updateDisableHandlers();\n  }\n\n  /**\n   * Get the list of source viewports (as {viewportId, renderingEngineId} objects)\n   * @returns An array of {viewportId, renderingEngineId} objects.\n   */\n  public getSourceViewports(): Array<Types.IViewportId> {\n    return this._sourceViewports;\n  }\n\n  /**\n   * Get the list of target viewports (as {viewportId, renderingEngineId} objects)\n   * @returns An array of {viewportId, renderingEngineId} objects.\n   */\n  public getTargetViewports(): Array<Types.IViewportId> {\n    return this._targetViewports;\n  }\n\n  public destroy(): void {\n    this._sourceViewports.forEach((s) => this.removeSource(s));\n    this._targetViewports.forEach((t) => this.removeTarget(t));\n  }\n\n  /**\n   * Remove the viewport from the list of targets and sources\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   */\n  public remove(viewportInfo: Types.IViewportId): void {\n    this.removeTarget(viewportInfo);\n    this.removeSource(viewportInfo);\n  }\n\n  /**\n   * Remove the viewport from the list of source viewports\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   */\n  public removeSource(viewportInfo: Types.IViewportId): void {\n    const index = _getViewportIndex(this._sourceViewports, viewportInfo);\n\n    if (index === -1) {\n      return;\n    }\n\n    const element = _getViewportElement(viewportInfo);\n\n    this._sourceViewports.splice(index, 1);\n    // @ts-ignore\n    element.removeEventListener(this._eventName, this._eventHandler);\n    this._updateDisableHandlers();\n  }\n\n  /**\n   * Remove the viewport from the list of viewports that are currently targeted by\n   * this handler\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   *\n   */\n  public removeTarget(viewportInfo: Types.IViewportId): void {\n    const index = _getViewportIndex(this._targetViewports, viewportInfo);\n\n    if (index === -1) {\n      return;\n    }\n\n    this._targetViewports.splice(index, 1);\n    this._updateDisableHandlers();\n  }\n\n  public hasSourceViewport(\n    renderingEngineId: string,\n    viewportId: string\n  ): boolean {\n    return _containsViewport(this._sourceViewports, {\n      renderingEngineId,\n      viewportId,\n    });\n  }\n\n  public hasTargetViewport(\n    renderingEngineId: string,\n    viewportId: string\n  ): boolean {\n    return _containsViewport(this._targetViewports, {\n      renderingEngineId,\n      viewportId,\n    });\n  }\n\n  private fireEvent(sourceViewport: Types.IViewportId, sourceEvent: any): void {\n    if (this.isDisabled() || this._ignoreFiredEvents) {\n      return;\n    }\n\n    this._ignoreFiredEvents = true;\n    try {\n      for (let i = 0; i < this._targetViewports.length; i++) {\n        const targetViewport = this._targetViewports[i];\n        const targetIsSource =\n          sourceViewport.viewportId === targetViewport.viewportId;\n\n        if (targetIsSource) {\n          continue;\n        }\n\n        this._eventHandler(\n          this,\n          sourceViewport,\n          targetViewport,\n          sourceEvent,\n          this._options\n        );\n      }\n    } catch (ex) {\n      console.warn(`Synchronizer, for: ${this._eventName}`, ex);\n    } finally {\n      this._ignoreFiredEvents = false;\n    }\n  }\n\n  private _onEvent = (evt: any): void => {\n    if (this._ignoreFiredEvents === true) {\n      return;\n    }\n\n    // If no target viewports, then return immediately, this is useful\n    // when switching between layouts, when previous layout has disabled\n    // its viewports, and the new layout has not yet enabled them.\n    // Right now we don't \"delete\" the synchronizer if all source and targets\n    // are removed, but we may want to do that in the future.\n    if (!this._targetViewports.length) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(evt.currentTarget);\n\n    if (!enabledElement) {\n      return;\n    }\n\n    const { renderingEngineId, viewportId } = enabledElement;\n\n    // If the viewport has been removed from the synchronizer before the event is\n    // fired, then return immediately.\n    if (!this._sourceViewports.find((s) => s.viewportId === viewportId)) {\n      return;\n    }\n\n    this.fireEvent(\n      {\n        renderingEngineId,\n        viewportId,\n      },\n      evt\n    );\n  };\n\n  private _hasSourceElements(): boolean {\n    return this._sourceViewports.length !== 0;\n  }\n\n  private _updateDisableHandlers(): void {\n    const viewports = _getUniqueViewports(\n      this._sourceViewports,\n      this._targetViewports\n    );\n    const _remove = this.remove;\n    const disableHandler = (elementDisabledEvent) => {\n      _remove(elementDisabledEvent.detail.element);\n    };\n\n    viewports.forEach(function (vUid) {\n      const renderingEngine = getRenderingEngine(\n        vUid.renderingEngineId\n      ).getViewport(vUid.viewportId);\n\n      if (!renderingEngine) {\n        return;\n      }\n\n      const { element } = renderingEngine;\n\n      element.removeEventListener(\n        Enums.Events.ELEMENT_DISABLED,\n        disableHandler\n      );\n      element.addEventListener(Enums.Events.ELEMENT_DISABLED, disableHandler);\n    });\n  }\n}\n\nfunction _getUniqueViewports(\n  vp1: Array<Types.IViewportId>,\n  vp2: Array<Types.IViewportId>\n): Array<Types.IViewportId> {\n  const unique = [];\n\n  const vps = vp1.concat(vp2);\n\n  for (let i = 0; i < vps.length; i++) {\n    const vp = vps[i];\n    if (\n      !unique.some(\n        (u) =>\n          vp.renderingEngineId === u.renderingEngineId &&\n          vp.viewportId === u.viewportId\n      )\n    ) {\n      unique.push(vp);\n    }\n  }\n\n  return unique;\n}\n\nfunction _getViewportIndex(\n  arr: Array<Types.IViewportId>,\n  vp: Types.IViewportId\n): number {\n  return arr.findIndex(\n    (ar) =>\n      vp.renderingEngineId === ar.renderingEngineId &&\n      vp.viewportId === ar.viewportId\n  );\n}\n\nfunction _containsViewport(\n  arr: Array<Types.IViewportId>,\n  vp: Types.IViewportId\n) {\n  return arr.some(\n    (ar) =>\n      ar.renderingEngineId === vp.renderingEngineId &&\n      ar.viewportId === vp.viewportId\n  );\n}\n\nfunction _getViewportElement(vp: Types.IViewportId): HTMLDivElement {\n  const renderingEngine = getRenderingEngine(vp.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(`No RenderingEngine for Id: ${vp.renderingEngineId}`);\n  }\n\n  return renderingEngine.getViewport(vp.viewportId).element;\n}\n\nexport default Synchronizer;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\nimport { ISynchronizerEventHandler } from '../../types';\n\n/**\n * Create a new synchronizer instance from Synchronizer class\n * @param synchronizerId - The id of the synchronizer.\n * @param eventName - The name of the event that will be emitted by the\n * synchronizer.\n * @param eventHandler - The event handler that will be\n * called when the event is emitted.\n * @param options - Options for the synchronizer.\n * @returns A reference to the synchronizer.\n */\nfunction createSynchronizer(\n  synchronizerId: string,\n  eventName: string,\n  eventHandler: ISynchronizerEventHandler,\n  options?: any\n): Synchronizer {\n  const synchronizerWithSameIdExists = state.synchronizers.some(\n    (sync) => sync.id === synchronizerId\n  );\n\n  if (synchronizerWithSameIdExists) {\n    throw new Error(`Synchronizer with id '${synchronizerId}' already exists.`);\n  }\n\n  // Create\n  const synchronizer = new Synchronizer(\n    synchronizerId,\n    eventName,\n    eventHandler,\n    options\n  );\n\n  // Update state\n  state.synchronizers.push(synchronizer);\n\n  // Return reference\n  return synchronizer;\n}\n\nexport default createSynchronizer;\n","import { state } from '../index';\n\n/**\n * \"Destroy all synchronizers.\"\n */\nfunction destroy(): void {\n  while (state.synchronizers.length > 0) {\n    const synchronizer = state.synchronizers.pop();\n\n    synchronizer.destroy();\n  }\n}\n\nexport default destroy;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * Get the synchronizer with the given id from the state.\n * @param synchronizerId - The id of the synchronizer to be retrieved.\n * @returns A synchronizer object.\n */\nfunction getSynchronizer(synchronizerId: string): Synchronizer | void {\n  return state.synchronizers.find((s) => s.id === synchronizerId);\n}\n\nexport default getSynchronizer;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * Return the array of synchronizers\n * @returns An array of synchronizers.\n */\nfunction getAllSynchronizers(): Array<Synchronizer> {\n  return state.synchronizers;\n}\n\nexport default getAllSynchronizers;\n","import { state } from '../index';\n\n// Synchronizers are a bit more tenacious. We need to make sure we remove\n// any attached events\n// We should probably just have a destroySynchronizer call\n// then use getByX to allow versatility in how we can call destroy\n\n/**\n * Destroy a synchronizer by its ID.\n * @param synchronizerId - The id of the synchronizer to destroy.\n */\nfunction destroySynchronizer(synchronizerId: string): void {\n  const synchronizerIndex = state.synchronizers.findIndex(\n    (sync) => sync.id === synchronizerId\n  );\n\n  if (synchronizerIndex > -1) {\n    const synchronizer = state.synchronizers[synchronizerIndex];\n\n    synchronizer.destroy();\n    state.synchronizers.splice(synchronizerIndex, 1);\n  }\n}\n\nexport default destroySynchronizer;\n","import { MouseBindings, ToolModes } from '../../enums';\nimport cloneDeep from 'lodash.clonedeep';\nimport get from 'lodash.get';\nimport {\n  triggerEvent,\n  eventTarget,\n  getRenderingEngine,\n  getRenderingEngines,\n  getEnabledElementByIds,\n  Settings,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { ToolActivatedEventDetail } from '../../types/EventTypes';\nimport { state } from '../index';\nimport {\n  IToolBinding,\n  IToolClassReference,\n  IToolGroup,\n  SetToolBindingsType,\n  ToolOptionsType,\n} from '../../types';\n\nimport { MouseCursor, SVGMouseCursor } from '../../cursors';\nimport { initElementCursor } from '../../cursors/elementCursor';\n\nconst { Active, Passive, Enabled, Disabled } = ToolModes;\n\n/**\n * ToolGroup class which is a container for tools and their modes and states.\n * In Cornerstone3DTools, you need to create a tool group in order to use the\n * tools. ToolGroup is a way to share tool configuration, state (enabled, disabled, etc.)\n * across a set of viewports. Tools can set to be activated, enabled or disabled\n * in a toolGroup. You should not directly instantiate a ToolGroup. You need to use\n * ToolGroupManager helpers to create a new toolGroup or get a reference to an existing toolGroup.\n *\n * ```js\n * const toolGroup = csTools.ToolGroupManager.createToolGroup('toolGroupId')\n * ```\n */\nexport default class ToolGroup implements IToolGroup {\n  id: string;\n  viewportsInfo = [];\n  toolOptions = {};\n  _toolInstances = {};\n\n  constructor(id: string) {\n    this.id = id;\n  }\n\n  /**\n   * Get the viewport IDs of all the viewports in the current viewport\n   * @returns An array of viewport IDs.\n   */\n  getViewportIds(): string[] {\n    return this.viewportsInfo.map(({ viewportId }) => viewportId);\n  }\n\n  /**\n   * Returns the toolGroup viewports info which is an array of {viewportId, renderingEngineId}\n   */\n  getViewportsInfo(): Array<Types.IViewportId> {\n    return this.viewportsInfo.slice();\n  }\n\n  /**\n   * Get the tool instance for a given tool name in the toolGroup\n   * @param toolName - The name of the tool.\n   * @returns A tool instance.\n   */\n  public getToolInstance(toolInstanceName: string) {\n    const toolInstance = this._toolInstances[toolInstanceName];\n    if (!toolInstance) {\n      console.warn(\n        `'${toolInstanceName}' is not registered with this toolGroup (${this.id}).`\n      );\n      return;\n    }\n\n    return toolInstance;\n  }\n  /**\n   * Add a tool to the tool group with the given tool name and tool configuration.\n   * Note that adding a tool to a tool group will not automatically set the tool\n   * to be active. You must call setToolActive or setToolPassive and other methods\n   * to set the tool to be active or passive or in other states.\n   *\n   * @param toolName - string\n   * @param configuration - Tool configuration objects\n   */\n  addTool(toolName: string, configuration = {}): void {\n    const toolDefinition = state.tools[toolName];\n    const hasToolName = typeof toolName !== 'undefined' && toolName !== '';\n    const localToolInstance = this.toolOptions[toolName];\n\n    if (!hasToolName) {\n      console.warn(\n        'Tool with configuration did not produce a toolName: ',\n        configuration\n      );\n      return;\n    }\n\n    if (!toolDefinition) {\n      console.warn(\n        `'${toolName}' is not registered with the library. You need to use cornerstoneTools.addTool to register it.`\n      );\n      return;\n    }\n\n    if (localToolInstance) {\n      console.warn(\n        `'${toolName}' is already registered for ToolGroup ${this.id}.`\n      );\n      return;\n    }\n\n    // Should these be renamed higher up, so we don't have to alias?\n    // Wrap in try-catch so 3rd party tools don't explode?\n    const { toolClass: ToolClass } = toolDefinition;\n\n    const toolProps = {\n      name: toolName,\n      toolGroupId: this.id,\n      configuration,\n    };\n\n    const instantiatedTool = new ToolClass(toolProps);\n\n    // API instead of directly exposing schema?\n    // Maybe not here, but feels like a \"must\" for any method outside of the ToolGroup itself\n    this._toolInstances[toolName] = instantiatedTool;\n  }\n\n  public addToolInstance(\n    toolName: string,\n    parentClassName: string,\n    configuration = {}\n  ): void {\n    let ToolClassToUse = state.tools[toolName]\n      ?.toolClass as IToolClassReference;\n\n    if (!ToolClassToUse) {\n      // get parent class constructor\n      const ParentClass = state.tools[parentClassName]\n        .toolClass as IToolClassReference;\n\n      // Todo: could not find a way to make this work with typescript\n      // @ts-ignore\n      class ToolInstance extends ParentClass {}\n      // @ts-ignore\n      ToolInstance.toolName = toolName;\n      // @ts-ignore\n      ToolClassToUse = ToolInstance;\n\n      state.tools[toolName] = {\n        toolClass: ToolInstance as IToolClassReference,\n      };\n    }\n\n    // add the tool to the toolGroup\n    // @ts-ignore\n    this.addTool(ToolClassToUse.toolName, configuration);\n  }\n\n  //   class InstanceTool extends parentClass;\n  // InstanceTool.constructor.toolName = name;\n  // addTool(InstanceTool,configuration)\n  /**\n   * Add a viewport to the ToolGroup. It accepts viewportId and optional\n   * renderingEngineId parameter. If renderingEngineId is not provided,\n   * it checks if cornerstone-core has more than one renderingEngine; If so,\n   * it will throw an error. If cornerstone-core has only one renderingEngine,\n   * it will use that renderingEngine.\n   *\n   * @param viewportId - The unique identifier for the viewport.\n   * @param renderingEngineId - The rendering engine to use.\n   */\n  public addViewport(viewportId: string, renderingEngineId?: string): void {\n    const renderingEngines = getRenderingEngines();\n\n    if (!renderingEngineId && renderingEngines.length > 1) {\n      throw new Error(\n        'You must specify a renderingEngineId when there are multiple rendering engines.'\n      );\n    }\n\n    const renderingEngineUIDToUse = renderingEngineId || renderingEngines[0].id;\n\n    // Don't overwrite if it already exists\n    if (\n      !this.viewportsInfo.some(({ viewportId: vpId }) => vpId === viewportId)\n    ) {\n      this.viewportsInfo.push({\n        viewportId,\n        renderingEngineId: renderingEngineUIDToUse,\n      });\n    }\n\n    // Handle the newly added viewport's mouse cursor\n    const toolName = this.getActivePrimaryMouseButtonTool();\n\n    const runtimeSettings = Settings.getRuntimeSettings();\n    if (runtimeSettings.get('useCursors')) {\n      this.setViewportsCursorByToolName(toolName);\n    }\n  }\n\n  /**\n   * Removes viewport from the toolGroup. If only renderingEngineId is defined\n   * it removes all the viewports with the same renderingEngineId, if viewportId\n   * is also provided, it will remove that specific viewport from the ToolGroup.\n   *\n   * @param renderingEngineId - renderingEngine id\n   * @param viewportId - viewport id\n   */\n  public removeViewports(renderingEngineId: string, viewportId?: string): void {\n    const indices = [];\n\n    this.viewportsInfo.forEach((vpInfo, index) => {\n      let match = false;\n      if (vpInfo.renderingEngineId === renderingEngineId) {\n        match = true;\n\n        if (viewportId && vpInfo.viewportId !== viewportId) {\n          match = false;\n        }\n      }\n      if (match) {\n        indices.push(index);\n      }\n    });\n\n    if (indices.length) {\n      // Note: Traverse the array backwards, such that when we remove items we\n      // do not immediately mess up our loop indicies.\n      for (let i = indices.length - 1; i >= 0; i--) {\n        this.viewportsInfo.splice(indices[i], 1);\n      }\n    }\n  }\n\n  public setActiveStrategy(toolName: string, strategyName: string) {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool configuration.`\n      );\n\n      return;\n    }\n\n    toolInstance.setActiveStrategy(strategyName);\n  }\n\n  setToolMode(\n    toolName: string,\n    mode: ToolModes,\n    options = {} as SetToolBindingsType\n  ): void {\n    if (!toolName) {\n      console.warn('setToolMode: toolName must be defined');\n      return;\n    }\n\n    if (mode === ToolModes.Active) {\n      this.setToolActive(toolName, options);\n      return;\n    }\n\n    if (mode === ToolModes.Passive) {\n      this.setToolPassive(toolName);\n      return;\n    }\n\n    if (mode === ToolModes.Enabled) {\n      this.setToolEnabled(toolName);\n      return;\n    }\n\n    if (mode === ToolModes.Disabled) {\n      this.setToolDisabled(toolName);\n      return;\n    }\n\n    console.warn('setToolMode: mode must be defined');\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Active. This means the tool\n   * can be actively used by the defined bindings (e.g., Mouse primary click)\n   *\n   * - Can be actively used by mouse/touch events mapped to its `ToolBinding`s.\n   * - Can add data if an annotation tool.\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   *\n   * @param toolName - tool name\n   * @param toolBindingsOptions - tool bindings\n   */\n  public setToolActive(\n    toolName: string,\n    toolBindingsOptions = {} as SetToolBindingsType\n  ): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    if (!toolInstance) {\n      console.warn(\n        `'${toolName}' instance ${toolInstance} is not registered with this toolGroup, can't set tool mode.`\n      );\n      return;\n    }\n\n    const prevBindings: IToolBinding[] = this.toolOptions[toolName]\n      ? this.toolOptions[toolName].bindings\n      : [];\n\n    const newBindings = toolBindingsOptions.bindings\n      ? toolBindingsOptions.bindings\n      : [];\n\n    // combine the new bindings with the previous bindings to avoid duplicates\n    // it allows duplicated mouse buttons as long as they don't have same\n    // modifier keys.\n    const bindingsToUse = [...prevBindings, ...newBindings].reduce(\n      (unique, binding) => {\n        const TouchBinding = binding.numTouchPoints !== undefined;\n        const MouseBinding = binding.mouseButton !== undefined;\n\n        if (\n          !unique.some((obj) => hasSameBinding(obj, binding)) &&\n          (TouchBinding || MouseBinding)\n        ) {\n          unique.push(binding);\n        }\n        return unique;\n      },\n      []\n    );\n\n    // We should not override the bindings if they are already set\n    const toolOptions: ToolOptionsType = {\n      bindings: bindingsToUse,\n      mode: Active,\n    };\n\n    this.toolOptions[toolName] = toolOptions;\n    this._toolInstances[toolName].mode = Active;\n\n    // reset the mouse cursor if tool has left click binding\n    const runtimeSettings = Settings.getRuntimeSettings();\n    const useCursor = runtimeSettings.get('useCursors');\n\n    if (this._hasMousePrimaryButtonBinding(toolBindingsOptions) && useCursor) {\n      this.setViewportsCursorByToolName(toolName);\n    } else {\n      // reset to default cursor only if there is no other tool with primary binding\n      const activeToolIdentifier = this.getActivePrimaryMouseButtonTool();\n      if (!activeToolIdentifier && useCursor) {\n        const cursor = MouseCursor.getDefinedCursor('default');\n        this._setCursorForViewports(cursor);\n      }\n    }\n\n    if (typeof toolInstance.onSetToolActive === 'function') {\n      toolInstance.onSetToolActive();\n    }\n    this._renderViewports();\n\n    const eventDetail: ToolActivatedEventDetail = {\n      toolGroupId: this.id,\n      toolName,\n      toolBindingsOptions,\n    };\n\n    triggerEvent(eventTarget, Events.TOOL_ACTIVATED, eventDetail);\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Passive.\n   *\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   *\n   * @param toolName - tool name\n   */\n  public setToolPassive(toolName: string): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    // We should only remove the primary button bindings and keep\n    // the other ones (Zoom on right click)\n    const prevToolOptions = this.getToolOptions(toolName);\n    const toolOptions = Object.assign(\n      {\n        bindings: prevToolOptions ? prevToolOptions.bindings : [],\n      },\n      prevToolOptions,\n      {\n        mode: Passive,\n      }\n    );\n\n    const defaultMousePrimary = this.getDefaultMousePrimary();\n\n    // Remove the primary button bindings without modifiers, if they exist\n    toolOptions.bindings = toolOptions.bindings.filter(\n      (binding) =>\n        binding.mouseButton !== defaultMousePrimary || binding.modifierKey\n    );\n    // If there are other bindings, set the tool to be active\n    let mode = Passive;\n    if (toolOptions.bindings.length !== 0) {\n      mode = Active;\n      toolOptions.mode = mode;\n    }\n\n    this.toolOptions[toolName] = toolOptions;\n    toolInstance.mode = mode;\n\n    if (typeof toolInstance.onSetToolPassive === 'function') {\n      toolInstance.onSetToolPassive();\n    }\n    this._renderViewports();\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Enabled.\n   *\n   * - Renders data if the tool has a `renderAnnotation` method..\n   *\n   * @param toolName - tool name\n   */\n  public setToolEnabled(toolName: string): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    const toolOptions = {\n      bindings: [],\n      mode: Enabled,\n    };\n\n    this.toolOptions[toolName] = toolOptions;\n    toolInstance.mode = Enabled;\n\n    if (typeof toolInstance.onSetToolEnabled === 'function') {\n      toolInstance.onSetToolEnabled();\n    }\n\n    this._renderViewports();\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Disabled.\n   *\n   * - Annotation does not render.\n   *\n   * @param toolName - tool name\n   */\n  public setToolDisabled(toolName: string): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    const toolOptions = {\n      bindings: [],\n      mode: Disabled,\n    };\n\n    this.toolOptions[toolName] = toolOptions;\n    toolInstance.mode = Disabled;\n\n    if (typeof toolInstance.onSetToolDisabled === 'function') {\n      toolInstance.onSetToolDisabled();\n    }\n    this._renderViewports();\n  }\n\n  /**\n   * Get the options for a given tool\n   * @param toolName - The name of the tool.\n   * @returns the tool options\n   */\n  public getToolOptions(toolName: string): ToolOptionsType {\n    const toolOptionsForTool = this.toolOptions[toolName];\n\n    if (toolOptionsForTool === undefined) {\n      return;\n    }\n\n    return toolOptionsForTool;\n  }\n\n  /**\n   * Find the name of the tool that is Active and has a primary button binding\n   * (Mouse primary click)\n   *\n   * @returns The name of the tool\n   */\n  public getActivePrimaryMouseButtonTool(): string {\n    return Object.keys(this.toolOptions).find((toolName) => {\n      const toolOptions = this.toolOptions[toolName];\n      return (\n        toolOptions.mode === Active &&\n        this._hasMousePrimaryButtonBinding(toolOptions)\n      );\n    });\n  }\n\n  public setViewportsCursorByToolName(\n    toolName: string,\n    strategyName?: string\n  ): void {\n    const cursor = this._getCursor(toolName, strategyName);\n\n    this._setCursorForViewports(cursor);\n  }\n\n  private _getCursor(toolName: string, strategyName?: string): MouseCursor {\n    let cursorName;\n    let cursor;\n\n    if (strategyName) {\n      // Try combinations with strategyName first:\n      // Try with toolName and toolInstanceName first.\n      cursorName = `${toolName}.${strategyName}`;\n\n      cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n\n      if (cursor) {\n        return cursor;\n      }\n    }\n\n    // Try with toolName and toolInstanceName first.\n    cursorName = `${toolName}`;\n\n    cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n\n    if (cursor) {\n      return cursor;\n    }\n\n    // Try with just toolName.\n    cursorName = toolName;\n\n    cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n\n    if (cursor) {\n      return cursor;\n    }\n\n    return MouseCursor.getDefinedCursor('default');\n  }\n\n  _setCursorForViewports(cursor: MouseCursor): void {\n    this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n      initElementCursor(viewport.element, cursor);\n    });\n  }\n\n  /**\n   * Set a configuration of a tool by the given toolName.\n   * Use overwrite as true in case you want to overwrite any existing configuration (be careful, depending on config change it might break the annotation flow).\n   */\n  public setToolConfiguration(\n    toolName: string,\n    configuration: Record<any, any>,\n    overwrite?: boolean\n  ): boolean {\n    if (this._toolInstances[toolName] === undefined) {\n      console.warn(\n        `Tool ${toolName} not present, can't set tool configuration.`\n      );\n      return false;\n    }\n\n    let _configuration;\n\n    if (overwrite) {\n      _configuration = configuration;\n    } else {\n      _configuration = csUtils.deepMerge(\n        this._toolInstances[toolName].configuration,\n        configuration\n      );\n    }\n\n    this._toolInstances[toolName].configuration = _configuration;\n\n    this._renderViewports();\n\n    return true;\n  }\n\n  /**\n   * Returns the default mouse primary button.\n   *\n   */\n  public getDefaultMousePrimary(): MouseBindings {\n    return MouseBindings.Primary;\n  }\n\n  /**\n   * Get the configuration of tool. It returns only the config for the given path (in case exists).\n   * ConfigurationPath is the the path of the property to get separated by '.'.\n   *\n   * @example\n   * getToolConfiguration('LengthTool', 'firstLevel.secondLevel')\n   * // get from LengthTool instance the configuration value as being LengthToolInstance[configuration][firstLevel][secondLevel]\n   */\n  getToolConfiguration(toolName: string, configurationPath: string): any {\n    if (this._toolInstances[toolName] === undefined) {\n      console.warn(\n        `Tool ${toolName} not present, can't set tool configuration.`\n      );\n      return;\n    }\n\n    const _configuration = get(\n      this._toolInstances[toolName].configuration,\n      configurationPath\n    );\n\n    return cloneDeep(_configuration);\n  }\n\n  /**\n   * Check if the tool binding is set to be primary mouse button.\n   * @param toolOptions - The options for the tool mode.\n   * @returns A boolean value.\n   */\n  private _hasMousePrimaryButtonBinding(toolOptions) {\n    const defaultMousePrimary = this.getDefaultMousePrimary();\n\n    return toolOptions?.bindings?.some(\n      (binding) =>\n        binding.mouseButton === defaultMousePrimary &&\n        binding.modifierKey === undefined\n    );\n  }\n\n  /**\n   * It re-renders the viewports in the toolGroup\n   */\n  private _renderViewports(): void {\n    this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n      getRenderingEngine(renderingEngineId).renderViewport(viewportId);\n    });\n  }\n}\n\nfunction hasSameBinding(\n  binding1: IToolBinding,\n  binding2: IToolBinding\n): boolean {\n  if (binding1.mouseButton !== binding2.mouseButton) {\n    return false;\n  }\n\n  return binding1.modifierKey === binding2.modifierKey;\n}\n","import { state } from '../index';\nimport ToolGroup from './ToolGroup';\nimport { IToolGroup } from '../../types';\n\n/**\n * Create a new tool group with the given name. ToolGroups are the new way\n * in Cornerstone3DTools to share tool configuration, state (enabled, disabled, etc.)\n * across a set of viewports.\n *\n * @param toolGroupId - The unique ID of the tool group.\n * @returns A reference to the tool group that was created.\n */\nfunction createToolGroup(toolGroupId: string): IToolGroup | undefined {\n  // Exit early if ID conflict\n  const toolGroupWithIdExists = state.toolGroups.some(\n    (tg) => tg.id === toolGroupId\n  );\n\n  if (toolGroupWithIdExists) {\n    console.warn(`'${toolGroupId}' already exists.`);\n    return;\n  }\n\n  const toolGroup = new ToolGroup(toolGroupId);\n\n  // Update state\n  state.toolGroups.push(toolGroup);\n\n  // Return reference\n  return toolGroup;\n}\n\nexport default createToolGroup;\n","import { state } from '../index';\nimport { removeSegmentationsFromToolGroup } from '../../stateManagement/segmentation';\nimport { segmentationRenderingEngine } from '../../utilities/segmentation/triggerSegmentationRender';\n// ToolGroups function entirely by their \"state\" being queried and leveraged\n// removing a ToolGroup from state is equivalent to killing it\n\n/**\n * Given a tool group Id, destroy the toolGroup. It will also cleanup all segmentations\n * associated with that tool group too\n *\n * @param toolGroupId - The Id of the tool group to be destroyed.\n */\nfunction destroyToolGroup(toolGroupId: string): void {\n  const toolGroupIndex = state.toolGroups.findIndex(\n    (tg) => tg.id === toolGroupId\n  );\n\n  if (toolGroupIndex > -1) {\n    segmentationRenderingEngine.removeToolGroup(toolGroupId);\n    // Todo: this should not happen here)\n    removeSegmentationsFromToolGroup(toolGroupId);\n    state.toolGroups.splice(toolGroupIndex, 1);\n  }\n}\n\nexport default destroyToolGroup;\n","// `BaseManager` or IManager interface for duplicate API between ToolGroup/Synchronizer?\nimport { state as csToolsState } from '../index';\nimport destroyToolGroup from './destroyToolGroup';\n\n// ToolGroups function entirely by their \"state\" being queried and leveraged\n// removing a ToolGroup from state is equivalent to killing it. Calling\n// destroyToolGroup() to make sure the SegmentationDisplayTools\n// have been removed from the toolGroup Viewports. //Todo: this makes more sense\n// to be based on events, but we don't have any toolGroup created/removed events\n\n/**\n * Destroy all tool groups\n */\nfunction destroy(): void {\n  const toolGroups = [...csToolsState.toolGroups];\n\n  for (const toolGroup of toolGroups) {\n    destroyToolGroup(toolGroup.id);\n  }\n\n  csToolsState.toolGroups = [];\n}\n\nexport default destroy;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\n\n/**\n * Given a tool group Id, return the tool group\n * @param toolGroupId - The Id of the tool group to be retrieved.\n * @returns The tool group that has the same id as the tool group id that was\n * passed in.\n */\nfunction getToolGroup(toolGroupId: string): IToolGroup | undefined {\n  return state.toolGroups.find((s) => s.id === toolGroupId);\n}\n\nexport default getToolGroup;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\n\n/**\n * Return the array of tool groups\n * @returns An array of tool groups.\n */\nfunction getAllToolGroups(): Array<IToolGroup> {\n  return state.toolGroups;\n}\n\nexport default getAllToolGroups;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\nimport { ToolModes } from '../../enums';\n\nconst MODES = [ToolModes.Active, ToolModes.Passive, ToolModes.Enabled];\n\n/**\n * Returns the toolGroups that has the given toolName as active, passive\n * or enabled.\n * @param toolName - The name of the tool\n * @returns An array of tool groups.\n */\nfunction getToolGroupsWithToolName(toolName: string): IToolGroup[] | [] {\n  return state.toolGroups.filter(({ toolOptions }) => {\n    const toolGroupToolNames = Object.keys(toolOptions);\n\n    for (let i = 0; i < toolGroupToolNames.length; i++) {\n      if (toolName !== toolGroupToolNames[i]) continue;\n\n      /* filter out tools that don't have options */\n      if (!toolOptions[toolName]) {\n        continue;\n      }\n\n      if (MODES.includes(toolOptions[toolName].mode)) {\n        return true;\n      }\n    }\n    return false;\n  });\n}\n\nexport default getToolGroupsWithToolName;\n","import {\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { defaultFrameOfReferenceSpecificAnnotationManager } from './FrameOfReferenceSpecificAnnotationManager';\nimport { Annotations, Annotation } from '../../types/AnnotationTypes';\nimport { AnnotationRemovedEventDetail } from '../../types/EventTypes';\nimport { AnnotationGroupSelector } from '../../types';\nimport {\n  triggerAnnotationAddedForElement,\n  triggerAnnotationAddedForFOR,\n} from './helpers/state';\n\n// our default annotation manager\nlet defaultManager = defaultFrameOfReferenceSpecificAnnotationManager;\n\n/**\n * It returns the default annotations manager.\n * @returns the singleton default annotations manager.\n */\nfunction getAnnotationManager() {\n  return defaultManager;\n}\n\n/**\n * Set the annotation manager to be used for rendering, adding, removing, etc.\n * @param annotationManager - The annotation manager to be used\n */\nfunction setAnnotationManager(annotationManager) {\n  defaultManager = annotationManager;\n}\n\n// set back to default frameOfReferenceSpecificAnnotationManager\nfunction resetAnnotationManager() {\n  defaultManager = defaultFrameOfReferenceSpecificAnnotationManager;\n}\n\n/**\n * Returns the annotations for a given tool with the provided options that is\n * used to filter annotations based on the annotation manager.\n *\n * In our default implementation, the options are the element and/or the FrameOfReferenceUID.\n * Hence, the getAnnotations function will return the annotations for the given tool\n * that are associated with the FrameOfReferenceUID.\n *\n * @param toolName - The name of the tool.\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n * @returns The annotations corresponding to the Frame of Reference and the toolName.\n */\nfunction getAnnotations(\n  toolName: string,\n  annotationGroupSelector: AnnotationGroupSelector\n): Annotations {\n  const manager = getAnnotationManager();\n  const groupKey = manager.getGroupKey(annotationGroupSelector);\n  return manager.getAnnotations(groupKey, toolName) as Annotations;\n}\n\n/**\n * Add the annotation to the annotation manager along with the options that is\n * used to filter the annotation manager and the annotation group that\n * the annotation belongs to.\n *\n * As a result, our default implementation will add the annotation to the\n * default manager using the FrameOfReferenceUID as the group key.\n *\n * @param annotation - The annotation that is being added to the annotations manager.\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n */\nfunction addAnnotation(\n  annotation: Annotation,\n  annotationGroupSelector: AnnotationGroupSelector\n): string {\n  if (annotation.annotationUID === undefined) {\n    annotation.annotationUID = csUtils.uuidv4() as string;\n  }\n\n  const manager = getAnnotationManager();\n  const groupKey = manager.getGroupKey(annotationGroupSelector);\n\n  manager.addAnnotation(annotation, groupKey);\n\n  // if the annotation manager selector is an element, trigger the\n  // annotation added event for that element.\n  if (annotationGroupSelector instanceof HTMLDivElement) {\n    triggerAnnotationAddedForElement(annotation, annotationGroupSelector);\n  } else {\n    // if no element is provided, render all viewports that have the\n    // same frame of reference.\n    // Todo: we should do something else here for other types of annotation managers.\n    triggerAnnotationAddedForFOR(annotation);\n  }\n\n  return annotation.annotationUID;\n}\n\n/**\n * Get the number of annotations for a given tool with the provided options that is\n * used to filter annotations based on the annotation manager.\n *\n * In our default implementation, the options are the element and/or the FrameOfReferenceUID.\n * Hence, the getNumberOfAnnotations function will return the number of annotations for the given tool\n * that are associated with the FrameOfReferenceUID.\n *\n * @param toolName - The name of the tool\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n *\n */\nfunction getNumberOfAnnotations(\n  toolName: string,\n  annotationGroupSelector: AnnotationGroupSelector\n): number {\n  const manager = getAnnotationManager();\n  const groupKey = manager.getGroupKey(annotationGroupSelector);\n\n  return manager.getNumberOfAnnotations(groupKey, toolName);\n}\n\n/**\n * Remove the annotation by UID of the annotation.\n * @param annotationUID - The unique identifier for the annotation.\n */\nfunction removeAnnotation(annotationUID: string): void {\n  const manager = getAnnotationManager();\n  const annotation = manager.getAnnotation(annotationUID);\n\n  // no need to continue in case there is no annotation.\n  if (!annotation) {\n    return;\n  }\n\n  manager.removeAnnotation(annotationUID);\n\n  // trigger annotation removed\n  const eventType = Events.ANNOTATION_REMOVED;\n\n  const eventDetail: AnnotationRemovedEventDetail = {\n    annotation,\n    annotationManagerUID: manager.uid,\n  };\n\n  triggerEvent(eventTarget, eventType, eventDetail);\n}\n\n/**\n * Get the Annotation object by its UID\n * @param annotationUID - The unique identifier of the annotation.\n */\nfunction getAnnotation(annotationUID: string): Annotation {\n  const manager = getAnnotationManager();\n  const annotation = manager.getAnnotation(annotationUID);\n\n  return annotation;\n}\n\n/**\n * It removes all annotations from the default annotation manager\n */\nfunction removeAllAnnotations(): void {\n  const manager = getAnnotationManager();\n  manager.removeAllAnnotations();\n}\n\nexport {\n  getAnnotations,\n  getNumberOfAnnotations,\n  addAnnotation,\n  getAnnotation,\n  removeAnnotation,\n  removeAllAnnotations,\n  // annotation manager\n  setAnnotationManager,\n  getAnnotationManager,\n  resetAnnotationManager,\n};\n","import {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  getEnabledElementByIds,\n} from '@cornerstonejs/core';\nimport { Events } from '../../../enums';\nimport { Annotation } from '../../../types/AnnotationTypes';\nimport { getToolGroupsWithToolName } from '../../../store/ToolGroupManager';\nimport { AnnotationAddedEventDetail } from '../../../types/EventTypes';\n\n/**\n * It triggers an event for the element when an annotation is added\n * @param annotation - Annotation - The annotation that was added.\n * @param element - The element that the annotation was added to.\n */\nfunction triggerAnnotationAddedForElement(\n  annotation: Annotation,\n  element: HTMLDivElement\n) {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewportId } = enabledElement;\n\n  const eventType = Events.ANNOTATION_ADDED;\n\n  const eventDetail: AnnotationAddedEventDetail = {\n    annotation,\n    viewportId,\n    renderingEngineId: renderingEngine.id,\n  };\n\n  triggerEvent(eventTarget, eventType, eventDetail);\n}\n\n/**\n * If the annotation has a FrameOfReferenceUID, it triggers the ANNOTATION_ADDED\n * event for all the viewports that has the same FrameOfReferenceUID.\n * @param annotation -  Annotation - The annotation that was added\n */\nfunction triggerAnnotationAddedForFOR(annotation: Annotation) {\n  const { toolName } = annotation.metadata;\n\n  const toolGroups = getToolGroupsWithToolName(toolName);\n\n  if (!toolGroups.length) {\n    return;\n  }\n\n  // Find the viewports in the toolGroups who has the same FrameOfReferenceUID\n  const viewportsToRender = [];\n\n  toolGroups.forEach((toolGroup) => {\n    toolGroup.viewportsInfo.forEach((viewportInfo) => {\n      const { renderingEngineId, viewportId } = viewportInfo;\n      const { FrameOfReferenceUID } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (annotation.metadata.FrameOfReferenceUID === FrameOfReferenceUID) {\n        viewportsToRender.push(viewportInfo);\n      }\n    });\n  });\n\n  if (!viewportsToRender.length) {\n    return;\n  }\n\n  const eventType = Events.ANNOTATION_ADDED;\n\n  viewportsToRender.forEach(({ renderingEngineId, viewportId }) => {\n    const eventDetail: AnnotationAddedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n  });\n}\n\nexport { triggerAnnotationAddedForElement, triggerAnnotationAddedForFOR };\n","import { eventTarget, Enums } from '@cornerstonejs/core';\nimport { getAnnotationManager } from './stateManagement/annotation/annotationState';\nimport { getDefaultSegmentationStateManager } from './stateManagement/segmentation/segmentationState';\nimport { Events as TOOLS_EVENTS } from './enums';\nimport { addEnabledElement, removeEnabledElement } from './store';\nimport { resetCornerstoneToolsState } from './store/state';\nimport {\n  annotationSelectionListener,\n  segmentationDataModifiedEventListener,\n  segmentationRepresentationModifiedEventListener,\n  segmentationRepresentationRemovedEventListener,\n  segmentationModifiedListener,\n  annotationModifiedListener,\n} from './eventListeners';\n\nimport * as ToolGroupManager from './store/ToolGroupManager';\n\nlet csToolsInitialized = false;\n\n/**\n * Initialize the cornerstoneTools package. It will add event listeners for mouse\n * and keyboard events.\n * @param defaultConfiguration - A configuration object that will be used to\n * initialize the tool.\n */\nexport function init(defaultConfiguration = {}): void {\n  if (csToolsInitialized) {\n    return;\n  }\n\n  _addCornerstoneEventListeners();\n  _addCornerstoneToolsEventListeners();\n\n  csToolsInitialized = true;\n}\n\n/**\n * It destroys and cleanup state for cornerstone3DTools. It removes all the tools\n * that were added to the tool groups and restore states. It also removes all\n * event listeners.\n */\nexport function destroy(): void {\n  _removeCornerstoneEventListeners();\n  _removeCornerstoneToolsEventListeners();\n\n  // Important: destroy ToolGroups first, in order for cleanup to work correctly for the\n  // added tools.\n  ToolGroupManager.destroy();\n\n  // Remove all tools\n  resetCornerstoneToolsState();\n\n  // remove all annotation.\n  const annotationManager = getAnnotationManager();\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  annotationManager.restoreAnnotations({});\n  segmentationStateManager.resetState();\n  csToolsInitialized = false;\n}\n\n/**\n * Wires up event listeners for the Cornerstone#ElementDisabled and\n * Cornerstone#ElementEnabled events.\n *\n * @internal\n */\nfunction _addCornerstoneEventListeners(): void {\n  // Clear any listeners that may already be set\n  _removeCornerstoneEventListeners();\n\n  const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n  const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n\n  eventTarget.addEventListener(elementEnabledEvent, addEnabledElement);\n  eventTarget.addEventListener(elementDisabledEvent, removeEnabledElement);\n}\n\n/**\n * Removes event listeners for the Cornerstone#ElementDisabled and\n * Cornerstone#ElementEnabled events.\n *\n */\nfunction _removeCornerstoneEventListeners(): void {\n  const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n  const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n\n  eventTarget.removeEventListener(elementEnabledEvent, addEnabledElement);\n  eventTarget.removeEventListener(elementDisabledEvent, removeEnabledElement);\n}\n\n/**\n * It adds an event listener to the event target (the cornerstoneTools object) for\n * the annotation selected and annotation modified events.\n */\nfunction _addCornerstoneToolsEventListeners() {\n  // Clear any listeners that may already be set\n  _removeCornerstoneToolsEventListeners();\n\n  /**\n   * Annotation\n   */\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_MODIFIED,\n    annotationModifiedListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  /**\n   * Segmentation\n   */\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_MODIFIED,\n    segmentationModifiedListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED,\n    segmentationDataModifiedEventListener\n  );\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED,\n    segmentationRepresentationModifiedEventListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_REMOVED,\n    segmentationRepresentationRemovedEventListener\n  );\n}\n\n/**\n * Remove the event listener for the the annotation selected and annotation modified events.\n */\nfunction _removeCornerstoneToolsEventListeners() {\n  /**\n   * Annotation\n   */\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_MODIFIED,\n    annotationModifiedListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  /**\n   * Segmentation\n   */\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_MODIFIED,\n    segmentationModifiedListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED,\n    segmentationDataModifiedEventListener\n  );\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED,\n    segmentationRepresentationModifiedEventListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_REMOVED,\n    segmentationRepresentationRemovedEventListener\n  );\n}\n\nexport default init;\n","import { getRenderingEngine, Types } from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\n\n/**\n * Synchronizer callback to synchronize the camera by updating all camera\n * values.  See also zoomPanSyncCallback\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, never\n *   the same as sourceViewport.\n * @param cameraModifiedEvent - The CAMERA_MODIFIED event.\n */\nexport default function cameraSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId,\n  cameraModifiedEvent: CustomEvent\n): void {\n  const { camera } = cameraModifiedEvent.detail;\n\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n\n  tViewport.setCamera(camera);\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport cameraSyncCallback from '../callbacks/cameraSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { CAMERA_MODIFIED } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `CAMERA_MODIFIED`\n * rendering event and calls the `cameraSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createCameraPositionSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const cameraPositionSynchronizer = createSynchronizer(\n    synchronizerName,\n    CAMERA_MODIFIED,\n    cameraSyncCallback\n  );\n\n  return cameraPositionSynchronizer;\n}\n","import {\n  BaseVolumeViewport,\n  getRenderingEngine,\n  StackViewport,\n  Types,\n} from '@cornerstonejs/core';\n\n/**\n * Synchronizer callback to synchronize the voi of volumeActors of identical volumes\n * in different viewports.\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport.\n * @param voiModifiedEvent - The VOI_MODIFIED event.\n * @param options - Options for the synchronizer.\n */\nexport default function voiSyncCallback(\n  synchronizerInstance,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId,\n  voiModifiedEvent: Types.EventTypes.VoiModifiedEvent,\n  options?: any\n): void {\n  const eventDetail = voiModifiedEvent.detail;\n  const { volumeId, range, invertStateChanged, invert } = eventDetail;\n\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `Rendering Engine does not exist: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n  const tProperties:\n    | Types.VolumeViewportProperties\n    | Types.StackViewportProperties = {\n    voiRange: range,\n  };\n\n  if (options.syncInvertState && invertStateChanged) {\n    tProperties.invert = invert;\n  }\n\n  if (tViewport instanceof BaseVolumeViewport) {\n    tViewport.setProperties(tProperties, volumeId);\n  } else if (tViewport instanceof StackViewport) {\n    tViewport.setProperties(tProperties);\n  } else {\n    throw new Error('Viewport type not supported.');\n  }\n\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport voiSyncCallback from '../callbacks/voiSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\ntype VOISynchronizerOptions = {\n  syncInvertState: boolean;\n};\n\n/**\n * A helper that creates a new `Synchronizer`\n * which listens to the `VOI_MODIFIED` rendering event and calls the `voiSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @param options - The options for the synchronizer. By default the voi\n * synchronizer will also sync the invert state of the volume, but this can be\n * disabled by setting `syncInvertState` to false.\n *\n * @returns A new `Synchronizer` instance.\n */\nexport default function createVOISynchronizer(\n  synchronizerName: string,\n  options = { syncInvertState: true } as VOISynchronizerOptions\n): Synchronizer {\n  const VOISynchronizer = createSynchronizer(\n    synchronizerName,\n    Enums.Events.VOI_MODIFIED,\n    voiSyncCallback,\n    options\n  );\n\n  return VOISynchronizer;\n}\n","import { getRenderingEngine, Types } from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\n\n/**\n * Synchronizer callback to synchronize the camera. Synchronization\n *\n * targetViewport.options.syncZoom set to false to not sync the zoom\n * targetViewport.options.syncPan set to false to not sync the pan\n\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, different\n *   from sourceViewport\n */\nexport default function zoomPanSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId\n): void {\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const options = synchronizerInstance.getOptions(targetViewport.viewportId);\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n  const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n\n  if (options?.syncZoom !== false) {\n    const srcZoom = sViewport.getZoom();\n    // Do the zoom first, as the pan is relative to the zoom level\n    tViewport.setZoom(srcZoom);\n  }\n  if (options?.syncPan !== false) {\n    const srcPan = sViewport.getPan();\n    tViewport.setPan(srcPan);\n  }\n\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport zoomPanSyncCallback from '../callbacks/zoomPanSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { CAMERA_MODIFIED } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `CAMERA_MODIFIED`\n * rendering event and calls the `cameraSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createZoomPanSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const zoomPanSynchronizer = createSynchronizer(\n    synchronizerName,\n    CAMERA_MODIFIED,\n    zoomPanSyncCallback\n  );\n\n  return zoomPanSynchronizer;\n}\n","import { vec3 } from 'gl-matrix';\nimport {\n  getRenderingEngine,\n  Types,\n  metaData,\n  utilities,\n} from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\nimport { jumpToSlice } from '../../utilities';\nimport areViewportsCoplanar from './areViewportsCoplanar ';\n/**\n * Synchronizer callback to synchronize the source viewport image to the\n * target viewports closest image in its stack. There are two scenarios\n *\n * 1) viewports are in the same frameOfReferenceUID then we can use the\n * absolute imagePositionPatient for the source viewport's current image\n * and set the target viewport's image to the closest image in its stack\n * (which might have different slice thickness so cannot use slice number)\n *\n * 2) viewports have different frameOfReferenceUIDs then we look inside the\n * registrationMetadataProvider to check if there is a corresponding matrix\n * for mapping between the source and target viewport if so it is used to\n * and is applied to the imagePositionPatient of the source viewport's to\n * get the imagePositionPatient of the target viewport's closest image in\n * its stack.\n * Note for 2) The consuming apps using Cornerstone3D (OHIF, etc) are responsible\n * to provide such data in the registrationMetadataProvider. This can be done\n * by various methods 1) Using spatialRegistrationModule inside dicom 2) assuming\n * the user has actually manually scrolled the target viewport to the correct\n * slice before initiating the synchronization 3) using some other method\n * But overall, the consuming app is responsible for providing the data.\n *\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, never\n *   the same as sourceViewport.\n * @param cameraModifiedEvent - The CAMERA_MODIFIED event.\n */\nexport default async function stackImageSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId\n): Promise<void> {\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const sViewport = renderingEngine.getViewport(\n    sourceViewport.viewportId\n  ) as Types.IStackViewport;\n\n  const tViewport = renderingEngine.getViewport(\n    targetViewport.viewportId\n  ) as Types.IStackViewport;\n\n  const frameOfReferenceUID1 = sViewport.getFrameOfReferenceUID();\n  const frameOfReferenceUID2 = tViewport.getFrameOfReferenceUID();\n\n  const imageId1 = sViewport.getCurrentImageId();\n  const imagePlaneModule1 = metaData.get('imagePlaneModule', imageId1);\n  const sourceImagePositionPatient = imagePlaneModule1.imagePositionPatient;\n\n  const targetImageIds = tViewport.getImageIds();\n\n  if (!areViewportsCoplanar(sViewport, tViewport)) {\n    return;\n  }\n\n  if (frameOfReferenceUID1 === frameOfReferenceUID2) {\n    // if frames of references are the same we can use the absolute\n    // imagePositionPatient to find the closest image in the target viewport's stack\n    const closestImageIdIndex = _getClosestImageIdIndex(\n      sourceImagePositionPatient,\n      targetImageIds\n    );\n\n    if (\n      closestImageIdIndex.index !== -1 &&\n      tViewport.getCurrentImageIdIndex() !== closestImageIdIndex.index\n    ) {\n      // await tViewport.setImageIdIndex(closestImageIdIndex.index);\n      await jumpToSlice(tViewport.element, {\n        imageIndex: closestImageIdIndex.index,\n      });\n\n      return;\n    }\n  } else {\n    // if the frame of reference is different we need to use the registrationMetadataProvider\n    // and add that to the imagePositionPatient of the source viewport to get the\n    // imagePositionPatient of the target viewport's closest image in its stack\n    const registrationMatrixMat4 =\n      utilities.spatialRegistrationMetadataProvider.get(\n        'spatialRegistrationModule',\n        [targetViewport.viewportId, sourceViewport.viewportId]\n      );\n\n    if (!registrationMatrixMat4) {\n      throw new Error(\n        `No registration matrix found for sourceViewport: ${sourceViewport.viewportId} and targetViewport: ${targetViewport.viewportId}, viewports with different frameOfReferenceUIDs must have a registration matrix in the registrationMetadataProvider. Use calculateViewportsRegistrationMatrix to calculate the matrix.`\n      );\n    }\n\n    // apply the registration matrix to the source viewport's imagePositionPatient\n    // to get the target viewport's imagePositionPatient\n    const targetImagePositionPatientWithRegistrationMatrix = vec3.transformMat4(\n      vec3.create(),\n      sourceImagePositionPatient,\n      registrationMatrixMat4\n    );\n\n    // find the closest image in the target viewport's stack to the\n    // targetImagePositionPatientWithRegistrationMatrix\n    const closestImageIdIndex2 = _getClosestImageIdIndex(\n      targetImagePositionPatientWithRegistrationMatrix,\n      targetImageIds\n    );\n\n    if (\n      closestImageIdIndex2.index !== -1 &&\n      tViewport.getCurrentImageIdIndex() !== closestImageIdIndex2.index\n    ) {\n      await jumpToSlice(tViewport.element, {\n        imageIndex: closestImageIdIndex2.index,\n      });\n    }\n  }\n}\n\nfunction _getClosestImageIdIndex(targetPoint, imageIds) {\n  // todo: this does not assume orientation yet, but that can be added later\n  return imageIds.reduce(\n    (closestImageIdIndex, imageId, index) => {\n      const { imagePositionPatient } = metaData.get(\n        'imagePlaneModule',\n        imageId\n      );\n      const distance = vec3.distance(imagePositionPatient, targetPoint);\n\n      if (distance < closestImageIdIndex.distance) {\n        return {\n          distance,\n          index,\n        };\n      }\n      return closestImageIdIndex;\n    },\n    {\n      distance: Infinity,\n      index: -1,\n    }\n  );\n}\n","import { vec3 } from 'gl-matrix';\nimport { Types } from '@cornerstonejs/core';\n\nexport default function areViewportsCoplanar(\n  viewport1: Types.IStackViewport,\n  viewport2: Types.IStackViewport\n): boolean {\n  const { viewPlaneNormal: viewPlaneNormal1 } = viewport1.getCamera();\n  const { viewPlaneNormal: viewPlaneNormal2 } = viewport2.getCamera();\n  const dotProducts = vec3.dot(viewPlaneNormal1, viewPlaneNormal2);\n  return Math.abs(dotProducts) > 0.9;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport stackImageSyncCallback from '../callbacks/stackImageSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { STACK_NEW_IMAGE } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `STACK_NEW_IMAGE`\n * rendering event and calls the `stackImageSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createStackImageSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const stackImageSynchronizer = createSynchronizer(\n    synchronizerName,\n    STACK_NEW_IMAGE,\n    stackImageSyncCallback\n  );\n\n  return stackImageSynchronizer;\n}\n"],"names":["MouseBindings","KeyboardBindings","ToolModes","AnnotationStyleStates","Events","SegmentationRepresentations","Swipe","globalLockedAnnotationsSet","Set","setAnnotationLocked","annotation","locked","arguments","length","undefined","detail","makeEventDetail","lockedAnnotationsSet","has","add","added","push","lock","unlock","publish","unlockAllAnnotations","forEach","clearLockedAnnotationsSet","getAnnotationsLocked","Array","from","isAnnotationLocked","getAnnotationsLockedCount","size","checkAndDefineIsLockedProperty","isLocked","descriptor","Object","getOwnPropertyDescriptor","configurable","set","setIsLocked","get","getIsLocked","isExtensible","shouldDefineIsLockedProperty","defineProperty","enumerable","freeze","removed","delete","item","triggerEvent","eventTarget","ANNOTATION_LOCK_CHANGE","this","selectedAnnotationUIDs","setAnnotationSelected","annotationUID","preserveSelected","clearSelectionSet","selectAnnotation","deselectAnnotation","getAnnotationsSelected","getAnnotationsSelectedByToolName","toolName","filter","getAnnotation","metadata","isAnnotationSelected","getAnnotationsSelectedCount","selection","selectionSet","value","ANNOTATION_SELECTION_CHANGE","globalHiddenAnnotationUIDsSet","setAnnotationVisibility","visible","show","annotationUIDsSet","lastHidden","hide","showAllAnnotations","isAnnotationVisible","checkAndDefineIsVisibleProperty","isVisible","setIsVisible","getIsVisible","shouldDefineIsVisibleProperty","lastVisible","hidden","ANNOTATION_VISIBILITY_CHANGE","FrameOfReferenceSpecificAnnotationManager","constructor","uid","getGroupKey","annotationGroupSelector","element","enabledElement","getEnabledElement","Error","FrameOfReferenceUID","_imageVolumeModifiedHandler","evt","eventDetail","frameOfReferenceSpecificAnnotations","annotations","keys","invalidated","getFramesOfReference","getAnnotations","groupKey","frameOfReferenceUID","frameOfReferenceAnnotations","toolSpecificAnnotations","getNumberOfAnnotations","total","addAnnotation","removeAnnotation","groupAnnotations","toolAnnotations","index","findIndex","splice","removeAnnotations","saveAnnotations","cloneDeep","restoreAnnotations","state","getNumberOfAllAnnotations","count","removeAllAnnotations","utilities","addEventListener","Enums","IMAGE_VOLUME_MODIFIED","defaultFrameOfReferenceSpecificAnnotationManager","svgNodeCache","defaultState","isInteractingWithTool","isMultiPartToolActive","tools","toolGroups","synchronizers","enabledElements","handleRadius","resetCornerstoneToolsState","_cloneDeep","addTool","ToolClass","toolAlreadyAdded","name","toolClass","removeTool","getMouseEventPoints","elementToUse","currentTarget","viewport","clientPoint","clientX","clientY","_clientToPoint","pagePoint","pageX","pageY","_pageToPoint","canvasPoint","rect","getBoundingClientRect","left","window","pageXOffset","top","pageYOffset","_pagePointsToCanvasPoints","page","client","canvas","world","canvasToWorld","viewportId","renderingEngineId","startPoints","event","eventName","MOUSE_DOUBLE_CLICK","camera","lastPoints","currentPoints","deltaPoints","stopImmediatePropagation","preventDefault","MOUSE_MOVE","MOUSE_DOWN","MOUSE_DOWN_ACTIVATE","MOUSE_CLICK","MOUSE_UP","MOUSE_DRAG","DOUBLE_CLICK_DRAG_TOLERANCE","mouseButton","isClickEvent","clickDelay","preventClickTimeout","doubleClickState","doubleClickTimeout","mouseDownEvent","mouseUpEvent","ignoreDoubleClick","_onMouseDrag","_updateMouseEventsLastPoints","_getDeltaPoints","_isDragPastDoubleClickTolerance","_doStateMouseDownAndUp","_copyPoints","_onMouseUp","clearTimeout","_cleanUp","_onMouseMove","document","removeEventListener","mouseMoveListener","delta","Math","abs","_preventClickHandler","_clearDoubleClickTimeoutAndEvents","_doMouseDown","JSON","parse","stringify","points","_subtractPoints2D","point0","point1","mouseDoubleClickIgnoreListener","buttons","setTimeout","disable","mouseDoubleClickListener","mouseDownListener","capture","enable","pointerType","mouse","touch","lastInteractionType","lastInteractionTime","handleTap","type","e","now","Date","stopPropagation","handleTapMouse","bind","handleTapTouch","attachEvents","eventList","interactionType","tapHandler","passive","removeEvents","mouseEvents","touchEvents","getTouchEventPoints","touches","changedTouches","map","i","identifier","radiusX","radiusY","force","rotationAngle","getDeltaPoints","curr","getMeanPoints","last","getDeltaDistance","_getDistance2D","_getDistance3D","getDeltaRotation","getDeltaDistanceBetweenIPoints","currentDistance","_getMeanDistanceBetweenAllIPoints","lastDistance","copyPointsList","copyPoints","reduce","prev","getMeanTouchPoints","pairedDistance","j","sqrt","pow","runtimeSettings","Settings","getRuntimeSettings","TOUCH_START","TOUCH_START_ACTIVATE","TOUCH_PRESS","TOUCH_DRAG","TOUCH_END","TOUCH_TAP","TOUCH_SWIPE","zeroIPoint","zeroIDistance","startPointsList","lastPointsList","isTouchStart","startTime","pressTimeout","pressDelay","pressMaxDistance","accumulatedDistance","swipeDistanceThreshold","swiped","swipeToleranceMs","defaultTapState","taps","tapTimeout","tapMaxDistance","tapToleranceMs","tapState","triggerEventCallback","ele","console","debug","_onTouchDrag","currentPointsList","_updateTouchEventsLastPoints","deltaDistance","totalDistance","currentTime","getTime","x","y","swipe","RIGHT","LEFT","DOWN","UP","_checkTouchSwipe","_onTouchEnd","distanceFromStart","_checkTouchTap","lp","_onTouchPress","_onTouchStart","preventGhostClick","touchStartListener","PIXEL_STEP","LINE_HEIGHT","PAGE_HEIGHT","deltaY","spinX","spinY","pixelX","pixelY","wheelDelta","wheelDeltaY","wheelDeltaX","deltaX","deltaMode","normalizeWheel","direction","MOUSE_WHEEL","wheel","wheelListener","key","keyCode","keyListener","KEY_DOWN","_onKeyUp","KEY_UP","keyDownListener","getModifierKey","defaultContourConfig","renderOutline","outlineWidthActive","outlineWidthInactive","outlineOpacity","outlineOpacityInactive","renderFill","fillAlpha","fillAlphaInactive","defaultLabelmapConfig","renderFillInactive","getDefaultLabelmapConfig","getDefaultContourConfig","initialDefaultState","colorLUT","segmentations","globalConfig","renderInactiveSegmentations","representations","Labelmap","Contour","defaultSegmentationStateManager","csUtils","getState","getToolGroups","getColorLUT","lutIndex","resetState","getSegmentation","segmentationId","find","segmentation","addSegmentation","_initDefaultColorLUTIfNecessary","getSegmentationRepresentations","toolGroupId","toolGroupSegRepresentationsWithConfig","segmentationRepresentations","getAllSegmentationRepresentations","toolGroupSegReps","entries","_ref","addSegmentationRepresentation","segmentationRepresentation","config","_handleActiveSegmentation","getGlobalConfig","setGlobalConfig","getSegmentationRepresentationByUID","segmentationRepresentationUID","representation","removeSegmentation","removeSegmentationRepresentation","toolGroupSegmentationRepresentations","segData","warn","removedSegmentationRepresentation","setActiveSegmentationRepresentation","toolGroupSegmentations","segmentationData","active","getToolGroupSpecificConfig","toolGroupStateWithConfig","getSegmentationRepresentationSpecificConfig","segmentationRepresentationSpecificConfig","setSegmentationRepresentationSpecificConfig","getSegmentSpecificConfig","segmentIndex","segmentSpecificConfig","setSegmentSpecificConfig","setSegmentationRepresentationConfig","addColorLUT","log","removeColorLUT","colorLUTIndex","recentlyAddedOrRemovedSegmentationRepresentation","CORNERSTONE_COLOR_LUT","triggerSegmentationRemoved","SEGMENTATION_REMOVED","triggerSegmentationRepresentationRemoved","SEGMENTATION_REPRESENTATION_REMOVED","triggerSegmentationRepresentationModified","SEGMENTATION_REPRESENTATION_MODIFIED","triggerSegmentationModified","segmentationIds","getSegmentations","SEGMENTATION_MODIFIED","triggerSegmentationDataModified","modifiedSlicesToUse","SEGMENTATION_DATA_MODIFIED","segmentationInput","cachedStats","segmentLabels","label","segmentsLocked","activeSegmentIndex","representationData","data","getDefaultSegmentationStateManager","suppressEvents","segmentationStateManager","normalizeSegmentationInput","getToolGroupIdsWithSegmentation","toolGroupIds","foundToolGroupIds","setToolGroupSpecificConfig","getSegmentSpecificRepresentationConfig","setSegmentSpecificRepresentationConfig","SegmentationState","segmentationConfig","getGlobalRepresentationConfig","representationType","setGlobalRepresentationConfig","segmentationRepresentationConfig","async","volumeId","renderingEngine","id","volumeInputs","actorUID","visibility","blendMode","MAXIMUM_INTENSITY_BLEND","addVolumesToViewports","removeVolumeActors","MAX_NUMBER_COLORS","labelMapConfigCache","Map","_getLabelmapConfig","toolGroupLabelmapConfig","segmentationRepresentationLabelmapConfig","isActiveLabelmap","segmentsLabelmapConfig","configToUse","outlineWidth","_needsTransferFunctionUpdate","_ref2","segmentColor","segmentsHidden","cacheUID","oldConfig","forceOpacityUpdate","forceColorUpdate","oldFillAlpha","oldRenderFill","oldRenderOutline","oldOutlineWidth","oldSegmentColor","oldSegmentsHidden","slice","render","toolGroupConfig","renderingConfig","labelmapData","Representations","labelmapUID","cache","getVolume","referencedVolumeId","defaultActor","getDefaultActor","defaultActorUID","volume","referencedVolume","isSameFrameOfReference","actorEntry","getActor","addLabelmapToElement","_addLabelmapToViewport","cfun","ofun","numColors","min","volumeActor","actor","segmentSpecificLabelmapConfig","addRGBPoint","segmentOpacity","removePoint","addPointLong","getProperty","setRGBTransferFunction","setClamping","setScalarOpacity","setInterpolationTypeToNearest","setUseLabelOutline","setLabelOutlineOpacity","setLabelOutlineThickness","setVisibility","_setLabelmapColorAndOpacity","representationInput","toolGroupSpecificConfig","vtkColorTransferFunction","vtkPiecewiseFunction","addPoint","toolGroupSpecificRepresentation","currentToolGroupConfig","SegmentationConfig","mergedConfig","renderImmediate","toolGroup","getToolGroup","viewportsInfo","viewportInfo","getEnabledElementByIds","removeLabelmapFromElement","_removeLabelmapFromToolGroupViewports","getViewportsInfo","contourRepresentation","segmentId","CONTOUR","configCachePerSegmentationRepresentationUID","getConfigCache","setConfigCache","addContourSetsToElement","geometryIds","contourRepresentationConfig","contourActorUID","appendPolyData","vtkAppendPolyData","scalarToColorMap","segmentSpecificMap","geometryId","geometry","getGeometry","getSegmentIndex","validateGeometry","contourSet","polyData","pointArray","vtkPoints","lines","vtkCellArray","pointIndex","getContours","contour","pointList","getPoints","flatPoints","getFlatPointsArray","getType","pointIndexes","_","pointListIndex","CLOSED_PLANAR","linePoints","Float32Array","insertNextCell","setData","polygon","vtkPolyData","setPoints","setLines","getPolyData","color","getColor","getNumberOfPoints","scalars","vtkDataArray","numberOfComponents","dataType","setTuple","getPointData","setScalars","setInputData","addInputData","polyDataOutput","getOutputData","mapper","vtkMapper","vtkActor","setMapper","setLineWidth","assign","setForceOpaque","addActor","resetCamera","updateContourSets","newContourConfig","cachedConfig","contourSetsActor","newOutlineWithActive","getMapper","lut","getLookupTable","segmentsToSetToInvisible","segmentsToSetToVisible","mergedInvisibleSegments","includes","concat","contourSets","segmentSpecificConfigs","acc","affectedSegments","hasCustomSegmentSpecificConfig","values","some","polyDataModified","getInputData","appendScalarsData","getScalars","getData","offset","getTotalNumberOfPoints","segmentConfig","modified","setLookupTable","actorUIDsToRemove","getActors","Boolean","removeActors","representationConfig","contourData","addOrUpdateContourSets","removeContourFromElement","_removeContourFromToolGroupViewports","deleteConfigCache","segmentationRepresentationUIDs","immediate","toolGroupSegRepresentations","toolGroupSegRepresentationUIDs","segRepresentationUIDsToRemove","invalidSegRepresentationUIDs","segRepresentationUID","segmentationDataUID","labelmapDisplay","contourDisplay","_removeSegmentation","segmentationInputArray","validateLabelmap","validateSegmentationInput","segInput","addSegmentationToState","representationInputArray","toolGroupSpecificRepresentationConfig","promises","_addSegmentationRepresentation","Promise","all","getActiveSegmentationRepresentation","isSegmentIndexLocked","setSegmentIndexLocked","getLockedSegments","unshift","setColorLUT","segRepresentation","getColorForSegmentIndex","setColorForSegmentIndex","colorReference","setSegmentationVisibility","indices","scalarData","getScalarData","keySet","it","parseInt","getSegmentationIndices","clear","getSegmentationVisibility","setSegmentsVisibility","segmentIndices","setSegmentVisibility","setActiveSegmentIndex","getActiveSegmentIndex","BaseTool","toolProps","defaultToolProps","initialProps","configuration","supportedInteractionTypes","strategies","defaultStrategy","activeStrategy","strategyOptions","mode","Disabled","getToolName","applyActiveStrategy","operationData","call","setConfiguration","newConfiguration","setActiveStrategy","strategyName","getTargetVolumeId","actorEntries","getClassName","getTargetIdImage","targetId","startsWith","imageId","split","imageURI","viewports","getCurrentImageId","getImageData","getTargetId","StackViewport","BaseVolumeViewport","VIEWPORT_ELEMENT","getSvgNode","canvasHash","cacheKey","domRef","appendNode","svgLayerElement","svgNode","touched","appendChild","setNodeTouched","clearUntouched","cacheEntry","removeChild","viewportElement","internalDivElement","querySelector","_getSvgLayer","svgNodeCacheForCanvas","fn","svgDrawingHelper","getSvgDrawingHelper","drawingElementType","nodeUID","attributes","currentValue","getAttribute","newValue","removeAttribute","setAttribute","circleUID","center","radius","options","dataId","fill","width","lineWidth","lineDash","strokeWidth","svgNodeHash","_getHash","existingCircleElement","cx","cy","r","stroke","_setAttributesIfNecessary","newCircleElement","createElementNS","_setNewAttributesIfValid","ellipseUID","corner1","corner2","existingEllipse","w","h","rx","ry","svgEllipseElement","handleGroupUID","handlePoints","opacity","handle","svgns","side","parseFloat","height","existingHandleElement","newHandleElement","drawLine","lineUID","start","end","isNaN","shadow","existingLine","dropShadowStyle","x1","y1","x2","y2","style","newLine","drawPolyline","polylineUID","connectLastToFirst","existingPolyLine","pointsAttribute","point","firstPoint","newPolyLine","_createTextSpan","text","textSpanElement","textContent","_drawTextBackground","group","getBBox","insertBefore","firstChild","bBox","textUID","textLines","position","padding","fontFamily","fontSize","background","textGroupBoundingBox","existingTextGroup","textElement","textSpans","children","textSpan","textGroupAttributes","transform","textGroup","noSelectStyle","combinedStyle","_createTextElement","_drawTextGroup","centerX","centerY","findClosestPoint","sourcePoints","targetPoint","minPoint","minDistance","Number","MAX_SAFE_INTEGER","sourcePoint","distance","p1","p2","_distanceBetween","linkUID","annotationAnchorPoints","refPoint","boundingBox","boundingBoxPoints","halfWidth","halfHeight","_boundingBoxPoints","textBoxUID","textBoxPosition","textBox","mergedOptions","centering","canvasBoundingBox","drawTextBox","drawLink","drawRect","rectangleUID","_width","existingRect","tlhc","svgRectElement","drawArrow","arrowUID","angle","atan2","firstLine","cos","PI","sin","secondLine","getToolsWithModesForElement","modesFilter","ToolGroupManager","enabledTools","toolGroupToolNames","toolOptions","toolInstance","getToolInstance","Active","Passive","Enabled","annotationRenderingEngine","_needsRender","_animationFrameSet","_animationFrameHandle","_renderFlaggedViewports","_throwIfDestroyed","elements","_viewportElements","_triggerRender","addViewportElement","removeViewportElement","_reset","renderViewport","_setViewportsToBeRenderedNextFrame","hasBeenDestroyed","_setAllViewportsToBeRenderedNextFrame","elementsEnabled","indexOf","_render","requestAnimationFrame","getRenderingEngine","drawSvg","anyRendered","tool","renderAnnotation","rendered","ANNOTATION_RENDERED","cancelAnimationFrame","EPSILON","CONSTANTS","PARALLEL_THRESHOLD","filterAnnotationsWithinSlice","spacingInNormalDirection","viewPlaneNormal","annotationsWithParallelNormals","td","annotationViewPlaneNormal","referencedImageId","imageOrientationPatient","metaData","rowCosineVec","vec3","colCosineVec","isParallel","halfSpacingInNormalDirection","focalPoint","annotationsWithinSlice","handles","dir","dot","filterAnnotationsForDisplay","colonIndex","substring","VolumeViewport","getCamera","_initializeConfig","colorHighlighted","colorSelected","colorLocked","textBoxFontFamily","textBoxFontSize","textBoxColor","textBoxColorHighlighted","textBoxColorSelected","textBoxColorLocked","textBoxBackground","textBoxLinkLineWidth","textBoxLinkLineDash","textBoxShadow","getAnnotationToolStyles","getViewportToolStyles","getToolGroupToolStyles","getDefaultToolStyles","default","setAnnotationStyles","styles","annotationSpecificStyles","setViewportToolStyles","viewportSpecificStyles","setToolGroupToolStyles","toolGroupSpecificStyles","setDefaultToolStyles","getStyleProperty","toolStyle","specifications","_getToolStyle","property","global","globalStyles","toolStyles","styleSpecifier","alternatives","list","getHierarchalPropertyStyles","highlighted","Highlighted","Selected","Locked","Default","AnnotationDisplayTool","onImageSpacingCalibrated","annotationManager","getAnnotationManager","frameOfReference","triggerAnnotationRender","filterInteractableAnnotationsForElement","getReferencedImageId","worldPos","viewUp","imageVolume","getStyle","AnnotationTool","mouseMoveCallback","filteredAnnotations","canvasCoords","annotationsNeedToBeRedrawn","activateHandleIndex","activeHandleIndex","near","_imagePointNearToolOrHandle","nearToolAndNotMarkedActive","notNearToolAndMarkedActive","getHandleNearImagePoint","proximity","worldBoundingBox","topLeft","worldToCanvas","topRight","bottomLeft","bottomRight","annotationCanvasCoordinate","vec2","getLinkedTextBoxStyle","isSuvScaled","scaling","PT","scalingModule","suvbw","isPointNearTool","SegmentationDisplayTool","super","renderSegmentation","toolGroupViewports","segmentationRenderList","_getMergedRepresentationsConfig","viewportsRenderList","allSettled","then","onSetToolEnabled","onSetToolDisabled","segmentationRenderingEngine","_renderFlaggedToolGroups","removeToolGroup","renderToolGroupSegmentations","_setToolGroupSegmentationToBeRenderedNextFrame","getViewport","segmentationDisplayToolInstance","onSegmentationRender","IMAGE_RENDERED","getToolGroupForViewport","csToolsEvents","SEGMENTATION_RENDERED","triggerSegmentationRender","segmentationVolume","imageData","vtkOpenGLTexture","slicesToUpdate","isArray","numSlices","getDimensions","setUpdatedFrame","getAnnotationNearPoint","getAnnotationNearPointOnEnabledElement","_toolInstances","found","findAnnotationNearPointByTool","currentId","func","wait","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","useRAF","TypeError","invokeFunc","time","args","thisArg","apply","startTimer","pendingFunc","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeSinceLastInvoke","timeWaiting","remainingWait","debounced","isInvoking","_len","_key","leadingEdge","isObject","max","cancel","cancelTimer","flush","pending","debounce","clip","val","low","high","calibratedPixelSpacingMetadataProvider","calibrateImageSpacing","calibrationOrScale","USER","scale","getStackViewports","getImageIds","calibrateSpacing","viewportIdsToRender","scroll","viewportType","debounceLoading","loop","numScrollSteps","currentStepIndex","sliceRangeInfo","sliceRange","newFocalPoint","newPosition","setCamera","desiredStepIndex","VolumeScrollEventDetail","currentImageId","EVENTS","VOLUME_SCROLL_OUT_OF_BOUNDS","scrollVolume","imageIndex","currentImageIndex","numberOfSlices","getTargetImageIdIndex","getCurrentImageIdIndex","_getImageSliceData","imageIndexToJump","lastSliceIndex","_getImageIndexToJump","pointInShapeCallback","pointInShapeFn","callback","boundsIJK","iMin","iMax","jMin","jMax","kMin","kMax","dimensions","getDirection","rowCosines","columnCosines","scanAxisNormal","spacing","getSpacing","rowSpacing","columnSpacing","scanAxisSpacing","worldPosStart","indexToWorld","rowStep","columnStep","scanAxisStep","yMultiple","zMultiple","k","pointIJK","dI","dJ","dK","startWorld","pointLPS","numSlicesToProject","sliceNormalIndex","xMin","Infinity","xMax","yMin","yMax","zMin","zMax","p","floor","depth","transformWorldToIndex","pointInSurroundingSphereCallback","circlePoints","centerWorld","radiusWorld","bottom","centerIJK","spacings","minSpacing","maxRadiusIJK","ceil","viewRight","topLeftWorld","bottomRightWorld","sphereCornersIJK","getBoundingBoxAroundShape","_computeBoundsIJKWithCamera","_getBounds","sphereObj","sphere","pointInSphere","precision","fixedPrecision","toFixed","fillSphere","scalarIndex","minSlice","maxSlice","v","fillInsideSphere","eraseInsideSphere","pointInEllipse","ellipse","circleCenterWorld","xRadius","yRadius","zRadius","z","x0","y0","z0","inside","getCanvasEllipseCorners","ellipseCanvasPoints","right","fillCircle","threshold","strategySpecificConfiguration","canvasCoordinates","topLeftCanvas","bottomRightCanvas","ellipsoidCornersIJK","ellipseObj","THRESHOLD_INSIDE_CIRCLE","voxelValue","isWithinThreshold","fillInsideCircle","thresholdInsideCircle","eraseInsideCircle","DEFINED_CURSORS","Symbol","STANDARD_CURSORS","MouseCursor","fallback","getName","addFallbackStyleProperty","getDefinedCursor","definedCursors","getDefinedCursors","mouseCursor","setDefinedCursor","cursor","context","symbol","standardCursorNames","ImageMouseCursor","url","getUniqueInstanceName","prefix","BASE","iconContent","iconSize","viewBox","mousePoint","mousePointerGroupString","SEGMENTATION_CURSOR_BOUNDARIES","MINUS_RECT","PLUS_RECT","SCISSOR_ICON","RECTANGLE_ICON","CIRCLE_ICON","CursorSVG","Angle","extend","ArrowAnnotate","Bidirectional","CobbAngle","CircleROI","EllipticalROI","FreehandROI","FreehandROISculptor","Length","Probe","RectangleROI","TextMarker","Crosshairs","Eraser","Magnify","Pan","Rotate","StackScroll","WindowLevelRegion","WindowLevel","Zoom","SegmentationFreeHandEraseInside","SegmentationFreeHandFillInside","SegmentationFreeHandEraseOutside","SegmentationFreeHandFillOutside","SegmentationRectangleEraseInside","RectangleScissor","CircleScissor","base","create","registerCursor","svgCursorNames","STATE","MODE","SVGMouseCursor","pointer","urn","getCursorURN","getDefinedSVGCursorDescriptor","URL","createObjectURL","svgString","createSVGIconWithPointer","createSVGIcon","Blob","createSVGIconBlob","createSVGIconUrl","createSVGMouseCursor","format","template","dictionary","dict","defined","prototype","hasOwnProperty","replace","match","svgSize","cursorName","setElementCursor","CursorNames","ELEMENT_CURSORS_MAP","initElementCursor","_getElementCursors","_setElementCursor","cursors","resetElementCursor","hideElementCursor","WeakMap","BrushTool","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","brushSize","onSetToolPassive","disableCursor","preMouseDownCallback","eventData","activeSegmentationRepresentation","activeSegmentation","segmentLocking","segmentationState","firstVolumeActorUID","_editData","_activateDraw","triggerAnnotationRenderForViewportUIDs","updateCursor","_dragCallback","brushCursor","_hoverData","_endCallback","_deactivateDraw","centerCanvas","segmentIndexController","getFrameOfReferenceUID","_calculateCursor","bottomCanvas","topCanvas","leftCanvas","rightCanvas","invalidateBrushCursor","toolMetadata","brushCursorUID","drawCircleSvg","getBrushToolInstances","toolInstances","equalsCheck","a","b","getVoxelOverlap","voxelSpacing","voxelCenter","voxelCornersWorld","voxelCornersIJK","processVolumes","thresholdVolumeInformation","segmentationSpacing","segmentationImageData","volumeInfoList","baseVolumeIdx","volumeSize","referenceValues","lower","upper","overwrite","overlapType","overlaps","range","testOverlapRange","volumeInfo","overlapBounds","overlapTest","testRange","computeOffsetIndex","insert","PanTool","touchDragCallback","mouseDragCallback","deltaPointsWorld","updatedPosition","updatedFocalPoint","TrackballRotateTool","rotateIncrementDegrees","rotateCamera","axis","vtkCamera","getVtkActiveCamera","getViewUp","getFocalPoint","getPosition","newViewUp","mat4","currentPointsCanvas","lastPointsCanvas","clientWidth","clientHeight","normalizedPosition","normalizedPreviousPosition","radsq","op","oe","opsq","oesq","lop","loe","nop","vtkMath","noe","angleX","acos","sign","upVec","atV","rightV","forwardV","angleY","WindowLevelTool","_getImageDynamicRangeFromMiddleSlice","middleSliceIndex","frameLength","bytesPerVoxel","TypedArrayConstructor","Uint8Array","Uint16Array","Int16Array","frame","buffer","_getMinMax","modality","newRange","viewportsContainingVolumeUID","isPreScaled","properties","getProperties","voiRange","Modality","preScale","scaled","scalingParameters","getPTScaledNewRange","deltaPointsCanvas","getNewRange","setProperties","vp","multiplier","_getMultiplierFromDynamicRange","wwDelta","wcDelta","windowWidth","windowCenter","imageDynamicRange","calculatedDynamicRange","BitsStored","metadataDynamicRange","_getImageDynamicRangeFromViewport","ratio","round","getRange","voxel","StackScrollTool","invert","debounceIfNotLoaded","deltaPointY","pixelsPerImage","_getPixelPerImage","imageIdIndexOffset","_getNumberOfSlices","offsetHeight","angleBetweenLines","line1","line2","p3","p4","v1","v2","PlanarRotateTool","currentPointWorld","startPointWorld","cross","rotAngle","rotMat","rotatedViewUp","rotation","StackScrollMouseWheelTool","mouseWheelCallback","ZoomTool","_this","zoomToCenter","minZoomScale","maxZoomScale","pinchToZoom","pan","initialMousePosWorld","dirVec","preTouchStartCallback","_dragParallelProjection","pinch","parallelScale","parallelScaleToSet","focalPointToSet","positionToSet","distanceToCanvasCenter","t","cappedParallelScale","thresholdExceeded","_dragPerspectiveProjection","zoomScale","directionOfProjection","tmp","_pinchCallback","parallelProjection","_panCallback","DIRECTIONS","X","Y","Z","CUSTOM","VolumeRotateMouseWheelTool","cz","ax","ay","az","getWorldWidthAndHeightFromCorners","pos1","pos2","diagonal","diagonalLength","worldWidth","worldHeight","cosTheta","getPointInLineOfSightWithCriteria","targetVolumeId","criteriaFunction","stepSize","cameraPosition","step","bounds","getBounds","vector","pickedPoint","pointT","_inBounds","pointToPick","getIntensityFromWorld","jumpToWorld","jumpWorld","normal","dotProd","projectedDelta","_applyShift","MIPJumpToClickTool","targetViewportIds","mouseClickCallback","maxIntensity","brightestPoint","maxFn","intensity","getViewports","foundToolGroup","filterViewportsWithFrameOfReferenceUID","numViewports","viewportsWithFrameOfReferenceUID","filterViewportsWithToolEnabled","viewportsWithToolEnabled","_toolGroupHasActiveEnabledOrPassiveTool","toolMode","EPS","vpCamera","getViewportIdsWithToolToRender","requireParallelNormals","filterViewportsWithParallelNormals","INSIDE","OUTSIDE","clipT","num","denom","c","tE","tL","box","da","db","dx","dy","dist2","distanceToPointSquared","lineStart","lineEnd","d2","distanceToPoint","NaN","intersectLine","line1Start","line1End","line2Start","line2End","x3","y3","x4","y4","a1","b1","c1","r3","r4","a2","b2","c2","r1","r2","RENDERING_DEFAULTS","defaultReferenceLineColor","defaultReferenceLineControllable","defaultReferenceLineDraggableRotatable","defaultReferenceLineSlabThicknessControlsOn","OPERATION","CrosshairsTool","viewportIndicators","autoPan","enabled","panSize","referenceLinesCenterGapRadius","filterActorUIDsToSetSlabThickness","slabThicknessBlendMode","mobile","toolCenter","initializeViewport","_getAnnotations","cameraFocalPoint","rotationPoints","slabThicknessPoints","activeOperation","activeViewportIds","_getViewportsInfo","computeToolCenter","firstViewport","secondViewport","thirdViewport","normal1","normal2","point2","normal3","point3","firstPlane","secondPlane","thirdPlane","triggerAnnotationRenderForViewportIds","addNewAnnotation","_jump","viewportIdArray","otherViewport","viewportControllable","_getReferenceLineControllable","viewportDraggableRotatable","_getReferenceLineDraggableRotatable","_activateModify","handleSelectedCallback","_pointNearTool","toolSelectedCallback","onCameraModified","viewportAnnotation","currentCamera","oldCameraPosition","deltaCameraPosition","oldCameraFocalPoint","deltaCameraFocalPoint","isRotation","cameraModifiedInPlane","getViewportIds","_autoPanViewportIfNecessary","filteredToolAnnotations","imageNeedsUpdate","previousActiveOperation","previousActiveViewportIds","_areViewportIdArraysEqual","renderStatus","canvasDiagonalLength","canvasMinDimensionLength","crosshairCenterCanvas","otherViewportAnnotations","_filterAnnotationsByUniqueViewportOrientations","referenceLines","canvasBox","otherCamera","otherViewportControllable","otherViewportDraggableRotatable","otherViewportSlabThicknessControlsOn","_getReferenceLineSlabThicknessControlsOn","otherCanvasDiagonalLength","otherCanvasCenter","otherViewportCenterWorld","pointWorld0","pointWorld1","pointCanvas0","otherViewportCenterCanvas","canvasUnitVectorFromCenter","canvasVectorFromCenterLong","canvasVectorFromCenterMid","canvasVectorFromCenterShort","canvasVectorFromCenterStart","centerGap","refLinePointOne","refLinePointTwo","refLinePointThree","refLinePointFour","refLinesCenter","liangBarksyClip","rotHandleOne","rotHandleTwo","stHandlesCenterCanvas","stHandlesCenterWorld","worldUnitVectorFromCenter","matrix","vtkMatrixBuilder","buildFromDegree","rotate","worldUnitOrthoVectorFromCenter","slabThicknessValue","getSlabThickness","worldOrthoVectorFromCenter","worldVerticalRefPoint","canvasVerticalRefPoint","canvasOrthoVectorFromCenter","stLinePointOne","stLinePointTwo","stLinePointThree","stLinePointFour","stHandleOne","stHandleTwo","stHandleThree","stHandleFour","newRtpoints","newStpoints","viewportColor","_getReferenceLineColor","line","lineIndex","viewportSlabThicknessControlsOn","selectedViewportId","lineActive","drawLineSvg","rotHandlesActive","rotationHandles","rotHandleWorldOne","rotHandleWorldTwo","slabThicknessHandlesActive","slabThicknessHandles","slabThicknessHandleWorldOne","slabThicknessHandleWorldTwo","slabThicknessHandleWorldThree","slabThicknessHandleWorldFour","handleUID","drawHandlesSvg","_onNewVolume","viewportIdArrayOne","viewportIdArrayTwo","itemFound","_getAnnotationsForViewportsWithDifferentCameras","viewportsWithDifferentCameras","cameraOfTarget","_filterViewportWithSameOrientation","referenceAnnotation","linkedViewportAnnotations","otherViewPlaneNormal","otherLinkedViewportAnnotationsFromSameScene","otherViewportsAnnotationsWithUniqueCameras","cameraFound","jj","cameraOfStocked","otherNonLinkedViewportAnnotationsFromSameScene","_checkIfViewportsRenderingSameScene","actors","otherViewportActors","sameScene","_ref3","viewportsAnnotationsToUpdate","_applyDeltaShiftToSelectedViewportCameras","_deactivateModify","editData","dir1","dir2","finalPointCanvas","originalPointCanvas","_isClockWise","rotationAxis","buildFromRadian","translate","otherViewportsIds","renderViewports","referenceAnnotations","viewportsIds","mod","currentPoint","currentCenter","otherViewportRotationPoints","dotProdDirection","projectedDirection","normalizedProjectedDirection","normalizedProjectedDelta","MINIMUM_SLAB_THICKNESS","_pointNearReferenceLine","setSlabThickness","lineViewport","lineSegment1","distanceToPoint1","lineSegment","lineSegment2","distanceToPoint2","getReferenceLineColor","getReferenceLineControllable","getReferenceLineDraggableRotatable","getReferenceLineSlabThicknessControlsOn","onSetToolActive","_unsubscribeToViewportNewVolumeSet","_subscribeToViewportNewVolumeSet","_ref4","_getRotationHandleNearImagePoint","_getSlabThicknessHandleNearImagePoint","_ref5","VOLUME_VIEWPORT_NEW_VOLUME","_ref6","toolCenterCanvas","visiblePointCanvas","visiblePointWorld","slabThickness","actorUIDs","blendModeToUse","COMPOSITE","setBlendMode","_applyDeltaShiftToViewportCamera","stPointLineCanvas1","stPointLineCanvas2","stPointLineCanvas1Start","stPointLineCanvas2Start","MAGNIFY_VIEWPORT_ID","MagnifyTool","magnifySize","magnifyWidth","magnifyHeight","_getReferencedImageId","_createMagnificationViewport","canvasPos","magnifyToolElement","magnifyElement","createElement","classList","display","viewportInput","STACK","enableElement","magnifyViewport","setStack","_dragEndCallback","disableElement","ReferenceLines","sourceViewportId","_init","getRenderingEngines","sourceViewport","sourceViewportCanvasCornersInWorld","newAnnotation","targetViewport","sourceViewPlaneNormal","targetViewportPlane","pointSet1","pointSet2","pointSetToUse","topBottomVec","topRightVec","newNormal","isPerpendicular","lineStartWorld","lineEndWorld","vec1","CalibrationTypes","PIXEL_UNITS","getCalibratedLengthUnits","image","calibration","hasPixelSpacing","units","UNCALIBRATED","SequenceOfUltrasoundRegions","getCalibratedAreaUnits","getCalibratedScale","getCalibratedAspect","aspect","getTextBoxCoordsCanvas","annotationCanvasPoints","corners","canvasPoints","handlesLeftToRight","sort","_compareX","handlesTopToBottom","_compareY","_determineCorners","BidirectionalTool","preventHandleOutsideImage","canvasPoint1","canvasPoint2","movingTextBox","handleIndex","worldPosition","hasMoved","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","isHandleOutsideImage","eventType","ANNOTATION_COMPLETED","isDrawing","_dragDrawCallback","canvasCoordPoints","shortAxisDistFromCenter","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","_dragModifyCallback","worldPosDelta","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","unit","_throttledCalculateCachedStats","_calculateCachedStats","activeHandleCanvasCoords","dataId1","dataId2","_getTextLines","canvasTextBoxCoords","drawLinkedTextBoxSvg","vectorInSecondLineDirection","extendedSecondLineSegment","roundNumber","worldPos1","worldPos2","worldPos3","worldPos4","targetIds","dist1","_calculateLength","index1","index2","index3","index4","_isInsideVolume","ANNOTATION_MODIFIED","vector1","vector2","throttle","dz","LengthTool","cachedVolumeStats","getModalityUnit","petSeriesModule","_handlePTModality","isViewportPreScaled","ProbeTool","eventDispatchDetail","modalityUnitOptions","referencedImageURI","hasImageURI","currentImageURI","textCanvasCoordinates","drawTextBoxSvg","modalityUnit","DragProbeTool","postMouseDownCallback","postTouchStartCallback","lineSegments","rectToLineSegments","segment","RectangleROITool","_getRectangleImageCoordinates","rectangle","bottomLeftCanvas","topRightCanvas","bottomLeftWorld","topRightWorld","areaUnit","area","mean","stdDev","drawRectSvg","worldPos1Index","worldPos2Index","valueMinusMean","getWorldWidthAndHeightFromTwoPoints","EllipticalROITool","centerPointRadius","initialRotation","getRotation","canvasCorners","minorEllipse","majorEllipse","pointInMinorEllipse","_pointInEllipseCanvas","canvasWidth","canvasHeight","originalHandleCanvas","pointsCanvas","currentCanvasPoints","dX","dY","_dragHandle","dYCanvas","canvasBottom","canvasTop","newHalfCanvasWidth","canvasLeft","canvasRight","dXCanvas","newHalfCanvasHeight","drawEllipseSvg","centerPoint","_getCanvasEllipseCenter","isEmptyArea","areaLine","location","normalized","getCanvasCircleRadius","circleCanvasPoints","getCanvasCircleCorners","CircleROITool","radiusPoint","canvasCenter","canvasEnd","radiusUnit","perimeter","radiusLine","getIntersectionCoordinatesWithPolyline","q1","polylineIndexes","initialI","intersections","doesIntersect","getAllIntersectionsWithPolyline","intersection","getIntersection","getFirstIntersectionWithPolyline","getClosestIntersectionWithPolyline","q2","distances","intersectionPoints","midpoint","orient","orientation","onSegment","q","orientationValue","denominator","numerator1","numerator2","getSubPixelSpacingAndXYDirections","subPixelResolution","xDir","yDir","volumeSpacing","iVector","jVector","kVector","absViewRightDotI","absViewRightDotJ","absViewRightDotK","xSpacing","absViewUpDotI","absViewUpDotJ","absViewUpDotK","ySpacing","pointsAreWithinCloseContourProximity","closeContourProximity","addCanvasPointsToArray","newCanvasPoint","commonData","lastWorldPos","newWorldPos","worldPosDiff","xDist","yDist","numPointsToAdd","lastCanvasPoint","canvasDist","canvasDir","distPerPoint","pointCanProjectOnLine","p1p","p1p2","p1p2Mag","projectionVectorMag","p1p2UnitVector","projectionVector","projectionPoint","calculateAreaOfPoints","n","interpolateSegmentPoints","iniIndex","endIndex","knotsRatioPercentage","segmentSize","amountOfKnots","minKnotDistance","interpolationIniIndex","interpolationEndIndex","segmentPointsUnchangedBeg","segmentPointsUnchangedEnd","interpolatedPoints","originalPoints","knotsIndexes","xInterpolator","d3InterpolateBasis","yInterpolator","zInterpolator","d3Zip","d3Quantize","interpolatePoints","minDistributionDistance","closedInterval","intervalIni","intervalEnd","intervalSize","continuosDistributionValue","getContinuousUniformDistributionValues","shouldInterpolate","interpolation","interpolateOnAdd","interpolateOnEdit","followingIndex","circularFindNextIndexBy","listParams","otherListParams","criteria","indexDelimiter","otherIndexDelimiter","otherPoints","pointsLength","otherPointsLength","startIndex","otherStartIndex","findChangedSegment","previousPoints","firstMatchIndex","previousFirstMatchIndex","pointA","pointB","findMatchIndexes","toBeNotEqualCriteria","isEqualByProximity","lowDiffIndex","lowOtherDiffIndex","highIndex","getInterpolatedPoints","pointsOfReference","knotsRatioPercentageOnAdd","knotsRatioPercentageOnEdit","changedIniIndex","changedEndIndex","findOpenUShapedContourVectorToPeak","first","firstToLastUnitVector","normalVector1","normalVector2","centerOfFirstToLast","furthest","dist","polyline","activateDraw","drawData","polylineIndex","mouseUpDrawCallback","mouseDragDrawCallback","deactivateDraw","lastWorldPoint","crossingIndex","findCrossingIndexDuringCreate","applyCreateOnCross","numPointsAdded","allowOpenContours","lastPoint","completeDrawOpenContour","completeDrawClosedContour","removeCrossedLinesOnCompleteDraw","haltDrawing","pop","worldPoints","isOpenContour","triggerAnnotationCompleted","numPoints","endToStart","canvasPointsMinusEnds","indexToRemoveUpTo","isOpenUShapeContour","openUShapeContourVectorToPeak","pointsLessLastOne","shift","activateClosedContourEdit","cancelDrawing","minPoints","shouldHaltDrawing","checkForFirstCrossing","isClosedContour","editCanvasPoints","prevCanvasPoints","crossedLineSegment","startCrossingIndex","removePointsUpUntilFirstCrossing","checkCanvasEditFallbackProximity","firstEditCanvasPoint","distanceIndexPairs","prevCanvasPoint","twoClosestDistanceIndexPairs","lowestIndex","extendedPoint","crossedLineSegmentFromExtendedPoint","pointsToPrepend","editIndex","numPointsToRemove","checkForSecondCrossing","removePointsAfterSecondCrossing","lastLine","didCrossLine","findSnapIndex","lastEditCanvasPoint","editCanvasPointsLessLastOne","snapCanvasPosition","checkAndRemoveCrossesOnEditLine","editIndexCrossed","isEditingClosed","mouseUpClosedContourEditCallback","mouseDragClosedContourEditCallback","deactivateClosedContourEdit","currentEditIndex","snapIndex","fusedCanvasPoints","fuseEditPointsWithClosedContour","finishEditAndStartNewEdit","triggerAnnotationModified","augmentedEditCanvasPoints","lowIndex","distanceBetweenLowAndFirstPoint","distanceBetweenLowAndLastPoint","distanceBetweenHighAndFirstPoint","distanceBetweenHighAndLastPoint","inPlaceDistance","reverseDistance","completeClosedContourEdit","cancelClosedContourEdit","activateOpenContourEdit","isEditingOpen","mouseUpOpenContourEditCallback","mouseDragOpenContourEditCallback","deactivateOpenContourEdit","fuseEditPointsWithOpenContour","finishEditOpenOnSecondCrossing","checkIfShouldOverwriteAnEnd","openContourEditOverwriteEnd","fuseEditPointsForOpenContourEndEdit","activateOpenContourEndEdit","lastCanvasPos","aDotb","magA","magB","newCanvasPoints","pointsToRender","completeOpenContourEdit","cancelOpenContourEdit","reverse","_getRenderingOptions","renderContour","findOpenUShapedContourVectorToPeakOnRender","calculateUShapeContourVectorToPeakIfNotPresent","renderOpenUShapedContour","renderOpenContour","renderClosedContour","drawPolylineSvg","alwaysRenderOpenContourHandles","handlePoint","firstCanvasPoint","openUShapeContourVectorToPeakCanvas","renderContourBeingDrawn","renderClosedContourBeingEdited","renderOpenContourBeingEdited","PlanarFreehandROITool","calculateStats","previousPoint","pStart","pEnd","activeAnnotationUID","_renderStats","worldPosIndex","iDelta","jDelta","kDelta","worldPosEnd","canvasPosEnd","sum","sumSquares","curRow","intersectionCounter","drawLinkedTextBox","registerDrawLoop","registerEditLoopCommon","registerClosedContourEditLoop","registerOpenContourEditLoop","registerOpenContourEndEditLoop","registerRenderMethods","annotationsToDisplay","ArrowAnnotateTool","getTextCallback","changeTextCallback","arrowFirst","touchTapCallback","doubleClickCallback","clickedAnnotation","_doneChangingTextCallback","drawArrowSvg","updatedText","doneChangingTextCallback","prompt","AngleTool","angleStartedNotYetCompleted","canvasPoint3","String","fromCharCode","midPoint","ret","len","arg","midPoint2","CobbAngleTool","point4","canvasPoint4","_mouseUpCallback","_mouseDownCallback","_mouseDragCallback","seg1","seg2","minDist","MAX_VALUE","ReferenceCursors","displayThreshold","positionSync","_elementWithCursor","_currentCursorWorldPosition","_currentCanvasPosition","_disableCursorEnabled","getActiveAnnotation","createInitialAnnotation","updateAnnotationPosition","previousCamera","oldFocalPoint","cameraNormal","dotProduct","isElementWithCursor","updateViewportImage","lineWidthBase","crosshairUIDs","centerSpace","lineLength","viewportIds","plane","currentMousePosition","closestIndex","setImageIdIndex","normalizedViewPlane","scaledPlaneNormal","viewportsWithAnnotations","ScaleOverlayTool","scaleLocation","viewportCanvasCornersInWorld","thisAnnotation","computeScaleSize","worldWidthViewport","worldHeightViewport","scaleSizes","currentScaleSize","scaleSize","computeEndScaleTicks","locationTickOffset","endTick1","endTick2","computeInnerScaleTicks","leftTick","rightTick","canvasScaleSize","tickIds","tickUIDs","tickCoordinates","numberSmallTicks","tickSpacing","locationOffset","computeWorldScaleCoordinates","pointSet","worldCoordinates","midpointLocation","computeCanvasScaleCoordinates","canvasSize","vscaleBounds","hscaleBounds","scaleCanvasCoordinates","worldDistanceOnCanvas","computeScaleBounds","horizontalReduction","verticalReduction","hReduction","vReduction","locationBounds","canvasBounds","scaleTicks","scaleId","leftTickId","rightTickId","locationTextOffest","textBoxLines","scaleSizeDisplayValue","scaleSizeUnits","toString","fillRectangle","constraintFn","rectangleCornersIJK","coord","pointInRectangle","fillInsideRectangle","eraseRectangle","pointInShape","eraseInsideRectangle","RectangleScissorsTool","FILL_INSIDE","ERASE_INSIDE","CircleScissorsTool","SphereScissorsTool","RectangleROIThresholdTool","RectangleROIStartEndThresholdTool","numSlicesToPropagate","spacingInNormal","_getEndSliceIndex","startSlice","endSlice","projectionPoints","projectionPointsImageIds","_computeProjectionPoints","sliceIndex","firstOrLastSlice","lineDashToUse","_calculateCachedStatsTool","startIJK","endIJK","indexToWorldVec3","endWorld","newProjectionPoints","newPoint","RectanglePoints","endPos","imageIds","imageIdIndex","imagePositionPatient","defaultEquals","lpad","string","character","join","getter","seed","onFlood","onBoundary","equals","diagonals","startNode","permutations","perms","permutation","permute","perm","array","countNonZeroes","prunedPermutations","stack","flooded","visits","currentArgs","flood","boundaries","job","getArgs","prevArgs","previousArgs","markAsVisited","node","safely","member","markAsFlooded","nextArgs","pushAdjacent","markAsBoundary","f","error","isEqual","PaintFillTool","fixedDimension","getFixedDimension","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","floodFillResult","floodFill","scalarDataPosition","getFramesModified","minJ","maxJ","framesModified","seedIndex3D","getScalarDataPosition","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","xDirection","yDirection","zDirection","absoluteOfViewPlaneNormal","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","referenceVolume","AllBoundsIJK","pointsToUse","extend2DBoundingBoxInViewAxis","accumulator","annotationUIDs","validToolNames","_validateAnnotations","getBoundsIJKFromRectangleAnnotations","thresholdVolumeByRange","labelmaps","origin","labelmap","outputData","arrayType","volumeLoader","isValidRepresentationConfig","SegmentationRepresentation","isValidLabelmapConfig","getDefaultRepresentationConfig","createLabelmapVolumeForViewport","input","setBrushSizeForToolGroup","viewportsInfoArray","getBrushSizeForToolGroup","brushToolInstance","setBrushThresholdForToolGroup","getBrushThresholdForToolGroup","segmentationIndex","_handleSameSizeVolume","getPoint","callbackOverlap","_handleDifferentSizeVolume","getOrientationStringLPS","orientationX","orientationY","orientationZ","MIN","invertOrientationStringLPS","orientationString","inverted","toUpperCase","addToolState","getToolState","dynamicVolumesPlayingMap","playClip","playClipOptions","playClipTimeouts","playClipIsTimeVarying","dynamicCineEnabled","_getVolumeFromViewport","playClipContext","frameTimeVectorEnabled","_createStackViewportCinePlayContext","isDynamicVolume","numTimePoints","timePointIndex","_createDynamicVolumeViewportCinePlayContext","cachedScrollInfo","scrollInfo","getScrollInfo","volumeViewPlaneNormal","glMatrix","_createVolumeViewportCinePlayContext","_createCinePlayContext","playClipData","isDynamicCinePlaying","_stopDynamicVolumeCine","_stopClip","intervalId","framesPerSecond","lastFrameTimeStamp","ignoreFrameTimeVector","usingFrameTimeVector","frameTimeVector","speed","frameTimeVectorSpeedMultiplier","timeouts","isTimeVarying","sample","delay","limit","_getPlayClipTimeouts","playClipAction","newStepIndex","CINE_EVENTS","CLIP_STOPPED","playClipTimeoutHandler","setInterval","CLIP_STARTED","stopClip","stopDynamicCine","cineToolData","clearInterval","_stopClipWithData","dynamicCineElement","volumes","_getVolumesFromViewport","interpolateAnnotation","shouldPreventInterpolation","interpolatedCanvasPoints","requestType","Prefetch","priority","resetPrefetchTimeout","maxImagesToPrefetch","preserveExistingPool","resetPrefetchDelay","lowEnd","highEnd","arr","getStackData","currentImageIdIndex","prefetch","stackPrefetchData","stackPrefetch","indicesToRequest","removeFromList","getImageLoadObject","imageLoadPoolManager","clearRequestStack","nearest","idx","nearestIndex","nextImageIdIndex","lowerIndex","higherIndex","imageIdsToPrefetch","currentIndex","shouldLoadLower","shouldLoadHigher","requestFn","imageLoader","useNorm16Texture","getCoreConfiguration","rendering","targetBuffer","addRequest","getPromiseRemovedHandler","stackData","onImageUpdated","target","indexOfCurrentImage","STACK_NEW_IMAGE","promiseRemovedHandler","IMAGE_CACHE_IMAGE_REMOVED","getConfiguration","dynamicVolume","frames","frameNumbers","maskVolumeId","imageCoordinate","dataInTime","indexArray","allScalarData","getScalarDataArrays","indexValues","activeScalarData","_getTimePointDataMask","coordinate","worldToIndex","_getTimePointDataCoordinate","operation","numFrames","typedArrays","arrayLength","finalArray","SUM","currentArray","SUBTRACT","AVERAGE","onImageRendered","customCallbackHandler","handlerType","customFunction","activeTool","filterToolsWithMoveableHandles","ToolAndAnnotations","toolsWithMoveableHandles","filterToolsWithAnnotationsForElement","filterMoveableAnnotationTools","moveableAnnotationTools","shiftKey","ctrlKey","kb","ShiftCtrl","altKey","ShiftAlt","metaKey","ShiftMeta","Shift","CtrlAlt","CtrlMeta","Ctrl","AltMeta","Alt","Meta","getActiveToolForMouseEvent","mouseEvent","modifierKey","getMouseModifier","keyEventListener","defaultMousePrimary","getDefaultMousePrimary","correctBinding","bindings","binding","getToolsWithModesForMouseEvent","evtButton","mouseDown","isPrimaryClick","applicableTools","annotationToolsWithAnnotations","annotationToolsWithMoveableHandles","isMultiSelect","getAnnotationForSelection","toggleAnnotationSelection","toolsWithMovableHandles","mouseDownActivate","mouseDrag","mouseMove","activeAndPassiveTools","toolsWithAnnotations","toolsWithoutAnnotations","toolAndAnnotation","mouseClick","mouseDoubleClick","mouseUp","mouseWheel","getActiveToolForKeyboardEvent","keyDown","setViewportsCursorByToolName","keyUp","CAMERA_MODIFIED","IMAGE_SPACING_CALIBRATED","getActiveToolForTouchEvent","touchEvent","numTouchPoints","getToolsWithModesForTouchEvent","touchStart","touchStartActivate","touchDrag","touchEnd","touchTap","touchPress","addEnabledElement","svgLayer","svgLayerId","pointerEvents","defs","feOffset","feColorMatrix","feBlend","_createSvgAnnotationLayer","newNode","viewportUid","renderingEngineUid","dataset","elementHash","_setSvgNodeCache","mouseEventListeners","wheelEventListener","touchEventListeners","imageRenderedEventDispatcher","cameraModifiedEventDispatcher","imageSpacingCalibratedEventDispatcher","mouseToolEventDispatcher","keyboardToolEventDispatcher","touchToolEventDispatcher","synchronizersFilteredByIds","synchronizer","notDisabled","isDisabled","hasSourceViewport","hasTargetViewport","toolGroupFilteredByIds","tg","_removeViewportFromSynchronizers","getSynchronizersForViewport","sync","remove","_removeViewportFromToolGroup","removeViewports","_removeEnabledElement","foundElementIndex","el","elementDisabledEvt","_resetSvgNodeCache","internalViewportNode","_removeSvgNode","cancelActiveManipulations","toolsWithData","_getViewportIndex","ar","_containsViewport","synchronizerId","eventHandler","_viewportOptions","_onEvent","_ignoreFiredEvents","_targetViewports","_sourceViewports","s","fireEvent","_enabled","_eventName","_eventHandler","_options","_hasSourceElements","setOptions","getOptions","addTarget","addSource","_updateDisableHandlers","getSourceViewports","getTargetViewports","destroy","removeSource","removeTarget","_getViewportElement","sourceEvent","ex","vp1","vp2","unique","vps","u","_getUniqueViewports","_remove","disableHandler","elementDisabledEvent","vUid","ELEMENT_DISABLED","Synchronizer","synchronizerIndex","ToolGroup","toolInstanceName","toolDefinition","hasToolName","localToolInstance","instantiatedTool","addToolInstance","parentClassName","ToolClassToUse","ParentClass","ToolInstance","addViewport","renderingEngines","renderingEngineUIDToUse","vpId","getActivePrimaryMouseButtonTool","vpInfo","setToolMode","setToolDisabled","setToolEnabled","setToolPassive","setToolActive","toolBindingsOptions","TouchBinding","MouseBinding","obj","binding1","binding2","hasSameBinding","useCursor","_hasMousePrimaryButtonBinding","_setCursorForViewports","_renderViewports","TOOL_ACTIVATED","prevToolOptions","getToolOptions","toolOptionsForTool","_getCursor","setToolConfiguration","_configuration","Primary","getToolConfiguration","configurationPath","toolGroupIndex","removeSegmentationsFromToolGroup","csToolsState","destroyToolGroup","MODES","defaultManager","setAnnotationManager","resetAnnotationManager","manager","HTMLDivElement","ANNOTATION_ADDED","triggerAnnotationAddedForElement","getToolGroupsWithToolName","viewportsToRender","triggerAnnotationAddedForFOR","ANNOTATION_REMOVED","annotationManagerUID","csToolsInitialized","init","_removeCornerstoneEventListeners","elementEnabledEvent","ELEMENT_ENABLED","removeEnabledElement","_addCornerstoneEventListeners","_removeCornerstoneToolsEventListeners","TOOLS_EVENTS","annotationModifiedListener","annotationSelectionListener","segmentationModifiedListener","segmentationDataModifiedEventListener","segmentationRepresentationModifiedEventListener","segmentationRepresentationRemovedEventListener","cameraSyncCallback","synchronizerInstance","cameraModifiedEvent","tViewport","createCameraPositionSynchronizer","synchronizerName","createSynchronizer","voiSyncCallback","voiModifiedEvent","invertStateChanged","tProperties","syncInvertState","createVOISynchronizer","VOI_MODIFIED","zoomPanSyncCallback","sViewport","syncZoom","srcZoom","getZoom","setZoom","syncPan","srcPan","getPan","setPan","createZoomPanSynchronizer","stackImageSyncCallback","frameOfReferenceUID1","frameOfReferenceUID2","imageId1","sourceImagePositionPatient","targetImageIds","viewport1","viewport2","viewPlaneNormal1","viewPlaneNormal2","dotProducts","areViewportsCoplanar","closestImageIdIndex","_getClosestImageIdIndex","jumpToSlice","registrationMatrixMat4","closestImageIdIndex2","createStackImageSynchronizer"],"sourceRoot":""}
{"version":3,"file":"822.bundle.bccac01f9e3591e98e6e.js","mappings":"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","sources":["webpack:///../../../extensions/measurement-tracking/src/viewports/TrackedCornerstoneViewport.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport OHIF, { utils } from '@ohif/core';\n\nimport { ViewportActionBar, Tooltip, Icon } from '@ohif/ui';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { annotation } from '@cornerstonejs/tools';\nimport { useTrackedMeasurements } from './../getContextModule';\nimport { BaseVolumeViewport, Enums } from '@cornerstonejs/core';\n\nconst { formatDate } = utils;\n\nfunction TrackedCornerstoneViewport(props) {\n  const {\n    displaySets,\n    viewportIndex,\n    viewportLabel,\n    servicesManager,\n    extensionManager,\n    viewportOptions,\n  } = props;\n\n  const { t } = useTranslation('Common');\n\n  const {\n    measurementService,\n    cornerstoneViewportService,\n    viewportGridService,\n  } = servicesManager.services;\n\n  // Todo: handling more than one displaySet on the same viewport\n  const displaySet = displaySets[0];\n\n  const [\n    trackedMeasurements,\n    sendTrackedMeasurementsEvent,\n  ] = useTrackedMeasurements();\n\n  const [isTracked, setIsTracked] = useState(false);\n  const [trackedMeasurementUID, setTrackedMeasurementUID] = useState(null);\n  const [viewportElem, setViewportElem] = useState(null);\n\n  const { trackedSeries } = trackedMeasurements.context;\n  const viewportId = viewportOptions.viewportId;\n\n  const {\n    SeriesDate,\n    SeriesDescription,\n    SeriesInstanceUID,\n    SeriesNumber,\n  } = displaySet;\n\n  const {\n    PatientID,\n    PatientName,\n    PatientSex,\n    PatientAge,\n    SliceThickness,\n    SpacingBetweenSlices,\n    StudyDate,\n    ManufacturerModelName,\n  } = displaySet.images[0];\n\n  const updateIsTracked = useCallback(() => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewportByIndex(\n      viewportIndex\n    );\n\n    if (viewport instanceof BaseVolumeViewport) {\n      // A current image id will only exist for volume viewports that can have measurements tracked.\n      // Typically these are those volume viewports for the series of acquisition.\n      const currentImageId = viewport?.getCurrentImageId();\n\n      if (!currentImageId) {\n        if (isTracked) {\n          setIsTracked(false);\n        }\n        return;\n      }\n    }\n\n    if (trackedSeries.includes(SeriesInstanceUID) !== isTracked) {\n      setIsTracked(!isTracked);\n    }\n  }, [isTracked, trackedMeasurements, viewportIndex, SeriesInstanceUID]);\n\n  const onElementEnabled = useCallback(\n    evt => {\n      if (evt.detail.element !== viewportElem) {\n        // The VOLUME_VIEWPORT_NEW_VOLUME event allows updateIsTracked to reliably fetch the image id for a volume viewport.\n        evt.detail.element?.addEventListener(\n          Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n          updateIsTracked\n        );\n        setViewportElem(evt.detail.element);\n      }\n    },\n    [updateIsTracked, viewportElem]\n  );\n\n  const onElementDisabled = useCallback(() => {\n    viewportElem?.removeEventListener(\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n      updateIsTracked\n    );\n  }, [updateIsTracked, viewportElem]);\n\n  useEffect(updateIsTracked, [updateIsTracked]);\n\n  useEffect(() => {\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\n      props => {\n        if (props.viewportIndex !== viewportIndex) {\n          return;\n        }\n\n        updateIsTracked();\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [updateIsTracked, viewportIndex]);\n\n  useEffect(() => {\n    if (isTracked) {\n      annotation.config.style.setViewportToolStyles(viewportId, {\n        global: {\n          lineDash: '',\n        },\n      });\n\n      cornerstoneViewportService\n        .getRenderingEngine()\n        .renderViewport(viewportId);\n\n      return;\n    }\n\n    annotation.config.style.setViewportToolStyles(viewportId, {\n      global: {\n        lineDash: '4,4',\n      },\n    });\n\n    cornerstoneViewportService.getRenderingEngine().renderViewport(viewportId);\n\n    return () => {\n      annotation.config.style.setViewportToolStyles(viewportId, {});\n    };\n  }, [isTracked]);\n\n  /**\n   * The effect for listening to measurement service measurement added events\n   * and in turn firing an event to update the measurement tracking state machine.\n   * The TrackedCornerstoneViewport is the best place for this because when\n   * a measurement is added, at least one TrackedCornerstoneViewport will be in\n   * the DOM and thus can react to the events fired.\n   */\n  useEffect(() => {\n    const added = measurementService.EVENTS.MEASUREMENT_ADDED;\n    const addedRaw = measurementService.EVENTS.RAW_MEASUREMENT_ADDED;\n    const subscriptions = [];\n\n    [added, addedRaw].forEach(evt => {\n      subscriptions.push(\n        measurementService.subscribe(evt, ({ source, measurement }) => {\n          const { activeViewportIndex } = viewportGridService.getState();\n\n          // Each TrackedCornerstoneViewport receives the MeasurementService's events.\n          // Only send the tracked measurements event for the active viewport to avoid\n          // sending it more than once.\n          if (viewportIndex === activeViewportIndex) {\n            const {\n              referenceStudyUID: StudyInstanceUID,\n              referenceSeriesUID: SeriesInstanceUID,\n            } = measurement;\n\n            sendTrackedMeasurementsEvent('SET_DIRTY', { SeriesInstanceUID });\n            sendTrackedMeasurementsEvent('TRACK_SERIES', {\n              viewportIndex,\n              StudyInstanceUID,\n              SeriesInstanceUID,\n            });\n          }\n        }).unsubscribe\n      );\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, [\n    measurementService,\n    sendTrackedMeasurementsEvent,\n    viewportIndex,\n    viewportGridService,\n  ]);\n\n  function switchMeasurement(direction) {\n    const newTrackedMeasurementUID = _getNextMeasurementUID(\n      direction,\n      servicesManager,\n      trackedMeasurementUID,\n      trackedMeasurements\n    );\n\n    if (!newTrackedMeasurementUID) {\n      return;\n    }\n\n    setTrackedMeasurementUID(newTrackedMeasurementUID);\n\n    measurementService.jumpToMeasurement(\n      viewportIndex,\n      newTrackedMeasurementUID\n    );\n  }\n\n  const getCornerstoneViewport = () => {\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    return (\n      <Component\n        {...props}\n        onElementEnabled={onElementEnabled}\n        onElementDisabled={onElementDisabled}\n      />\n    );\n  };\n\n  return (\n    <>\n      <ViewportActionBar\n        onDoubleClick={evt => {\n          evt.stopPropagation();\n          evt.preventDefault();\n        }}\n        useAltStyling={isTracked}\n        onArrowsClick={direction => switchMeasurement(direction)}\n        getStatusComponent={() => _getStatusComponent(isTracked)}\n        studyData={{\n          label: viewportLabel,\n          studyDate:\n            formatDate(SeriesDate) || formatDate(StudyDate) || t('NoStudyDate'),\n          currentSeries: SeriesNumber, // TODO - switch entire currentSeries to be UID based or actual position based\n          seriesDescription: SeriesDescription,\n          patientInformation: {\n            patientName: PatientName ? OHIF.utils.formatPN(PatientName) : '',\n            patientSex: PatientSex || '',\n            patientAge: PatientAge || '',\n            MRN: PatientID || '',\n            thickness: SliceThickness\n              ? `${parseFloat(SliceThickness).toFixed(2)}mm`\n              : '',\n            spacing:\n              SpacingBetweenSlices !== undefined\n                ? `${parseFloat(SpacingBetweenSlices).toFixed(2)}mm`\n                : '',\n            scanner: ManufacturerModelName || '',\n          },\n        }}\n      />\n      {/* TODO: Viewport interface to accept stack or layers of content like this? */}\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\n        {getCornerstoneViewport()}\n      </div>\n    </>\n  );\n}\n\nTrackedCornerstoneViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  viewportIndex: PropTypes.number.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  customProps: PropTypes.object,\n};\n\nTrackedCornerstoneViewport.defaultProps = {\n  customProps: {},\n};\n\nfunction _getNextMeasurementUID(\n  direction,\n  servicesManager,\n  trackedMeasurementId,\n  trackedMeasurements\n) {\n  const { measurementService, viewportGridService } = servicesManager.services;\n  const measurements = measurementService.getMeasurements();\n\n  const { activeViewportIndex, viewports } = viewportGridService.getState();\n  const {\n    displaySetInstanceUIDs: activeViewportDisplaySetInstanceUIDs,\n  } = viewports[activeViewportIndex];\n\n  const { trackedSeries } = trackedMeasurements.context;\n\n  // Get the potentially trackable measurements for the series of the\n  // active viewport.\n  // The measurements to jump between are the same\n  // regardless if this series is tracked or not.\n\n  const filteredMeasurements = measurements.filter(\n    m =>\n      trackedSeries.includes(m.referenceSeriesUID) &&\n      activeViewportDisplaySetInstanceUIDs.includes(m.displaySetInstanceUID)\n  );\n\n  if (!filteredMeasurements.length) {\n    // No measurements on this series.\n    return;\n  }\n\n  const measurementCount = filteredMeasurements.length;\n\n  const uids = filteredMeasurements.map(fm => fm.uid);\n  let measurementIndex = uids.findIndex(uid => uid === trackedMeasurementId);\n\n  if (measurementIndex === -1) {\n    // Not tracking a measurement, or previous measurement now deleted, revert to 0.\n    measurementIndex = 0;\n  } else {\n    if (direction === 'left') {\n      measurementIndex--;\n\n      if (measurementIndex < 0) {\n        measurementIndex = measurementCount - 1;\n      }\n    } else if (direction === 'right') {\n      measurementIndex++;\n\n      if (measurementIndex === measurementCount) {\n        measurementIndex = 0;\n      }\n    }\n  }\n\n  const newTrackedMeasurementId = uids[measurementIndex];\n\n  return newTrackedMeasurementId;\n}\n\nfunction _getStatusComponent(isTracked) {\n  const trackedIcon = isTracked ? 'status-tracked' : 'status-untracked';\n\n  return (\n    <div className=\"relative\">\n      <Tooltip\n        position=\"bottom-left\"\n        content={\n          <div className=\"flex py-2\">\n            <div className=\"flex pt-1\">\n              <Icon name=\"info-link\" className=\"w-4 text-primary-main\" />\n            </div>\n            <div className=\"flex ml-4\">\n              <span className=\"text-base text-common-light\">\n                {isTracked ? (\n                  <>\n                    Series is\n                    <span className=\"font-bold text-white\"> tracked</span> and\n                    can be viewed <br /> in the measurement panel\n                  </>\n                ) : (\n                  <>\n                    Measurements for\n                    <span className=\"font-bold text-white\"> untracked </span>\n                    series <br /> will not be shown in the <br /> measurements\n                    panel\n                  </>\n                )}\n              </span>\n            </div>\n          </div>\n        }\n      >\n        <Icon name={trackedIcon} className=\"text-primary-light\" />\n      </Tooltip>\n    </div>\n  );\n}\n\nexport default TrackedCornerstoneViewport;\n"],"names":["formatDate","utils","TrackedCornerstoneViewport","props","displaySets","viewportIndex","viewportLabel","servicesManager","extensionManager","viewportOptions","t","useTranslation","measurementService","cornerstoneViewportService","viewportGridService","services","displaySet","trackedMeasurements","sendTrackedMeasurementsEvent","useTrackedMeasurements","isTracked","setIsTracked","useState","trackedMeasurementUID","setTrackedMeasurementUID","viewportElem","setViewportElem","trackedSeries","context","viewportId","SeriesDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","SpacingBetweenSlices","StudyDate","ManufacturerModelName","images","updateIsTracked","useCallback","viewport","getCornerstoneViewportByIndex","BaseVolumeViewport","currentImageId","getCurrentImageId","includes","onElementEnabled","evt","detail","element","addEventListener","Enums","VOLUME_VIEWPORT_NEW_VOLUME","onElementDisabled","removeEventListener","useEffect","unsubscribe","subscribe","EVENTS","VIEWPORT_DATA_CHANGED","annotation","setViewportToolStyles","global","lineDash","getRenderingEngine","renderViewport","added","MEASUREMENT_ADDED","addedRaw","RAW_MEASUREMENT_ADDED","subscriptions","forEach","push","_ref","source","measurement","activeViewportIndex","getState","referenceStudyUID","StudyInstanceUID","referenceSeriesUID","unsub","React","ViewportActionBar","onDoubleClick","stopPropagation","preventDefault","useAltStyling","onArrowsClick","direction","newTrackedMeasurementUID","trackedMeasurementId","measurements","getMeasurements","viewports","displaySetInstanceUIDs","activeViewportDisplaySetInstanceUIDs","filteredMeasurements","filter","m","displaySetInstanceUID","length","measurementCount","uids","map","fm","uid","measurementIndex","findIndex","_getNextMeasurementUID","jumpToMeasurement","switchMeasurement","getStatusComponent","trackedIcon","className","Tooltip","position","content","Icon","name","_getStatusComponent","studyData","label","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","formatPN","patientSex","patientAge","MRN","thickness","parseFloat","toFixed","spacing","undefined","scanner","getCornerstoneViewport","component","Component","getModuleEntry","_extends","propTypes","PropTypes","isRequired","dataSource","children","customProps","defaultProps"],"sourceRoot":""}
{"version":3,"file":"925.bundle.bdaf19d4c75610a683c0.js","mappings":"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,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAA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","sources":["webpack:///../../../node_modules/@cornerstonejs/tools/src/enums/ToolBindings.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/enums/ToolModes.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/enums/AnnotationStyleStates.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/enums/Events.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/enums/SegmentationRepresentations.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/enums/Touch.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/annotationLocking.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/annotationSelection.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/annotationVisibility.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/svgNodeCache.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/state.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/addTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/mouse/getMouseEventPoints.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/mouse/mouseDoubleClickListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/mouse/mouseMoveListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/mouse/mouseDownListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/mouse/index.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/touch/preventGhostClick.js","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/touch/getTouchEventPoints.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/touch/index.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/touch/touchStartListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/touch/index.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/wheel/normalizeWheel.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/wheel/wheelListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/wheel/index.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/keyboard/keyDownListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/keyboard/index.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/constants/COLOR_LUT.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/Contour/contourConfig.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/Labelmap/labelmapConfig.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/SegmentationStateManager.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/triggerSegmentationEvents.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/helpers/normalizeSegmentationInput.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/segmentationState.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/config/segmentationConfig.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/Labelmap/addLabelmapToElement.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/Labelmap/removeLabelmapFromElement.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/Labelmap/labelmapDisplay.ts","webpack:///../../../node_modules/@kitware/vtk.js/Filters/General/AppendPolyData.js","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/Contour/utils.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/Contour/contourConfigCache.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/Contour/addContourSetsToElement.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/Contour/updateContourSets.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/Contour/removeContourFromElement.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/Contour/contourDisplay.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/Contour/addOrUpdateContourSets.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/removeSegmentationsFromToolGroup.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/Labelmap/validateRepresentationData.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/helpers/validateSegmentationInput.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/addSegmentations.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/addSegmentationRepresentations.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/activeSegmentation.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/segmentLocking.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/config/segmentationColor.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/config/segmentationVisibility.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/segmentIndex.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/base/BaseTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/getSvgDrawingHelper.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/draw.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/_getHash.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/_setAttributesIfNecessary.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/_setNewAttributesIfValid.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawCircle.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawEllipse.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawHandles.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawLine.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawPolyline.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawTextBox.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/vec2/findClosestPoint.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawLink.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawLinkedTextBox.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawRect.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawArrow.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/getToolsWithModesForElement.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/triggerAnnotationRender.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/planar/filterAnnotationsWithinSlice.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/planar/filterAnnotationsForDisplay.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/config/ToolStyle.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/config/helpers.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/config/getState.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/config/getFont.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/base/AnnotationDisplayTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/base/AnnotationTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/SegmentationDisplayTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/segmentation/triggerSegmentationRender.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/segmentation/segmentationRepresentationModifiedEventListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/segmentation/segmentationDataModifiedEventListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/segmentation/segmentationRepresentationRemovedEventListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/segmentation/segmentationModifiedEventListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/getAnnotationNearPoint.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/isObject.js","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/debounce.js","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/throttle.js","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/clip.js","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/calibrateImageSpacing.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/triggerAnnotationRenderForViewportIds.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/scroll.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/viewport/jumpToSlice.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/pointInShapeCallback.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/boundingBox/extend2DBoundingBoxInViewAxis.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/boundingBox/getBoundingBoxAroundShape.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/pointInSurroundingSphereCallback.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/sphere/pointInSphere.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/roundNumber.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/strategies/fillSphere.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/strategies/eraseSphere.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/ellipse/pointInEllipse.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/ellipse/getCanvasEllipseCorners.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/strategies/fillCircle.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/strategies/eraseCircle.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/cursors/MouseCursor.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/cursors/ImageMouseCursor.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/cursors/SVGCursorDescriptor.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/cursors/SVGMouseCursor.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/cursors/setCursorForElement.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/cursors/index.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/cursors/elementCursor.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/BrushTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/segmentation/utilities.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/segmentation/thresholdVolumeByRange.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/PanTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/TrackballRotateTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/WindowLevelTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/StackScrollTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/angle/angleBetweenLines.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/PlanarRotateTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/StackScrollToolMouseWheelTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/ZoomTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/VolumeRotateMouseWheelTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/planar/getWorldWidthAndHeightFromCorners.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/planar/getPointInLineOfSightWithCriteria.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/planar/index.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/viewport/jumpToWorld.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/MIPJumpToClickTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/viewportFilters/filterViewportsWithFrameOfReferenceUID.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/viewportFilters/filterViewportsWithToolEnabled.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/viewportFilters/filterViewportsWithParallelNormals.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/viewportFilters/getViewportIdsWithToolToRender.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/vec2/liangBarksyClip.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/line/distanceToPointSquared.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/line/distanceToPoint.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/line/intersectLine.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/CrosshairsTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/MagnifyTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/ReferenceLinesTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/getCalibratedUnits.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/drawing/getTextBoxCoordsCanvas.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/BidirectionalTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/LengthTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/getModalityUnit.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/viewport/isViewportPreScaled.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/ProbeTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/DragProbeTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/rectangle/distanceToPoint.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/RectangleROITool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/planar/getWorldWidthAndHeightFromTwoPoints.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/EllipticalROITool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/point/distanceToPoint.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/circle/getCanvasCircleRadius.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/circle/getCanvasCircleCorners.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/CircleROITool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/polyline/getIntersectionWithPolyline.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/polyline/getSubPixelSpacingAndXYDirections.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/polyline/pointsAreWithinCloseContourProximity.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/polyline/addCanvasPointsToArray.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/polyline/pointCanProjectOnLine.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/polyline/calculateAreaOfPoints.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/planarFreehandROITool/interpolation/algorithms/bspline.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/planarFreehandROITool/interpolatePoints.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/planarFreehandROITool/findOpenUShapedContourVectorToPeak.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/planarFreehandROITool/drawLoop.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/planarFreehandROITool/editLoopCommon.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/planarFreehandROITool/closedContourEditLoop.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/planarFreehandROITool/openContourEditLoop.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/planarFreehandROITool/openContourEndEditLoop.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/planarFreehandROITool/renderMethods.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/PlanarFreehandROITool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/ArrowAnnotateTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/AngleTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/midPoint.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/CobbAngleTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/ReferenceCursors.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/ScaleOverlayTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/strategies/fillRectangle.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/strategies/eraseRectangle.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/RectangleScissorsTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/CircleScissorsTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/SphereScissorsTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/RectangleROIThresholdTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/RectangleROIStartEndThresholdTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/segmentation/floodFill.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/PaintFillTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/rectangleROITool/getBoundsIJKFromRectangleAnnotations.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/segmentation/rectangleROIThresholdVolumeByRange.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/segmentation/createMergedLabelmapForIndex.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/segmentation/isValidRepresentationConfig.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/segmentation/getDefaultRepresentationConfig.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/segmentation/createLabelmapVolumeForViewport.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/segmentation/brushSizeForToolGroup.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/segmentation/brushThresholdForToolGroup.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/segmentation/thresholdSegmentationByRange.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/orientation/getOrientationStringLPS.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/orientation/invertOrientationStringLPS.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/cine/events.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/cine/state.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/cine/playClip.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/planarFreehandROITool/interpolateAnnotation.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/planarFreehandROITool/index.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/stackPrefetch/state.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/stackPrefetch/stackPrefetch.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/dynamicVolume/getDataInTime.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/dynamicVolume/generateImageFromTimeData.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/annotations/annotationSelectionListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/annotations/annotationModifiedListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/imageRenderedEventDispatcher.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/shared/customCallbackHandler.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/mouseEventHandlers/mouseClick.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/mouseEventHandlers/mouseDoubleClick.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/filterToolsWithMoveableHandles.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/filterToolsWithAnnotationsForElement.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/filterMoveableAnnotationTools.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/shared/getMouseModifier.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/shared/getActiveToolForMouseEvent.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/shared/getToolsWithModesForMouseEvent.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/mouseEventHandlers/mouseDown.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/mouseEventHandlers/mouseDownActivate.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/mouseEventHandlers/mouseDrag.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/mouseEventHandlers/mouseMove.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/mouseEventHandlers/mouseUp.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/mouseEventHandlers/mouseWheel.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/mouseToolEventDispatcher.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/shared/getActiveToolForKeyboardEvent.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/keyboardEventHandlers/keyDown.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/keyboardEventHandlers/keyUp.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/keyboardToolEventDispatcher.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/cameraModifiedEventDispatcher.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/imageSpacingCalibratedEventDispatcher.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/shared/getActiveToolForTouchEvent.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/shared/getToolsWithModesForTouchEvent.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/touchEventHandlers/touchStart.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/touchEventHandlers/touchStartActivate.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/touchEventHandlers/touchDrag.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/touchEventHandlers/touchEnd.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/touchEventHandlers/touchTap.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/touchEventHandlers/touchPress.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/touchToolEventDispatcher.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/addEnabledElement.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/SynchronizerManager/getSynchronizersForViewport.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/ToolGroupManager/getToolGroupForViewport.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/removeEnabledElement.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/cancelActiveManipulations.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/SynchronizerManager/Synchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/SynchronizerManager/createSynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/SynchronizerManager/destroy.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/SynchronizerManager/getSynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/SynchronizerManager/getAllSynchronizers.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/SynchronizerManager/destroySynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/ToolGroupManager/ToolGroup.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/ToolGroupManager/createToolGroup.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/ToolGroupManager/destroyToolGroup.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/ToolGroupManager/destroy.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/ToolGroupManager/getToolGroup.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/ToolGroupManager/getAllToolGroups.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/ToolGroupManager/getToolGroupsWithToolName.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/annotationState.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/helpers/state.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/init.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/callbacks/cameraSyncCallback.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/synchronizers/createCameraPositionSynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/callbacks/voiSyncCallback.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/synchronizers/createVOISynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/callbacks/zoomPanSyncCallback.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/synchronizers/createZoomPanSynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/callbacks/stackImageSyncCallback.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/callbacks/areViewportsCoplanar .ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/synchronizers/createStackImageSynchronizer.ts","webpack:///../../../node_modules/lodash.get/index.js"],"sourcesContent":["/**\n * Mouse This enum enumerates the different buttons returned by `.buttons` on the mouse event.\n * These values are used when setting a tool active in a tool group.\n *\n * See also: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n */\nenum MouseBindings {\n  /** usually the left button */\n  Primary = 1,\n  /** usually the right button */\n  Secondary = 2,\n  Primary_And_Secondary = 3,\n  /** usually mouse wheel button */\n  Auxiliary = 4,\n  Primary_And_Auxiliary = 5,\n  Secondary_And_Auxiliary = 6,\n  Primary_And_Secondary_And_Auxiliary = 7,\n  /** usually \"Browser Back\" button */\n  Fourth_Button = 8,\n  /** usually \"Browser Forward\" button */\n  Fifth_Button = 16,\n}\n\nenum KeyboardBindings {\n  Shift = 16,\n  Ctrl = 17,\n  Alt = 18,\n  Meta = 91,\n  ShiftCtrl = 1617,\n  ShiftAlt = 1618,\n  ShiftMeta = 1691,\n  CtrlAlt = 1718,\n  CtrlMeta = 1791,\n  AltMeta = 1891,\n}\n\nexport { MouseBindings, KeyboardBindings };\n","/**\n * ToolModes - This enum defines the 4 tool states which are available.\n */\nenum ToolModes {\n  /**\n   * Active:\n   * - Can be actively used by mouse/touch events mapped to its `ToolBinding`s.\n   * - Can add data if an annotation tool.\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   */\n  Active = 'Active',\n  /**\n   * Passive:\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   */\n  Passive = 'Passive',\n  /**\n   * Enabled:\n   * - Renders data if the tool has a `renderAnnotation` method.\n   */\n  Enabled = 'Enabled',\n  /**\n   * Disabled:\n   * - Annotation does not render.\n   */\n  Disabled = 'Disabled',\n}\n\nexport default ToolModes;\n","/**\n * AnnotationStyleStates - This enum defines the 4 possible states available for\n *  a Annotation instance.\n *\n * Default:\n *   The default state for the annotation instance\n * Highlighted:\n *   The annotation should be rendered in \"highlighted\" mode in response to\n *   direct user interaction;\n * Selected:\n *   The annotation has been selected by the user;\n * Locked:\n *   The annotation has been locked;\n */\nenum AnnotationStyleStates {\n  Default = '',\n  Highlighted = 'Highlighted',\n  Selected = 'Selected',\n  Locked = 'Locked',\n}\n\nexport default AnnotationStyleStates;\n","/**\n *  The events for cornerstoneTools3D Tools. Native Mouse and Keyboard events are\n *  captured, normalized, and re-triggered with a `CORNERSTONE_TOOLS` prefix. This\n *  allows us to handle events consistently across different browsers.\n *\n */\nenum Events {\n  ///////////////////////////////////////\n  //            Annotations\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a new annotation is added to the state.\n   *\n   * Make use of {@link EventTypes.AnnotationAddedEventType | Annotation Added Event Type  }\n   * for typing your event listeners for this annotation added event, and see what event\n   * detail is included in {@link EventTypes.AnnotationAddedEventDetail | Annotation Added Event Detail}.\n   */\n  ANNOTATION_ADDED = 'CORNERSTONE_TOOLS_ANNOTATION_ADDED',\n\n  /**\n   * Triggers on the eventTarget when a new annotation is completed its drawing\n   * Make use of {@link EventTypes.AnnotationCompletedEventType | Annotation Completed Event Type }\n   * for typing your event listeners for this annotation completed event, and see what event\n   * detail is included in {@link EventTypes.AnnotationCompletedEventDetail | Annotation Completed Event Detail}.\n   */\n  ANNOTATION_COMPLETED = 'CORNERSTONE_TOOLS_ANNOTATION_COMPLETED',\n\n  /**\n   * Triggers on the eventTarget when an annotation is modified (e.g. a handle is modified).\n   * Make use of {@link EventTypes.AnnotationModifiedEventType | Annotation Modified Event Type}\n   * for typing your event listeners for this annotation modified event, and see what\n   * event detail is included in {@link EventTypes.AnnotationModifiedEventDetail | Annotation Modified Event Detail}.\n   */\n  ANNOTATION_MODIFIED = 'CORNERSTONE_TOOLS_ANNOTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when an annotation is removed from the annotations manager.\n   * Make use of {@link EventTypes.AnnotationRemovedEventType | Annotation Removed Event Type}\n   * for typing your event listeners for this annotation removed event, and see what\n   * event detail is included in {@link EventTypes.AnnotationRemovedEventDetail | Annotation Removed Event Detail}.\n   */\n  ANNOTATION_REMOVED = 'CORNERSTONE_TOOLS_ANNOTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when an annotation selection status is changed.\n   * Make use of {@link EventTypes.AnnotationSelectionChangeEventType | Annotation Selection Change Event Type}\n   * for typing your event listeners for this annotation selection change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationSelectionChangeEventDetail | Annotation Selection Change Event Detail}.\n   */\n  ANNOTATION_SELECTION_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation locked status is changed.\n   * Make use of {@link EventTypes.AnnotationLockChangeEventType | Annotation Lock Change Event Type}\n   * for typing your event listeners for this annotation lock change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationLockChangeEventDetail | Annotation Lock Change Event Detail}.\n   */\n  ANNOTATION_LOCK_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation visible status is changed.\n   * Make use of {@link EventTypes.AnnotationVisibilityChangeEventType | Annotation Visible Change Event Type}\n   * for typing your event listeners for this annotation Hide change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationVisibilityChangeEventDetail | Annotation Visible Change Event Detail}.\n   */\n  ANNOTATION_VISIBILITY_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation is rendered.\n   * Make use of {@link EventTypes.AnnotationRenderedEventType | Annotation Rendered Event Type}\n   * for typing your event listeners for this annotation rendered event, and see what\n   * event detail is included in {@link EventTypes.AnnotationRenderedEventDetail | Annotation Rendered Event Detail}.\n   */\n  ANNOTATION_RENDERED = 'CORNERSTONE_TOOLS_ANNOTATION_RENDERED',\n\n  ///////////////////////////////////////\n  //        Segmentations Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is updated in the state manager.\n   * Make use of {@link EventTypes.SegmentationModifiedEventType | Segmentation Modified Event Type}\n   * for typing your event listeners for this segmentation modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationModifiedEventDetail | Segmentation Modified Event Detail}.\n   */\n  SEGMENTATION_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is rendered by the Segmentation Rendering Engine.\n   * Make use of {@link EventTypes.SegmentationRenderedEventType | Segmentation Rendered Event Type}\n   * for typing your event listeners for this segmentation rendered event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRenderedEventDetail | Segmentation Rendered Event Detail}.\n   */\n  SEGMENTATION_RENDERED = 'CORNERSTONE_TOOLS_SEGMENTATION_RENDERED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation representation of a toolGroup is modified in the state manager.\n   * Make use of {@link EventTypes.SegmentationRepresentationModifiedEventType | Segmentation Representation Modified Event Type}\n   * for typing your event listeners for this segmentation representation modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRepresentationModifiedEventDetail | Segmentation Representation Modified Event Detail}.\n   */\n  SEGMENTATION_REPRESENTATION_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is removed from the state manager.\n   * Make use of {@link EventTypes.SegmentationRemovedEventType | Segmentation Removed Event Type}\n   * for typing your event listeners for this segmentation removed event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRemovedEventDetail | Segmentation Removed Event Detail}.\n   */\n  SEGMENTATION_REMOVED = 'CORNERSTONE_TOOLS_SEGMENTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation representation of a toolGroup is removed in the state manager.\n   * Make use of {@link EventTypes.SegmentationRepresentationRemovedEventType | Segmentation Representation Removed Event Type}\n   * for typing your event listeners for this segmentation representation removed event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRepresentationRemovedEventDetail | Segmentation Representation Removed Event Detail}.\n   */\n  SEGMENTATION_REPRESENTATION_REMOVED = 'CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation data is modified (e.g., by brush tool).\n   * Make use of {@link EventTypes.SegmentationDataModifiedEventType | Segmentation Data Modified Event Type}\n   * for typing your event listeners for this segmentation data modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationDataModifiedEventDetail | Segmentation Data Modified Event Detail}.\n   */\n  SEGMENTATION_DATA_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED',\n\n  ///////////////////////////////////////\n  //         Keyboard Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a key on the keyboard is pressed.\n   * Make use of {@link EventTypes.KeyDownEventType | Key Down Event Type}\n   * for typing your event listeners for this key down event, and see what\n   * event detail is included in {@link EventTypes.KeyDownEventDetail | Key Down Event Detail}.\n   */\n  KEY_DOWN = 'CORNERSTONE_TOOLS_KEY_DOWN',\n\n  /**\n   * Triggers on the eventTarget when a key on the keyboard is released.\n   * Make use of {@link EventTypes.KeyUpEventType | Key Up Event Type}\n   * for typing your event listeners for this key up event, and see what\n   * event detail is included in {@link EventTypes.KeyUpEventDetail | Key Up Event Detail}.\n   */\n  KEY_UP = 'CORNERSTONE_TOOLS_KEY_UP',\n\n  ///////////////////////////////////////\n  //      Mouse Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when the mouse is pressed down, it is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseDownEventType | Mouse Down Event Type}\n   * for typing your event listeners for this mouse down event, and see what\n   * event detail is included in {@link EventTypes.MouseDownEventDetail | Mouse Down Event Detail}.\n   */\n  MOUSE_DOWN = 'CORNERSTONE_TOOLS_MOUSE_DOWN',\n\n  /**\n   * Triggers on the eventTarget when the mouse is released, it is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseUpEventType | Mouse Up Event Type}\n   * for typing your event listeners for this mouse up event, and see what\n   * event detail is included in {@link EventTypes.MouseUpEventDetail | Mouse Up Event Detail}.\n   */\n  MOUSE_UP = 'CORNERSTONE_TOOLS_MOUSE_UP',\n\n  /**\n   * Triggers on the eventTarget when a handled `MOUSE_DOWN` event does not `stopPropagation`. The hook\n   * we use to create new annotation for mouse events.\n   * Make use of {@link EventTypes.MouseDownActivateEventType | Mouse Down Activate Event Type}\n   * for typing your event listeners for this mouse down activate event, and see what\n   * event detail is included in {@link EventTypes.MouseDownActivateEventDetail | Mouse Down Activate Event Detail}.\n   */\n  MOUSE_DOWN_ACTIVATE = 'CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE',\n\n  /**\n   * Triggers on the event target when mouse is dragging an annotation or textBox.\n   * Make use of {@link EventTypes.MouseDragEventType | Mouse Drag Event Type}\n   * for typing your event listeners for this mouse drag event, and see what\n   * event detail is included in {@link EventTypes.MouseDragEventDetail | Mouse Drag Event Detail}.\n   */\n  MOUSE_DRAG = 'CORNERSTONE_TOOLS_MOUSE_DRAG',\n\n  /**\n   * Triggers on the eventTarget, when the mouse is moved, it is CornerstoneTools normalized event.\n   * It can be just a mouse move or when double click is performed and annotation\n   * drawing can be performed with just mouse move.\n   * Make use of {@link EventTypes.MouseMoveEventType | Mouse Move Event Type}\n   * for typing your event listeners for this mouse move event, and see what\n   * event detail is included in {@link EventTypes.MouseMoveEventDetail | Mouse Move Event Detail}.\n   */\n  MOUSE_MOVE = 'CORNERSTONE_TOOLS_MOUSE_MOVE',\n\n  /**\n   * Triggers on the eventTarget when a mouse click is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseClickEventType | Mouse Click Event Type}\n   * for typing your event listeners for this mouse click event, and see what\n   * event detail is included in {@link EventTypes.MouseClickEventDetail | Mouse Click Event Detail}.\n   */\n  MOUSE_CLICK = 'CORNERSTONE_TOOLS_MOUSE_CLICK',\n\n  /**\n   * Triggers on the eventTarget when a mouse double click is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseDoubleClickEventType | Mouse Double Click Event Type}\n   * for typing your event listeners for this mouse double click event, and see what\n   * event detail is included in {@link EventTypes.MouseDoubleClickEventDetail | Mouse Double Click Event Detail}.\n   */\n  MOUSE_DOUBLE_CLICK = 'CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK',\n\n  /**\n   * Triggers on the eventTarget when a mouse wheel event is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseWheelEventType | Mouse Wheel Event Type}\n   * for typing your event listeners for this mouse wheel event, and see what\n   * event detail is included in {@link EventTypes.MouseWheelEventDetail | Mouse Wheel Event Detail}.\n   */\n  MOUSE_WHEEL = 'CORNERSTONE_TOOLS_MOUSE_WHEEL',\n\n  // Todo: not being fired as of now\n  // ANNOTATION_COMPLETED = 'CORNERSTONE_TOOLS_ANNOTATION_COMPLETED',\n  // Todo: not implemented yet\n  // KEY_PRESS = 'CORNERSTONE_TOOLS_KEY_PRESS',\n\n  //////////////////////\n  //   Touch Events   //\n  //////////////////////\n  // The event flow looks like the following\n  // Touch Start -> (optional) Touch Press -> Touch Drag -> (optional) Touch Swipe -> Touch End\n  // Touch Tap\n  // mousedown\n  // mousedown, Touch Start, and Tap are mutually exclusive events\n  TOUCH_START = 'CORNERSTONE_TOOLS_TOUCH_START',\n  TOUCH_START_ACTIVATE = 'CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE',\n  TOUCH_PRESS = 'CORNERSTONE_TOOLS_TOUCH_PRESS',\n  TOUCH_DRAG = 'CORNERSTONE_TOOLS_TOUCH_DRAG',\n  TOUCH_END = 'CORNERSTONE_TOOLS_TOUCH_END',\n  TOUCH_TAP = 'CORNERSTONE_TOOLS_TAP',\n  TOUCH_SWIPE = 'CORNERSTONE_TOOLS_SWIPE',\n}\n\nexport default Events;\n","/**\n * Segmentations on viewports can be visualized in different ways. This enum\n * defines the different ways of visualizing segmentations. Currently, only\n * labelmap is supported.\n */\nenum SegmentationRepresentations {\n  Labelmap = 'LABELMAP',\n  Contour = 'CONTOUR',\n  // Todo: add more representations\n}\n\nexport default SegmentationRepresentations;\n","enum Swipe {\n  UP = 'UP',\n  DOWN = 'DOWN',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}\n\nexport { Swipe };\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { Annotation } from '../../types';\nimport { AnnotationLockChangeEventDetail } from '../../types/EventTypes';\n\n/*\n * Constants\n */\nconst globalLockedAnnotationsSet: Set<Annotation> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set the \"Locked\" state of a given annotation instance.\n *\n * @triggers ANNOTATION_LOCK_CHANGE\n *\n * @param annotation - The annotation instance which will have\n * its locked state changed. An event will only be triggered if the locked state\n * of the given annotation instance changed.\n * @param locked - A boolean value indicating if the instance should\n * be locked (true) or not (false)\n */\nfunction setAnnotationLocked(annotation: Annotation, locked = true): void {\n  const detail = makeEventDetail();\n  if (annotation) {\n    if (locked) {\n      lock(annotation, globalLockedAnnotationsSet, detail);\n    } else {\n      unlock(annotation, globalLockedAnnotationsSet, detail);\n    }\n  }\n  publish(detail, globalLockedAnnotationsSet);\n}\n\n/**\n * Clears all the locked annotation\n *\n */\nfunction unlockAllAnnotations(): void {\n  const detail = makeEventDetail();\n  clearLockedAnnotationsSet(globalLockedAnnotationsSet, detail);\n  publish(detail, globalLockedAnnotationsSet);\n}\n\n/**\n * Returns an array of all the annotation that is currently locked\n * @returns An array of tool specific annotation objects.\n *\n */\nfunction getAnnotationsLocked(): Array<Annotation> {\n  return Array.from(globalLockedAnnotationsSet);\n}\n\n/**\n * Given a Annotation object, return true if it is locked.\n * @param annotation - Annotation\n * @returns A boolean value.\n */\nfunction isAnnotationLocked(annotation: Annotation): boolean {\n  return globalLockedAnnotationsSet.has(annotation);\n}\n\n/**\n * Get the number of locked annotation objects in the global set of locked annotation\n * objects.\n * @returns The number of locked annotation objects.\n *\n */\nfunction getAnnotationsLockedCount(): number {\n  return globalLockedAnnotationsSet.size;\n}\n\n/**\n * Properly initialize the isLocked on annotation, and set it as locked if\n * isLocked is true.\n * @param annotation - The annotation object to be checked.\n */\nfunction checkAndDefineIsLockedProperty(annotation: Annotation): void {\n  if (annotation) {\n    const isLocked = !!annotation.isLocked;\n    if (shouldDefineIsLockedProperty(annotation)) {\n      Object.defineProperty(annotation, 'isLocked', {\n        configurable: false,\n        enumerable: true,\n        set: setIsLocked,\n        get: getIsLocked,\n      });\n    }\n    setAnnotationLocked(annotation, isLocked);\n  }\n}\n\n/*\n * Private Helpers\n */\n\nfunction makeEventDetail(): AnnotationLockChangeEventDetail {\n  return Object.freeze({\n    added: [],\n    removed: [],\n    locked: [],\n  });\n}\n\nfunction lock(\n  annotation: Annotation,\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  if (!lockedAnnotationsSet.has(annotation)) {\n    lockedAnnotationsSet.add(annotation);\n    detail.added.push(annotation);\n  }\n}\n\nfunction unlock(\n  annotation: Annotation,\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  if (lockedAnnotationsSet.delete(annotation)) {\n    detail.removed.push(annotation);\n  }\n}\n\nfunction clearLockedAnnotationsSet(\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  lockedAnnotationsSet.forEach((annotation) => {\n    unlock(annotation, lockedAnnotationsSet, detail);\n  });\n}\n\nfunction publish(\n  detail: AnnotationLockChangeEventDetail,\n  lockedAnnotationsSet: Set<Annotation>\n) {\n  if (detail.added.length > 0 || detail.removed.length > 0) {\n    lockedAnnotationsSet.forEach((item) => void detail.locked.push(item));\n    triggerEvent(eventTarget, Events.ANNOTATION_LOCK_CHANGE, detail);\n  }\n}\n\nfunction shouldDefineIsLockedProperty(annotation: Annotation): boolean {\n  const descriptor = Object.getOwnPropertyDescriptor(annotation, 'isLocked');\n  if (descriptor) {\n    return (\n      descriptor.configurable &&\n      (descriptor.set !== setIsLocked || descriptor.get !== getIsLocked)\n    );\n  }\n  return Object.isExtensible(annotation);\n}\n\nfunction setIsLocked(locked: boolean) {\n  setAnnotationLocked(this as Annotation, locked);\n}\n\nfunction getIsLocked() {\n  return isAnnotationLocked(this as Annotation);\n}\n\n/*\n * Exports\n */\n\nexport {\n  setAnnotationLocked,\n  getAnnotationsLocked,\n  getAnnotationsLockedCount,\n  unlockAllAnnotations,\n  isAnnotationLocked,\n  checkAndDefineIsLockedProperty,\n};\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { AnnotationSelectionChangeEventDetail } from '../../types/EventTypes';\nimport { getAnnotation } from './annotationState';\n\n/*\n * Constants\n */\n\nconst selectedAnnotationUIDs: Set<string> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set a given annotationUID as selected or deselected based on the provided\n * selected value.\n *\n * @param annotationUID - The annotation UID to be selected\n * @param selected - When true, the annotation is selected. When false, the annotation is deselected.\n * @param preserveSelected - When true, preserves existing\n *  selections (i.e., the given annotation is appended to the selection set).\n *  When false (the default behavior) the currently selected items are discarded\n *  (i.e., the given annotation instance replaces the currently selected ones).\n */\nfunction setAnnotationSelected(\n  annotationUID: string,\n  selected = true,\n  preserveSelected = false\n): void {\n  if (selected) {\n    selectAnnotation(annotationUID, preserveSelected);\n  } else {\n    deselectAnnotation(annotationUID);\n  }\n}\n\n/**\n * Set a given annotation as selected.\n *\n * @param annotationUID - The annotation UID to be selected\n * @param preserveSelected - When true, preserves existing\n *  selections (i.e., the given annotation is appended to the selection set).\n *  When false (the default behavior) the currently selected items are discarded\n *  (i.e., the given annotation instance replaces the currently selected ones).\n */\nfunction selectAnnotation(\n  annotationUID: string,\n  preserveSelected = false\n): void {\n  const detail = makeEventDetail();\n  if (!preserveSelected) {\n    clearSelectionSet(selectedAnnotationUIDs, detail);\n  }\n  if (annotationUID && !selectedAnnotationUIDs.has(annotationUID)) {\n    selectedAnnotationUIDs.add(annotationUID);\n    detail.added.push(annotationUID);\n  }\n  publish(detail, selectedAnnotationUIDs);\n}\n\n/**\n * Deselect one or all annotations.\n *\n * @param annotationUID - If an annotation is provided that instance will be removed from\n * the internal selection set. If none is given, ALL selections will be cleared.\n */\nfunction deselectAnnotation(annotationUID?: string): void {\n  const detail = makeEventDetail();\n  if (annotationUID) {\n    if (selectedAnnotationUIDs.delete(annotationUID)) {\n      detail.removed.push(annotationUID);\n    }\n  } else {\n    clearSelectionSet(selectedAnnotationUIDs, detail);\n  }\n  publish(detail, selectedAnnotationUIDs);\n}\n\n/**\n * Return an array of ALL the selected annotationUIDs\n * @returns An array of Annotation UIDs\n */\nfunction getAnnotationsSelected(): Array<string> {\n  return Array.from(selectedAnnotationUIDs);\n}\n\n/**\n * Given a tool name, return ALL the annotationUIDs for that tool that are selected\n * @param toolName - The name of the tool you want to get the selected annotation for\n * @returns An array of annotationUIDs\n */\nfunction getAnnotationsSelectedByToolName(toolName: string): Array<string> {\n  return getAnnotationsSelected().filter((annotationUID) => {\n    const annotation = getAnnotation(annotationUID);\n    return annotation.metadata.toolName === toolName;\n  });\n}\n\n/**\n * Given an annotationUID, return true if it is selected, false\n * otherwise.\n * @param annotationUID - Annotation UID\n * @returns A boolean value.\n */\nfunction isAnnotationSelected(annotationUID: string): boolean {\n  return selectedAnnotationUIDs.has(annotationUID);\n}\n\n/**\n * Return the number of the selected annotation\n * @returns The size of the selected annotation set\n */\nfunction getAnnotationsSelectedCount(): number {\n  return selectedAnnotationUIDs.size;\n}\n\n/*\n * Private Helpers\n */\n\nfunction makeEventDetail(): AnnotationSelectionChangeEventDetail {\n  return Object.freeze({\n    added: [],\n    removed: [],\n    selection: [],\n  });\n}\n\nfunction clearSelectionSet(\n  selectionSet: Set<string>,\n  detail: AnnotationSelectionChangeEventDetail\n): void {\n  selectionSet.forEach((value) => {\n    if (selectionSet.delete(value)) {\n      detail.removed.push(value);\n    }\n  });\n}\n\nfunction publish(\n  detail: AnnotationSelectionChangeEventDetail,\n  selectionSet: Set<string>\n) {\n  if (detail.added.length > 0 || detail.removed.length > 0) {\n    selectionSet.forEach((item) => void detail.selection.push(item));\n    triggerEvent(eventTarget, Events.ANNOTATION_SELECTION_CHANGE, detail);\n  }\n}\n\n/*\n * Exports\n */\n\nexport {\n  setAnnotationSelected,\n  getAnnotationsSelected,\n  getAnnotationsSelectedByToolName,\n  getAnnotationsSelectedCount,\n  deselectAnnotation,\n  isAnnotationSelected,\n};\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { getAnnotation } from './annotationState';\nimport { Events } from '../../enums';\nimport { Annotation } from '../../types';\nimport { AnnotationVisibilityChangeEventDetail } from '../../types/EventTypes';\nimport {\n  isAnnotationSelected,\n  deselectAnnotation,\n} from './annotationSelection';\n\n/*\n * It stores all hidden annotation uids.\n */\nconst globalHiddenAnnotationUIDsSet: Set<string> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set the \"visible\" state of a given annotation instance.\n *\n * @event ANNOTATION_VISIBILITY_CHANGE\n *\n * @param annotationUID - The annotation uid which will have\n * its visible state changed. An event will only be triggered if the visible state\n * of the given annotation instance changed.\n * @param visible - A boolean value indicating if the instance should\n * be visible (true) or not (false)\n */\nfunction setAnnotationVisibility(annotationUID: string, visible = true): void {\n  const detail = makeEventDetail();\n  if (annotationUID) {\n    if (visible) {\n      show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n    } else {\n      hide(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n    }\n  }\n  publish(detail);\n}\n\n/**\n * Clears all the hidden annotations.\n *\n */\nfunction showAllAnnotations(): void {\n  const detail = makeEventDetail();\n  globalHiddenAnnotationUIDsSet.forEach((annotationUID) => {\n    show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n  });\n  publish(detail);\n}\n\n/**\n * Given an annotation UID, return true if it is visible, false if hidden and undefined if does not exist.\n * @param annotationUID - The annotation uid to tell if is visible or not.\n * @returns A boolean value or value if does not exist.\n */\nfunction isAnnotationVisible(annotationUID: string): boolean | undefined {\n  const annotation = getAnnotation(annotationUID);\n\n  if (annotation) {\n    return !globalHiddenAnnotationUIDsSet.has(annotationUID);\n  }\n}\n/**\n * It decorates given annotation with isVisible property.\n * It properly initializes the isVisible on annotation(the property will be create if does not exist yet)\n *\n * @param annotation - The annotation object to be checked.\n */\nfunction checkAndDefineIsVisibleProperty(annotation: Annotation): void {\n  if (annotation) {\n    const isVisible = annotation.isVisible ?? true;\n    if (shouldDefineIsVisibleProperty(annotation)) {\n      Object.defineProperty(annotation, 'isVisible', {\n        configurable: false,\n        enumerable: true,\n        set: setIsVisible,\n        get: getIsVisible,\n      });\n    }\n    setAnnotationVisibility(annotation.annotationUID, isVisible);\n  }\n}\n\n/*\n * Private Helpers\n */\nfunction makeEventDetail(): AnnotationVisibilityChangeEventDetail {\n  return Object.freeze({\n    lastVisible: [],\n    lastHidden: [],\n    hidden: [],\n  });\n}\n\nfunction show(\n  annotationUID: string,\n  annotationUIDsSet: Set<string>,\n  detail: AnnotationVisibilityChangeEventDetail\n): void {\n  if (annotationUIDsSet.delete(annotationUID)) {\n    detail.lastVisible.push(annotationUID);\n  }\n}\n\nfunction hide(\n  annotationUID: string,\n  annotationUIDsSet: Set<string>,\n  detail: AnnotationVisibilityChangeEventDetail\n): void {\n  if (!annotationUIDsSet.has(annotationUID)) {\n    annotationUIDsSet.add(annotationUID);\n    if (isAnnotationSelected(annotationUID)) {\n      deselectAnnotation(annotationUID);\n    }\n    detail.lastHidden.push(annotationUID);\n  }\n}\n\nfunction publish(detail: AnnotationVisibilityChangeEventDetail) {\n  if (detail.lastHidden.length > 0 || detail.lastVisible.length > 0) {\n    globalHiddenAnnotationUIDsSet.forEach(\n      (item) => void detail.hidden.push(item)\n    );\n    triggerEvent(eventTarget, Events.ANNOTATION_VISIBILITY_CHANGE, detail);\n  }\n}\n\nfunction shouldDefineIsVisibleProperty(annotation: Annotation): boolean {\n  const descriptor = Object.getOwnPropertyDescriptor(annotation, 'isVisible');\n  if (descriptor) {\n    return (\n      descriptor.configurable &&\n      (descriptor.set !== setIsVisible || descriptor.get !== getIsVisible)\n    );\n  }\n  return Object.isExtensible(annotation);\n}\n\nfunction setIsVisible(hidden: boolean) {\n  setAnnotationVisibility((this as Annotation).annotationUID, hidden);\n}\n\nfunction getIsVisible() {\n  return isAnnotationVisible((this as Annotation).annotationUID);\n}\n\nexport {\n  setAnnotationVisibility,\n  showAllAnnotations,\n  isAnnotationVisible,\n  checkAndDefineIsVisibleProperty,\n};\n","import cloneDeep from 'lodash.clonedeep';\nimport {\n  Annotation,\n  Annotations,\n  AnnotationState,\n  GroupSpecificAnnotations,\n} from '../../types/AnnotationTypes';\n\nimport { AnnotationGroupSelector, IAnnotationManager } from '../../types';\n\nimport {\n  Enums,\n  eventTarget,\n  getEnabledElement,\n  Types,\n  utilities,\n} from '@cornerstonejs/core';\n\nimport { checkAndDefineIsLockedProperty } from './annotationLocking';\nimport { checkAndDefineIsVisibleProperty } from './annotationVisibility';\n\n/**\n * This is the default annotation manager. It stores annotations by default\n * based on the FrameOfReferenceUID. However, it is possible to override the\n * getAnnotationStateKey function to store annotations based on any other\n * property of the element. When you write your custom annotation manager, you\n * can use the setAnnotationManager function to set your custom annotation.\n *\n * Note that this class is a singleton and should not be instantiated directly.\n * To get the stored annotations information you can use ToolState helpers.\n */\nclass FrameOfReferenceSpecificAnnotationManager implements IAnnotationManager {\n  private annotations: AnnotationState;\n  public readonly uid: string;\n\n  /**\n   * @param uid - The uid of the state manager. If omitted it is autogenerated.\n   */\n  constructor(uid?: string) {\n    if (!uid) {\n      uid = utilities.uuidv4();\n    }\n    this.annotations = {};\n    this.uid = uid;\n\n    // Listen to the IMAGE_VOLUME_MODIFIED event to invalidate data.\n    eventTarget.addEventListener(\n      Enums.Events.IMAGE_VOLUME_MODIFIED,\n      this._imageVolumeModifiedHandler\n    );\n  }\n\n  /**\n   * Default annotation manager works with FrameOfReferenceUID as the key. The\n   * manager adds them under the FrameOfReferenceUID for the element being\n   * annotated.\n   *\n   * @param annotationGroupSelector - element or a string that is provided\n   * to the annotation manager to get the key.\n   * @returns - The annotation state key for the element.\n   */\n  getGroupKey = (annotationGroupSelector: AnnotationGroupSelector): string => {\n    if (typeof annotationGroupSelector === 'string') {\n      return annotationGroupSelector;\n    }\n\n    const element = annotationGroupSelector;\n    const enabledElement = getEnabledElement(element);\n\n    if (!enabledElement) {\n      throw new Error(\n        'Element not enabled, you must have an enabled element if you are not providing a FrameOfReferenceUID'\n      );\n    }\n\n    return enabledElement.FrameOfReferenceUID;\n  };\n\n  /**\n   * When a volume is modified we invalidate all of the `annotations` on the\n   * volume's `FrameOfReferenceUID`. This is mainly to update statistics calculations\n   * when an annotation is drawn whilst data is still loading.\n   *\n   * @param evt - The IMAGE_VOLUME_MODIFIED rendering event.\n   */\n  _imageVolumeModifiedHandler = (\n    evt: Types.EventTypes.ImageVolumeModifiedEvent\n  ) => {\n    const eventDetail = evt.detail;\n    const { FrameOfReferenceUID } = eventDetail;\n\n    const annotations = this.annotations;\n    const frameOfReferenceSpecificAnnotations =\n      annotations[FrameOfReferenceUID];\n\n    if (!frameOfReferenceSpecificAnnotations) {\n      return;\n    }\n\n    Object.keys(frameOfReferenceSpecificAnnotations).forEach((toolName) => {\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[toolName];\n\n      toolSpecificAnnotations.forEach((annotation) => {\n        const invalidated = annotation.invalidated;\n\n        if (invalidated !== undefined) {\n          annotation.invalidated = true;\n        }\n      });\n    });\n  };\n\n  /**\n   * Returns all the available frameOfReferences inside the state manager\n   * @returns - All the added frames of references inside the manager\n   */\n  getFramesOfReference = (): Array<string> => {\n    return Object.keys(this.annotations);\n  };\n\n  /**\n   * Returns the annotations associated with the specified frameOfReference and tool, or\n   * all annotations for the group if the tool name is not provided.\n   *\n   * @param groupKey - The annotation group key to retrieve annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - Optional. The name of the tool to retrieve annotations for.\n   * @returns The annotations associated with the specified group (default FrameOfReferenceUID) and tool,\n   * or all annotations for the group (FrameOfReferenceUID) if the tool name is not provided.\n   */\n  getAnnotations = (\n    groupKey: string,\n    toolName?: string\n  ): GroupSpecificAnnotations | Annotations => {\n    const annotations = this.annotations;\n\n    if (!annotations[groupKey]) {\n      return [];\n    }\n\n    if (toolName) {\n      return annotations[groupKey][toolName];\n    }\n\n    return annotations[groupKey];\n  };\n\n  /**\n   * Given the unique identified for the some `annotation`, returns the `annotation`\n   * from the `annotations`. Each `annotation` has a unique identifier.\n   *\n   * @param annotationUID - The unique identifier of the `annotation`.\n   * @returns The retrieved `annotation`.\n   */\n  getAnnotation = (annotationUID: string): Annotation | undefined => {\n    const annotations = this.annotations;\n\n    for (const frameOfReferenceUID in annotations) {\n      const frameOfReferenceAnnotations = annotations[frameOfReferenceUID];\n\n      for (const toolName in frameOfReferenceAnnotations) {\n        const toolSpecificAnnotations = frameOfReferenceAnnotations[toolName];\n\n        for (const annotation of toolSpecificAnnotations) {\n          if (annotationUID === annotation.annotationUID) {\n            return annotation;\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * A function that returns the number of annotations for a given tool in the\n   * specific group (default FrameOfReferenceUID) IF no groupKey (FrameOfReferenceUID) is provided,\n   * it will return the number of annotations for the tool in all groups (FrameOfReferenceUIDs)\n   *\n   * @param groupKey - The annotation group key to retrieve annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - The name of the tool to retrieve data for.\n   *\n   * @returns The number of annotations for a given tool in the state\n   */\n  getNumberOfAnnotations = (groupKey: string, toolName?: string): number => {\n    const annotations = this.getAnnotations(groupKey, toolName);\n\n    if (!annotations.length) {\n      return 0;\n    }\n\n    if (toolName) {\n      return (annotations as Annotations).length;\n    }\n\n    let total = 0;\n\n    for (const toolName in annotations) {\n      total += annotations[toolName].length;\n    }\n\n    return total;\n  };\n\n  /**\n   * Adds an instance of `Annotation` to the `annotations`.\n   *\n   * @param annotation - The annotation to add.\n   * @param groupKey - The annotation group key to add the annotation to (in default manager it is FrameOfReferenceUID).\n   */\n  addAnnotation = (annotation: Annotation, groupKey?: string): void => {\n    const { metadata } = annotation;\n    const { FrameOfReferenceUID, toolName } = metadata;\n\n    groupKey = groupKey || FrameOfReferenceUID;\n\n    const annotations = this.annotations;\n\n    let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n    if (!frameOfReferenceSpecificAnnotations) {\n      annotations[groupKey] = {};\n\n      frameOfReferenceSpecificAnnotations = annotations[groupKey];\n    }\n\n    let toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n\n    if (!toolSpecificAnnotations) {\n      frameOfReferenceSpecificAnnotations[toolName] = [];\n\n      toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n    }\n\n    toolSpecificAnnotations.push(annotation);\n    checkAndDefineIsLockedProperty(annotation);\n    checkAndDefineIsVisibleProperty(annotation);\n  };\n\n  /**\n   * Given the unique identified for the some `annotation`, removes the `annotation`\n   * from the `annotations`.\n   *\n   * @param annotationUID - The unique identifier of the `annotation` to remove.\n   */\n  removeAnnotation = (annotationUID: string): void => {\n    const { annotations } = this;\n\n    for (const groupKey in annotations) {\n      const groupAnnotations = annotations[groupKey];\n\n      for (const toolName in groupAnnotations) {\n        const toolAnnotations = groupAnnotations[toolName];\n\n        const index = toolAnnotations.findIndex(\n          (annotation) => annotation.annotationUID === annotationUID\n        );\n\n        if (index !== -1) {\n          toolAnnotations.splice(index, 1);\n\n          if (toolAnnotations.length === 0) {\n            delete groupAnnotations[toolName];\n          }\n        }\n      }\n\n      if (Object.keys(groupAnnotations).length === 0) {\n        delete annotations[groupKey];\n      }\n    }\n  };\n\n  /**\n   * Removes all annotations associated with the specified group (FrameOfReferenceUID) and tool, or\n   * all annotations for the group (FrameOfReferenceUID) if the tool name is not provided.\n   *\n   * @param groupKey - The group key to remove annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - Optional. The name of the tool to remove annotations for.\n   */\n  removeAnnotations = (groupKey: string, toolName?: string): void => {\n    const annotations = this.annotations;\n    if (annotations[groupKey]) {\n      if (toolName) {\n        delete annotations[groupKey][toolName];\n      } else {\n        delete annotations[groupKey];\n      }\n    }\n  };\n\n  /**\n   * Returns a section of the annotations. Useful for serialization.\n   * If both groupKey (default manager is FrameOfReferenceUID) and toolName are provided, returns the corresponding Annotations instance\n   * for that groupKey (FrameOfReferenceUID) and toolName.\n   * If only groupKey is provided, returns the corresponding FrameOfReferenceSpecificAnnotations instance\n   * for that groupKey.\n   * If neither groupKey nor toolName is provided, returns the entire AnnotationState object.\n   * @param groupKey - Optional. The group key (e.g. FrameOfReferenceUID) to retrieve annotations for.\n   * @param toolName - Optional. The name of the tool to retrieve annotations for.\n   * @returns A section of the annotations.\n   */\n  saveAnnotations = (\n    groupKey?: string,\n    toolName?: string\n  ): AnnotationState | GroupSpecificAnnotations | Annotations => {\n    const annotations = this.annotations;\n\n    if (groupKey && toolName) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      if (!frameOfReferenceSpecificAnnotations) {\n        return;\n      }\n\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[toolName];\n\n      return cloneDeep(toolSpecificAnnotations);\n    } else if (groupKey) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      return cloneDeep(frameOfReferenceSpecificAnnotations);\n    }\n\n    return cloneDeep(annotations);\n  };\n\n  /**\n   * Restores a section of the `annotations`. Useful for loading in serialized data.\n   *\n   * - If no arguments are given, the entire `AnnotationState` instance is restored.\n   * - If the `FrameOfReferenceUID` is given, the corresponding\n   * `FrameOfReferenceSpecificAnnotations` instance is restored.\n   * - If both the `FrameOfReferenceUID` and the `toolName` are are given, the\n   * corresponding `Annotations` instance is restored.\n   *\n   * @param groupKey - A filter string for restoring only the `annotations` of a specific frame of reference.\n   * @param toolName - A filter string for restoring `annotation` for a specific tool on a specific frame of reference.\n   */\n  restoreAnnotations = (\n    state: AnnotationState | GroupSpecificAnnotations | Annotations,\n    groupKey?: string,\n    toolName?: string\n  ): void => {\n    const annotations = this.annotations;\n\n    if (groupKey && toolName) {\n      // Set Annotations for FrameOfReferenceUID and toolName.\n\n      let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      if (!frameOfReferenceSpecificAnnotations) {\n        annotations[groupKey] = {};\n\n        frameOfReferenceSpecificAnnotations = annotations[groupKey];\n      }\n\n      frameOfReferenceSpecificAnnotations[toolName] = <Annotations>state;\n    } else if (groupKey) {\n      // Set FrameOfReferenceSpecificAnnotations for FrameOfReferenceUID.\n\n      annotations[groupKey] = <GroupSpecificAnnotations>state;\n    } else {\n      // Set entire annotations\n      this.annotations = <AnnotationState>cloneDeep(state);\n    }\n  };\n\n  /**\n   * A function that returns the number of all annotations in the annotation state\n   *\n   * @returns The number of all annotations in the state\n   */\n  getNumberOfAllAnnotations = (): number => {\n    let count = 0;\n    const annotations = this.annotations;\n    for (const groupKey in annotations) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n      for (const toolName in frameOfReferenceSpecificAnnotations) {\n        const toolSpecificAnnotations =\n          frameOfReferenceSpecificAnnotations[toolName];\n        count += toolSpecificAnnotations.length;\n      }\n    }\n    return count;\n  };\n\n  /**\n   * Removes all annotations in the annotation state.\n   */\n  removeAllAnnotations = (): void => {\n    this.annotations = {};\n  };\n}\n\nconst defaultFrameOfReferenceSpecificAnnotationManager =\n  new FrameOfReferenceSpecificAnnotationManager('DEFAULT');\n\nexport { defaultFrameOfReferenceSpecificAnnotationManager };\nexport default FrameOfReferenceSpecificAnnotationManager;\n","let svgNodeCache = {};\n\nexport function resetSvgNodeCache(): void {\n  svgNodeCache = {};\n}\n\nexport default svgNodeCache;\n","import _cloneDeep from 'lodash.clonedeep';\n\nimport { IToolGroup, IToolClassReference } from '../types';\nimport Synchronizer from './SynchronizerManager/Synchronizer';\nimport svgNodeCache, { resetSvgNodeCache } from './svgNodeCache';\n\ninterface ICornerstoneTools3dState {\n  isInteractingWithTool: boolean;\n  isMultiPartToolActive: boolean;\n  tools: Record<\n    string,\n    {\n      toolClass: IToolClassReference;\n    }\n  >;\n  toolGroups: Array<IToolGroup>;\n  synchronizers: Array<Synchronizer>;\n  svgNodeCache: Record<string, unknown>;\n  enabledElements: Array<unknown>;\n  handleRadius: number;\n}\n\nconst defaultState: ICornerstoneTools3dState = {\n  isInteractingWithTool: false,\n  isMultiPartToolActive: false,\n  tools: {},\n  toolGroups: [],\n  synchronizers: [],\n  svgNodeCache: svgNodeCache,\n  // Should this be named... canvases?\n  enabledElements: [], // switch to Uids?\n  handleRadius: 6,\n};\n\nlet state: ICornerstoneTools3dState = {\n  isInteractingWithTool: false,\n  isMultiPartToolActive: false,\n  tools: {},\n  toolGroups: [],\n  synchronizers: [],\n  svgNodeCache: svgNodeCache,\n  // Should this be named... canvases?\n  enabledElements: [], // switch to Uids?\n  handleRadius: 6,\n};\n\nfunction resetCornerstoneToolsState(): void {\n  resetSvgNodeCache();\n  state = _cloneDeep(defaultState);\n}\n\nexport {\n  ICornerstoneTools3dState,\n  resetCornerstoneToolsState,\n  state,\n  state as default,\n};\n","import { state } from './state';\n\n/**\n * Adds the tool class to the cornerstoneTools to be used later. This function\n * should be called before creating the toolGroups and adding tools and setting their mode.\n * The flow is:\n * - addTool(ToolClass) // where ToolClass is the tool constructor imported from CornerstoneTools or created by a 3rd party\n * - createToolGroup(toolGroupId)\n * - toolGroup.addTool(${toolName}) // NOT THE TOOL CLASS\n * - toolGroup.setToolActive(${toolName})\n *\n * @param ToolClass - A tool calls to instantiate.\n * @param toolOptions - The tool-specific configuration options for the tool.\n * @returns\n */\nexport function addTool(ToolClass): void {\n  // Check if tool exists and name is not undefined\n  const toolName = ToolClass.toolName;\n  const toolAlreadyAdded = state.tools[toolName] !== undefined;\n\n  if (!toolName) {\n    throw new Error(`No Tool Found for the ToolClass ${ToolClass.name}`);\n  }\n\n  if (toolAlreadyAdded) {\n    throw new Error(`${toolName} has already been added globally`);\n  }\n\n  // Stores the toolNames and ToolClass to be instantiated in the toolGroup on toolGroup.addTool\n  state.tools[toolName] = {\n    toolClass: ToolClass,\n  };\n}\n\n/**\n * Removes the tool class from the cornerstoneTools.\n *\n * @param ToolClass - A tool calls to instantiate.\n */\nexport function removeTool(ToolClass): void {\n  const toolName = ToolClass.toolName;\n\n  if (!toolName) {\n    throw new Error(`No tool found for: ${ToolClass.name}`);\n  }\n\n  if (!state.tools[toolName] !== undefined) {\n    delete state.tools[toolName];\n  } else {\n    throw new Error(\n      `${toolName} cannot be removed because it has not been added`\n    );\n  }\n}\n\nexport default addTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { IPoints } from '../../types';\n\n/**\n * Given a native mouse event, get the associated cornerstone3D enabled element\n * and derive a set of coordinates useful for tools.\n * @param evt - The Mouse event.\n * @param element - The DOM HTMLDivElement that the event was triggered on.\n * @returns The points related to the event in the form of a `IPoints` object containing\n * the following properties: `page`, `client`, `canvas`, and `world` details of the event.\n */\nexport default function getMouseEventPoints(\n  evt: MouseEvent,\n  element?: HTMLDivElement\n): IPoints {\n  const elementToUse = element || (evt.currentTarget as HTMLDivElement);\n  const { viewport } = getEnabledElement(elementToUse);\n  const clientPoint = _clientToPoint(evt);\n  const pagePoint = _pageToPoint(evt);\n  const canvasPoint = _pagePointsToCanvasPoints(elementToUse, pagePoint);\n  const worldPoint = viewport.canvasToWorld(canvasPoint);\n\n  return {\n    page: pagePoint,\n    client: clientPoint,\n    canvas: canvasPoint,\n    world: worldPoint,\n  };\n}\n\n/**\n * Converts point from page coordinates to canvas coordinates.\n * @param element - HTMLDivElement\n * @param pagePoint - Point in page coordinates pageX and pageY\n *\n * @returns The canvas coordinate points\n */\nfunction _pagePointsToCanvasPoints(\n  element: HTMLDivElement,\n  pagePoint: Types.Point2\n): Types.Point2 {\n  const rect = element.getBoundingClientRect();\n  return [\n    pagePoint[0] - rect.left - window.pageXOffset,\n    pagePoint[1] - rect.top - window.pageYOffset,\n  ];\n}\n\n/**\n * Converts the event's `pageX` and `pageY` properties to Types.Point2 format\n *\n * @param evt - The Mouse `Event`\n */\nfunction _pageToPoint(evt: MouseEvent): Types.Point2 {\n  return [evt.pageX, evt.pageY];\n}\n\n/**\n * Converts the event's `clientX` and `clientY` properties to Types.Point2 format\n * @param evt - The Mouse `Event`\n */\nfunction _clientToPoint(evt: MouseEvent): Types.Point2 {\n  return [evt.clientX, evt.clientY];\n}\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport getMouseEventPoints from './getMouseEventPoints';\nimport { EventTypes, IPoints } from '../../types';\n\n/**\n * Captures and normalizes the double click event. Emits as a cornerstoneTools3D\n * double click event.\n *\n * @param evt - The mouse event.\n */\nfunction mouseDoubleClickListener(evt: MouseEvent): void {\n  const element = <HTMLDivElement>evt.currentTarget;\n\n  const { viewportId, renderingEngineId } = getEnabledElement(element);\n\n  const startPoints = getMouseEventPoints(evt, element);\n  const deltaPoints: IPoints = {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  };\n\n  const eventDetail: EventTypes.MouseDoubleClickEventDetail = {\n    event: evt,\n    eventName: Events.MOUSE_DOUBLE_CLICK,\n    viewportId,\n    renderingEngineId,\n    camera: {},\n    element,\n    startPoints,\n    lastPoints: startPoints,\n    currentPoints: startPoints,\n    deltaPoints,\n  };\n\n  const consumed = !triggerEvent(\n    element,\n    Events.MOUSE_DOUBLE_CLICK,\n    eventDetail\n  );\n\n  if (consumed) {\n    // The Events.MOUSE_DOUBLE_CLICK was consumed, thus no other listener should handle this 'dblclick' event.\n\n    // Use stopImmediatePropagation to lessen the possibility that a third party 'dblclick'\n    // listener receives this event. However, there still is no guarantee\n    // that any third party listener has not already handled the event.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  }\n}\n\nexport default mouseDoubleClickListener;\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport getMouseEventPoints from './getMouseEventPoints';\nimport { MouseMoveEventDetail } from '../../types/EventTypes';\n\nconst eventName = Events.MOUSE_MOVE;\n\n/**\n * Captures and normalizes the mouse move event. Emits as a cornerstoneTools3D\n * mouse move event.\n *\n * @param evt - The mouse event.\n */\nfunction mouseMoveListener(evt: MouseEvent) {\n  const element = <HTMLDivElement>evt.currentTarget;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  const currentPoints = getMouseEventPoints(evt);\n  const eventDetail: MouseMoveEventDetail = {\n    renderingEngineId,\n    viewportId,\n    camera: {},\n    element,\n    currentPoints,\n    eventName,\n    event: evt,\n  };\n\n  triggerEvent(element, eventName, eventDetail);\n}\n\nexport default mouseMoveListener;\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport Events from '../../enums/Events';\nimport mouseMoveListener from './mouseMoveListener';\nimport { EventTypes, IPoints } from '../../types';\nimport getMouseEventPoints from './getMouseEventPoints';\n\nconst { MOUSE_DOWN, MOUSE_DOWN_ACTIVATE, MOUSE_CLICK, MOUSE_UP, MOUSE_DRAG } =\n  Events;\n\n// The amount of time in milliseconds within which a browser 'dblclick' event has to occur.\n// Any mouse down, up, down and up sequence taking longer than this time is considered to\n// NOT be a double click and any browser 'dblclick' event that subsequently occurs as a result\n// of such a sequence will be ignored. It is best to set this to a value that is less\n// than the system value for detecting a double click. Setting something too large\n// might detect a double click that does not constitute a browser 'dblclick' and thus\n// no mouse events for the sequence will get fired at all.\n//\n// TODO This module should detect and fire 'dblclick' events at its discretion and\n// ignore all those generated by the browser.\n//\nconst DOUBLE_CLICK_TOLERANCE_MS = 400;\n\n// This tolerance is how long to accept a secondary button down\nconst MULTI_BUTTON_TOLERANCE_MS = 150;\n\n// A drag (projected distance) during the double click timeout that is greater than this\n// value will cancel the timeout and suppress any double click that might occur.\n// This tolerance is particularly important on touch devices where some movement\n// might occur between the two clicks.\n//\n// TODO revisit this value for touch devices\n//\nconst DOUBLE_CLICK_DRAG_TOLERANCE = 3;\n\ninterface IMouseDownListenerState {\n  mouseButton: number;\n  element: HTMLDivElement;\n  renderingEngineId: string;\n  viewportId: string;\n  isClickEvent: boolean;\n  clickDelay: number;\n  preventClickTimeout: ReturnType<typeof setTimeout>;\n  startPoints: IPoints;\n  lastPoints: IPoints;\n}\n\ninterface IDoubleClickState {\n  doubleClickTimeout: ReturnType<typeof setTimeout>;\n  mouseDownEvent: MouseEvent;\n  mouseUpEvent: MouseEvent;\n  ignoreDoubleClick: boolean;\n}\n\n// STATE\nconst defaultState: IMouseDownListenerState = {\n  mouseButton: undefined,\n  //\n  element: null,\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  isClickEvent: true,\n  clickDelay: 200,\n  preventClickTimeout: null,\n  startPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n  lastPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n};\n\nlet state: IMouseDownListenerState = {\n  mouseButton: undefined,\n  //\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  isClickEvent: true,\n  clickDelay: 200,\n  element: null,\n  preventClickTimeout: null,\n  startPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n  lastPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n};\n\nconst doubleClickState: IDoubleClickState = {\n  doubleClickTimeout: null,\n  mouseDownEvent: null,\n  mouseUpEvent: null,\n  ignoreDoubleClick: false,\n};\n\n/**\n * Listens to mouse down events from the DOM and depending on interaction and further\n * interaction can emit the following mouse events:\n *\n * - MOUSE_DOWN\n * - MOUSE_DOWN_ACTIVATE\n * - MOUSE_DRAG (move while down)\n * - MOUSE_UP\n * - MOUSE_CLICK\n *\n * The mouse down is NOT handled immediately. Instead, a timeout is started to\n * determine if this mouse down is the first in a sequence that constitutes a\n * double click.\n *\n * @param evt - The Mouse event.\n * @private\n */\nfunction mouseDownListener(evt: MouseEvent) {\n  if (doubleClickState.doubleClickTimeout) {\n    // A second identical click will be a double click event, so ignore it\n    if (evt.buttons === doubleClickState.mouseDownEvent.buttons) return;\n\n    // Record the second button or the changed button event as the initial\n    // button down state so that the multi-button event can be detected\n    doubleClickState.mouseDownEvent = evt;\n\n    // If second button is added, then ensure double click timeout is terminated\n    // and do not handle three or more button gestures.\n    _doStateMouseDownAndUp();\n    return;\n  }\n\n  // Handle multi-button clicks by adding a delay before handling them.\n  // Double clicks (left button only) physically take the user longer, so\n  // use a longer timeout, and for multi-button at the same time, the clicks\n  // are done at the same time by the user, just the system perceives them\n  // separately, so have a short timeout to allow catching both buttons.\n  doubleClickState.doubleClickTimeout = setTimeout(\n    _doStateMouseDownAndUp,\n    evt.buttons === 1 ? DOUBLE_CLICK_TOLERANCE_MS : MULTI_BUTTON_TOLERANCE_MS\n  );\n\n  // First mouse down of a potential double click. So save it and start\n  // a timeout to determine a double click.\n  doubleClickState.mouseDownEvent = evt;\n  doubleClickState.ignoreDoubleClick = false;\n\n  state.element = <HTMLDivElement>evt.currentTarget;\n\n  state.mouseButton = evt.buttons;\n\n  const enabledElement = getEnabledElement(state.element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  state.renderingEngineId = renderingEngineId;\n  state.viewportId = viewportId;\n\n  state.preventClickTimeout = setTimeout(\n    _preventClickHandler,\n    state.clickDelay\n  );\n\n  // Prevent CornerstoneToolsMouseMove while mouse is down\n  state.element.removeEventListener('mousemove', mouseMoveListener);\n\n  const startPoints = getMouseEventPoints(evt, state.element);\n  state.startPoints = _copyPoints(startPoints);\n  state.lastPoints = _copyPoints(startPoints);\n\n  document.addEventListener('mouseup', _onMouseUp);\n  document.addEventListener('mousemove', _onMouseDrag);\n}\n\n/**\n * Does the actual mouse down logic if the double click timer has expired or\n * a mouse drag has started.\n * @param evt the mouse down event\n * @private\n */\nfunction _doMouseDown(evt: MouseEvent) {\n  const deltaPoints = _getDeltaPoints(state.startPoints, state.startPoints);\n\n  const eventDetail: EventTypes.MouseDownEventDetail = {\n    event: evt,\n    eventName: MOUSE_DOWN,\n    element: state.element,\n    mouseButton: state.mouseButton,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    startPoints: state.startPoints,\n    lastPoints: state.startPoints,\n    currentPoints: state.startPoints,\n    deltaPoints,\n  };\n\n  state.lastPoints = _copyPoints(eventDetail.lastPoints);\n\n  // by triggering MOUSE_DOWN it checks if this is toolSelection, handle modification etc.\n  // of already existing tools\n  const notConsumed = triggerEvent(\n    eventDetail.element,\n    MOUSE_DOWN,\n    eventDetail\n  );\n\n  // if no tools responded to this event and prevented its default behavior,\n  // create a new tool\n  if (notConsumed) {\n    triggerEvent(eventDetail.element, MOUSE_DOWN_ACTIVATE, eventDetail);\n  }\n}\n\n/**\n *_onMouseDrag - Handle emission of drag events whilst the mouse is depressed.\n *\n * @private\n * @param evt - The mouse event.\n */\nfunction _onMouseDrag(evt: MouseEvent) {\n  const currentPoints = getMouseEventPoints(evt, state.element);\n  const lastPoints = _updateMouseEventsLastPoints(\n    state.element,\n    state.lastPoints\n  );\n\n  const deltaPoints = _getDeltaPoints(currentPoints, lastPoints);\n\n  if (doubleClickState.doubleClickTimeout) {\n    if (_isDragPastDoubleClickTolerance(deltaPoints.canvas)) {\n      // Dragging past the tolerance means no double click should occur.\n      _doStateMouseDownAndUp();\n    } else {\n      return;\n    }\n  }\n\n  const eventDetail: EventTypes.MouseDragEventDetail = {\n    event: evt,\n    eventName: MOUSE_DRAG,\n    mouseButton: state.mouseButton,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    startPoints: _copyPoints(state.startPoints),\n    lastPoints: _copyPoints(lastPoints),\n    currentPoints,\n    deltaPoints,\n  };\n\n  triggerEvent(state.element, MOUSE_DRAG, eventDetail);\n\n  // Update the last points\n  state.lastPoints = _copyPoints(currentPoints);\n}\n\n/**\n *_onMouseUp - Handle emission of mouse up events, and re-enabling mouse move events.\n *\n * If the mouse up event occurs during a double click timeout, it is either the first or\n * second mouse up of a potential double click sequence. If the first, then it\n * is saved in case the double click timeout expires and a simple mouse down and\n * up have to get executed. If the second, then the latest mouse down, up, down and\n * up constitute a double click and the mouseDoubleClickListener needs to execute.\n *\n * If the mouse up event comes after the double click timeout, then it is simply\n * handled as the up of a mouse down and up sequence.\n *\n * @private\n * @param evt - The mouse event.\n */\nfunction _onMouseUp(evt: MouseEvent): void {\n  // Cancel the timeout preventing the click event from triggering\n  clearTimeout(state.preventClickTimeout);\n\n  if (doubleClickState.doubleClickTimeout) {\n    // received a mouse up while waiting for a double click (via a timeout)\n\n    if (!doubleClickState.mouseUpEvent) {\n      // this is the first mouse up during the double click timeout; we'll need it later if the timeout expires\n      doubleClickState.mouseUpEvent = evt;\n\n      state.element.addEventListener('mousemove', _onMouseMove);\n    } else {\n      // this is the second mouse up of a double click!\n      _cleanUp();\n    }\n  } else {\n    // Handle the actual mouse up. Note that it may have occurred during the double click timeout or\n    // after it expired. In either case this block is being executed after the time out has expired\n    // or after a drag started.\n\n    const eventName = state.isClickEvent ? MOUSE_CLICK : MOUSE_UP;\n\n    const currentPoints = getMouseEventPoints(evt, state.element);\n    const deltaPoints = _getDeltaPoints(currentPoints, state.lastPoints);\n    const eventDetail:\n      | EventTypes.MouseUpEventDetail\n      | EventTypes.MouseClickEventType = {\n      event: evt,\n      eventName,\n      mouseButton: state.mouseButton,\n      element: state.element,\n      renderingEngineId: state.renderingEngineId,\n      viewportId: state.viewportId,\n      camera: {},\n      startPoints: _copyPoints(state.startPoints),\n      lastPoints: _copyPoints(state.lastPoints),\n      currentPoints,\n      deltaPoints,\n    };\n\n    triggerEvent(eventDetail.element, eventName, eventDetail);\n\n    _cleanUp();\n  }\n\n  // Remove the drag as soon as we get the mouse up because either we have executed\n  // the mouse up logic, or we have not even handled the mouse down logic yet\n  // - either way no drag should/can occur.\n  document.removeEventListener('mousemove', _onMouseDrag);\n}\n\n/**\n * Handles a mouse move on the state element after a mouse down AND up AND\n * while the double click timeout is still running.\n * @private\n * @param evt - The mouse event.\n */\nfunction _onMouseMove(evt: MouseEvent) {\n  const currentPoints = getMouseEventPoints(evt, state.element);\n  const lastPoints = _updateMouseEventsLastPoints(\n    state.element,\n    state.lastPoints\n  );\n\n  const deltaPoints = _getDeltaPoints(currentPoints, lastPoints);\n\n  if (!_isDragPastDoubleClickTolerance(deltaPoints.canvas)) {\n    return;\n  }\n\n  _doStateMouseDownAndUp();\n\n  // Do the move again because during the timeout the global mouse move listener was removed.\n  // Now it is back.\n  mouseMoveListener(evt);\n}\n\n/**\n * Determines if the given delta is past the double click, (projected) drag distance\n * tolerance.\n * @param delta the delta\n * @returns true iff the delta is past the tolerance\n */\nfunction _isDragPastDoubleClickTolerance(delta: Types.Point2): boolean {\n  return Math.abs(delta[0]) + Math.abs(delta[1]) > DOUBLE_CLICK_DRAG_TOLERANCE;\n}\n\nfunction _preventClickHandler() {\n  state.isClickEvent = false;\n}\n\n/**\n * Do a mouse down and potential mouse up using each of the events in the double click state.\n * The events were stored in the state during the timeout to determine a double click.\n *\n * This function should be invoked whenever it is determined that the latest\n * sequence of mouse down(s) and up(s) is NOT a double click. Examples of this include\n * - the expiration of the double click timeout\n * - a mouse drag/move beyond the DOUBLE_CLICK_DRAG_TOLERANCE\n *\n * This function sets the doubleClickState.ignoreDoubleClick flag in case our timeout value\n * or mouse move/drag tolerance is inaccurate and we do indeed get a double click event from\n * the browser later. The flag will be cleared in the mouseDoubleClickIgnoreListener should a\n * double click event get fired. If there is no eventual double click for the latest sequence,\n * the flag spills into the next sequence where it will get cleared at the beginning of that next\n * sequence in mouseDownListener. It is perfectly safe for the flag to be\n * left true when no double click actually occurs because any future double click must start with\n * a mouse down that is handled in this module.\n *\n * @private\n */\nfunction _doStateMouseDownAndUp() {\n  doubleClickState.ignoreDoubleClick = true;\n\n  const mouseDownEvent = doubleClickState.mouseDownEvent;\n  const mouseUpEvent = doubleClickState.mouseUpEvent;\n\n  _clearDoubleClickTimeoutAndEvents();\n\n  _doMouseDown(mouseDownEvent);\n\n  if (mouseUpEvent) {\n    _onMouseUp(mouseUpEvent);\n  }\n}\n\n/**\n * Clears the mouse events and double click timeout id in the double click state object.\n * The timeout itself is also cleared so that no callback is invoked.\n */\nfunction _clearDoubleClickTimeoutAndEvents() {\n  if (doubleClickState.doubleClickTimeout) {\n    clearTimeout(doubleClickState.doubleClickTimeout);\n    doubleClickState.doubleClickTimeout = null;\n  }\n\n  doubleClickState.mouseDownEvent = null;\n  doubleClickState.mouseUpEvent = null;\n}\n\nfunction _cleanUp() {\n  document.removeEventListener('mouseup', _onMouseUp);\n  state.element?.removeEventListener('mousemove', _onMouseMove);\n\n  // Restore our global mousemove listener\n  state.element?.addEventListener('mousemove', mouseMoveListener);\n\n  _clearDoubleClickTimeoutAndEvents();\n\n  state = JSON.parse(JSON.stringify(defaultState));\n}\n\n/**\n * Copies a set of points.\n * @param points - The `IPoints` instance to copy.\n *\n * @returns A copy of the points.\n */\nfunction _copyPoints(points: IPoints): IPoints {\n  return JSON.parse(JSON.stringify(points));\n}\n\n/**\n * Recalculates the last world coordinate, as the linear transform from client\n * to world could be different if the camera was updated.\n * @param element - The HTML element\n * @param lastPoints - The last points\n */\nfunction _updateMouseEventsLastPoints(\n  element: HTMLDivElement,\n  lastPoints: IPoints\n): IPoints {\n  const { viewport } = getEnabledElement(element);\n  // Need to update the world point to be calculated from the current reference frame,\n  // Which might have changed since the last interaction.\n  const world = viewport.canvasToWorld(lastPoints.canvas);\n\n  return {\n    page: lastPoints.page,\n    client: lastPoints.client,\n    canvas: lastPoints.canvas,\n    world,\n  };\n}\n\n/**\n * Returns the difference between two `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints -- The last points, to be subtracted from the `currentPoints`.\n *\n * @returns The difference in IPoints format\n */\nfunction _getDeltaPoints(currentPoints: IPoints, lastPoints: IPoints): IPoints {\n  return {\n    page: _subtractPoints2D(currentPoints.page, lastPoints.page),\n    client: _subtractPoints2D(currentPoints.client, lastPoints.client),\n    canvas: _subtractPoints2D(currentPoints.canvas, lastPoints.canvas),\n    world: _subtractPoints3D(currentPoints.world, lastPoints.world),\n  };\n}\n\n/**\n * _subtractPoints - Subtracts `point1` from `point0`.\n * @param point0 - The first point.\n * @param point1 - The second point to subtract from the first.\n *\n * @returns The difference.\n */\nfunction _subtractPoints2D(\n  point0: Types.Point2,\n  point1: Types.Point2\n): Types.Point2 {\n  return [point0[0] - point1[0], point0[1] - point1[1]];\n}\n\nfunction _subtractPoints3D(\n  point0: Types.Point3,\n  point1: Types.Point3\n): Types.Point3 {\n  return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\n\nexport function getMouseButton(): number {\n  return state.mouseButton;\n}\n\n/**\n * Handles a dblclick event to determine if it should be ignored based on the\n * double click state's ignoreDoubleClick flag. stopImmediatePropagation and\n * preventDefault are used to ignore the event.\n * @param evt browser dblclick event\n */\nexport function mouseDoubleClickIgnoreListener(evt: MouseEvent) {\n  if (doubleClickState.ignoreDoubleClick) {\n    doubleClickState.ignoreDoubleClick = false;\n\n    // Use stopImmediatePropagation to lessen the possibility that a third party 'dblclick'\n    // listener receives this event. However, there still is no guarantee\n    // that any third party listener has not already handled the event.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  } else {\n    // If the embedding application blocked the first mouse down and up\n    // of a double click sequence from reaching this module, then this module\n    // has handled the second mouse down and up and thus needs to clean them up.\n    // Doing a clean up here for the typical double click case is harmless.\n    _cleanUp();\n  }\n}\n\nexport default mouseDownListener;\n","import mouseDoubleClickListener from './mouseDoubleClickListener';\nimport mouseDownListener, {\n  mouseDoubleClickIgnoreListener,\n} from './mouseDownListener';\nimport mouseMoveListener from './mouseMoveListener';\n\n/**\n * Removes mouse event listeners for native mouse event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to remove event listeners from.\n */\nfunction disable(element: HTMLDivElement): void {\n  element.removeEventListener('dblclick', mouseDoubleClickListener);\n  element.removeEventListener('mousedown', mouseDownListener);\n  element.removeEventListener('mousemove', mouseMoveListener);\n  // The mouseDoubleClickIgnoreListener prevents those browser 'dblclick'\n  // events that cornerstone has determined are single clicks from propagating\n  // to other (3rd party) listeners. A capture phase listener is used so that\n  // the 'dblclick' event can be ignored and not propagated ASAP.\n  element.removeEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n    capture: true,\n  });\n}\n\n/**\n * Registers mouse event listeners for native mouse event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to register event listeners on.\n */\nfunction enable(element: HTMLDivElement): void {\n  // Prevent handlers from being attached multiple times\n  disable(element);\n\n  element.addEventListener('dblclick', mouseDoubleClickListener);\n  element.addEventListener('mousedown', mouseDownListener);\n  element.addEventListener('mousemove', mouseMoveListener);\n  // The mouseDoubleClickIgnoreListener prevents those browser 'dblclick'\n  // events that cornerstone has determined are single clicks from propagating\n  // to other (3rd party) listeners. A capture phase listener is used so that\n  // the 'dblclick' event can be ignored and not propagated ASAP.\n  element.addEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n    capture: true,\n  });\n}\n\nexport default {\n  enable,\n  disable,\n};\n","// Functions to prevent ghost clicks following a touch\n// Since the event lifecycle is touchstart, mousedown, touchend, mouseup\n// we want to prevent mousedown and mouseup events after touch events\n// All credit to @kosich\n// https://gist.github.com/kosich/23188dd86633b6c2efb7\n\nconst antiGhostDelay = 2000,\n  pointerType = {\n    mouse: 0,\n    touch: 1,\n  };\n\nlet lastInteractionType, lastInteractionTime;\n\nfunction handleTap(type, e) {\n  const now = Date.now();\n\n  if (type !== lastInteractionType) {\n    if (now - lastInteractionTime <= antiGhostDelay) {\n      e.preventDefault();\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n\n      return false;\n    }\n\n    lastInteractionType = type;\n  }\n\n  lastInteractionTime = now;\n}\n\n// Cacheing the function references\n// Necessary because a new function reference is created after .bind() is called\n// http://stackoverflow.com/questions/11565471/removing-event-listener-which-was-added-with-bind\nconst handleTapMouse = handleTap.bind(null, pointerType.mouse);\nconst handleTapTouch = handleTap.bind(null, pointerType.touch);\n\nfunction attachEvents(element, eventList, interactionType) {\n  const tapHandler = interactionType ? handleTapMouse : handleTapTouch;\n\n  eventList.forEach(function (eventName) {\n    element.addEventListener(eventName, tapHandler, { passive: false });\n  });\n}\n\nfunction removeEvents(element, eventList, interactionType) {\n  const tapHandler = interactionType ? handleTapMouse : handleTapTouch;\n\n  eventList.forEach(function (eventName) {\n    element.removeEventListener(eventName, tapHandler);\n  });\n}\n\nconst mouseEvents = ['mousedown', 'mouseup', 'mousemove'];\nconst touchEvents = ['touchstart', 'touchend'];\n\nfunction disable(element) {\n  removeEvents(element, mouseEvents, pointerType.mouse);\n  removeEvents(element, touchEvents, pointerType.touch);\n}\n\nfunction enable(element) {\n  disable(element);\n  attachEvents(element, mouseEvents, pointerType.mouse);\n  attachEvents(element, touchEvents, pointerType.touch);\n}\n\nexport default {\n  enable,\n  disable,\n};\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { ITouchPoints } from '../../types';\n\n/**\n * Given a native touch event, get the associated cornerstone3D enabled element\n * and derive a set of coordinates useful for tools.\n * @param evt - The Touch event.\n * @param element - The DOM HTMLDivElement that the event was triggered on.\n * @returns The points related to the event in the form of a `IPoints` object containing\n * the following properties: `page`, `client`, `canvas`, and `world` details of the event.\n */\nexport default function getTouchEventPoints(\n  evt: TouchEvent,\n  element?: HTMLDivElement\n): ITouchPoints[] {\n  const elementToUse = element || (evt.currentTarget as HTMLDivElement);\n  const touches = evt.type === 'touchend' ? evt.changedTouches : evt.touches;\n  return Object.keys(touches).map((i) => {\n    const clientPoint = _clientToPoint(touches[i]);\n    const pagePoint = _pageToPoint(touches[i]);\n    const canvasPoint = _pagePointsToCanvasPoints(elementToUse, pagePoint);\n    const { viewport } = getEnabledElement(elementToUse);\n    const worldPoint = viewport.canvasToWorld(canvasPoint);\n    return {\n      page: pagePoint,\n      client: clientPoint,\n      canvas: canvasPoint,\n      world: worldPoint,\n      touch: {\n        identifier: i,\n        radiusX: touches[i].radiusX,\n        radiusY: touches[i].radiusY,\n        force: touches[i].force,\n        rotationAngle: touches[i].rotationAngle,\n      },\n    };\n  });\n}\n\n/**\n * Converts point from page coordinates to canvas coordinates.\n * @param element - HTMLDivElement\n * @param pagePoint - Point in page coordinates pageX and pageY\n *\n * @returns The canvas coordinate points\n */\nfunction _pagePointsToCanvasPoints(\n  element: HTMLDivElement,\n  pagePoint: Types.Point2\n): Types.Point2 {\n  const rect = element.getBoundingClientRect();\n  return [\n    pagePoint[0] - rect.left - window.pageXOffset,\n    pagePoint[1] - rect.top - window.pageYOffset,\n  ];\n}\n\n/**\n * Converts the event's `pageX` and `pageY` properties to Types.Point2 format\n *\n * @param touch - The Touch\n */\nfunction _pageToPoint(touch: Touch): Types.Point2 {\n  return [touch.pageX, touch.pageY];\n}\n\n/**\n * Converts the event's `clientX` and `clientY` properties to Types.Point2 format\n * @param evt - The Touch `Event`\n */\nfunction _clientToPoint(touch: Touch): Types.Point2 {\n  return [touch.clientX, touch.clientY];\n}\n","import { IDistance, IPoints, ITouchPoints } from '../../types';\nimport { Types } from '@cornerstonejs/core';\n\n/**\n * Returns the difference between multiple `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints - The last points, to be subtracted from the `currentPoints`.\n *\n * @returns The difference in IPoints format\n */\nfunction getDeltaPoints(\n  currentPoints: IPoints[],\n  lastPoints: IPoints[]\n): IPoints {\n  const curr = getMeanPoints(currentPoints);\n  const last = getMeanPoints(lastPoints);\n  return {\n    page: _subtractPoints2D(curr.page, last.page),\n    client: _subtractPoints2D(curr.client, last.client),\n    canvas: _subtractPoints2D(curr.canvas, last.canvas),\n    world: _subtractPoints3D(curr.world, last.world),\n  };\n}\n\n/**\n * Returns the distance between multiple `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints - The last points, to be subtracted from the `currentPoints`.\n *\n * @returns The distance difference in IDistance format\n */\nfunction getDeltaDistance(\n  currentPoints: IPoints[],\n  lastPoints: IPoints[]\n): IDistance {\n  const curr = getMeanPoints(currentPoints);\n  const last = getMeanPoints(lastPoints);\n  return {\n    page: _getDistance2D(curr.page, last.page),\n    client: _getDistance2D(curr.client, last.client),\n    canvas: _getDistance2D(curr.canvas, last.canvas),\n    world: _getDistance3D(curr.world, last.world),\n  };\n}\n\nfunction getDeltaRotation(\n  currentPoints: ITouchPoints[],\n  lastPoints: ITouchPoints[]\n) {\n  // TODO\n}\n\n/**\n * Returns the distance difference between multiple `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints -- The last points.\n *\n * @returns The difference in IPoints format\n */\nfunction getDeltaDistanceBetweenIPoints(\n  currentPoints: IPoints[],\n  lastPoints: IPoints[]\n): IDistance {\n  const currentDistance = _getMeanDistanceBetweenAllIPoints(currentPoints);\n  const lastDistance = _getMeanDistanceBetweenAllIPoints(lastPoints);\n  const deltaDistance = {\n    page: currentDistance.page - lastDistance.page,\n    client: currentDistance.client - lastDistance.client,\n    canvas: currentDistance.canvas - lastDistance.canvas,\n    world: currentDistance.world - lastDistance.world,\n  };\n  return deltaDistance;\n}\n\n/**\n * Copies a set of points.\n * @param points - The `IPoints` instance to copy.\n *\n * @returns A copy of the points.\n */\nfunction copyPointsList(points: ITouchPoints[]): ITouchPoints[] {\n  return JSON.parse(JSON.stringify(points));\n}\n\nfunction copyPoints(points: ITouchPoints): ITouchPoints {\n  return JSON.parse(JSON.stringify(points));\n}\n\nfunction getMeanPoints(points: IPoints[]): IPoints {\n  return points.reduce(\n    (prev, curr) => {\n      return {\n        page: [\n          prev.page[0] + curr.page[0] / points.length,\n          prev.page[1] + curr.page[1] / points.length,\n        ],\n        client: [\n          prev.client[0] + curr.client[0] / points.length,\n          prev.client[1] + curr.client[1] / points.length,\n        ],\n        canvas: [\n          prev.canvas[0] + curr.canvas[0] / points.length,\n          prev.canvas[1] + curr.canvas[1] / points.length,\n        ],\n        world: [\n          prev.world[0] + curr.world[0] / points.length,\n          prev.world[1] + curr.world[1] / points.length,\n          prev.world[2] + curr.world[2] / points.length,\n        ],\n      };\n    },\n    {\n      page: [0, 0],\n      client: [0, 0],\n      canvas: [0, 0],\n      world: [0, 0, 0],\n    }\n  );\n}\n\nfunction getMeanTouchPoints(points: ITouchPoints[]): ITouchPoints {\n  return points.reduce(\n    (prev, curr) => {\n      return {\n        page: [\n          prev.page[0] + curr.page[0] / points.length,\n          prev.page[1] + curr.page[1] / points.length,\n        ],\n        client: [\n          prev.client[0] + curr.client[0] / points.length,\n          prev.client[1] + curr.client[1] / points.length,\n        ],\n        canvas: [\n          prev.canvas[0] + curr.canvas[0] / points.length,\n          prev.canvas[1] + curr.canvas[1] / points.length,\n        ],\n        world: [\n          prev.world[0] + curr.world[0] / points.length,\n          prev.world[1] + curr.world[1] / points.length,\n          prev.world[2] + curr.world[2] / points.length,\n        ],\n        touch: {\n          identifier: null,\n          radiusX: prev.touch.radiusX + curr.touch.radiusX / points.length,\n          radiusY: prev.touch.radiusY + curr.touch.radiusY / points.length,\n          force: prev.touch.force + curr.touch.force / points.length,\n          rotationAngle:\n            prev.touch.rotationAngle + curr.touch.rotationAngle / points.length,\n        },\n      };\n    },\n    {\n      page: [0, 0],\n      client: [0, 0],\n      canvas: [0, 0],\n      world: [0, 0, 0],\n      touch: {\n        identifier: null,\n        radiusX: 0,\n        radiusY: 0,\n        force: 0,\n        rotationAngle: 0,\n      },\n    }\n  );\n}\n/**\n * _subtractPoints - Subtracts `point1` from `point0`.\n * @param point0 - The first point.\n * @param point1 - The second point to subtract from the first.\n *\n * @returns The difference.\n */\nfunction _subtractPoints2D(\n  point0: Types.Point2,\n  point1: Types.Point2\n): Types.Point2 {\n  return [point0[0] - point1[0], point0[1] - point1[1]];\n}\n\nfunction _subtractPoints3D(\n  point0: Types.Point3,\n  point1: Types.Point3\n): Types.Point3 {\n  return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\n\nfunction _getMeanDistanceBetweenAllIPoints(points: IPoints[]): IDistance {\n  // get mean distance between all unordered pairs of points\n  const pairedDistance: IDistance[] = [];\n  for (let i = 0; i < points.length; i++) {\n    for (let j = 0; j < points.length; j++) {\n      if (i < j) {\n        pairedDistance.push({\n          page: _getDistance2D(points[i].page, points[j].page),\n          client: _getDistance2D(points[i].client, points[j].client),\n          canvas: _getDistance2D(points[i].canvas, points[j].canvas),\n          world: _getDistance3D(points[i].world, points[j].world),\n        });\n      }\n    }\n  }\n\n  // take the average distance\n  return pairedDistance.reduce(\n    (prev, curr) => {\n      return {\n        page: prev.page + curr.page / pairedDistance.length,\n        client: prev.client + curr.client / pairedDistance.length,\n        canvas: prev.canvas + curr.canvas / pairedDistance.length,\n        world: prev.world + curr.world / pairedDistance.length,\n      };\n    },\n    {\n      page: 0,\n      client: 0,\n      canvas: 0,\n      world: 0,\n    }\n  );\n}\n\nfunction _getDistance2D(point0: Types.Point2, point1: Types.Point2): number {\n  return Math.sqrt(\n    Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2)\n  );\n}\n\nfunction _getDistance3D(point0: Types.Point3, point1: Types.Point3): number {\n  return Math.sqrt(\n    Math.pow(point0[0] - point1[0], 2) +\n      Math.pow(point0[1] - point1[1], 2) +\n      Math.pow(point0[2] - point1[2], 2)\n  );\n}\n\nexport {\n  getMeanPoints,\n  getMeanTouchPoints,\n  copyPoints,\n  copyPointsList,\n  getDeltaDistanceBetweenIPoints,\n  getDeltaPoints,\n  getDeltaDistance,\n  getDeltaRotation,\n};\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport { Swipe } from '../../enums/Touch';\n\nimport { EventTypes, ITouchPoints, IPoints, IDistance } from '../../types';\n\nimport getTouchEventPoints from './getTouchEventPoints';\nimport {\n  copyPoints,\n  copyPointsList,\n  getDeltaDistanceBetweenIPoints,\n  getDeltaDistance,\n  getDeltaPoints,\n  getMeanTouchPoints,\n  // getRotation\n} from '../../utilities/touch';\nimport { Settings } from '@cornerstonejs/core';\n\nconst runtimeSettings = Settings.getRuntimeSettings();\n\nconst {\n  TOUCH_START,\n  TOUCH_START_ACTIVATE,\n  TOUCH_PRESS,\n  TOUCH_DRAG,\n  TOUCH_END,\n  TOUCH_TAP,\n  TOUCH_SWIPE,\n} = Events;\n\ninterface ITouchTapListnenerState {\n  element: HTMLDivElement;\n  renderingEngineId: string;\n  viewportId: string;\n  startPointsList: ITouchPoints[];\n  tapMaxDistance: number;\n  tapTimeout: ReturnType<typeof setTimeout>;\n  taps: number;\n  tapToleranceMs: number;\n}\n\ninterface ITouchStartListenerState {\n  element: HTMLDivElement;\n  renderingEngineId: string;\n  viewportId: string;\n  startPointsList: ITouchPoints[];\n  lastPointsList: ITouchPoints[];\n\n  // only trigger one touch event in the case the user puts down multiple fingers\n  isTouchStart: boolean;\n  startTime: Date;\n\n  // handle long press\n  pressTimeout: ReturnType<typeof setTimeout>;\n  pressDelay: number;\n  pressMaxDistance: number;\n  accumulatedDistance: IDistance;\n\n  // handle swipes\n  swipeDistanceThreshold: number;\n  swiped: boolean;\n  swipeToleranceMs: number;\n}\n\nconst zeroIPoint: IPoints = {\n  page: [0, 0],\n  client: [0, 0],\n  canvas: [0, 0],\n  world: [0, 0, 0],\n};\n\nconst zeroIDistance: IDistance = {\n  page: 0,\n  client: 0,\n  canvas: 0,\n  world: 0,\n};\n\n// STATE\nconst defaultState: ITouchStartListenerState = {\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  element: null,\n  startPointsList: [\n    {\n      ...zeroIPoint,\n      touch: null,\n    },\n  ],\n  lastPointsList: [\n    {\n      ...zeroIPoint,\n      touch: null,\n    },\n  ],\n  isTouchStart: false,\n  startTime: null,\n\n  pressTimeout: null,\n  pressDelay: 700,\n  pressMaxDistance: 5,\n  accumulatedDistance: zeroIDistance,\n\n  swipeDistanceThreshold: 48,\n  swiped: false,\n  swipeToleranceMs: 300, // user has 300ms to swipe after touch start or no swipe will trigger\n};\n\n// TODO: these values should be configurable to handle different use cases such\n// as pen, left/right handed, index finger vs thumb, etc. These current values\n// assume thumb usage for single finger and index/middle finger for two finger\n// gestures in an attempt to cover the 90% use case.\nconst defaultTapState: ITouchTapListnenerState = {\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  element: null,\n  startPointsList: [\n    {\n      ...zeroIPoint,\n      touch: null,\n    },\n  ],\n  taps: 0,\n  tapTimeout: null,\n  tapMaxDistance: 24,\n  tapToleranceMs: 300,\n};\n\nlet state: ITouchStartListenerState = JSON.parse(JSON.stringify(defaultState));\nlet tapState: ITouchTapListnenerState = JSON.parse(\n  JSON.stringify(defaultTapState)\n);\n\nfunction triggerEventCallback(ele, name, eventDetail) {\n  if (runtimeSettings.get('debug')) {\n    if (name === 'CORNERSTONE_TOOLS_TOUCH_DRAG') {\n      console.debug(name);\n    } else {\n      console.debug(name, eventDetail);\n    }\n  }\n  return triggerEvent(ele, name, eventDetail);\n}\n\n/**\n * Listens to touch events from the DOM (touchstart, touchmove, touchend)\n * and depending on interaction and further interaction can emit the\n * following touch events:\n *\n * - TOUCH_START\n * - TOUCH_START_ACTIVATE\n * - TOUCH_PRESS\n * - TOUCH_DRAG (move while down)\n * - TOUCH_SWIPE\n * - TOUCH_END (also an end for multi touch)\n *\n * - TOUCH_TAP\n *\n * @param evt - The Touch event (touchstart).\n * @private\n */\nfunction touchStartListener(evt: TouchEvent) {\n  // if a user adds an extra finger when a touch/multi touch has already started\n  // don't trigger another touch.\n  state.element = <HTMLDivElement>evt.currentTarget;\n  const enabledElement = getEnabledElement(state.element);\n  const { renderingEngineId, viewportId } = enabledElement;\n  state.renderingEngineId = renderingEngineId;\n  state.viewportId = viewportId;\n  // this prevents multiple start firing\n  if (state.isTouchStart) return;\n  // this will clear on touchstart and touchend\n  clearTimeout(state.pressTimeout);\n  state.pressTimeout = setTimeout(() => _onTouchPress(evt), state.pressDelay);\n\n  _onTouchStart(evt);\n  document.addEventListener('touchmove', _onTouchDrag); // also checks for swipe\n  document.addEventListener('touchend', _onTouchEnd); // also checks for tap\n}\n\n/**\n * _onTouchPress - Handle emission of touchstart events which are held down for a longer\n * period of time\n *\n * @private\n * @param evt - The touch event (touchstart)\n */\nfunction _onTouchPress(evt: TouchEvent) {\n  const totalDistance = state.accumulatedDistance.canvas;\n  if (totalDistance > state.pressMaxDistance) return;\n  const eventDetail: EventTypes.TouchPressEventDetail = {\n    event: evt, // touchstart native event\n    eventName: TOUCH_PRESS,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    startPointsList: copyPointsList(state.startPointsList),\n    lastPointsList: copyPointsList(state.lastPointsList),\n    startPoints: copyPoints(getMeanTouchPoints(state.startPointsList)),\n    lastPoints: copyPoints(getMeanTouchPoints(state.lastPointsList)),\n  };\n  triggerEventCallback(eventDetail.element, TOUCH_PRESS, eventDetail);\n}\n\n/**\n * _onTouchStart - Handle emission of touchstart events.\n *\n * @private\n * @param evt - The touch event (touchstart)\n */\nfunction _onTouchStart(evt: TouchEvent) {\n  state.isTouchStart = true;\n  state.startTime = new Date();\n  const startPointsList = getTouchEventPoints(evt, state.element);\n  const startPoints = getMeanTouchPoints(startPointsList);\n  const deltaPoints = zeroIPoint;\n  const deltaDistance = zeroIDistance;\n  // deltaRotation same as deltaDistance but values are theta\n  const eventDetail: EventTypes.TouchStartEventDetail = {\n    event: evt,\n    eventName: TOUCH_START,\n    element: state.element,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    startPointsList: startPointsList,\n    lastPointsList: startPointsList,\n    currentPointsList: startPointsList,\n    startPoints: startPoints,\n    lastPoints: startPoints,\n    currentPoints: startPoints,\n    deltaPoints,\n    deltaDistance,\n    // deltaRotation\n  };\n\n  state.startPointsList = copyPointsList(eventDetail.startPointsList);\n  state.lastPointsList = copyPointsList(eventDetail.lastPointsList);\n  // by triggering TOUCH_START it checks if this is toolSelection, handle modification etc.\n  // of already existing tools\n  const eventDidPropagate = triggerEventCallback(\n    eventDetail.element,\n    TOUCH_START,\n    eventDetail\n  );\n\n  // if no tools responded to this event and prevented its default propagation behavior,\n  // create a new tool\n  if (eventDidPropagate) {\n    triggerEventCallback(\n      eventDetail.element,\n      TOUCH_START_ACTIVATE,\n      eventDetail\n    );\n  }\n}\n\n/**\n * _onTouchDrag - Handle emission of drag events whilst the touch is depressed.\n *\n * @private\n * @param evt - The touch event (touchmove)\n */\nfunction _onTouchDrag(evt: TouchEvent) {\n  const currentPointsList = getTouchEventPoints(evt, state.element);\n  const lastPointsList = _updateTouchEventsLastPoints(\n    state.element,\n    state.lastPointsList\n  );\n\n  const deltaPoints =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaPoints(currentPointsList, lastPointsList)\n      : zeroIPoint;\n\n  const deltaDistance =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaDistanceBetweenIPoints(currentPointsList, lastPointsList)\n      : zeroIDistance;\n\n  const totalDistance =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaDistance(currentPointsList, state.lastPointsList)\n      : zeroIDistance;\n\n  state.accumulatedDistance = {\n    page: state.accumulatedDistance.page + totalDistance.page,\n    client: state.accumulatedDistance.client + totalDistance.client,\n    canvas: state.accumulatedDistance.canvas + totalDistance.canvas,\n    world: state.accumulatedDistance.world + totalDistance.world,\n  };\n\n  /**\n   * this is can be uncommented to make dragging smoother. In the future, these values\n   * should be in a configuration file. There may also need to be different\n   * profiles for left handed and right handed thumb use. These values\n   * are currently optimized for left handed use.\n   *\n   * const clamp = (num) => Math.min(Math.max(num, -15), 10);\n   * const deltaDistanceClamped = \\{\n   *     page: clamp(deltaDistance.page),\n   *     client: clamp(deltaDistance.client),\n   *     canvas: clamp(deltaDistance.canvas),\n   *     world: clamp(deltaDistance.world),\n   * \\};\n   */\n\n  const eventDetail: EventTypes.TouchDragEventDetail = {\n    event: evt,\n    eventName: TOUCH_DRAG,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    startPoints: getMeanTouchPoints(state.startPointsList),\n    lastPoints: getMeanTouchPoints(lastPointsList),\n    currentPoints: getMeanTouchPoints(currentPointsList),\n    startPointsList: copyPointsList(state.startPointsList),\n    lastPointsList: copyPointsList(lastPointsList),\n    currentPointsList,\n    deltaPoints: deltaPoints,\n    deltaDistance: deltaDistance,\n  };\n\n  triggerEventCallback(state.element, TOUCH_DRAG, eventDetail);\n\n  // check for swipe events\n  _checkTouchSwipe(evt, deltaPoints);\n\n  // Update the last points\n  state.lastPointsList = copyPointsList(currentPointsList);\n}\n\n/**\n * _onTouchEnd - Handle emission of touch end events\n *\n * @private\n * @param evt - The touch event.\n */\nfunction _onTouchEnd(evt: TouchEvent): void {\n  // in case it was a tap event we don't want to fire the cornerstone normalized\n  // touch end event if the touch start never happend\n  clearTimeout(state.pressTimeout);\n  const currentPointsList = getTouchEventPoints(evt, state.element);\n  const lastPointsList = _updateTouchEventsLastPoints(\n    state.element,\n    state.lastPointsList\n  );\n  const deltaPoints =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaPoints(currentPointsList, lastPointsList)\n      : getDeltaPoints(currentPointsList, currentPointsList);\n  const deltaDistance =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaDistanceBetweenIPoints(currentPointsList, lastPointsList)\n      : getDeltaDistanceBetweenIPoints(currentPointsList, currentPointsList);\n  const eventDetail: EventTypes.TouchEndEventDetail = {\n    event: evt,\n    eventName: TOUCH_END,\n    element: state.element,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    startPointsList: copyPointsList(state.startPointsList),\n    lastPointsList: copyPointsList(lastPointsList),\n    currentPointsList,\n    startPoints: getMeanTouchPoints(state.startPointsList),\n    lastPoints: getMeanTouchPoints(lastPointsList),\n    currentPoints: getMeanTouchPoints(currentPointsList),\n    deltaPoints,\n    deltaDistance,\n  };\n\n  triggerEventCallback(eventDetail.element, TOUCH_END, eventDetail);\n  _checkTouchTap(evt);\n\n  // reset to default state\n  state = JSON.parse(JSON.stringify(defaultState));\n  document.removeEventListener('touchmove', _onTouchDrag);\n  document.removeEventListener('touchend', _onTouchEnd);\n}\n\nfunction _checkTouchTap(evt: TouchEvent): void {\n  const currentTime = new Date().getTime();\n  const startTime = state.startTime.getTime();\n  if (currentTime - startTime > tapState.tapToleranceMs) return;\n\n  // first tap, initialize the state\n  if (tapState.taps === 0) {\n    tapState.element = state.element;\n    tapState.renderingEngineId = state.renderingEngineId;\n    tapState.viewportId = state.viewportId;\n    tapState.startPointsList = state.startPointsList;\n  }\n\n  // subsequent tap is on a different element\n  if (\n    tapState.taps > 0 &&\n    !(\n      tapState.element == state.element &&\n      tapState.renderingEngineId == state.renderingEngineId &&\n      tapState.viewportId == state.viewportId\n    )\n  ) {\n    return;\n  }\n\n  const currentPointsList = getTouchEventPoints(evt, tapState.element);\n  const distanceFromStart = getDeltaDistance(\n    currentPointsList,\n    tapState.startPointsList\n  ).canvas;\n\n  // if the tap is too far from starting tap, we can ignore it.\n  // TODO: in the case the user means to tap in two separate areas within the\n  // tapTolerance (300ms), the second tap will not trigger. This is because it\n  // is ignored below for simplicity to track multiple taps (double, triple etc)\n  // in order to support two separate single taps that occur < 300ms on the\n  // screen. One can create the concept of \"TapChains\". Our current implementation\n  // only supports a single tap chain on the screen. You can think of it as a\n  // region where the user has the option to perform unlimited multitaps as long\n  // as they are < the tapToleranceMs value. So a tap somewhere else on the screen\n  // that is > the tapMaxDistance will start a separate and new \"TapChain\".\n  if (distanceFromStart > tapState.tapMaxDistance) return;\n\n  clearTimeout(tapState.tapTimeout);\n  tapState.taps += 1;\n\n  tapState.tapTimeout = setTimeout(() => {\n    const eventDetail: EventTypes.TouchTapEventDetail = {\n      event: evt,\n      eventName: TOUCH_TAP,\n      element: tapState.element,\n      renderingEngineId: tapState.renderingEngineId,\n      viewportId: tapState.viewportId,\n      camera: {},\n      currentPointsList,\n      currentPoints: getMeanTouchPoints(currentPointsList),\n      taps: tapState.taps,\n    };\n    triggerEventCallback(eventDetail.element, TOUCH_TAP, eventDetail);\n    tapState = JSON.parse(JSON.stringify(defaultTapState));\n  }, tapState.tapToleranceMs);\n}\n\nfunction _checkTouchSwipe(evt: TouchEvent, deltaPoints: IPoints) {\n  const currentTime = new Date().getTime();\n  const startTime = state.startTime.getTime();\n  if (state.swiped || currentTime - startTime > state.swipeToleranceMs) return;\n  const [x, y] = deltaPoints.canvas;\n  const eventDetail: EventTypes.TouchSwipeEventDetail = {\n    event: evt,\n    eventName: TOUCH_SWIPE,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    swipe: null,\n  };\n  if (Math.abs(x) > state.swipeDistanceThreshold) {\n    eventDetail.swipe = x > 0 ? Swipe.RIGHT : Swipe.LEFT;\n    triggerEventCallback(eventDetail.element, TOUCH_SWIPE, eventDetail);\n    state.swiped = true;\n  }\n\n  if (Math.abs(y) > state.swipeDistanceThreshold) {\n    eventDetail.swipe = y > 0 ? Swipe.DOWN : Swipe.UP;\n    triggerEventCallback(eventDetail.element, TOUCH_SWIPE, eventDetail);\n    state.swiped = true;\n  }\n}\n\n/**\n * Recalculates the last world coordinate, as the linear transform from client\n * to world could be different if the camera was updated.\n * @param element - The HTML element\n * @param lastPoints - The last points\n */\nfunction _updateTouchEventsLastPoints(\n  element: HTMLDivElement,\n  lastPoints: ITouchPoints[]\n): ITouchPoints[] {\n  const { viewport } = getEnabledElement(element);\n  // Need to update the world point to be calculated from the current reference frame,\n  // Which might have changed since the last interaction.\n  return lastPoints.map((lp) => {\n    const world = viewport.canvasToWorld(lp.canvas);\n    return {\n      page: lp.page,\n      client: lp.client,\n      canvas: lp.canvas,\n      world,\n      touch: lp.touch,\n    };\n  });\n}\n\nexport default touchStartListener;\n","import preventGhostClick from './preventGhostClick';\nimport touchStartListener from './touchStartListener';\n\n/**\n * Removes touch event listeners for native touch event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to remove event listeners from.\n */\nfunction disable(element: HTMLDivElement): void {\n  preventGhostClick.disable(element);\n  element.removeEventListener('touchstart', touchStartListener);\n}\n\n/**\n * Registers touch event listeners for native touch event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to register event listeners on.\n */\nfunction enable(element: HTMLDivElement): void {\n  // Prevent handlers from being attached multiple times\n  disable(element);\n  preventGhostClick.enable(element);\n  element.addEventListener('touchstart', touchStartListener, {\n    passive: false,\n  });\n}\n\nexport default {\n  enable,\n  disable,\n};\n","// Reasonable defaults\nconst PIXEL_STEP = 10;\nconst LINE_HEIGHT = 40;\nconst PAGE_HEIGHT = 800;\n\n/**\n * Normalizes wheel events and provides properties that are more\n * consistent and helpful across different browsers\n *\n * @param event - the original mouse event\n * @returns a normalized eventDetail\n */\nexport default function normalizeWheel(event) {\n  let spinX = 0,\n    spinY = 0,\n    pixelX = 0,\n    pixelY = 0;\n\n  // Legacy\n  if ('detail' in event) {\n    spinY = event.detail;\n  }\n  if ('wheelDelta' in event) {\n    spinY = -event.wheelDelta / 120;\n  }\n  if ('wheelDeltaY' in event) {\n    spinY = -event.wheelDeltaY / 120;\n  }\n  if ('wheelDeltaX' in event) {\n    spinX = -event.wheelDeltaX / 120;\n  }\n\n  pixelX = spinX * PIXEL_STEP;\n  pixelY = spinY * PIXEL_STEP;\n\n  if ('deltaY' in event) {\n    pixelY = event.deltaY;\n  }\n  if ('deltaX' in event) {\n    pixelX = event.deltaX;\n  }\n\n  if ((pixelX || pixelY) && event.deltaMode) {\n    if (event.deltaMode === 1) {\n      // Delta in LINE units\n      pixelX *= LINE_HEIGHT;\n      pixelY *= LINE_HEIGHT;\n    } else {\n      // Delta in PAGE units\n      pixelX *= PAGE_HEIGHT;\n      pixelY *= PAGE_HEIGHT;\n    }\n  }\n\n  // Fall-back if spin cannot be determined\n  if (pixelX && !spinX) {\n    spinX = pixelX < 1 ? -1 : 1;\n  }\n  if (pixelY && !spinY) {\n    spinY = pixelY < 1 ? -1 : 1;\n  }\n\n  return {\n    spinX,\n    spinY,\n    pixelX,\n    pixelY,\n  };\n}\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport normalizeWheel from './normalizeWheel';\nimport Events from '../../enums/Events';\n// ~~ VIEWPORT LIBRARY\nimport getMouseEventPoints from '../mouse/getMouseEventPoints';\nimport { MouseWheelEventDetail } from '../../types/EventTypes';\n\n/**\n * wheelListener - Captures and normalizes mouse wheel events. Emits as a\n * cornerstoneTools3D mouse wheel event.\n * @param evt - The mouse wheel event.\n */\nfunction wheelListener(evt: WheelEvent) {\n  const element = <HTMLDivElement>evt.currentTarget;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  // Prevent triggering MouseWheel events that are not real scroll events:\n  // E.g. when clicking the MiddleMouseWheelButton, a deltaY of 0 is emitted.\n  // See https://github.com/cornerstonejs/cornerstoneTools/issues/935\n  if (evt.deltaY > -1 && evt.deltaY < 1) {\n    return;\n  }\n\n  evt.preventDefault();\n\n  const { spinX, spinY, pixelX, pixelY } = normalizeWheel(evt);\n  const direction = spinY < 0 ? -1 : 1;\n\n  const eventDetail: MouseWheelEventDetail = {\n    event: evt,\n    eventName: Events.MOUSE_WHEEL,\n    renderingEngineId,\n    viewportId,\n    element,\n    camera: {},\n    detail: evt,\n    wheel: {\n      spinX,\n      spinY,\n      pixelX,\n      pixelY,\n      direction,\n    },\n    points: getMouseEventPoints(evt),\n  };\n\n  triggerEvent(element, Events.MOUSE_WHEEL, eventDetail);\n}\n\nexport default wheelListener;\n","import wheelListener from './wheelListener';\n\n/**\n * Listens for the wheel event, and handles it. Handled event\n * will be \"normalized\" and re-emitted as `Events.MOUSE_WHEEL`\n *\n * @param element - The HTML element\n */\nfunction enable(element: HTMLDivElement) {\n  disable(element);\n  element.addEventListener('wheel', wheelListener, { passive: false });\n}\n\n/**\n * Removes listener and handler for wheel event. `Events.MOUSE_WHEEL`\n * will no longer be emitted.\n *\n * @param element - THe HTML element\n */\nfunction disable(element: HTMLDivElement) {\n  element.removeEventListener('wheel', wheelListener);\n}\n\nexport default {\n  enable,\n  disable,\n};\n","import _cloneDeep from 'lodash.clonedeep';\nimport { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport { KeyDownEventDetail, KeyUpEventDetail } from '../../types/EventTypes';\n\ninterface IKeyDownListenerState {\n  renderingEngineId: string;\n  viewportId: string;\n  key: string | null;\n  keyCode: number | null;\n  element: HTMLDivElement;\n}\n\nconst defaultState: IKeyDownListenerState = {\n  //\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  key: undefined,\n  keyCode: undefined,\n  element: null,\n};\n\nlet state: IKeyDownListenerState = {\n  //\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  key: undefined,\n  keyCode: undefined,\n  element: null,\n};\n\n/**\n * Normalizes the keyboard event and triggers KEY_DOWN event from CornerstoneTools3D events\n * @param evt - DOM Keyboard event\n */\nfunction keyListener(evt: KeyboardEvent): void {\n  state.element = <HTMLDivElement>evt.currentTarget;\n\n  const enabledElement = getEnabledElement(state.element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  state.renderingEngineId = renderingEngineId;\n  state.viewportId = viewportId;\n  state.key = evt.key;\n  state.keyCode = evt.keyCode;\n\n  evt.preventDefault();\n  const eventDetail: KeyDownEventDetail = {\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    element: state.element,\n    key: state.key,\n    keyCode: state.keyCode,\n\n    // detail: evt,\n    // Todo: mouse event points can be used later for placing tools with a key\n    // e.g., putting an arrow/probe/etc. on the mouse position. Another use case\n    // hovering and deleting the tool\n    // points: getMouseEventPoints(evt),\n  };\n\n  triggerEvent(eventDetail.element, Events.KEY_DOWN, eventDetail);\n\n  document.addEventListener('keyup', _onKeyUp);\n\n  // Todo: handle combination of keys\n  state.element.removeEventListener('keydown', keyListener);\n}\n\nfunction _onKeyUp(evt: KeyboardEvent): void {\n  const eventDetail: KeyUpEventDetail = {\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    element: state.element,\n    key: state.key,\n    keyCode: state.keyCode,\n    // detail: evt,\n  };\n\n  // Remove our temporary handlers\n  document.removeEventListener('keyup', _onKeyUp);\n  state.element.addEventListener('keydown', keyListener);\n\n  // Restore `state` to `defaultState`\n  state = _cloneDeep(defaultState);\n  triggerEvent(eventDetail.element, Events.KEY_UP, eventDetail);\n}\n\nexport function getModifierKey(): number | undefined {\n  return state.keyCode;\n}\n\nexport function resetModifierKey(): void {\n  state.keyCode = undefined;\n}\n\nexport default keyListener;\n","import keyDownListener, { getModifierKey } from './keyDownListener';\n\nfunction enable(element: HTMLDivElement): void {\n  disable(element);\n  element.addEventListener('keydown', keyDownListener);\n}\n\nfunction disable(element: HTMLDivElement): void {\n  element.removeEventListener('keydown', keyDownListener);\n}\n\nexport default {\n  enable,\n  disable,\n  getModifierKey,\n};\n","/**\n * Cornerstone Color LUT used for Segmentations\n */\nconst CORNERSTONE_COLOR_LUT = [\n  [0, 0, 0, 0],\n  [221, 84, 84, 255],\n  [77, 228, 121, 255],\n  [166, 70, 235, 255],\n  [189, 180, 116, 255],\n  [109, 182, 196, 255],\n  [204, 101, 157, 255],\n  [123, 211, 94, 255],\n  [93, 87, 218, 255],\n  [225, 128, 80, 255],\n  [73, 232, 172, 255],\n  [181, 119, 186, 255],\n  [176, 193, 112, 255],\n  [105, 153, 200, 255],\n  [208, 97, 120, 255],\n  [90, 215, 101, 255],\n  [135, 83, 222, 255],\n  [229, 178, 76, 255],\n  [122, 183, 181, 255],\n  [190, 115, 171, 255],\n  [149, 197, 108, 255],\n  [100, 118, 205, 255],\n  [212, 108, 93, 255],\n  [86, 219, 141, 255],\n  [183, 79, 226, 255],\n  [233, 233, 72, 255],\n  [118, 167, 187, 255],\n  [194, 111, 146, 255],\n  [116, 201, 104, 255],\n  [115, 96, 209, 255],\n  [216, 147, 89, 255],\n  [82, 223, 188, 255],\n  [230, 75, 224, 255],\n  [163, 184, 121, 255],\n  [114, 143, 191, 255],\n  [198, 107, 114, 255],\n  [99, 206, 122, 255],\n  [153, 92, 213, 255],\n  [220, 192, 85, 255],\n  [78, 215, 227, 255],\n  [234, 71, 173, 255],\n  [141, 188, 117, 255],\n  [110, 113, 195, 255],\n  [202, 128, 103, 255],\n  [95, 210, 157, 255],\n  [195, 88, 217, 255],\n  [206, 224, 81, 255],\n  [74, 166, 231, 255],\n  [185, 120, 139, 255],\n  [113, 192, 113, 255],\n  [133, 106, 199, 255],\n  [207, 162, 98, 255],\n  [91, 214, 198, 255],\n  [221, 84, 198, 255],\n  [159, 228, 77, 255],\n  [70, 111, 235, 255],\n  [189, 119, 116, 255],\n  [109, 196, 138, 255],\n  [165, 101, 204, 255],\n  [211, 201, 94, 255],\n  [87, 191, 218, 255],\n  [225, 80, 153, 255],\n  [106, 232, 73, 255],\n  [124, 119, 186, 255],\n  [193, 142, 112, 255],\n  [105, 200, 168, 255],\n  [203, 97, 208, 255],\n  [184, 215, 90, 255],\n  [83, 147, 222, 255],\n  [229, 76, 101, 255],\n  [122, 183, 130, 255],\n  [146, 115, 190, 255],\n  [197, 171, 108, 255],\n  [100, 205, 205, 255],\n  [212, 93, 177, 255],\n  [141, 219, 86, 255],\n  [79, 97, 226, 255],\n  [233, 99, 72, 255],\n  [118, 187, 150, 255],\n  [173, 111, 194, 255],\n  [197, 201, 104, 255],\n  [96, 171, 209, 255],\n  [216, 89, 137, 255],\n  [94, 223, 82, 255],\n  [107, 75, 230, 255],\n  [184, 153, 121, 255],\n  [114, 191, 175, 255],\n  [198, 107, 191, 255],\n  [166, 206, 99, 255],\n  [92, 132, 213, 255],\n  [220, 85, 91, 255],\n  [78, 227, 115, 255],\n  [159, 71, 234, 255],\n  [188, 176, 117, 255],\n  [110, 185, 195, 255],\n  [202, 103, 161, 255],\n  [129, 210, 95, 255],\n  [88, 88, 217, 255],\n  [224, 123, 81, 255],\n  [74, 231, 166, 255],\n  [177, 120, 185, 255],\n  [179, 192, 113, 255],\n  [106, 156, 199, 255],\n  [207, 98, 125, 255],\n  [91, 214, 96, 255],\n  [130, 84, 221, 255],\n  [228, 171, 77, 255],\n  [70, 235, 221, 255],\n  [189, 116, 174, 255],\n  [153, 196, 109, 255],\n  [101, 123, 204, 255],\n  [211, 104, 94, 255],\n  [87, 218, 136, 255],\n  [177, 80, 225, 255],\n  [232, 225, 73, 255],\n  [119, 169, 186, 255],\n  [193, 112, 149, 255],\n  [121, 200, 105, 255],\n  [111, 97, 208, 255],\n  [215, 142, 90, 255],\n  [83, 222, 181, 255],\n  [229, 76, 229, 255],\n  [165, 183, 122, 255],\n  [115, 146, 190, 255],\n  [197, 108, 119, 255],\n  [100, 205, 118, 255],\n  [148, 93, 212, 255],\n  [219, 186, 86, 255],\n  [79, 220, 226, 255],\n  [233, 72, 179, 255],\n  [144, 187, 118, 255],\n  [111, 118, 194, 255],\n  [201, 124, 104, 255],\n  [96, 209, 153, 255],\n  [189, 89, 216, 255],\n  [211, 223, 82, 255],\n  [75, 172, 230, 255],\n  [184, 121, 142, 255],\n  [117, 191, 114, 255],\n  [130, 107, 198, 255],\n  [206, 157, 99, 255],\n  [92, 213, 193, 255],\n  [220, 85, 203, 255],\n  [165, 227, 78, 255],\n  [71, 118, 234, 255],\n  [188, 117, 117, 255],\n  [110, 195, 135, 255],\n  [161, 103, 202, 255],\n  [210, 195, 95, 255],\n  [88, 195, 217, 255],\n  [224, 81, 158, 255],\n  [113, 231, 74, 255],\n  [123, 120, 185, 255],\n  [192, 139, 113, 255],\n  [106, 199, 164, 255],\n  [198, 98, 207, 255],\n  [188, 214, 91, 255],\n  [84, 153, 221, 255],\n  [228, 77, 108, 255],\n  [70, 235, 84, 255],\n  [143, 116, 189, 255],\n  [196, 167, 109, 255],\n  [101, 204, 199, 255],\n  [211, 94, 182, 255],\n  [147, 218, 87, 255],\n  [80, 104, 225, 255],\n  [232, 93, 73, 255],\n  [119, 186, 147, 255],\n  [170, 112, 193, 255],\n  [200, 200, 105, 255],\n  [97, 175, 208, 255],\n  [215, 90, 142, 255],\n  [100, 222, 83, 255],\n  [101, 76, 229, 255],\n  [183, 150, 122, 255],\n  [115, 190, 171, 255],\n  [197, 108, 194, 255],\n  [170, 205, 100, 255],\n  [93, 138, 212, 255],\n  [219, 86, 97, 255],\n  [79, 226, 110, 255],\n  [153, 72, 233, 255],\n  [187, 173, 118, 255],\n  [111, 187, 194, 255],\n  [201, 104, 165, 255],\n  [134, 209, 96, 255],\n  [89, 95, 216, 255],\n  [223, 117, 82, 255],\n  [75, 230, 159, 255],\n  [174, 121, 184, 255],\n  [182, 191, 114, 255],\n  [107, 160, 198, 255],\n  [206, 99, 130, 255],\n  [92, 213, 92, 255],\n  [124, 85, 220, 255],\n  [227, 165, 78, 255],\n  [71, 234, 214, 255],\n  [188, 117, 176, 255],\n  [156, 195, 110, 255],\n  [103, 128, 202, 255],\n  [210, 100, 95, 255],\n  [88, 217, 131, 255],\n  [170, 81, 224, 255],\n  [231, 218, 74, 255],\n  [120, 172, 185, 255],\n  [192, 113, 153, 255],\n  [125, 199, 106, 255],\n  [107, 98, 207, 255],\n  [214, 137, 91, 255],\n  [84, 221, 175, 255],\n  [222, 77, 228, 255],\n  [194, 235, 70, 255],\n  [116, 149, 189, 255],\n  [196, 109, 123, 255],\n  [101, 204, 114, 255],\n  [143, 94, 211, 255],\n  [218, 180, 87, 255],\n  [80, 225, 225, 255],\n  [232, 73, 186, 255],\n  [147, 186, 119, 255],\n  [112, 122, 193, 255],\n  [200, 121, 105, 255],\n  [97, 208, 148, 255],\n  [184, 90, 215, 255],\n  [216, 222, 83, 255],\n  [76, 178, 229, 255],\n  [183, 122, 145, 255],\n  [121, 190, 115, 255],\n  [126, 108, 197, 255],\n  [205, 153, 100, 255],\n  [93, 212, 187, 255],\n  [219, 86, 208, 255],\n  [171, 226, 79, 255],\n  [72, 126, 233, 255],\n  [187, 118, 121, 255],\n  [111, 194, 132, 255],\n  [157, 104, 201, 255],\n  [209, 190, 96, 255],\n  [89, 200, 216, 255],\n  [223, 82, 164, 255],\n  [120, 230, 75, 255],\n  [121, 121, 184, 255],\n  [191, 136, 114, 255],\n  [107, 198, 160, 255],\n  [192, 99, 206, 255],\n  [193, 213, 92, 255],\n  [85, 158, 220, 255],\n  [227, 78, 115, 255],\n  [71, 234, 78, 255],\n  [141, 117, 188, 255],\n  [195, 163, 110, 255],\n  [103, 202, 194, 255],\n  [210, 95, 186, 255],\n  [153, 217, 88, 255],\n  [81, 111, 224, 255],\n];\n\nexport default CORNERSTONE_COLOR_LUT;\n","import { ContourConfig } from '../../../types/ContourTypes';\n\nconst defaultContourConfig: ContourConfig = {\n  renderOutline: true,\n  outlineWidthActive: 2,\n  outlineWidthInactive: 2,\n  outlineOpacity: 1,\n  outlineOpacityInactive: 0.85,\n  renderFill: true,\n  fillAlpha: 1,\n  fillAlphaInactive: 0,\n};\n\nfunction getDefaultContourConfig(): ContourConfig {\n  return defaultContourConfig;\n}\n\nexport default getDefaultContourConfig;\n","import { LabelmapConfig } from '../../../types/LabelmapTypes';\n\nconst defaultLabelmapConfig: LabelmapConfig = {\n  renderOutline: true,\n  outlineWidthActive: 3,\n  outlineWidthInactive: 2,\n  renderFill: true,\n  renderFillInactive: true,\n  fillAlpha: 0.7,\n  fillAlphaInactive: 0.65,\n  outlineOpacity: 1,\n  outlineOpacityInactive: 0.85,\n};\n\nfunction getDefaultLabelmapConfig(): LabelmapConfig {\n  return defaultLabelmapConfig;\n}\n\n// Checks if the labelmap config is valid, which means\n// if all the required fields are present and have the correct type\nfunction isValidLabelmapConfig(config): boolean {\n  return (\n    config &&\n    typeof config.renderOutline === 'boolean' &&\n    typeof config.outlineWidthActive === 'number' &&\n    typeof config.outlineWidthInactive === 'number' &&\n    typeof config.renderFill === 'boolean' &&\n    typeof config.renderFillInactive === 'boolean' &&\n    typeof config.fillAlpha === 'number' &&\n    typeof config.fillAlphaInactive === 'number' &&\n    typeof config.outlineOpacity === 'number' &&\n    typeof config.outlineOpacityInactive === 'number'\n  );\n}\n\nexport default getDefaultLabelmapConfig;\nexport { isValidLabelmapConfig };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport cloneDeep from 'lodash.clonedeep';\n\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\n\nimport { SegmentationRepresentations } from '../../enums';\nimport getDefaultContourConfig from '../../tools/displayTools/Contour/contourConfig';\nimport getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport type {\n  ColorLUT,\n  RepresentationConfig,\n  Segmentation,\n  SegmentationRepresentationConfig,\n  SegmentationState,\n  SegmentSpecificRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n  ToolGroupSpecificRepresentations,\n} from '../../types/SegmentationStateTypes';\n\n// Initialize the default configuration\n// Note: when we get other representations, we should set their default representations too.\nconst defaultLabelmapConfig = getDefaultLabelmapConfig();\nconst defaultContourConfig = getDefaultContourConfig();\n\nconst newGlobalConfig: SegmentationRepresentationConfig = {\n  renderInactiveSegmentations: true,\n  representations: {\n    [SegmentationRepresentations.Labelmap]: defaultLabelmapConfig,\n    [SegmentationRepresentations.Contour]: defaultContourConfig,\n  },\n};\n\n/* A default initial state for the segmentation manager. */\nconst initialDefaultState: SegmentationState = {\n  colorLUT: [],\n  segmentations: [],\n  globalConfig: newGlobalConfig,\n  toolGroups: {},\n};\n\n/**\n * The SegmentationStateManager Class is responsible for managing the state of the\n * segmentations. It stores the segmentations and toolGroup specific representations\n * of the segmentation. It also stores a global config and a toolGroup specific\n * config. Note that this is a singleton state manager.\n */\nexport default class SegmentationStateManager {\n  private state: SegmentationState;\n  public readonly uid: string;\n\n  constructor(uid?: string) {\n    if (!uid) {\n      uid = csUtils.uuidv4();\n    }\n    this.state = cloneDeep(initialDefaultState);\n    this.uid = uid;\n  }\n\n  /**\n   * It returns a copy of the current state of the segmentation\n   * @returns A deep copy of the state.\n   */\n  getState(): SegmentationState {\n    return this.state;\n  }\n\n  /**\n   * It returns an array of toolGroupIds currently in the segmentation state.\n   * @returns An array of strings.\n   */\n  getToolGroups(): string[] {\n    return Object.keys(this.state.toolGroups);\n  }\n\n  /**\n   * It returns the colorLUT at the specified index.\n   * @param lutIndex - The index of the color LUT to retrieve.\n   * @returns A ColorLUT object.\n   */\n  getColorLUT(lutIndex: number): ColorLUT | undefined {\n    return this.state.colorLUT[lutIndex];\n  }\n\n  /**\n   * Reset the state to the default state\n   */\n  resetState(): void {\n    this.state = cloneDeep(initialDefaultState);\n  }\n\n  /**\n   * Given a segmentation Id, return the segmentation state\n   * @param segmentationId - The id of the segmentation to get the data for.\n   * @returns - The segmentation data\n   */\n  getSegmentation(segmentationId: string): Segmentation | undefined {\n    return this.state.segmentations.find(\n      (segmentation) => segmentation.segmentationId === segmentationId\n    );\n  }\n\n  /**\n   * It adds a segmentation to the segmentations array.\n   * @param segmentation - Segmentation\n   */\n  addSegmentation(segmentation: Segmentation): void {\n    this._initDefaultColorLUTIfNecessary();\n\n    // Check if the segmentation already exists with the segmentationId\n    if (this.getSegmentation(segmentation.segmentationId)) {\n      throw new Error(\n        `Segmentation with id ${segmentation.segmentationId} already exists`\n      );\n    }\n\n    this.state.segmentations.push(segmentation);\n  }\n\n  /**\n   * Get the segmentation representations for a tool group\n   * @param toolGroupId - string\n   * @returns A list of segmentation representations.\n   */\n  getSegmentationRepresentations(\n    toolGroupId: string\n  ): ToolGroupSpecificRepresentations | undefined {\n    const toolGroupSegRepresentationsWithConfig =\n      this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupSegRepresentationsWithConfig) {\n      return;\n    }\n\n    return toolGroupSegRepresentationsWithConfig.segmentationRepresentations;\n  }\n\n  /**\n   * Add a new segmentation representation to the toolGroup's segmentation representations.\n   * @param toolGroupId - The Id of the tool group .\n   * @param segmentationRepresentation - The segmentation representation to add.\n   */\n  addSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentation: ToolGroupSpecificRepresentation\n  ): void {\n    // Initialize the default toolGroup state if not created yet\n    if (!this.state.toolGroups[toolGroupId]) {\n      this.state.toolGroups[toolGroupId] = {\n        segmentationRepresentations: [],\n        config: {} as SegmentationRepresentationConfig,\n      };\n    }\n\n    // local toolGroupSpecificSegmentationState\n    this.state.toolGroups[toolGroupId].segmentationRepresentations.push(\n      segmentationRepresentation\n    );\n\n    this._handleActiveSegmentation(toolGroupId, segmentationRepresentation);\n  }\n\n  /**\n   * Get the global config containing both representation config\n   * and render inactive segmentations config\n   * @returns The global config object.\n   */\n  getGlobalConfig(): SegmentationRepresentationConfig {\n    return this.state.globalConfig;\n  }\n\n  /**\n   * It sets the global segmentation config including both representation config\n   * and render inactive segmentations config\n   * @param config - The global configuration for the segmentations.\n   */\n  setGlobalConfig(config: SegmentationRepresentationConfig): void {\n    this.state.globalConfig = config;\n  }\n\n  /**\n   * Given a toolGroupId and a segmentationRepresentationUID, return the segmentation\n   * representation for that tool group.\n   * @param toolGroupId - The Id of the tool group\n   * @param segmentationRepresentationUID - string\n   * @returns The segmentation representation.\n   */\n  getSegmentationRepresentationByUID(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): ToolGroupSpecificRepresentation | undefined {\n    const toolGroupSegRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    const segmentationData = toolGroupSegRepresentations.find(\n      (representation) =>\n        representation.segmentationRepresentationUID ===\n        segmentationRepresentationUID\n    );\n\n    return segmentationData;\n  }\n\n  /**\n   * It removes the segmentation from the segmentation state.\n   * @param segmentationId - The id of the segmentation to remove.\n   */\n  removeSegmentation(segmentationId: string): void {\n    this.state.segmentations = this.state.segmentations.filter(\n      (segmentation) => segmentation.segmentationId !== segmentationId\n    );\n  }\n\n  /**\n   * Remove a segmentation representation from the toolGroup\n   * @param toolGroupId - The Id of the tool group\n   * @param segmentationRepresentationUID - the uid of the segmentation representation to remove\n   * @param immediate - If true, the viewport will be updated immediately.\n   */\n  removeSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): void {\n    const toolGroupSegmentationRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      !toolGroupSegmentationRepresentations.length\n    ) {\n      throw new Error(\n        `No viewport specific segmentation state found for viewport ${toolGroupId}`\n      );\n    }\n\n    const state =\n      toolGroupSegmentationRepresentations as ToolGroupSpecificRepresentations;\n    const index = state.findIndex(\n      (segData) =>\n        segData.segmentationRepresentationUID === segmentationRepresentationUID\n    );\n\n    if (index === -1) {\n      console.warn(\n        `No viewport specific segmentation state data found for viewport ${toolGroupId} and segmentation data UID ${segmentationRepresentationUID}`\n      );\n    }\n\n    const removedSegmentationRepresentation =\n      toolGroupSegmentationRepresentations[index];\n\n    toolGroupSegmentationRepresentations.splice(index, 1);\n\n    this._handleActiveSegmentation(\n      toolGroupId,\n      removedSegmentationRepresentation\n    );\n  }\n\n  /**\n   * Set the active segmentation data for a tool group\n   * @param toolGroupId - The Id of the tool group that owns the\n   * segmentation data.\n   * @param segmentationRepresentationUID - string\n   */\n  setActiveSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): void {\n    const toolGroupSegmentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    if (!toolGroupSegmentations || !toolGroupSegmentations.length) {\n      throw new Error(\n        `No segmentation data found for toolGroupId: ${toolGroupId}`\n      );\n    }\n\n    const segmentationData = toolGroupSegmentations.find(\n      (segmentationData) =>\n        segmentationData.segmentationRepresentationUID ===\n        segmentationRepresentationUID\n    );\n\n    if (!segmentationData) {\n      throw new Error(\n        `No segmentation data found for segmentation data UID ${segmentationRepresentationUID}`\n      );\n    }\n\n    segmentationData.active = true;\n    this._handleActiveSegmentation(toolGroupId, segmentationData);\n  }\n\n  /**\n   * Given a tool group Id it returns the tool group specific representation config\n   *\n   * @param toolGroupId - The Id of the tool group\n   * @returns A SegmentationConfig object.\n   */\n  getToolGroupSpecificConfig(\n    toolGroupId: string\n  ): SegmentationRepresentationConfig | undefined {\n    const toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupStateWithConfig) {\n      return;\n    }\n\n    return toolGroupStateWithConfig.config;\n  }\n\n  getSegmentationRepresentationSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): RepresentationConfig {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    return segmentationRepresentation.segmentationRepresentationSpecificConfig;\n  }\n\n  setSegmentationRepresentationSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    config: RepresentationConfig\n  ): void {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    segmentationRepresentation.segmentationRepresentationSpecificConfig =\n      config;\n  }\n\n  getSegmentSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    segmentIndex: number\n  ): RepresentationConfig {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    return segmentationRepresentation.segmentSpecificConfig[segmentIndex];\n  }\n\n  setSegmentSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    config: SegmentSpecificRepresentationConfig\n  ): void {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    segmentationRepresentation.segmentSpecificConfig = config;\n  }\n\n  /**\n   * Set the segmentation representations config for a given tool group. It will create a new\n   * tool group specific config if one does not exist.\n   *\n   * @param toolGroupId - The Id of the tool group that the segmentation\n   * belongs to.\n   * @param config - SegmentationConfig\n   */\n  setSegmentationRepresentationConfig(\n    toolGroupId: string,\n    config: SegmentationRepresentationConfig\n  ): void {\n    let toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupStateWithConfig) {\n      this.state.toolGroups[toolGroupId] = {\n        segmentationRepresentations: [],\n        config: {\n          renderInactiveSegmentations: true,\n          representations: {},\n        },\n      };\n\n      toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n    }\n\n    toolGroupStateWithConfig.config = {\n      ...toolGroupStateWithConfig.config,\n      ...config,\n    };\n  }\n\n  /**\n   * It adds a color LUT to the state.\n   * @param colorLUT - ColorLUT\n   * @param lutIndex - The index of the color LUT table to add.\n   */\n  addColorLUT(colorLUT: ColorLUT, lutIndex: number): void {\n    if (this.state.colorLUT[lutIndex]) {\n      console.log('Color LUT table already exists, overwriting');\n    }\n\n    this.state.colorLUT[lutIndex] = colorLUT;\n  }\n\n  /**\n   * Removes a color LUT to the state.\n   * @param colorLUTIndex - The index of the color LUT table to remove.\n   */\n  removeColorLUT(colorLUTIndex: number): void {\n    delete this.state.colorLUT[colorLUTIndex];\n  }\n\n  /**\n   * It handles the active segmentation representation based on the active status of the\n   * segmentation representation that was added or removed.\n   *\n   * @param toolGroupId - The Id of the tool group that the segmentation representation belongs to.\n   * @param recentlyAddedOrRemovedSegmentationRepresentation - ToolGroupSpecificSegmentationData\n   */\n  _handleActiveSegmentation(\n    toolGroupId: string,\n    recentlyAddedOrRemovedSegmentationRepresentation: ToolGroupSpecificRepresentation\n  ): void {\n    const segmentationRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    // 1. If there is no segmentation representations, return early\n    if (segmentationRepresentations.length === 0) {\n      return;\n    }\n\n    // 2. If there is only one segmentation representation, make that one active\n    if (segmentationRepresentations.length === 1) {\n      segmentationRepresentations[0].active = true;\n      return;\n    }\n\n    // 3. If removed Segmentation representation was active, make the first one active\n    const activeSegmentationRepresentations =\n      segmentationRepresentations.filter(\n        (representation) => representation.active\n      );\n\n    if (activeSegmentationRepresentations.length === 0) {\n      segmentationRepresentations[0].active = true;\n      return;\n    }\n\n    // 4. If the added segmentation representation is active, make other segmentation\n    // representations inactive\n    if (recentlyAddedOrRemovedSegmentationRepresentation.active) {\n      segmentationRepresentations.forEach((representation) => {\n        if (\n          representation.segmentationRepresentationUID !==\n          recentlyAddedOrRemovedSegmentationRepresentation.segmentationRepresentationUID\n        ) {\n          representation.active = false;\n        }\n      });\n    }\n\n    // 5. if added/removed segmentation is is inactive, do nothing\n  }\n\n  _initDefaultColorLUTIfNecessary() {\n    // if colorLUTTable is not specified or the default one is not found\n    if (this.state.colorLUT.length === 0 || !this.state.colorLUT[0]) {\n      this.addColorLUT(CORNERSTONE_COLOR_LUT as ColorLUT, 0);\n    }\n  }\n}\n\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { defaultSegmentationStateManager };\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\n\nimport { Events } from '../../enums';\nimport {\n  getSegmentationRepresentations,\n  getSegmentations,\n} from '../../stateManagement/segmentation/segmentationState';\nimport {\n  SegmentationRepresentationModifiedEventDetail,\n  SegmentationDataModifiedEventDetail,\n  SegmentationModifiedEventDetail,\n  SegmentationRepresentationRemovedEventDetail,\n  SegmentationRemovedEventDetail,\n} from '../../types/EventTypes';\n\n/**\n * Trigger an event that a segmentation is removed\n * @param segmentationId - The Id of segmentation\n */\nfunction triggerSegmentationRemoved(segmentationId: string): void {\n  const eventDetail: SegmentationRemovedEventDetail = {\n    segmentationId,\n  };\n\n  triggerEvent(eventTarget, Events.SEGMENTATION_REMOVED, eventDetail);\n}\n\n/**\n * Trigger an event that a segmentation representation was removed\n * @param toolGroupId - The id of the tool group that the segmentation\n * representation was removed from.\n * @param segmentationRepresentationUID - The UID of the segmentation\n * representation that was removed.\n */\nfunction triggerSegmentationRepresentationRemoved(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const eventDetail: SegmentationRepresentationRemovedEventDetail = {\n    toolGroupId,\n    segmentationRepresentationUID,\n  };\n\n  triggerEvent(\n    eventTarget,\n    Events.SEGMENTATION_REPRESENTATION_REMOVED,\n    eventDetail\n  );\n}\n\n/**\n * Trigger an event on the eventTarget that the segmentation representation for\n * toolGroupId has been updated\n * @param toolGroupId - The Id of the toolGroup\n */\nfunction triggerSegmentationRepresentationModified(\n  toolGroupId: string,\n  segmentationRepresentationUID?: string\n): void {\n  const eventDetail: SegmentationRepresentationModifiedEventDetail = {\n    toolGroupId,\n    segmentationRepresentationUID,\n  };\n\n  if (segmentationRepresentationUID) {\n    triggerEvent(\n      eventTarget,\n      Events.SEGMENTATION_REPRESENTATION_MODIFIED,\n      eventDetail\n    );\n    return;\n  }\n\n  // If no segmentationRepresentationUID is provided, then we need to trigger\n  // the event for all segmentation representations in the toolGroup\n\n  // Get all segmentation representations in the toolGroup\n  const segmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId) || [];\n\n  segmentationRepresentations.forEach((segmentationRepresentation) => {\n    const { segmentationRepresentationUID } = segmentationRepresentation;\n    const eventDetail: SegmentationRepresentationModifiedEventDetail = {\n      toolGroupId,\n      segmentationRepresentationUID,\n    };\n\n    triggerEvent(\n      eventTarget,\n      Events.SEGMENTATION_REPRESENTATION_MODIFIED,\n      eventDetail\n    );\n  });\n}\n\n/**\n * Triggers segmentation global state updated event, notifying all toolGroups\n * that the global state has been updated, If a segmentationId is provided\n * the event will only be triggered for that segmentation, otherwise it will\n * be triggered for all segmentations.\n *\n * @param segmentationId - The id of the segmentation that has been updated\n */\nfunction triggerSegmentationModified(segmentationId?: string): void {\n  let segmentationIds;\n\n  if (segmentationId) {\n    segmentationIds = [segmentationId];\n  } else {\n    // get all toolGroups\n    segmentationIds = getSegmentations().map(\n      ({ segmentationId }) => segmentationId\n    );\n  }\n\n  // 1. Trigger an event notifying all listeners about the segmentationId\n  // that has been updated.\n  segmentationIds.forEach((segmentationId) => {\n    const eventDetail: SegmentationModifiedEventDetail = {\n      segmentationId,\n    };\n    triggerEvent(eventTarget, Events.SEGMENTATION_MODIFIED, eventDetail);\n  });\n\n  // Todo: I don't think we need the following lines of code\n  // // 2. Notify all viewports that render the segmentationId in order to update the\n  // // rendering based on the new global state.\n  // toolGroupIds.forEach((toolGroupId) => {\n  //   triggerSegmentationRepresentationModified(toolGroupId)\n  // })\n}\n\n/**\n * Trigger an event that a segmentation data has been modified\n * @param segmentationId - The Id of segmentation\n */\nfunction triggerSegmentationDataModified(\n  segmentationId: string,\n  modifiedSlicesToUse?: number[]\n): void {\n  const eventDetail: SegmentationDataModifiedEventDetail = {\n    segmentationId,\n    modifiedSlicesToUse,\n  };\n\n  triggerEvent(eventTarget, Events.SEGMENTATION_DATA_MODIFIED, eventDetail);\n}\n\nexport {\n  // ToolGroup Specific\n  triggerSegmentationRepresentationModified,\n  triggerSegmentationRepresentationRemoved,\n  // Global\n  triggerSegmentationDataModified,\n  triggerSegmentationModified,\n  triggerSegmentationRemoved,\n};\n","import {\n  SegmentationPublicInput,\n  Segmentation,\n} from '../../../types/SegmentationStateTypes';\n\n/**\n * It takes in a segmentation input and returns a segmentation with default values\n * @param segmentationInput - The input to the segmentation.\n * @returns A Segmentation object.\n * @internal\n */\nfunction normalizeSegmentationInput(\n  segmentationInput: SegmentationPublicInput\n): Segmentation {\n  const { segmentationId, representation } = segmentationInput;\n\n  // Todo: we should be able to let the user pass in non-default values for\n  // cachedStats, label, activeSegmentIndex, etc.\n  return {\n    segmentationId,\n    cachedStats: {},\n    segmentLabels: {},\n    label: null,\n    segmentsLocked: new Set(),\n    type: representation.type,\n    activeSegmentIndex: 1,\n    representationData: {\n      [representation.type]: {\n        ...representation.data,\n      },\n    },\n  };\n}\n\nexport default normalizeSegmentationInput;\n","import type {\n  ColorLUT,\n  RepresentationConfig,\n  Segmentation,\n  SegmentationPublicInput,\n  SegmentationRepresentationConfig,\n  SegmentSpecificRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n  ToolGroupSpecificRepresentations,\n} from '../../types/SegmentationStateTypes';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport {\n  triggerSegmentationModified,\n  triggerSegmentationRemoved,\n  triggerSegmentationRepresentationModified,\n  triggerSegmentationRepresentationRemoved,\n} from './triggerSegmentationEvents';\n\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\n\n/**\n * It returns the defaultSegmentationStateManager.\n */\nfunction getDefaultSegmentationStateManager() {\n  return defaultSegmentationStateManager;\n}\n\n/*************************\n *\n * Segmentation State\n *\n **************************/\n\n/**\n * Get the segmentation for the given segmentationId\n * @param segmentationId - The Id of the segmentation\n * @returns A GlobalSegmentationData object\n */\nfunction getSegmentation(segmentationId: string): Segmentation | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentation(segmentationId);\n}\n\n/**\n * Get the segmentations inside the state\n * @returns Segmentation array\n */\nfunction getSegmentations(): Segmentation[] | [] {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  const state = segmentationStateManager.getState();\n\n  return state.segmentations;\n}\n\n/**\n * It takes a segmentation input and adds it to the segmentation state manager\n * @param segmentationInput - The segmentation to add.\n * @param suppressEvents - If true, the event will not be triggered.\n */\nfunction addSegmentation(\n  segmentationInput: SegmentationPublicInput,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  const segmentation = normalizeSegmentationInput(segmentationInput);\n\n  segmentationStateManager.addSegmentation(segmentation);\n\n  if (!suppressEvents) {\n    triggerSegmentationModified(segmentation.segmentationId);\n  }\n}\n\n/**\n * Get the segmentation state for a tool group. It will return an array of\n * segmentation representation objects.\n * @param toolGroupId - The unique identifier of the tool group.\n * @returns An array of segmentation representation objects.\n */\nfunction getSegmentationRepresentations(\n  toolGroupId: string\n): ToolGroupSpecificRepresentations | [] {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n}\n\n/**\n * Get the tool group IDs that have a segmentation representation with the given\n * segmentationId\n * @param segmentationId - The id of the segmentation\n * @returns An array of tool group IDs.\n */\nfunction getToolGroupIdsWithSegmentation(segmentationId: string): string[] {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  const state = segmentationStateManager.getState();\n  const toolGroupIds = Object.keys(state.toolGroups);\n\n  const foundToolGroupIds = [];\n  toolGroupIds.forEach((toolGroupId) => {\n    const toolGroupSegmentationRepresentations =\n      segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n\n    toolGroupSegmentationRepresentations.forEach((representation) => {\n      if (representation.segmentationId === segmentationId) {\n        foundToolGroupIds.push(toolGroupId);\n      }\n    });\n  });\n\n  return foundToolGroupIds;\n}\n\n/**\n * Get the segmentation representations config for a given tool group\n * @param toolGroupId - The Id of the tool group that the segmentation\n * config belongs to.\n * @returns A SegmentationConfig object.\n */\nfunction getToolGroupSpecificConfig(\n  toolGroupId: string\n): SegmentationRepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getToolGroupSpecificConfig(toolGroupId);\n}\n\n/**\n * Set the segmentation representation config for the provided toolGroup. ToolGroup specific\n * configuration overwrites the global configuration for each representation.\n * It fires SEGMENTATION_REPRESENTATION_MODIFIED event if not suppressed.\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n * @param toolGroupId - The Id of the tool group that the segmentation\n * config is being set for.\n * @param config - The new configuration for the tool group.\n * @param suppressEvents - If true, the event will not be triggered.\n */\nfunction setToolGroupSpecificConfig(\n  toolGroupId: string,\n  config: SegmentationRepresentationConfig,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentationRepresentationConfig(\n    toolGroupId,\n    config\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(toolGroupId);\n  }\n}\n\n/**\n * It sets the segmentation representation specific config for all the segments\n * inside the segmentation.\n * @param segmentationRepresentationUID - The unique identifier of the segmentation representation.\n * @param config  - The new configuration for the segmentation representation it is an object with keys of\n * different representation types, and values of the configuration for each representation type.\n */\nfunction setSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: RepresentationConfig,\n  suppressEvents = false\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n  }\n}\n\n/**\n * It returns the segmentation representation specific config which is the same for all the segments\n * @param segmentationRepresentationUID - The unique identifier of the segmentation representation.\n * @returns - The segmentation representation specific config.\n */\nfunction getSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): RepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nfunction getSegmentSpecificRepresentationConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): RepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n}\n\nfunction setSegmentSpecificRepresentationConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: SegmentSpecificRepresentationConfig,\n  suppressEvents = false\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n\n  // Todo: this can be even more performant if we create a new event for\n  // triggering a specific segment config change.\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n  }\n}\n\n/**\n * Add the given segmentation representation data to the given tool group state. It fires\n * SEGMENTATION_REPRESENTATION_MODIFIED event if not suppressed.\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n *\n * @param toolGroupId - The Id of the tool group that the segmentation representation is for.\n * @param segmentationData - The data to add to the segmentation state.\n * @param suppressEvents - boolean\n */\nfunction addSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentation: ToolGroupSpecificRepresentation,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.addSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentation\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentation.segmentationRepresentationUID\n    );\n  }\n}\n\n/**\n * It returns the global segmentation config. Note that the toolGroup-specific\n * configuration has higher priority than the global configuration and overwrites\n * the global configuration for each representation.\n * @returns The global segmentation configuration for all segmentations.\n */\nfunction getGlobalConfig(): SegmentationRepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getGlobalConfig();\n}\n\n/**\n * Set the global segmentation configuration. It fires SEGMENTATION_MODIFIED\n * event if not suppressed.\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param config - The new global segmentation config.\n * @param suppressEvents - If true, the `segmentationGlobalStateModified` event will not be triggered.\n */\nfunction setGlobalConfig(\n  config: SegmentationRepresentationConfig,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setGlobalConfig(config);\n\n  if (!suppressEvents) {\n    triggerSegmentationModified();\n  }\n}\n\n/**\n * Get the segmentation data object for a given tool group and\n * segmentation data UID. It searches all the toolGroup specific segmentation\n * data objects and returns the first one that matches the UID.\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @returns Segmentation Data object.\n */\nfunction getSegmentationRepresentationByUID(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): ToolGroupSpecificRepresentation | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentationByUID(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * It removes the segmentation from the segmentation state manager\n *\n * @triggers SEGMENTATION_REMOVED\n *\n * @param segmentationId - The id of the segmentation\n */\nfunction removeSegmentation(segmentationId: string): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeSegmentation(segmentationId);\n  triggerSegmentationRemoved(segmentationId);\n}\n\n/**\n * Remove a segmentation representation from the segmentation state manager for a toolGroup.\n * It fires SEGMENTATION_REPRESENTATION_MODIFIED event.\n *\n * @triggers SEGMENTATION_REPRESENTATION_REMOVED\n *\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation to remove.\n * remove.\n * @param - immediate - If true, the viewports will be updated immediately.\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  triggerSegmentationRepresentationRemoved(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Add a color LUT to the segmentation state manager\n * @param colorLUT - The color LUT array to add.\n * @param index - The index of the color LUT to add.\n */\nfunction removeColorLUT(colorLUTIndex: number): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\n\n/**\n * Get the color lut for a given index\n * @param index - The index of the color lut to retrieve.\n * @returns A ColorLUT array.\n */\nfunction getColorLUT(index: number): ColorLUT | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getColorLUT(index);\n}\n\n/**\n * Add a color LUT to the segmentation state manager\n * @param colorLUT - The color LUT array to add.\n * @param index - The index of the color LUT to add.\n */\nfunction addColorLUT(colorLUT: ColorLUT, index: number): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.addColorLUT(colorLUT, index);\n  // Todo: trigger event color LUT added\n}\n\nexport {\n  getDefaultSegmentationStateManager,\n  // Segmentation\n  getSegmentation,\n  getSegmentations,\n  addSegmentation,\n  removeSegmentation,\n  // ToolGroup specific Segmentation Representation\n  getSegmentationRepresentations,\n  addSegmentationRepresentation,\n  removeSegmentationRepresentation,\n  // config\n  getToolGroupSpecificConfig,\n  setToolGroupSpecificConfig,\n  getGlobalConfig,\n  setGlobalConfig,\n  getSegmentationRepresentationSpecificConfig,\n  setSegmentationRepresentationSpecificConfig,\n  getSegmentSpecificRepresentationConfig,\n  setSegmentSpecificRepresentationConfig,\n  // helpers s\n  getToolGroupIdsWithSegmentation,\n  getSegmentationRepresentationByUID,\n  // color\n  addColorLUT,\n  getColorLUT,\n  removeColorLUT,\n};\n","import SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\n\nimport {\n  RepresentationConfig,\n  SegmentationRepresentationConfig,\n  SegmentSpecificRepresentationConfig,\n} from '../../../types/SegmentationStateTypes';\n\n/**\n * It returns the global segmentation config.\n * @returns The global segmentation config containing the representations\n * config for each representation type and renderInactiveSegmentations flag.\n */\nfunction getGlobalConfig(): SegmentationRepresentationConfig {\n  return SegmentationState.getGlobalConfig();\n}\n\n/**\n * Set the global segmentation config\n * @param segmentationConfig - SegmentationConfig\n */\nfunction setGlobalConfig(\n  segmentationConfig: SegmentationRepresentationConfig\n): void {\n  SegmentationState.setGlobalConfig(segmentationConfig);\n}\n\n/**\n * Given a representation type, return the corresponding global representation config\n * @param representationType - The type of representation to query\n * @returns A representation configuration object.\n */\nfunction getGlobalRepresentationConfig(\n  representationType: SegmentationRepresentations\n): RepresentationConfig['LABELMAP'] {\n  const globalConfig = getGlobalConfig();\n  return globalConfig.representations[representationType];\n}\n\n/**\n * Set the global configuration for a given representation type. It fires\n * a SEGMENTATION_MODIFIED event.\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param representationType - The type of representation to set config for\n * @param config - The configuration for the representation.\n */\nfunction setGlobalRepresentationConfig(\n  representationType: SegmentationRepresentations,\n  config: RepresentationConfig['LABELMAP']\n): void {\n  const globalConfig = getGlobalConfig();\n\n  setGlobalConfig({\n    ...globalConfig,\n    representations: {\n      ...globalConfig.representations,\n      [representationType]: {\n        ...globalConfig.representations[representationType],\n        ...config,\n      },\n    },\n  });\n}\n\n/**\n * Get the toolGroup specific segmentation config\n * @param toolGroupId - The Id of the tool group\n * @returns A SegmentationConfig object.\n */\nfunction getToolGroupSpecificConfig(\n  toolGroupId: string\n): SegmentationRepresentationConfig {\n  return SegmentationState.getToolGroupSpecificConfig(toolGroupId);\n}\n\n/**\n * Sets the tool group specific configuration for the segmentation\n * representation. This will apply to all segmentation representations.\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationConfig - This is the configuration object that you will use to set the default values for\n * the segmentation representation.\n */\nfunction setToolGroupSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationConfig: SegmentationRepresentationConfig\n): void {\n  SegmentationState.setToolGroupSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationConfig\n  );\n}\n\n/**\n * Give the segmentation representation UID, return the corresponding config\n * which is shared by all segments in the segmentation representation. This is\n * an optional level of configuration that can be set by the user, by default\n * it will fallback to the toolGroup specific config, if not set, it will fallback\n * to the global config.\n *\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param config - The configuration for the representation. This is an object\n * only containing the representation type as key and the config as value.\n * @returns - The configuration for the representation.\n */\nfunction getSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): RepresentationConfig {\n  return SegmentationState.getSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Set the segmentation representation specific configuration for the\n * segmentation representation. This will apply to all segments in the\n * segmentation representation and has higher priority than the toolGroup\n * specific config.\n *\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param config - The configuration for the representation. This is an object\n * only containing the representation type as key and the config as value.\n */\nfunction setSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: RepresentationConfig\n): void {\n  SegmentationState.setSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n}\n\n/**\n * Get the segment specific configuration for the segmentation representation.\n *\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationUID  - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment\n * @returns - The configuration for the segment index in the segmentation representation that is shown in the toolGroup's viewport\n */\nfunction getSegmentSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): RepresentationConfig {\n  return SegmentationState.getSegmentSpecificRepresentationConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n}\n\n/**\n * Set the segment specific configuration for the segmentation representation.\n * This configuration, if specified, has higher priority than the segmentation representation specific config,\n * and the toolGroup specific config. The order of priority is: segment specific config > segmentation representation specific config > toolGroup specific config > global config\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment\n * @param config - The configuration for the representation. This is an object\n */\nfunction setSegmentSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: SegmentSpecificRepresentationConfig\n): void {\n  SegmentationState.setSegmentSpecificRepresentationConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n}\n\nexport {\n  // Global\n  getGlobalConfig,\n  setGlobalConfig,\n  getGlobalRepresentationConfig,\n  setGlobalRepresentationConfig,\n  // ToolGroup Specific\n  getToolGroupSpecificConfig,\n  setToolGroupSpecificConfig,\n  // segmentation representation specific config\n  getSegmentationRepresentationSpecificConfig,\n  setSegmentationRepresentationSpecificConfig,\n  // segment specific config\n  getSegmentSpecificConfig,\n  setSegmentSpecificConfig,\n};\n","import {\n  getEnabledElement,\n  addVolumesToViewports,\n  Types,\n  Enums,\n} from '@cornerstonejs/core';\n\n/**\n * It adds a labelmap segmentation representation of the viewport's HTML Element.\n * NOTE: This function should not be called directly.\n *\n * @param element - The element that will be rendered.\n * @param volumeId - The volume id of the labelmap.\n * @param segmentationRepresentationUID - The segmentation representation UID.\n *\n * @internal\n */\nasync function addLabelmapToElement(\n  element: HTMLDivElement,\n  volumeId: string,\n  segmentationRepresentationUID: string\n): Promise<void> {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n  const { id: viewportId } = viewport;\n\n  // Default to true since we are setting a new segmentation, however,\n  // in the event listener, we will make other segmentations visible/invisible\n  // based on the config\n  const visibility = true;\n  const immediateRender = false;\n  const suppressEvents = true;\n\n  // Todo: Right now we use MIP blend mode for the labelmap, since the\n  // composite blend mode has a non linear behavior regarding fill and line\n  // opacity. This should be changed to a custom labelmap blendMode which does\n  // what composite does, but with a linear behavior.\n  const volumeInputs: Types.IVolumeInput[] = [\n    {\n      volumeId,\n      actorUID: segmentationRepresentationUID,\n      visibility,\n      blendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n    },\n  ];\n\n  // Add labelmap volumes to the viewports to be be rendered, but not force the render\n  await addVolumesToViewports(\n    renderingEngine,\n    volumeInputs,\n    [viewportId],\n    immediateRender,\n    suppressEvents\n  );\n}\n\nexport default addLabelmapToElement;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Remove the labelmap segmentation representation from the viewport's HTML Element.\n * NOTE: This function should not be called directly.\n *\n * @param element - The element that the segmentation is being added to.\n * @param segmentationRepresentationUID - The UID of the labelmap representation to remove.\n * @param removeFromCache - boolean\n *\n * @internal\n */\nfunction removeLabelmapFromElement(\n  element: HTMLDivElement,\n  segmentationRepresentationUID: string,\n  removeFromCache = false // Todo\n): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  (viewport as Types.IVolumeViewport).removeVolumeActors([\n    segmentationRepresentationUID,\n  ]);\n}\n\nexport default removeLabelmapFromElement;\n","import vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\n\nimport {\n  cache,\n  getEnabledElementByIds,\n  Types,\n  utilities,\n} from '@cornerstonejs/core';\n\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationConfig from '../../../stateManagement/segmentation/config/segmentationConfig';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../../store/ToolGroupManager';\nimport type {\n  LabelmapConfig,\n  LabelmapRenderingConfig,\n} from '../../../types/LabelmapTypes';\nimport {\n  RepresentationPublicInput,\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../../types/SegmentationStateTypes';\n\nimport addLabelmapToElement from './addLabelmapToElement';\n\nimport removeLabelmapFromElement from './removeLabelmapFromElement';\n\nconst MAX_NUMBER_COLORS = 255;\nconst labelMapConfigCache = new Map();\n\n/**\n * For each viewport, in the toolGroup it adds the segmentation labelmap\n * representation to its viewports.\n * @param toolGroup - the tool group that contains the viewports\n * @param representationInput - The segmentation representation input\n * @param toolGroupSpecificConfig - The configuration object for toolGroup\n *\n * @returns The UID of the new segmentation representation\n */\nasync function addSegmentationRepresentation(\n  toolGroupId: string,\n  representationInput: RepresentationPublicInput,\n  toolGroupSpecificConfig?: SegmentationRepresentationConfig\n): Promise<string> {\n  const { segmentationId } = representationInput;\n  const segmentationRepresentationUID = utilities.uuidv4();\n\n  // Todo: make these configurable during representation input by user\n  const segmentsHidden = new Set() as Set<number>;\n  const colorLUTIndex = 0;\n  const active = true;\n  const cfun = vtkColorTransferFunction.newInstance();\n  const ofun = vtkPiecewiseFunction.newInstance();\n\n  ofun.addPoint(0, 0);\n\n  const toolGroupSpecificRepresentation: ToolGroupSpecificRepresentation = {\n    segmentationId,\n    segmentationRepresentationUID,\n    type: Representations.Labelmap,\n    segmentsHidden,\n    colorLUTIndex,\n    active,\n    segmentationRepresentationSpecificConfig: {},\n    segmentSpecificConfig: {},\n    config: {\n      cfun,\n      ofun,\n    },\n  };\n\n  // Update the toolGroup specific configuration\n  if (toolGroupSpecificConfig) {\n    // Since setting configuration on toolGroup will trigger a segmentationRepresentation\n    // update event, we don't want to trigger the event twice, so we suppress\n    // the first one\n    const currentToolGroupConfig =\n      SegmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n\n    const mergedConfig = utilities.deepMerge(\n      currentToolGroupConfig,\n      toolGroupSpecificConfig\n    );\n\n    SegmentationConfig.setToolGroupSpecificConfig(toolGroupId, {\n      renderInactiveSegmentations:\n        mergedConfig.renderInactiveSegmentations || true,\n      representations: {\n        ...mergedConfig.representations,\n      },\n    });\n  }\n\n  SegmentationState.addSegmentationRepresentation(\n    toolGroupId,\n    toolGroupSpecificRepresentation\n  );\n\n  return segmentationRepresentationUID;\n}\n\n/**\n * For each viewport, and for each segmentation, set the segmentation for the viewport's enabled element\n * Initializes the global and viewport specific state for the segmentation in the\n * SegmentationStateManager.\n * @param toolGroup - the tool group that contains the viewports\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param renderImmediate - If true, there will be a render call after the labelmap is removed\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  renderImmediate = false\n): void {\n  _removeLabelmapFromToolGroupViewports(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n  SegmentationState.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  if (renderImmediate) {\n    const viewportsInfo = getToolGroup(toolGroupId).getViewportsInfo();\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      enabledElement.viewport.render();\n    });\n  }\n}\n\n/**\n * Checks if a segmentation data have the same frameOfReference as the series\n * displayed in a given viewport\n * @param viewport\n * @param referencedVolumeId volume id of the segmentation reference series\n * @returns\n */\nfunction isSameFrameOfReference(viewport, referencedVolumeId) {\n  // if the referencedVolumeId is not defined, we acted as before to not break\n  // applications as referencedVolumeId is inserted in this change\n  // Can modify that in the future commits\n  if (!referencedVolumeId) {\n    return true;\n  }\n  const defaultActor = viewport.getDefaultActor();\n  if (!defaultActor) {\n    return false;\n  }\n  const { uid: defaultActorUID } = defaultActor;\n  const volume = cache.getVolume(defaultActorUID);\n\n  if (volume) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (\n      referencedVolume &&\n      volume.metadata.FrameOfReferenceUID ===\n        referencedVolume.metadata.FrameOfReferenceUID\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * It takes the enabled element, the segmentation Id, and the configuration, and\n * it sets the segmentation for the enabled element as a labelmap\n * @param enabledElement - The cornerstone enabled element\n * @param segmentationId - The id of the segmentation to be rendered.\n * @param configuration - The configuration object for the labelmap.\n */\nasync function render(\n  viewport: Types.IVolumeViewport,\n  representation: ToolGroupSpecificRepresentation,\n  toolGroupConfig: SegmentationRepresentationConfig\n): Promise<void> {\n  const {\n    colorLUTIndex,\n    active,\n    segmentationId,\n    segmentationRepresentationUID,\n    segmentsHidden,\n    config: renderingConfig,\n  } = representation;\n\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n  const labelmapData =\n    segmentation.representationData[Representations.Labelmap];\n  const { volumeId: labelmapUID } = labelmapData;\n\n  const labelmap = cache.getVolume(labelmapUID);\n\n  if (!labelmap) {\n    throw new Error(`No Labelmap found for volumeId: ${labelmapUID}`);\n  }\n\n  if (!isSameFrameOfReference(viewport, labelmapData?.referencedVolumeId)) {\n    return;\n  }\n  let actorEntry = viewport.getActor(segmentationRepresentationUID);\n\n  if (!actorEntry) {\n    const segmentation = SegmentationState.getSegmentation(segmentationId);\n    const { volumeId } =\n      segmentation.representationData[Representations.Labelmap];\n    // only add the labelmap to ToolGroup viewports if it is not already added\n    await _addLabelmapToViewport(\n      viewport,\n      volumeId,\n      segmentationRepresentationUID\n    );\n\n    actorEntry = viewport.getActor(segmentationRepresentationUID);\n  }\n\n  if (!actorEntry) {\n    return;\n  }\n\n  const { cfun, ofun } = renderingConfig as LabelmapRenderingConfig;\n\n  const renderInactiveSegmentations =\n    toolGroupConfig.renderInactiveSegmentations;\n\n  _setLabelmapColorAndOpacity(\n    viewport.id,\n    actorEntry,\n    cfun,\n    ofun,\n    colorLUTIndex,\n    toolGroupConfig.representations[Representations.Labelmap],\n    representation,\n    active,\n    renderInactiveSegmentations,\n    segmentsHidden\n  );\n}\n\nfunction _setLabelmapColorAndOpacity(\n  viewportId: string,\n  actorEntry: Types.ActorEntry,\n  cfun: vtkColorTransferFunction,\n  ofun: vtkPiecewiseFunction,\n  colorLUTIndex: number,\n  toolGroupLabelmapConfig: LabelmapConfig,\n  segmentationRepresentation: ToolGroupSpecificRepresentation,\n  isActiveLabelmap: boolean,\n  renderInactiveSegmentations: boolean,\n  segmentsHidden: Set<number>\n): void {\n  const { segmentSpecificConfig, segmentationRepresentationSpecificConfig } =\n    segmentationRepresentation;\n\n  const segmentationRepresentationLabelmapConfig =\n    segmentationRepresentationSpecificConfig[Representations.Labelmap];\n\n  // Note: MAX_NUMBER_COLORS = 256 is needed because the current method to generate\n  // the default color table uses RGB.\n  const colorLUT = SegmentationState.getColorLUT(colorLUTIndex);\n  const numColors = Math.min(256, colorLUT.length);\n  const volumeActor = actorEntry.actor as Types.VolumeActor;\n  const { uid: actorUID } = actorEntry;\n\n  // Note: right now outlineWidth and renderOutline are not configurable\n  // at the segment level, so we don't need to check for segment specific\n  // configuration in the loop, Todo: make them configurable at the segment level\n  const { outlineWidth, renderOutline, outlineOpacity } = _getLabelmapConfig(\n    toolGroupLabelmapConfig,\n    segmentationRepresentationLabelmapConfig,\n    isActiveLabelmap\n  );\n\n  for (let i = 0; i < numColors; i++) {\n    const segmentIndex = i;\n    const segmentColor = colorLUT[segmentIndex];\n\n    const segmentSpecificLabelmapConfig =\n      segmentSpecificConfig[segmentIndex]?.[Representations.Labelmap];\n\n    const { fillAlpha, outlineWidth, renderFill, renderOutline } =\n      _getLabelmapConfig(\n        toolGroupLabelmapConfig,\n        segmentationRepresentationLabelmapConfig,\n        isActiveLabelmap,\n        segmentSpecificLabelmapConfig\n      );\n\n    const { forceOpacityUpdate, forceColorUpdate } =\n      _needsTransferFunctionUpdate(viewportId, actorUID, segmentIndex, {\n        fillAlpha,\n        renderFill,\n        renderOutline,\n        segmentColor,\n        outlineWidth,\n        segmentsHidden,\n      });\n\n    if (forceColorUpdate) {\n      cfun.addRGBPoint(\n        segmentIndex,\n        segmentColor[0] / MAX_NUMBER_COLORS,\n        segmentColor[1] / MAX_NUMBER_COLORS,\n        segmentColor[2] / MAX_NUMBER_COLORS\n      );\n    }\n\n    if (forceOpacityUpdate) {\n      if (renderFill) {\n        const segmentOpacity = segmentsHidden.has(segmentIndex)\n          ? 0\n          : (segmentColor[3] / 255) * fillAlpha;\n\n        ofun.removePoint(segmentIndex);\n        ofun.addPointLong(segmentIndex, segmentOpacity, 0.5, 1.0);\n      } else {\n        ofun.addPointLong(segmentIndex, 0.01, 0.5, 1.0);\n      }\n    }\n  }\n\n  volumeActor.getProperty().setRGBTransferFunction(0, cfun);\n\n  ofun.setClamping(false);\n  volumeActor.getProperty().setScalarOpacity(0, ofun);\n\n  volumeActor.getProperty().setInterpolationTypeToNearest();\n\n  volumeActor.getProperty().setUseLabelOutline(renderOutline);\n\n  // @ts-ignore: setLabelOutlineWidth is not in the vtk.d.ts apparently\n  volumeActor.getProperty().setLabelOutlineOpacity(outlineOpacity);\n  volumeActor.getProperty().setLabelOutlineThickness(outlineWidth);\n\n  // Set visibility based on whether actor visibility is specifically asked\n  // to be turned on/off (on by default) AND whether is is in active but\n  // we are rendering inactive labelmap\n  const visible = isActiveLabelmap || renderInactiveSegmentations;\n  volumeActor.setVisibility(visible);\n}\n\nfunction _getLabelmapConfig(\n  toolGroupLabelmapConfig: LabelmapConfig,\n  segmentationRepresentationLabelmapConfig: LabelmapConfig,\n  isActiveLabelmap: boolean,\n  segmentsLabelmapConfig?: LabelmapConfig\n) {\n  const segmentLabelmapConfig = segmentsLabelmapConfig || {};\n\n  const configToUse = {\n    ...toolGroupLabelmapConfig,\n    ...segmentationRepresentationLabelmapConfig,\n    ...segmentLabelmapConfig,\n  };\n\n  const fillAlpha = isActiveLabelmap\n    ? configToUse.fillAlpha\n    : configToUse.fillAlphaInactive;\n  const outlineWidth = isActiveLabelmap\n    ? configToUse.outlineWidthActive\n    : configToUse.outlineWidthInactive;\n\n  const renderFill = isActiveLabelmap\n    ? configToUse.renderFill\n    : configToUse.renderFillInactive;\n\n  const renderOutline = configToUse.renderOutline;\n\n  const outlineOpacity = isActiveLabelmap\n    ? configToUse.outlineOpacity\n    : configToUse.outlineOpacityInactive;\n\n  return {\n    fillAlpha,\n    outlineWidth,\n    renderFill,\n    renderOutline,\n    outlineOpacity,\n  };\n}\n\nfunction _needsTransferFunctionUpdate(\n  viewportId: string,\n  actorUID: string,\n  segmentIndex: number,\n  {\n    fillAlpha,\n    renderFill,\n    renderOutline,\n    segmentColor,\n    outlineWidth,\n    segmentsHidden,\n  }: {\n    fillAlpha: number;\n    renderFill: boolean;\n    renderOutline: boolean;\n    outlineWidth: number;\n    segmentColor: number[];\n    segmentsHidden: Set<number>;\n  }\n) {\n  const cacheUID = `${viewportId}-${actorUID}-${segmentIndex}`;\n  const oldConfig = labelMapConfigCache.get(cacheUID);\n\n  if (!oldConfig) {\n    labelMapConfigCache.set(cacheUID, {\n      fillAlpha,\n      renderFill,\n      renderOutline,\n      outlineWidth,\n      segmentColor,\n      segmentsHidden: new Set(segmentsHidden), // Create a copy\n    });\n\n    return {\n      forceOpacityUpdate: true,\n      forceColorUpdate: true,\n    };\n  }\n\n  const {\n    fillAlpha: oldFillAlpha,\n    renderFill: oldRenderFill,\n    renderOutline: oldRenderOutline,\n    outlineWidth: oldOutlineWidth,\n    segmentColor: oldSegmentColor,\n    segmentsHidden: oldSegmentsHidden,\n  } = oldConfig;\n\n  const forceColorUpdate =\n    oldSegmentColor[0] !== segmentColor[0] ||\n    oldSegmentColor[1] !== segmentColor[1] ||\n    oldSegmentColor[2] !== segmentColor[2];\n\n  const forceOpacityUpdate =\n    oldSegmentColor[3] !== segmentColor[3] ||\n    oldFillAlpha !== fillAlpha ||\n    oldRenderFill !== renderFill ||\n    oldRenderOutline !== renderOutline ||\n    oldOutlineWidth !== outlineWidth ||\n    oldSegmentsHidden.has(segmentIndex) !== segmentsHidden.has(segmentIndex);\n\n  // update the cache\n  labelMapConfigCache.set(cacheUID, {\n    fillAlpha,\n    renderFill,\n    renderOutline,\n    outlineWidth,\n    segmentColor: segmentColor.slice(), // Create a copy\n    segmentsHidden: new Set(segmentsHidden), // Create a copy\n  });\n\n  return {\n    forceOpacityUpdate,\n    forceColorUpdate,\n  };\n}\n\nfunction _removeLabelmapFromToolGroupViewports(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    throw new Error(`ToolGroup with ToolGroupId ${toolGroupId} does not exist`);\n  }\n\n  const { viewportsInfo } = toolGroup;\n\n  for (const viewportInfo of viewportsInfo) {\n    const { viewportId, renderingEngineId } = viewportInfo;\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    removeLabelmapFromElement(\n      enabledElement.viewport.element,\n      segmentationRepresentationUID\n    );\n  }\n}\n\nasync function _addLabelmapToViewport(\n  viewport: Types.IVolumeViewport,\n  volumeId: string,\n  segmentationRepresentationUID: string\n): Promise<void> {\n  await addLabelmapToElement(\n    viewport.element,\n    volumeId,\n    segmentationRepresentationUID\n  );\n}\n\nexport default {\n  render,\n  addSegmentationRepresentation,\n  removeSegmentationRepresentation,\n};\n","import macro from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPoints from '../../Common/Core/Points.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport { DesiredOutputPrecision } from '../../Common/DataModel/DataSetAttributes/Constants.js';\nimport { VtkDataTypes } from '../../Common/Core/DataArray/Constants.js';\n\nvar vtkErrorMacro = macro.vtkErrorMacro;\n\nfunction offsetCellArray(typedArray, offset) {\n  var currentIdx = 0;\n  return typedArray.map(function (value, index) {\n    if (index === currentIdx) {\n      currentIdx += value + 1;\n      return value;\n    }\n\n    return value + offset;\n  });\n}\n\nfunction appendCellData(dest, src, ptOffset, cellOffset) {\n  dest.set(offsetCellArray(src, ptOffset), cellOffset);\n} // ----------------------------------------------------------------------------\n// vtkAppendPolyData methods\n// ----------------------------------------------------------------------------\n\n\nfunction vtkAppendPolyData(publicAPI, model) {\n  // Set our classname\n  model.classHierarchy.push('vtkAppendPolyData');\n\n  publicAPI.requestData = function (inData, outData) {\n    // implement requestData\n    var numberOfInputs = publicAPI.getNumberOfInputPorts();\n\n    if (!numberOfInputs) {\n      vtkErrorMacro('No input specified.');\n      return;\n    }\n\n    if (numberOfInputs === 1) {\n      // pass through filter\n      outData[0] = inData[0];\n      return;\n    } // Allocate output\n\n\n    var output = vtkPolyData.newInstance();\n    var numPts = 0;\n    var pointType = 0;\n    var ttype = 1;\n    var firstType = 1;\n    var numVerts = 0;\n    var numLines = 0;\n    var numStrips = 0;\n    var numPolys = 0; // Field data is propagated to output only if present in all inputs\n\n    var hasPtNormals = true; // assume present by default\n\n    var hasPtTCoords = true;\n    var hasPtScalars = true;\n\n    for (var i = 0; i < numberOfInputs; i++) {\n      var ds = inData[i];\n\n      if (!ds) {\n        // eslint-disable-next-line\n        continue;\n      }\n\n      var dsNumPts = ds.getPoints().getNumberOfPoints();\n      numPts += dsNumPts;\n      numVerts += ds.getVerts().getNumberOfValues();\n      numLines += ds.getLines().getNumberOfValues();\n      numStrips += ds.getStrips().getNumberOfValues();\n      numPolys += ds.getPolys().getNumberOfValues();\n\n      if (dsNumPts) {\n        if (firstType) {\n          firstType = 0;\n          pointType = ds.getPoints().getDataType();\n        }\n\n        ttype = ds.getPoints().getDataType();\n        pointType = pointType > ttype ? pointType : ttype;\n      }\n\n      var ptD = ds.getPointData();\n\n      if (ptD) {\n        hasPtNormals = hasPtNormals && ptD.getNormals() !== null;\n        hasPtTCoords = hasPtTCoords && ptD.getTCoords() !== null;\n        hasPtScalars = hasPtScalars && ptD.getScalars() !== null;\n      } else {\n        hasPtNormals = false;\n        hasPtTCoords = false;\n        hasPtScalars = false;\n      }\n    }\n\n    if (model.outputPointsPrecision === DesiredOutputPrecision.SINGLE) {\n      pointType = VtkDataTypes.FLOAT;\n    } else if (model.outputPointsPrecision === DesiredOutputPrecision.DOUBLE) {\n      pointType = VtkDataTypes.DOUBLE;\n    }\n\n    var points = vtkPoints.newInstance({\n      dataType: pointType\n    });\n    points.setNumberOfPoints(numPts);\n    var pointData = points.getData();\n    var vertData = new Uint32Array(numVerts);\n    var lineData = new Uint32Array(numLines);\n    var stripData = new Uint32Array(numStrips);\n    var polyData = new Uint32Array(numPolys);\n    var newPtNormals = null;\n    var newPtTCoords = null;\n    var newPtScalars = null;\n    var lds = inData[numberOfInputs - 1];\n\n    if (hasPtNormals) {\n      var dsNormals = lds.getPointData().getNormals();\n      newPtNormals = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        numberOfTuples: numPts,\n        size: 3 * numPts,\n        dataType: dsNormals.getDataType(),\n        name: dsNormals.getName()\n      });\n    }\n\n    if (hasPtTCoords) {\n      var dsTCoords = lds.getPointData().getTCoords();\n      newPtTCoords = vtkDataArray.newInstance({\n        numberOfComponents: 2,\n        numberOfTuples: numPts,\n        size: 2 * numPts,\n        dataType: dsTCoords.getDataType(),\n        name: dsTCoords.getName()\n      });\n    }\n\n    if (hasPtScalars) {\n      var dsScalars = lds.getPointData().getScalars();\n      newPtScalars = vtkDataArray.newInstance({\n        numberOfComponents: dsScalars.getNumberOfComponents(),\n        numberOfTuples: numPts,\n        size: numPts * dsScalars.getNumberOfComponents(),\n        dataType: dsScalars.getDataType(),\n        name: dsScalars.getName()\n      });\n    }\n\n    numPts = 0;\n    numVerts = 0;\n    numLines = 0;\n    numStrips = 0;\n    numPolys = 0;\n\n    for (var _i = 0; _i < numberOfInputs; _i++) {\n      var _ds = inData[_i];\n      pointData.set(_ds.getPoints().getData(), numPts * 3);\n      appendCellData(vertData, _ds.getVerts().getData(), numPts, numVerts);\n      numVerts += _ds.getVerts().getNumberOfValues();\n      appendCellData(lineData, _ds.getLines().getData(), numPts, numLines);\n      numLines += _ds.getLines().getNumberOfValues();\n      appendCellData(stripData, _ds.getStrips().getData(), numPts, numStrips);\n      numStrips += _ds.getStrips().getNumberOfValues();\n      appendCellData(polyData, _ds.getPolys().getData(), numPts, numPolys);\n      numPolys += _ds.getPolys().getNumberOfValues();\n\n      var dsPD = _ds.getPointData();\n\n      if (hasPtNormals) {\n        var ptNorms = dsPD.getNormals();\n        newPtNormals.getData().set(ptNorms.getData(), numPts * 3);\n      }\n\n      if (hasPtTCoords) {\n        var ptTCoords = dsPD.getTCoords();\n        newPtTCoords.getData().set(ptTCoords.getData(), numPts * 2);\n      }\n\n      if (hasPtScalars) {\n        var ptScalars = dsPD.getScalars();\n        newPtScalars.getData().set(ptScalars.getData(), numPts * newPtScalars.getNumberOfComponents());\n      }\n\n      numPts += _ds.getPoints().getNumberOfPoints();\n    }\n\n    output.setPoints(points);\n    output.getVerts().setData(vertData);\n    output.getLines().setData(lineData);\n    output.getStrips().setData(stripData);\n    output.getPolys().setData(polyData);\n\n    if (newPtNormals) {\n      output.getPointData().setNormals(newPtNormals);\n    }\n\n    if (newPtTCoords) {\n      output.getPointData().setTCoords(newPtTCoords);\n    }\n\n    if (newPtScalars) {\n      output.getPointData().setScalars(newPtScalars);\n    }\n\n    outData[0] = output;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  outputPointsPrecision: DesiredOutputPrecision.DEFAULT\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.setGet(publicAPI, model, ['outputPointsPrecision']); // Make this a VTK object\n\n  macro.obj(publicAPI, model); // Also make it an algorithm with one input and one output\n\n  macro.algo(publicAPI, model, 1, 1); // Object specific methods\n\n  vtkAppendPolyData(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkAppendPolyData'); // ----------------------------------------------------------------------------\n\nvar vtkAppendPolyData$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkAppendPolyData$1 as default, extend, newInstance };\n","import { Enums, Types } from '@cornerstonejs/core';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray';\nimport vtkPoints from '@kitware/vtk.js/Common/Core/Points';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport { ToolGroupSpecificContourRepresentation } from '../../../types';\n\n/**\n * If the segment specific config exists for the given segment id, it returns\n * the segment specific config. Otherwise, it looks for the segment specific\n * config for the given index. If it doesn't exist, it returns null.\n *\n * @param contourRepresentation -  The representation object that is passed\n * to the tool.\n * @param segmentId -  The id of the segment.\n * @param index -  The index of the segment in the list of segments.\n * @returns the segment specific config for the given segment id.\n *\n */\nexport function getSegmentSpecificConfig(\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  segmentId: string,\n  index: number\n) {\n  let segmentSpecificConfig =\n    contourRepresentation.segmentSpecificConfig?.[segmentId];\n\n  if (!segmentSpecificConfig) {\n    // try the index\n    segmentSpecificConfig =\n      contourRepresentation.segmentSpecificConfig?.[index];\n  }\n\n  if (!segmentSpecificConfig) {\n    return null;\n  }\n\n  return segmentSpecificConfig.CONTOUR;\n}\n\n/**\n * takes a geometry object as an argument\n * and throws an error if the geometry object is not a contour\n * @param geometry -  The geometry object to be rendered.\n */\nexport function validateGeometry(geometry: Types.IGeometry): void {\n  if (!geometry) {\n    throw new Error(`No contours found for geometryId ${geometry.id}`);\n  }\n\n  const geometryId = geometry.id;\n\n  if (geometry.type !== Enums.GeometryType.CONTOUR) {\n    throw new Error(\n      `Geometry type ${geometry.type} not supported for rendering.`\n    );\n  }\n\n  if (!geometry.data) {\n    console.warn(\n      `No contours found for geometryId ${geometryId}. Skipping render.`\n    );\n    return;\n  }\n}\n\n/**\n * It takes a contourSet and returns a vtkPolyData for that contourSet. A contour set\n * is a collection of contours. Each contour is a collection of points. Each point\n * is x,y,z in the world coordinate system.\n *\n * @param contourSet -  the contour set that you want to convert to polyData\n * @returns A vtkPolyData object\n */\nexport function getPolyData(contourSet: Types.IContourSet) {\n  const pointArray = [];\n\n  const points = vtkPoints.newInstance();\n  const lines = vtkCellArray.newInstance();\n\n  // this variable will indicate the index of the first point in the current line\n  // so we can correctly generate the point index list to add in the cellArray\n  let pointIndex = 0;\n  contourSet.getContours().forEach((contour: Types.IContour) => {\n    const pointList = contour.getPoints();\n    const flatPoints = contour.getFlatPointsArray();\n    const type = contour.getType();\n\n    // creating a point index list that defines a line\n    const pointIndexes = pointList.map(\n      (_, pointListIndex) => pointListIndex + pointIndex\n    );\n\n    // if close planar, add the first point index to the list\n    if (type === Enums.ContourType.CLOSED_PLANAR) {\n      pointIndexes.push(pointIndexes[0]);\n    }\n\n    const linePoints = Float32Array.from(flatPoints);\n    // add the current points into the point list\n    pointArray.push(...linePoints);\n    // add the point indexes into the cell array\n    lines.insertNextCell([...pointIndexes]);\n    // update the first point index\n    pointIndex = pointIndex + pointList.length;\n  });\n\n  // converts the pointArray into vtkPoints\n  points.setData(pointArray, 3);\n\n  // creates the polyData\n  const polygon = vtkPolyData.newInstance();\n  polygon.setPoints(points);\n  polygon.setLines(lines);\n\n  return polygon;\n}\n","type ConfigCache = {\n  segmentsHidden: Set<number>;\n  outlineWidthActive: number;\n  visibility: boolean;\n};\n\n/**\n * Config cache is used to store the config for a given segmentation\n * representation. This is used to avoid having to recompute the config\n * every time the user changes the active segment, and also for performance\n * reasons.\n */\nconst configCachePerSegmentationRepresentationUID = new Map();\n\nexport function getConfigCache(\n  segmentationRepresentationUID: string\n): ConfigCache {\n  return configCachePerSegmentationRepresentationUID.get(\n    segmentationRepresentationUID\n  );\n}\n\nexport function setConfigCache(\n  segmentationRepresentationUID: string,\n  config: ConfigCache\n) {\n  configCachePerSegmentationRepresentationUID.set(\n    segmentationRepresentationUID,\n    config\n  );\n}\n\nexport function deleteConfigCache(segmentationRepresentationUID: string) {\n  configCachePerSegmentationRepresentationUID.delete(\n    segmentationRepresentationUID\n  );\n}\n","import { cache, Types } from '@cornerstonejs/core';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkAppendPolyData from '@kitware/vtk.js/Filters/General/AppendPolyData';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\n\nimport {\n  getPolyData,\n  getSegmentSpecificConfig,\n  validateGeometry,\n} from './utils';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificContourRepresentation,\n} from '../../../types';\nimport { getConfigCache, setConfigCache } from './contourConfigCache';\n\nexport function addContourSetsToElement(\n  viewport: Types.IVolumeViewport,\n  geometryIds: string[],\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  contourRepresentationConfig: SegmentationRepresentationConfig,\n  contourActorUID: string\n) {\n  const { segmentationRepresentationUID, segmentsHidden } =\n    contourRepresentation;\n  const appendPolyData = vtkAppendPolyData.newInstance();\n\n  const scalarToColorMap = new Map();\n  const segmentSpecificMap = new Map();\n\n  geometryIds.forEach((geometryId) => {\n    const geometry = cache.getGeometry(geometryId);\n\n    if (!geometry) {\n      console.warn(\n        `No geometry found for geometryId ${geometryId}. Skipping render.`\n      );\n      return;\n    }\n\n    const segmentIndex = (geometry.data as Types.IContourSet).getSegmentIndex();\n\n    validateGeometry(geometry);\n\n    const segmentSpecificConfig = getSegmentSpecificConfig(\n      contourRepresentation,\n      geometryId,\n      segmentIndex\n    );\n\n    const contourSet = geometry.data;\n    const polyData = getPolyData(contourSet);\n    const color = contourSet.getColor();\n\n    const size = polyData.getPoints().getNumberOfPoints();\n\n    const scalars = vtkDataArray.newInstance({\n      size: size * 4,\n      numberOfComponents: 4,\n      dataType: 'Uint8Array',\n    });\n    for (let i = 0; i < size; ++i) {\n      scalars.setTuple(i, [...color, 255]);\n    }\n    polyData.getPointData().setScalars(scalars);\n\n    if (segmentSpecificConfig) {\n      segmentSpecificMap.set(segmentIndex, segmentSpecificConfig);\n    }\n\n    scalarToColorMap.set(segmentIndex, [\n      ...color,\n      segmentsHidden.has(segmentIndex) ? 0 : 255,\n    ]);\n\n    segmentIndex === 0\n      ? appendPolyData.setInputData(polyData)\n      : appendPolyData.addInputData(polyData);\n  });\n\n  const polyDataOutput = appendPolyData.getOutputData();\n\n  const outlineWidthActive =\n    contourRepresentationConfig.representations.CONTOUR.outlineWidthActive;\n\n  const mapper = vtkMapper.newInstance();\n  mapper.setInputData(polyDataOutput);\n\n  const actor = vtkActor.newInstance();\n  actor.setMapper(mapper);\n  actor.getProperty().setLineWidth(outlineWidthActive);\n\n  // set the config cache for later update of the contour\n  setConfigCache(\n    segmentationRepresentationUID,\n    Object.assign({}, getConfigCache(segmentationRepresentationUID), {\n      segmentsHidden: new Set(segmentsHidden),\n      segmentSpecificMap,\n      outlineWidthActive,\n    })\n  );\n\n  actor.setForceOpaque(true);\n\n  viewport.addActor({\n    uid: contourActorUID,\n    actor: actor as unknown as Types.Actor,\n  });\n  viewport.resetCamera();\n  viewport.render();\n}\n","import { cache, Types } from '@cornerstonejs/core';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificContourRepresentation,\n} from '../../../types';\nimport { getConfigCache, setConfigCache } from './contourConfigCache';\nimport { getSegmentSpecificConfig } from './utils';\n\nexport function updateContourSets(\n  viewport: Types.IVolumeViewport,\n  geometryIds: string[],\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  contourRepresentationConfig: SegmentationRepresentationConfig,\n  contourActorUID: string\n) {\n  const { segmentationRepresentationUID, segmentsHidden } =\n    contourRepresentation;\n  const newContourConfig = contourRepresentationConfig.representations.CONTOUR;\n  const cachedConfig = getConfigCache(segmentationRepresentationUID);\n\n  const contourSetsActor = viewport.getActor(contourActorUID);\n\n  if (!contourSetsActor) {\n    console.warn(\n      `No contour actor found for actorUID ${contourActorUID}. Skipping render.`\n    );\n    return;\n  }\n\n  const { actor } = contourSetsActor;\n\n  const newOutlineWithActive = newContourConfig.outlineWidthActive;\n\n  if (cachedConfig?.outlineWidthActive !== newOutlineWithActive) {\n    (actor as unknown as vtkActor)\n      .getProperty()\n      .setLineWidth(newOutlineWithActive);\n\n    setConfigCache(\n      segmentationRepresentationUID,\n      Object.assign({}, cachedConfig, {\n        outlineWidthActive: newOutlineWithActive,\n      })\n    );\n  }\n\n  const mapper = (actor as unknown as vtkActor).getMapper();\n  const lut = mapper.getLookupTable();\n\n  const segmentsToSetToInvisible = [];\n  const segmentsToSetToVisible = [];\n\n  for (const segmentIndex of segmentsHidden) {\n    if (!cachedConfig.segmentsHidden.has(segmentIndex)) {\n      segmentsToSetToInvisible.push(segmentIndex);\n    }\n  }\n\n  // the other way around\n  for (const segmentIndex of cachedConfig.segmentsHidden) {\n    if (!segmentsHidden.has(segmentIndex)) {\n      segmentsToSetToVisible.push(segmentIndex);\n    }\n  }\n\n  const mergedInvisibleSegments = Array.from(cachedConfig.segmentsHidden)\n    .filter((segmentIndex) => !segmentsToSetToVisible.includes(segmentIndex))\n    .concat(segmentsToSetToInvisible);\n\n  const { contourSets, segmentSpecificConfigs } = geometryIds.reduce(\n    (acc, geometryId) => {\n      const geometry = cache.getGeometry(geometryId);\n      const { data: contourSet } = geometry;\n      const segmentIndex = (contourSet as Types.IContourSet).getSegmentIndex();\n      const segmentSpecificConfig = getSegmentSpecificConfig(\n        contourRepresentation,\n        geometryId,\n        segmentIndex\n      );\n\n      acc.contourSets.push(contourSet);\n      acc.segmentSpecificConfigs[segmentIndex] = segmentSpecificConfig ?? {};\n\n      return acc;\n    },\n    { contourSets: [], segmentSpecificConfigs: {} }\n  );\n\n  const affectedSegments = [\n    ...mergedInvisibleSegments,\n    ...segmentsToSetToVisible,\n  ];\n\n  const hasCustomSegmentSpecificConfig = Object.values(\n    segmentSpecificConfigs\n  ).some((config) => Object.keys(config).length > 0);\n\n  let polyDataModified = false;\n\n  if (affectedSegments.length || hasCustomSegmentSpecificConfig) {\n    const appendPolyData = mapper.getInputData();\n    const appendScalars = appendPolyData.getPointData().getScalars();\n    const appendScalarsData = appendScalars.getData();\n    // below we will only manipulate the polyData of the contourSets that are affected\n    // by picking the correct offset in the scalarData array\n    let offset = 0;\n    contourSets.forEach((contourSet) => {\n      const segmentIndex = (contourSet as Types.IContourSet).getSegmentIndex();\n      const size = contourSet.getTotalNumberOfPoints();\n\n      if (\n        affectedSegments.includes(segmentIndex) ||\n        segmentSpecificConfigs[segmentIndex]?.fillAlpha // Todo: add others\n      ) {\n        const color = contourSet.getColor();\n        let visibility = mergedInvisibleSegments.includes(segmentIndex)\n          ? 0\n          : 255;\n\n        const segmentConfig = segmentSpecificConfigs[segmentIndex];\n        if (segmentConfig.fillAlpha !== undefined) {\n          visibility = segmentConfig.fillAlpha * 255;\n        }\n\n        for (let i = 0; i < size; ++i) {\n          appendScalarsData[offset + i * 4] = color[0];\n          appendScalarsData[offset + i * 4 + 1] = color[1];\n          appendScalarsData[offset + i * 4 + 2] = color[2];\n          appendScalarsData[offset + i * 4 + 3] = visibility;\n        }\n\n        polyDataModified = true;\n      }\n\n      offset = offset + size * 4;\n    });\n\n    if (polyDataModified) {\n      appendPolyData.modified();\n    }\n\n    setConfigCache(\n      segmentationRepresentationUID,\n      Object.assign({}, cachedConfig, {\n        segmentsHidden: new Set(segmentsHidden),\n      })\n    );\n\n    mapper.setLookupTable(lut);\n  }\n\n  viewport.render();\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Remove the contour representation from the viewport's HTML Element.\n * NOTE: This function should not be called directly.\n *\n * @param element - The element that the segmentation is being added to.\n * @param segmentationRepresentationUID - The UID of the contour representation to remove.\n * @param removeFromCache - boolean\n *\n * @internal\n */\nfunction removeContourFromElement(\n  element: HTMLDivElement,\n  segmentationRepresentationUID: string,\n  removeFromCache = false // Todo\n): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const actorEntries = (viewport as Types.IVolumeViewport).getActors();\n\n  // remove actors whose id has the same prefix as the segmentationRepresentationUID\n  const actorUIDsToRemove = actorEntries\n    .map(({ uid }) =>\n      uid.includes(segmentationRepresentationUID) ? uid : undefined\n    )\n    .filter(Boolean);\n\n  // @ts-ignore\n  viewport.removeActors(actorUIDsToRemove);\n}\n\nexport default removeContourFromElement;\n","import {\n  getEnabledElementByIds,\n  Types,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\n\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationConfig from '../../../stateManagement/segmentation/config/segmentationConfig';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../../store/ToolGroupManager';\nimport {\n  RepresentationPublicInput,\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../../types/SegmentationStateTypes';\nimport { addOrUpdateContourSets } from './addOrUpdateContourSets';\nimport removeContourFromElement from './removeContourFromElement';\nimport { deleteConfigCache } from './contourConfigCache';\n\n/**\n * It adds a new segmentation representation to the segmentation state\n * @param toolGroupId - The id of the toolGroup that the segmentation\n * belongs to\n * @param representationInput - RepresentationPublicInput\n * @param toolGroupSpecificConfig - The configuration that is specific to the toolGroup.\n * @returns The segmentationRepresentationUID\n */\nasync function addSegmentationRepresentation(\n  toolGroupId: string,\n  representationInput: RepresentationPublicInput,\n  toolGroupSpecificConfig?: SegmentationRepresentationConfig\n): Promise<string> {\n  const { segmentationId } = representationInput;\n  const segmentationRepresentationUID = csUtils.uuidv4();\n  // Todo: make these configurable during representation input by user\n  const segmentsHidden = new Set() as Set<number>;\n  const visibility = true;\n  const colorLUTIndex = 0;\n  const active = true;\n  const toolGroupSpecificRepresentation: ToolGroupSpecificRepresentation = {\n    segmentationId,\n    segmentationRepresentationUID,\n    type: Representations.Contour,\n    segmentsHidden,\n    colorLUTIndex,\n    active,\n    segmentationRepresentationSpecificConfig: {},\n    segmentSpecificConfig: {},\n    config: {},\n  };\n  // Update the toolGroup specific configuration\n  if (toolGroupSpecificConfig) {\n    // Since setting configuration on toolGroup will trigger a segmentationRepresentation\n    // update event, we don't want to trigger the event twice, so we suppress\n    // the first one\n    const currentToolGroupConfig =\n      SegmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n    const mergedConfig = csUtils.deepMerge(\n      currentToolGroupConfig,\n      toolGroupSpecificConfig\n    );\n    SegmentationConfig.setToolGroupSpecificConfig(toolGroupId, {\n      renderInactiveSegmentations:\n        mergedConfig.renderInactiveSegmentations || true,\n      representations: {\n        ...mergedConfig.representations,\n      },\n    });\n  }\n  SegmentationState.addSegmentationRepresentation(\n    toolGroupId,\n    toolGroupSpecificRepresentation\n  );\n  return segmentationRepresentationUID;\n}\n\n/**\n * It removes a segmentation representation from the tool group's viewports and\n * from the segmentation state\n * @param toolGroupId - The toolGroupId of the toolGroup that the\n * segmentationRepresentation belongs to.\n * @param segmentationRepresentationUID - This is the unique identifier\n * for the segmentation representation.\n * @param renderImmediate - If true, the viewport will be rendered\n * immediately after the segmentation representation is removed.\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  renderImmediate = false\n): void {\n  _removeContourFromToolGroupViewports(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n  SegmentationState.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  deleteConfigCache(segmentationRepresentationUID);\n\n  if (renderImmediate) {\n    const viewportsInfo = getToolGroup(toolGroupId).getViewportsInfo();\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      enabledElement.viewport.render();\n    });\n  }\n}\n\n/**\n * It renders the contour sets for the given segmentation\n * @param viewport - The viewport object\n * @param representation - ToolGroupSpecificRepresentation\n * @param toolGroupConfig - This is the configuration object for the tool group\n */\nasync function render(\n  viewport: Types.IVolumeViewport,\n  representationConfig: ToolGroupSpecificRepresentation,\n  toolGroupConfig: SegmentationRepresentationConfig\n): Promise<void> {\n  const { segmentationId } = representationConfig;\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n  const contourData = segmentation.representationData[Representations.Contour];\n  const { geometryIds } = contourData;\n\n  if (!geometryIds?.length) {\n    console.warn(\n      `No contours found for segmentationId ${segmentationId}. Skipping render.`\n    );\n  }\n\n  // add the contour sets to the viewport\n  addOrUpdateContourSets(\n    viewport,\n    geometryIds,\n    representationConfig,\n    toolGroupConfig\n  );\n}\n\nfunction _removeContourFromToolGroupViewports(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    throw new Error(`ToolGroup with ToolGroupId ${toolGroupId} does not exist`);\n  }\n\n  const { viewportsInfo } = toolGroup;\n\n  for (const viewportInfo of viewportsInfo) {\n    const { viewportId, renderingEngineId } = viewportInfo;\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    removeContourFromElement(\n      enabledElement.viewport.element,\n      segmentationRepresentationUID\n    );\n  }\n}\n\nexport default {\n  render,\n  addSegmentationRepresentation,\n  removeSegmentationRepresentation,\n};\n","import { Types } from '@cornerstonejs/core';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificContourRepresentation,\n} from '../../../types';\nimport { addContourSetsToElement } from './addContourSetsToElement';\nimport { updateContourSets } from './updateContourSets';\n\nexport function addOrUpdateContourSets(\n  viewport: Types.IVolumeViewport,\n  geometryIds: string[],\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  contourRepresentationConfig: SegmentationRepresentationConfig\n) {\n  const { segmentationRepresentationUID } = contourRepresentation;\n  const actorUID = `CONTOUR_${segmentationRepresentationUID}`;\n  const actor = viewport.getActor(actorUID);\n\n  const addOrUpdateFn = actor ? updateContourSets : addContourSetsToElement;\n  addOrUpdateFn(\n    viewport,\n    geometryIds,\n    contourRepresentation,\n    contourRepresentationConfig,\n    actorUID\n  );\n}\n","import SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport { labelmapDisplay } from '../../tools/displayTools/Labelmap';\nimport { contourDisplay } from '../../tools/displayTools/Contour';\n\nimport {\n  getSegmentationRepresentations,\n  getSegmentationRepresentationByUID,\n} from './segmentationState';\n\n/**\n * Remove the segmentation representation (representation) from the viewports of the toolGroup.\n * @param toolGroupId - The Id of the toolGroup to remove the segmentation from.\n * @param segmentationRepresentationUIDs - The UIDs of the segmentation representations to remove.\n * @param immediate - if True the viewport will be re-rendered immediately.\n */\nfunction removeSegmentationsFromToolGroup(\n  toolGroupId: string,\n  segmentationRepresentationUIDs?: string[] | undefined,\n  immediate?: boolean\n): void {\n  const toolGroupSegRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  if (\n    !toolGroupSegRepresentations ||\n    toolGroupSegRepresentations.length === 0\n  ) {\n    return;\n  }\n\n  const toolGroupSegRepresentationUIDs = toolGroupSegRepresentations.map(\n    (representation) => representation.segmentationRepresentationUID\n  );\n\n  let segRepresentationUIDsToRemove = segmentationRepresentationUIDs;\n  if (segRepresentationUIDsToRemove) {\n    // make sure the segmentationDataUIDs that are going to be removed belong\n    // to the toolGroup\n    const invalidSegRepresentationUIDs = segmentationRepresentationUIDs.filter(\n      (segRepresentationUID) =>\n        !toolGroupSegRepresentationUIDs.includes(segRepresentationUID)\n    );\n\n    if (invalidSegRepresentationUIDs.length > 0) {\n      throw new Error(\n        `The following segmentationRepresentationUIDs are not part of the toolGroup: ${JSON.stringify(\n          invalidSegRepresentationUIDs\n        )}`\n      );\n    }\n  } else {\n    // remove all segmentation representations\n    segRepresentationUIDsToRemove = toolGroupSegRepresentationUIDs;\n  }\n\n  segRepresentationUIDsToRemove.forEach((segmentationDataUID) => {\n    _removeSegmentation(toolGroupId, segmentationDataUID, immediate);\n  });\n}\n\nfunction _removeSegmentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  immediate?: boolean\n): void {\n  const segmentationRepresentation = getSegmentationRepresentationByUID(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  const { type } = segmentationRepresentation;\n\n  if (type === SegmentationRepresentations.Labelmap) {\n    labelmapDisplay.removeSegmentationRepresentation(\n      toolGroupId,\n      segmentationRepresentationUID,\n      immediate\n    );\n  } else if (type === SegmentationRepresentations.Contour) {\n    contourDisplay.removeSegmentationRepresentation(\n      toolGroupId,\n      segmentationRepresentationUID,\n      immediate\n    );\n  } else {\n    throw new Error(`The representation ${type} is not supported yet`);\n  }\n}\n\nexport default removeSegmentationsFromToolGroup;\n","import { SegmentationPublicInput } from '../../../types/SegmentationStateTypes';\nimport { cache } from '@cornerstonejs/core';\nimport { LabelmapSegmentationData } from '../../../types/LabelmapTypes';\n\nfunction validate(segmentationInput: SegmentationPublicInput): void {\n  if (!segmentationInput.representation.data) {\n    throw new Error(\n      'The segmentationInput.representationData.data is undefined, please provide a valid representationData.data'\n    );\n  }\n\n  const representationData = segmentationInput.representation\n    .data as LabelmapSegmentationData;\n\n  if (!representationData.volumeId) {\n    throw new Error(\n      'The segmentationInput.representationData.volumeId is undefined, please provide a valid representationData.volumeId'\n    );\n  }\n\n  const cachedVolume = cache.getVolume(representationData.volumeId);\n\n  if (!cachedVolume) {\n    throw new Error(\n      `volumeId of ${representationData.volumeId} not found in cache, you should load and cache volume before adding segmentation`\n    );\n  }\n}\n\nexport default validate;\n","import * as Enums from '../../../enums';\nimport { SegmentationPublicInput } from '../../../types/SegmentationStateTypes';\nimport validateLabelmap from '../../../tools/displayTools/Labelmap/validateRepresentationData';\n\n/**\n * Checks if the segmentationInputArray is valid meaning it contains\n * correct representationProps for the representation type that is being used.\n *\n * @param segmentationInputArray - Array of segmentation inputs\n * @internal\n */\nfunction validateSegmentationInput(\n  segmentationInputArray: SegmentationPublicInput[]\n): void {\n  if (!segmentationInputArray || !segmentationInputArray.length) {\n    throw new Error('The segmentationInputArray is undefined or empty array');\n  }\n\n  segmentationInputArray.forEach((segmentationInput) => {\n    if (segmentationInput.segmentationId === undefined) {\n      throw new Error(\n        'The segmentationInput.segmentationId is undefined, please provide a valid segmentationId'\n      );\n    }\n\n    if (segmentationInput.representation === undefined) {\n      throw new Error(\n        'The segmentationInput.representation is undefined, please provide a valid representation'\n      );\n    }\n\n    if (\n      segmentationInput.representation.type ===\n      Enums.SegmentationRepresentations.Labelmap\n    ) {\n      validateLabelmap(segmentationInput);\n    }\n  });\n}\n\nexport default validateSegmentationInput;\n","import _cloneDeep from 'lodash.clonedeep';\nimport { SegmentationPublicInput } from '../../types/SegmentationStateTypes';\nimport { validateSegmentationInput } from './helpers';\nimport { addSegmentation as addSegmentationToState } from './segmentationState';\n/**\n * Adds the segmentation to the cornerstone3D segmentation state. It should be\n * noted that segmentations are not added to any toolGroup's viewports. In order to\n * do so, you should add a \"representation\" of the segmentation to the toolGroup\n * using addSegmentationRepresentations helper. The reason for this is that there\n * can be multiple representations of the same segmentation (e.g. Labelmap and\n * Contour, etc. - Currently only Labelmap representations is supported).\n * @param segmentationInputArray - The array of segmentation input, each of which\n * defining the segmentationId and the main representation data for the segmentation.\n */\nfunction addSegmentations(\n  segmentationInputArray: SegmentationPublicInput[]\n): void {\n  validateSegmentationInput(segmentationInputArray);\n\n  segmentationInputArray.map((segInput) => {\n    const segmentationInput = _cloneDeep(segInput);\n\n    addSegmentationToState(segmentationInput);\n  });\n}\n\nexport default addSegmentations;\n","import _cloneDeep from 'lodash.clonedeep';\nimport {\n  SegmentationRepresentationConfig,\n  RepresentationPublicInput,\n} from '../../types/SegmentationStateTypes';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { getToolGroup } from '../../store/ToolGroupManager';\n\nimport { labelmapDisplay } from '../../tools/displayTools/Labelmap';\nimport { contourDisplay } from '../../tools/displayTools/Contour';\n\n/**\n * Set the specified segmentation representations on the viewports of the specified\n * toolGroup. It accepts a second argument which is a toolGroup specific representation\n * configuration.\n *\n * @param toolGroupId - The Id of the toolGroup to add the segmentation representations to\n * @param representationInputArray - An array of segmentation representations to add to the toolGroup\n * @param toolGroupSpecificRepresentationConfig - The toolGroup specific configuration\n * for the segmentation representations\n */\nasync function addSegmentationRepresentations(\n  toolGroupId: string,\n  representationInputArray: RepresentationPublicInput[],\n  toolGroupSpecificRepresentationConfig?: SegmentationRepresentationConfig\n): Promise<string[]> {\n  // Check if there exists a toolGroup with the toolGroupId\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (!toolGroup) {\n    throw new Error(`No tool group found for toolGroupId: ${toolGroupId}`);\n  }\n\n  const promises = representationInputArray.map((representationInput) => {\n    return _addSegmentationRepresentation(\n      toolGroupId,\n      representationInput,\n      toolGroupSpecificRepresentationConfig\n    );\n  });\n\n  const segmentationRepresentationUIDs = await Promise.all(promises);\n\n  return segmentationRepresentationUIDs;\n}\n\nasync function _addSegmentationRepresentation(\n  toolGroupId: string,\n  representationInput: RepresentationPublicInput,\n  toolGroupSpecificRepresentationConfig?: SegmentationRepresentationConfig\n): Promise<string> {\n  let segmentationRepresentationUID;\n\n  if (representationInput.type === Representations.Labelmap) {\n    segmentationRepresentationUID =\n      await labelmapDisplay.addSegmentationRepresentation(\n        toolGroupId,\n        representationInput,\n        toolGroupSpecificRepresentationConfig\n      );\n  } else if (representationInput.type === Representations.Contour) {\n    segmentationRepresentationUID =\n      await contourDisplay.addSegmentationRepresentation(\n        toolGroupId,\n        representationInput,\n        toolGroupSpecificRepresentationConfig\n      );\n  } else {\n    throw new Error(\n      `The representation type ${representationInput.type} is not supported`\n    );\n  }\n\n  return segmentationRepresentationUID;\n}\n\nexport default addSegmentationRepresentations;\n","import { ToolGroupSpecificRepresentation } from '../../types/SegmentationStateTypes';\nimport { getDefaultSegmentationStateManager } from './segmentationState';\nimport { triggerSegmentationRepresentationModified } from './triggerSegmentationEvents';\n\n/**\n * Get the active segmentation representation for the tool group with\n * the given toolGroupId.\n * @param toolGroupId - The Id of the tool group\n * @returns The active segmentation representation for the tool group.\n */\nfunction getActiveSegmentationRepresentation(\n  toolGroupId: string\n): ToolGroupSpecificRepresentation {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  const toolGroupSegmentationRepresentations =\n    segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n\n  if (!toolGroupSegmentationRepresentations) {\n    return;\n  }\n\n  const activeRepresentation = toolGroupSegmentationRepresentations.find(\n    (representation) => representation.active\n  );\n\n  return activeRepresentation;\n}\n\n/**\n * Set the active segmentation for the given tool group for all its viewports\n *\n * @param toolGroupId - The Id of the tool group to set the active\n * segmentation for.\n * @param segmentationRepresentationUID - The id of the segmentation representation to set as\n * active.\n */\nfunction setActiveSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  segmentationStateManager.setActiveSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nexport {\n  // get\n  getActiveSegmentationRepresentation,\n  // set\n  setActiveSegmentationRepresentation,\n};\n","import { getActiveSegmentationRepresentation } from './activeSegmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\n\n/**\n * Get the locked status for a segment index in a segmentation\n * @param segmentationId - The id of the segmentation that the segment\n * belongs to.\n * @param segmentIndex - The index of the segment\n * @returns A boolean value indicating whether the segment is locked or not.\n */\nfunction isSegmentIndexLocked(\n  segmentationId: string,\n  segmentIndex: number\n): boolean {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n  return segmentsLocked.has(segmentIndex);\n}\n\n/**\n * Set the locked status of a segment index in a segmentation\n * @param segmentationId - The id of the segmentation whose segment\n * index is being modified.\n * @param segmentIndex - The index of the segment to lock/unlock.\n */\nfunction setSegmentIndexLocked(\n  segmentationId: string,\n  segmentIndex: number,\n  locked = true\n): void {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n\n  if (locked) {\n    segmentsLocked.add(segmentIndex);\n  } else {\n    segmentsLocked.delete(segmentIndex);\n  }\n\n  triggerSegmentationModified(segmentationId);\n}\n\n/**\n * Get the locked segments for a segmentation\n * @param segmentationId - The id of the segmentation to get locked\n * segments for.\n * @returns An array of locked segment indices.\n */\nfunction getLockedSegments(segmentationId: string): number[] | [] {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n  return Array.from(segmentsLocked);\n}\n\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegments };\n","import { utilities } from '@cornerstonejs/core';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { Color } from '../../../types/SegmentationStateTypes';\nimport { ColorLUT } from '../../../types/SegmentationStateTypes';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nimport { SegmentationRepresentations } from '../../../enums';\n\n/**\n * addColorLUT - Adds a new color LUT to the state at the given colorLUTIndex.\n * If no colorLUT is provided, a new color LUT is generated.\n *\n * @param colorLUTIndex - the index of the colorLUT in the state\n * @param colorLUT - An array of The colorLUT to set.\n * @returns\n */\nfunction addColorLUT(colorLUT: ColorLUT, colorLUTIndex: number): void {\n  if (!colorLUT) {\n    throw new Error('addColorLUT: colorLUT is required');\n  }\n\n  // Append the \"zero\" (no label) color to the front of the LUT, if necessary.\n  if (!utilities.isEqual(colorLUT[0], [0, 0, 0, 0])) {\n    console.warn(\n      'addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it'\n    );\n    colorLUT.unshift([0, 0, 0, 0]);\n  }\n\n  SegmentationState.addColorLUT(colorLUT, colorLUTIndex);\n}\n\n/**\n * It sets the toolGroup's segmentationRepresentation to use the provided\n * colorLUT at the given colorLUTIndex.\n * @param toolGroupId - the id of the toolGroup that renders the representation\n * @param segmentationRepresentationUID - the representationUID for the segmentation\n * @param colorLUTIndex - the index of the colorLUT to use\n */\nfunction setColorLUT(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  colorLUTIndex: number\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    throw new Error(\n      `setColorLUT: could not find segmentation representation with UID ${segmentationRepresentationUID}`\n    );\n  }\n\n  if (!SegmentationState.getColorLUT(colorLUTIndex)) {\n    throw new Error(\n      `setColorLUT: could not find colorLUT with index ${colorLUTIndex}`\n    );\n  }\n\n  segRepresentation.colorLUTIndex = colorLUTIndex;\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Given a tool group UID, a segmentation representationUID, and a segment index, return the\n * color for that segment. It can be used for segmentation tools that need to\n * display the color of their annotation.\n *\n * @param toolGroupId - The Id of the tool group that owns the segmentation representation.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment in the segmentation\n * @returns A color.\n */\nfunction getColorForSegmentIndex(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): Color {\n  const segmentationRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segmentationRepresentation) {\n    throw new Error(\n      `segmentation representation with UID ${segmentationRepresentationUID} does not exist for tool group ${toolGroupId}`\n    );\n  }\n\n  const { colorLUTIndex } = segmentationRepresentation;\n\n  // get colorLUT\n  const colorLUT = SegmentationState.getColorLUT(colorLUTIndex);\n  return colorLUT[segmentIndex];\n}\n\nfunction setColorForSegmentIndex(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number,\n  color: Color\n): void {\n  // Get the reference to the color in the colorLUT.\n  const colorReference = getColorForSegmentIndex(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n\n  // Modify the values by reference\n  for (let i = 0; i < color.length; i++) {\n    colorReference[i] = color[i];\n  }\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nexport {\n  getColorForSegmentIndex,\n  addColorLUT,\n  setColorLUT,\n  setColorForSegmentIndex,\n};\n","import { cache, Types } from '@cornerstonejs/core';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getSegmentationRepresentations } from '../../../stateManagement/segmentation/segmentationState';\nimport { ToolGroupSpecificRepresentation } from '../../../types/SegmentationStateTypes';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nimport SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\n\nfunction getSegmentationIndices(segmentationId) {\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n\n  if (segmentation.type === SegmentationRepresentations.Labelmap) {\n    const volume = cache.getVolume(segmentationId);\n    const scalarData = volume.getScalarData();\n\n    const keySet = {};\n    for (let i = 0; i < scalarData.length; i++) {\n      const segmentIndex = scalarData[i];\n      if (segmentIndex !== 0 && !keySet[segmentIndex]) {\n        keySet[segmentIndex] = true;\n      }\n    }\n    return Object.keys(keySet).map((it) => parseInt(it, 10));\n  } else if (segmentation.type === SegmentationRepresentations.Contour) {\n    const geometryIds = segmentation.representationData.CONTOUR?.geometryIds;\n\n    if (!geometryIds) {\n      throw new Error(\n        `No geometryIds found for segmentationId ${segmentationId}`\n      );\n    }\n\n    return geometryIds.map((geometryId) => {\n      const geometry = cache.getGeometry(geometryId) as Types.IGeometry;\n      return (geometry.data as Types.IContourSet).getSegmentIndex();\n    });\n  }\n}\n\n/**\n * Set the visibility of a segmentation representation for a given tool group. It fires\n * a SEGMENTATION_REPRESENTATION_MODIFIED event. Visibility true will show all segments\n * and visibility false will hide all segments\"\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n * @param toolGroupId - The Id of the tool group that contains the segmentation.\n * @param segmentationRepresentationUID - The id of the segmentation representation to modify its visibility.\n * @param visibility - boolean\n */\nfunction setSegmentationVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  visibility: boolean\n): void {\n  const toolGroupSegmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  if (!toolGroupSegmentationRepresentations) {\n    return;\n  }\n\n  const representation = toolGroupSegmentationRepresentations.find(\n    (representation: ToolGroupSpecificRepresentation) =>\n      representation.segmentationRepresentationUID ===\n      segmentationRepresentationUID\n  );\n\n  if (!representation) {\n    return;\n  }\n\n  const { segmentsHidden, segmentationId } = representation;\n\n  const indices = getSegmentationIndices(segmentationId);\n\n  // if visibility is set to be true, we need to remove all the segments\n  // from the segmentsHidden set, otherwise we need to add all the segments\n  // to the segmentsHidden set\n  if (visibility) {\n    segmentsHidden.clear();\n  } else {\n    indices.forEach((index) => {\n      segmentsHidden.add(index);\n    });\n  }\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    representation.segmentationRepresentationUID\n  );\n}\n\n/**\n * Get the visibility of a segmentation data for a given tool group.\n *\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The id of the segmentation data to get\n * @returns A boolean value that indicates whether the segmentation data is visible or\n * not on the toolGroup\n */\nfunction getSegmentationVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): boolean | undefined {\n  const toolGroupSegmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  const representation = toolGroupSegmentationRepresentations.find(\n    (representation: ToolGroupSpecificRepresentation) =>\n      representation.segmentationRepresentationUID ===\n      segmentationRepresentationUID\n  );\n\n  if (!representation) {\n    return;\n  }\n\n  const { segmentsHidden } = representation;\n\n  return segmentsHidden.size === 0;\n}\n\n/**\n * Set the visibility of the given segment indices to the given visibility. This\n * is a helper to set the visibility of multiple segments at once and reduces\n * the number of events fired.\n *\n * @param toolGroupId -  The tool group id of the segmentation representation.\n * @param segmentationRepresentationUID -  The UID of the segmentation\n * representation.\n * @param segmentIndices -  The indices of the segments to be hidden/shown.\n * @param visibility -  The visibility to set the segments to.\n *\n */\nfunction setSegmentsVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndices: number[],\n  visibility: boolean\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    return;\n  }\n\n  segmentIndices.forEach((segmentIndex) => {\n    visibility\n      ? segRepresentation.segmentsHidden.delete(segmentIndex)\n      : segRepresentation.segmentsHidden.add(segmentIndex);\n  });\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nfunction setSegmentVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number,\n  visibility: boolean\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    return;\n  }\n\n  visibility\n    ? segRepresentation.segmentsHidden.delete(segmentIndex)\n    : segRepresentation.segmentsHidden.add(segmentIndex);\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nexport {\n  setSegmentationVisibility,\n  getSegmentationVisibility,\n  setSegmentVisibility,\n  setSegmentsVisibility,\n};\n","import { getSegmentation } from './segmentationState';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\n\n/**\n * Set the active segment index for a segmentation Id. It fires a global state\n * modified event.\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param segmentationId - The id of the segmentation that the segment belongs to.\n * @param segmentIndex - The index of the segment to be activated.\n */\nfunction setActiveSegmentIndex(\n  segmentationId: string,\n  segmentIndex: number\n): void {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (segmentation?.activeSegmentIndex !== segmentIndex) {\n    segmentation.activeSegmentIndex = segmentIndex;\n\n    triggerSegmentationModified(segmentationId);\n  }\n}\n\n/**\n * Get the active segment index for a segmentation in the global state\n * @param segmentationId - The id of the segmentation to get the active segment index from.\n * @returns The active segment index for the given segmentation.\n */\nfunction getActiveSegmentIndex(segmentationId: string): number | undefined {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (segmentation) {\n    return segmentation.activeSegmentIndex;\n  }\n}\n\nexport { getActiveSegmentIndex, setActiveSegmentIndex };\n","import {\n  StackViewport,\n  utilities,\n  BaseVolumeViewport,\n} from '@cornerstonejs/core';\nimport { Types } from '@cornerstonejs/core';\nimport { ToolModes } from '../../enums';\nimport { InteractionTypes, ToolProps, PublicToolProps } from '../../types';\n\nexport interface IBaseTool {\n  /** ToolGroup ID the tool instance belongs to */\n  toolGroupId: string;\n  /** Tool supported interaction types */\n  supportedInteractionTypes: InteractionTypes[];\n  /** Tool Mode : Active, Passive, Enabled, Disabled */\n  mode: ToolModes;\n  /** Tool Configuration */\n  configuration: {\n    preventHandleOutsideImage?: boolean;\n    strategies?: Record<string, any>;\n    defaultStrategy?: string;\n    activeStrategy?: string;\n    strategyOptions?: Record<string, unknown>;\n  };\n}\n\n/**\n * Abstract base class from which all tools derive.\n * Deals with cleanly merging custom and default configuration, and strategy\n * application.\n */\nabstract class BaseTool implements IBaseTool {\n  static toolName;\n  /** Supported Interaction Types - currently only Mouse */\n  public supportedInteractionTypes: InteractionTypes[];\n  public configuration: Record<string, any>;\n  /** ToolGroup ID the tool instance belongs to */\n  public toolGroupId: string;\n  /** Tool Mode - Active/Passive/Enabled/Disabled/ */\n  public mode: ToolModes;\n\n  constructor(toolProps: PublicToolProps, defaultToolProps: ToolProps) {\n    const initialProps = utilities.deepMerge(defaultToolProps, toolProps);\n\n    const {\n      configuration = {},\n      supportedInteractionTypes,\n      toolGroupId,\n    } = initialProps;\n\n    // If strategies are not initialized in the tool config\n    if (!configuration.strategies) {\n      configuration.strategies = {};\n      configuration.defaultStrategy = undefined;\n      configuration.activeStrategy = undefined;\n      configuration.strategyOptions = {};\n    }\n\n    this.toolGroupId = toolGroupId;\n    this.supportedInteractionTypes = supportedInteractionTypes || [];\n    this.configuration = Object.assign({}, configuration);\n    this.mode = ToolModes.Disabled;\n  }\n\n  /**\n   * Returns the name of the tool\n   * @returns The name of the tool.\n   */\n  public getToolName(): string {\n    // Since toolName is static we get it from the class constructor\n    return (<typeof BaseTool>this.constructor).toolName;\n  }\n\n  /**\n   * It applies the active strategy to the enabled element.\n   * @param enabledElement - The element that is being operated on.\n   * @param operationData - The data that needs to be passed to the strategy.\n   * @returns The result of the strategy.\n   */\n  public applyActiveStrategy(\n    enabledElement: Types.IEnabledElement,\n    operationData: unknown\n  ): any {\n    const { strategies, activeStrategy } = this.configuration;\n    return strategies[activeStrategy].call(this, enabledElement, operationData);\n  }\n\n  /**\n   * merges the new configuration with the tool configuration\n   * @param configuration - toolConfiguration\n   */\n  public setConfiguration(newConfiguration: Record<string, any>): void {\n    this.configuration = utilities.deepMerge(\n      this.configuration,\n      newConfiguration\n    );\n  }\n\n  /**\n   * Sets the active strategy for a tool. Strategies are\n   * multiple implementations of tool behavior that can be switched by tool\n   * configuration.\n   *\n   * @param strategyName - name of the strategy to be set as active\n   */\n  public setActiveStrategy(strategyName: string): void {\n    this.setConfiguration({ activeStrategy: strategyName });\n  }\n\n  /**\n   * Returns the volumeId for the volume viewport. It will grabbed the volumeId\n   * from the volumeId if particularly specified in the tool configuration, or if\n   * not, the first actorUID in the viewport is returned as the volumeId. NOTE: for\n   * segmentations, actorUID is not necessarily the volumeId since the segmentation\n   * can have multiple representations, use segmentation helpers to get the volumeId\n   * based on the actorUID.\n   *\n   * @param viewport - Volume viewport\n   * @returns the volumeId for the viewport if specified in the tool configuration,\n   * or the first actorUID in the viewport if not.\n   */\n  private getTargetVolumeId(viewport: Types.IViewport): string | undefined {\n    if (this.configuration.volumeId) {\n      return this.configuration.volumeId;\n    }\n\n    // If volume not specified, then return the actorUID for the\n    // default actor - first actor\n    const actorEntries = viewport.getActors();\n\n    if (!actorEntries) {\n      return;\n    }\n\n    // find the first image actor of instance type vtkVolume\n    return actorEntries.find(\n      (actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume'\n    )?.uid;\n  }\n\n  /**\n   * Get the image that is displayed for the targetId in the cachedStats\n   * which can be either imageId:<imageId> or volumeId:<volumeId>\n   *\n   * @param targetId - annotation targetId stored in the cached stats\n   * @param renderingEngine - The rendering engine\n   * @returns The image data for the target.\n   */\n  protected getTargetIdImage(\n    targetId: string,\n    renderingEngine: Types.IRenderingEngine\n  ): Types.IImageData | Types.CPUIImageData | Types.IImageVolume {\n    if (targetId.startsWith('imageId:')) {\n      const imageId = targetId.split('imageId:')[1];\n      const imageURI = utilities.imageIdToURI(imageId);\n      let viewports = utilities.getViewportsWithImageURI(\n        imageURI,\n        renderingEngine.id\n      );\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      viewports = viewports.filter((viewport) => {\n        return viewport.getCurrentImageId() === imageId;\n      });\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      return viewports[0].getImageData();\n    } else if (targetId.startsWith('volumeId:')) {\n      const volumeId = targetId.split('volumeId:')[1];\n      const viewports = utilities.getViewportsWithVolumeId(\n        volumeId,\n        renderingEngine.id\n      );\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      return viewports[0].getImageData();\n    } else {\n      throw new Error(\n        'getTargetIdImage: targetId must start with \"imageId:\" or \"volumeId:\"'\n      );\n    }\n  }\n\n  /**\n   * Get the target Id for the viewport which will be used to store the cached\n   * statistics scoped to that target in the annotations.\n   * For StackViewport, targetId is the viewportId, but for the volume viewport,\n   * the targetId will be grabbed from the volumeId if particularly specified\n   * in the tool configuration, or if not, the first actorUID in the viewport.\n   *\n   * @param viewport - viewport to get the targetId for\n   * @returns targetId\n   */\n  protected getTargetId(viewport: Types.IViewport): string | undefined {\n    if (viewport instanceof StackViewport) {\n      return `imageId:${viewport.getCurrentImageId()}`;\n    } else if (viewport instanceof BaseVolumeViewport) {\n      return `volumeId:${this.getTargetVolumeId(viewport)}`;\n    } else {\n      throw new Error(\n        'getTargetId: viewport must be a StackViewport or VolumeViewport'\n      );\n    }\n  }\n}\n\n// Note: this is a workaround since terser plugin does not support static blocks\n// yet and we can't easily say static toolName = \"BaseTool\" in the class definition.\nBaseTool.toolName = 'BaseTool';\nexport default BaseTool;\n","import { state } from '../store';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nconst VIEWPORT_ELEMENT = 'viewport-element';\n\n/**\n * Returns the SVG drawing helper for the given HTML element.\n * @param element - The HTML element to get the SVG drawing helper for.\n * @private\n */\nfunction getSvgDrawingHelper(element: HTMLDivElement): SVGDrawingHelper {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId, renderingEngineId } = enabledElement;\n  const canvasHash = `${viewportId}:${renderingEngineId}`;\n  const svgLayerElement = _getSvgLayer(element);\n\n  // Reset touched\n  Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n    state.svgNodeCache[canvasHash][cacheKey].touched = false;\n  });\n\n  return {\n    svgLayerElement: svgLayerElement,\n    svgNodeCacheForCanvas: state.svgNodeCache,\n    getSvgNode: getSvgNode.bind(this, canvasHash),\n    appendNode: appendNode.bind(this, svgLayerElement, canvasHash),\n    setNodeTouched: setNodeTouched.bind(this, canvasHash),\n    clearUntouched: clearUntouched.bind(this, svgLayerElement, canvasHash),\n  };\n}\n\n/**\n *\n * @param element\n * @private\n */\nfunction _getSvgLayer(element) {\n  const viewportElement = `.${VIEWPORT_ELEMENT}`;\n  const internalDivElement = element.querySelector(viewportElement);\n  const svgLayer = internalDivElement.querySelector('.svg-layer');\n\n  return svgLayer;\n}\n\nfunction getSvgNode(canvasHash, cacheKey) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return;\n  }\n\n  if (state.svgNodeCache[canvasHash][cacheKey]) {\n    return state.svgNodeCache[canvasHash][cacheKey].domRef;\n  }\n}\n\nfunction appendNode(svgLayerElement, canvasHash, svgNode, cacheKey) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return null;\n  }\n\n  state.svgNodeCache[canvasHash][cacheKey] = {\n    touched: true,\n    domRef: svgNode,\n  };\n\n  svgLayerElement.appendChild(svgNode);\n}\n\nfunction setNodeTouched(canvasHash, cacheKey) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return;\n  }\n\n  if (state.svgNodeCache[canvasHash][cacheKey]) {\n    state.svgNodeCache[canvasHash][cacheKey].touched = true;\n  }\n}\n\nfunction clearUntouched(svgLayerElement, canvasHash) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return;\n  }\n\n  Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n    const cacheEntry = state.svgNodeCache[canvasHash][cacheKey];\n\n    if (!cacheEntry.touched && cacheEntry.domRef) {\n      svgLayerElement.removeChild(cacheEntry.domRef);\n      delete state.svgNodeCache[canvasHash][cacheKey];\n    }\n  });\n}\n\nexport default getSvgDrawingHelper;\n","import getSvgDrawingHelper from './getSvgDrawingHelper';\n\nfunction draw(\n  element: HTMLDivElement,\n  fn: (svgDrawingElement: any) => any\n): void {\n  const svgDrawingHelper = getSvgDrawingHelper(element);\n\n  // Save...\n  fn(svgDrawingHelper);\n  // Restore...\n\n  svgDrawingHelper.clearUntouched();\n}\n\nexport default draw;\n","function _getHash(\n  annotationUID: string,\n  drawingElementType: string,\n  nodeUID: string\n): string {\n  return `${annotationUID}::${drawingElementType}::${nodeUID}`;\n}\n\nexport default _getHash;\n","export function _setAttributesIfNecessary(attributes, svgNode) {\n  Object.keys(attributes).forEach((key) => {\n    const currentValue = svgNode.getAttribute(key);\n    const newValue = attributes[key];\n    if (newValue === undefined || newValue === '') {\n      svgNode.removeAttribute(key);\n    } else if (currentValue !== newValue) {\n      svgNode.setAttribute(key, newValue);\n    }\n  });\n}\n\nexport default _setAttributesIfNecessary;\n","export function _setNewAttributesIfValid(attributes, svgNode) {\n  Object.keys(attributes).forEach((key) => {\n    const newValue = attributes[key];\n    if (newValue !== undefined && newValue !== '') {\n      svgNode.setAttribute(key, newValue);\n    }\n  });\n}\n\nexport default _setNewAttributesIfValid;\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\n\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './_setNewAttributesIfValid';\n\nfunction drawCircle(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  circleUID: string,\n  center: Types.Point2,\n  radius: number,\n  options = {},\n  dataId = ''\n): void {\n  const { color, fill, width, lineWidth, lineDash } = Object.assign(\n    {\n      color: 'dodgerblue',\n      fill: 'transparent',\n      width: '2',\n      lineDash: undefined,\n      lineWidth: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  // variable for the namespace\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'circle', circleUID);\n  const existingCircleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const attributes = {\n    cx: `${center[0]}`,\n    cy: `${center[1]}`,\n    r: `${radius}`,\n    stroke: color,\n    fill,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingCircleElement) {\n    _setAttributesIfNecessary(attributes, existingCircleElement);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newCircleElement = document.createElementNS(svgns, 'circle');\n\n    if (dataId !== '') {\n      newCircleElement.setAttribute('data-id', dataId);\n    }\n\n    _setNewAttributesIfValid(attributes, newCircleElement);\n\n    svgDrawingHelper.appendNode(newCircleElement, svgNodeHash);\n  }\n}\n\nexport default drawCircle;\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './_setNewAttributesIfValid';\n\nfunction drawEllipse(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  ellipseUID: string,\n  corner1: Types.Point2,\n  corner2: Types.Point2,\n  options = {},\n  dataId = ''\n): void {\n  const { color, width, lineWidth, lineDash } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'ellipse', ellipseUID);\n  const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const w = Math.abs(corner1[0] - corner2[0]);\n  const h = Math.abs(corner1[1] - corner2[1]);\n  const xMin = Math.min(corner1[0], corner2[0]);\n  const yMin = Math.min(corner1[1], corner2[1]);\n\n  const center = [xMin + w / 2, yMin + h / 2];\n  const radiusX = w / 2;\n  const radiusY = h / 2;\n\n  const attributes = {\n    cx: `${center[0]}`,\n    cy: `${center[1]}`,\n    rx: `${radiusX}`,\n    ry: `${radiusY}`,\n    stroke: color,\n    fill: 'transparent',\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingEllipse) {\n    _setAttributesIfNecessary(attributes, existingEllipse);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const svgEllipseElement = document.createElementNS(svgns, 'ellipse');\n\n    if (dataId !== '') {\n      svgEllipseElement.setAttribute('data-id', dataId);\n    }\n\n    _setNewAttributesIfValid(attributes, svgEllipseElement);\n\n    svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);\n  }\n}\n\nexport default drawEllipse;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport _setNewAttributesIfValid from './_setNewAttributesIfValid';\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\nfunction drawHandles(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  handleGroupUID: string,\n  handlePoints: Array<Types.Point2>,\n  options = {}\n): void {\n  const { color, handleRadius, width, lineWidth, fill, type, opacity } =\n    Object.assign(\n      {\n        color: 'dodgerblue',\n        handleRadius: '6',\n        width: '2',\n        lineWidth: undefined,\n        fill: 'transparent',\n        type: 'circle',\n        opacity: 1,\n      },\n      options\n    );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  for (let i = 0; i < handlePoints.length; i++) {\n    const handle = handlePoints[i];\n\n    // variable for the namespace\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(\n      annotationUID,\n      'handle',\n      `hg-${handleGroupUID}-index-${i}`\n    );\n\n    let attributes;\n    if (type === 'circle') {\n      attributes = {\n        cx: `${handle[0]}`,\n        cy: `${handle[1]}`,\n        r: handleRadius,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        opacity: opacity,\n      };\n    } else if (type === 'rect') {\n      const handleRadiusFloat = parseFloat(handleRadius);\n      const side = handleRadiusFloat * 1.5;\n      const x = handle[0] - side * 0.5;\n      const y = handle[1] - side * 0.5;\n\n      attributes = {\n        x: `${x}`,\n        y: `${y}`,\n        width: `${side}`,\n        height: `${side}`,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        rx: `${side * 0.1}`,\n        opacity: opacity,\n      };\n    } else {\n      throw new Error(`Unsupported handle type: ${type}`);\n    }\n\n    const existingHandleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n    if (existingHandleElement) {\n      _setAttributesIfNecessary(attributes, existingHandleElement);\n\n      svgDrawingHelper.setNodeTouched(svgNodeHash);\n    } else {\n      const newHandleElement = document.createElementNS(svgns, type);\n\n      _setNewAttributesIfValid(attributes, newHandleElement);\n\n      svgDrawingHelper.appendNode(newHandleElement, svgNodeHash);\n    }\n  }\n}\n\nexport default drawHandles;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport _setNewAttributesIfValid from './_setNewAttributesIfValid';\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\nexport default function drawLine(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  lineUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {},\n  dataId = ''\n): void {\n  // if length is NaN return\n  if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n    return;\n  }\n\n  const { color, width, lineWidth, lineDash, shadow } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n      shadow: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'line', lineUID);\n  const existingLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n  const dropShadowStyle = shadow\n    ? `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`\n    : '';\n\n  const attributes = {\n    x1: `${start[0]}`,\n    y1: `${start[1]}`,\n    x2: `${end[0]}`,\n    y2: `${end[1]}`,\n    stroke: color,\n    style: dropShadowStyle,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingLine) {\n    // This is run to avoid re-rendering annotations that actually haven't changed\n    _setAttributesIfNecessary(attributes, existingLine);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newLine = document.createElementNS(svgns, 'line');\n\n    if (dataId !== '') {\n      newLine.setAttribute('data-id', dataId);\n    }\n\n    _setNewAttributesIfValid(attributes, newLine);\n\n    svgDrawingHelper.appendNode(newLine, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport _getHash from './_getHash';\nimport _setNewAttributesIfValid from './_setNewAttributesIfValid';\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\n/**\n * Draws an SVG polyline with the given points.\n *\n * The `connectLastToFirst` option, if true, draws a closed polyline, with the\n * last point connected to the first.\n */\nexport default function drawPolyline(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  polylineUID: string,\n  points: Types.Point2[],\n  options: {\n    color?: string;\n    width?: number;\n    lineWidth?: number;\n    lineDash?: string;\n    connectLastToFirst?: boolean;\n  }\n): void {\n  if (points.length < 2) {\n    return;\n  }\n\n  const { color, width, lineWidth, lineDash } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n      connectLastToFirst: false,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'polyline', polylineUID);\n  const existingPolyLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  let pointsAttribute = '';\n\n  for (const point of points) {\n    pointsAttribute += `${point[0]}, ${point[1]} `;\n  }\n\n  if (options.connectLastToFirst) {\n    const firstPoint = points[0];\n\n    pointsAttribute += `${firstPoint[0]}, ${firstPoint[1]}`;\n  }\n\n  const attributes = {\n    points: pointsAttribute,\n    stroke: color,\n    fill: 'none',\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingPolyLine) {\n    // This is run to avoid re-rendering annotations that actually haven't changed\n    _setAttributesIfNecessary(attributes, existingPolyLine);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newPolyLine = document.createElementNS(svgns, 'polyline');\n\n    _setNewAttributesIfValid(attributes, newPolyLine);\n\n    svgDrawingHelper.appendNode(newPolyLine, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\n\n/**\n * Draws a textBox.\n *\n * @param textLines - The text to display.\n * @param position - The x/y position of the textbox\n * @param options - Options for the textBox.\n * @returns Bounding box; can be used for isPointNearTool\n */\nfunction drawTextBox(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textUID: string,\n  textLines: Array<string>,\n  position: Types.Point2,\n  options = {}\n): SVGRect {\n  const mergedOptions = Object.assign(\n    {\n      fontFamily: 'Helvetica, Arial, sans-serif',\n      fontSize: '14px',\n      color: 'rgb(255, 255, 0)',\n      background: '',\n      padding: 25,\n      centerX: false,\n      centerY: true,\n    },\n    options\n  );\n\n  // Draw each of the text lines on top of the background box\n  const textGroupBoundingBox = _drawTextGroup(\n    svgDrawingHelper,\n    annotationUID,\n    textUID,\n    textLines,\n    position,\n    mergedOptions\n  );\n\n  return textGroupBoundingBox;\n}\n\nfunction _drawTextGroup(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textUID: string,\n  textLines: Array<string> = [''],\n  position: Types.Point2,\n  options: any\n): SVGRect {\n  const { padding, color, fontFamily, fontSize, background } = options;\n\n  let textGroupBoundingBox;\n  const [x, y] = [position[0] + padding, position[1] + padding];\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'text', textUID);\n  const existingTextGroup = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  // Todo: right now textBox gets a re-render even if the textBox has not changed\n  // and evenIf the attributes are not set again since they are the same.\n  if (existingTextGroup) {\n    // TODO: Iterate each node and update color? font-size?\n    const textElement = existingTextGroup.querySelector('text');\n    const textSpans = Array.from(textElement.children) as Array<SVGElement>;\n\n    for (let i = 0; i < textSpans.length; i++) {\n      const textSpanElement = textSpans[i];\n      const text = textLines[i] || '';\n\n      textSpanElement.textContent = text;\n    }\n\n    // if the textLines have changed size, we need to create textSpans for them\n    if (textLines.length > textSpans.length) {\n      for (let i = 0; i < textLines.length - textSpans.length; i++) {\n        const textLine = textLines[i + textSpans.length];\n        const textSpan = _createTextSpan(textLine);\n\n        textElement.appendChild(textSpan);\n      }\n\n      existingTextGroup.appendChild(textElement);\n      svgDrawingHelper.appendNode(existingTextGroup, svgNodeHash);\n    }\n\n    const textAttributes = {\n      fill: color,\n      'font-size': fontSize,\n      'font-family': fontFamily,\n    };\n\n    const textGroupAttributes = {\n      transform: `translate(${x} ${y})`,\n    };\n\n    // Todo: for some reason this does not work to not re-render the textBox\n    _setAttributesIfNecessary(textAttributes, textElement);\n    _setAttributesIfNecessary(textGroupAttributes, existingTextGroup);\n\n    textGroupBoundingBox = _drawTextBackground(existingTextGroup, background);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const textGroup = document.createElementNS(svgns, 'g');\n\n    textGroup.setAttribute('transform', `translate(${x} ${y})`);\n\n    //\n    const textElement = _createTextElement(svgDrawingHelper, options);\n    for (let i = 0; i < textLines.length; i++) {\n      const textLine = textLines[i];\n      const textSpan = _createTextSpan(textLine);\n\n      textElement.appendChild(textSpan);\n    }\n\n    textGroup.appendChild(textElement);\n    svgDrawingHelper.appendNode(textGroup, svgNodeHash);\n    textGroupBoundingBox = _drawTextBackground(textGroup, background);\n  }\n\n  // We translate the group using `position`\n  // which means we also need to pluck those values when returning\n  // the bounding box\n  return Object.assign({}, textGroupBoundingBox, {\n    x,\n    y,\n    height: textGroupBoundingBox.height + padding,\n    width: textGroupBoundingBox.width + padding,\n  });\n}\n\nfunction _createTextElement(\n  svgDrawingHelper: SVGDrawingHelper,\n  options: any\n): SVGElement {\n  const { color, fontFamily, fontSize } = options;\n  const svgns = 'http://www.w3.org/2000/svg';\n  const textElement = document.createElementNS(svgns, 'text');\n  const noSelectStyle =\n    'user-select: none; pointer-events: none; -webkit-tap-highlight-color:  rgba(255, 255, 255, 0);';\n  const dropShadowStyle = `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`;\n  const combinedStyle = `${noSelectStyle}${dropShadowStyle}`;\n\n  // font-size=\"100\"\n  textElement.setAttribute('x', '0');\n  textElement.setAttribute('y', '0');\n  textElement.setAttribute('fill', color);\n  textElement.setAttribute('font-family', fontFamily);\n  textElement.setAttribute('font-size', fontSize);\n  textElement.setAttribute('style', combinedStyle);\n\n  return textElement;\n}\n\nfunction _createTextSpan(text): SVGElement {\n  const svgns = 'http://www.w3.org/2000/svg';\n  const textSpanElement = document.createElementNS(svgns, 'tspan');\n\n  // TODO: centerX\n  // (parent width / 2) - my width\n  // TODO: centerY\n\n  textSpanElement.setAttribute('x', '0');\n  textSpanElement.setAttribute('dy', '1.2em');\n  textSpanElement.textContent = text;\n\n  return textSpanElement;\n}\n\nfunction _drawTextBackground(group: SVGGElement, color: string) {\n  let element = group.querySelector('rect.background');\n\n  // If we have no background color, remove any element that exists and return\n  // the bounding box of the text\n  if (!color) {\n    if (element) {\n      group.removeChild(element);\n    }\n\n    return group.getBBox();\n  }\n\n  // Otherwise, check if we have a <rect> element. If not, create one\n  if (!element) {\n    element = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n    element.setAttribute('class', 'background');\n    group.insertBefore(element, group.firstChild);\n  }\n\n  // Get the text groups's bounding box and use it to draw the background rectangle\n  const bBox = group.getBBox();\n\n  const attributes = {\n    x: `${bBox.x}`,\n    y: `${bBox.y}`,\n    width: `${bBox.width}`,\n    height: `${bBox.height}`,\n    fill: color,\n  };\n\n  _setAttributesIfNecessary(attributes, element);\n\n  return bBox;\n}\n\nexport default drawTextBox;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Find the closest point to the target point\n *\n * @param sourcePoints - The potential source points.\n * @param targetPoint - The target point, used to find the closest source.\n * @returns The closest point in the array of point sources\n */\nexport default function findClosestPoint(\n  sourcePoints: Array<Types.Point2>,\n  targetPoint: Types.Point2\n): Types.Point2 {\n  let minPoint = [0, 0];\n  let minDistance = Number.MAX_SAFE_INTEGER;\n\n  sourcePoints.forEach(function (sourcePoint) {\n    const distance = _distanceBetween(targetPoint, sourcePoint);\n\n    if (distance < minDistance) {\n      minDistance = distance;\n      minPoint = [...sourcePoint];\n    }\n  });\n\n  return minPoint as Types.Point2;\n}\n\n/**\n *\n * @private\n * @param p1\n * @param p2\n */\nfunction _distanceBetween(p1: Types.Point2, p2: Types.Point2): number {\n  const [x1, y1] = p1;\n  const [x2, y2] = p2;\n\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport drawLine from './drawLine';\nimport findClosestPoint from '../utilities/math/vec2/findClosestPoint';\nimport { PlanarBoundingBox, SVGDrawingHelper } from '../types';\n\n/**\n * Draw a link between an annotation to a box.\n */\nfunction drawLink(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  linkUID: string,\n  // Find closest point to approx. bounding box\n  annotationAnchorPoints: Array<Types.Point2>,\n  refPoint: Types.Point2,\n  // Find bounding box point that's closest to our identified\n  // start point\n  boundingBox: PlanarBoundingBox,\n  options = {}\n): void {\n  // The closest anchor point (for the annotation) to the\n  // text box / bounding box\n  const start =\n    annotationAnchorPoints.length > 0\n      ? findClosestPoint(annotationAnchorPoints, refPoint)\n      : refPoint;\n\n  // Calculate the midpoints of the bounding box\n  const boundingBoxPoints = _boundingBoxPoints(boundingBox);\n  // Find the closest textBox midpoint to the annotation's anchor/start point\n  const end = findClosestPoint(boundingBoxPoints, start);\n\n  // Finally we draw the dashed linking line\n  const mergedOptions = Object.assign(\n    {\n      color: 'rgb(255, 255, 0)',\n      lineWidth: '1',\n      lineDash: '2,3',\n    },\n    options\n  );\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    `link-${linkUID}`,\n    start,\n    end,\n    mergedOptions\n  );\n}\n\n/**\n * Find potential anchor points for a given bounding box. For example, it may\n * look nicer to draw a line from the \"middle left\" of a bounding box to an\n * annotation (instead of from a corner). This function calculates those points\n *\n * @param boundingBox\n */\nfunction _boundingBoxPoints(\n  boundingBox: PlanarBoundingBox\n): Array<Types.Point2> {\n  const { x: left, y: top, height, width } = boundingBox;\n  const halfWidth = width / 2;\n  const halfHeight = height / 2;\n\n  const topMiddle = [left + halfWidth, top] as Types.Point2;\n  const leftMiddle = [left, top + halfHeight] as Types.Point2;\n  const bottomMiddle = [left + halfWidth, top + height] as Types.Point2;\n  const rightMiddle = [left + width, top + halfHeight] as Types.Point2;\n\n  return [topMiddle, leftMiddle, bottomMiddle, rightMiddle];\n}\n\nexport default drawLink;\n","import type { Types } from '@cornerstonejs/core';\n\nimport drawTextBox from './drawTextBox';\nimport drawLink from './drawLink';\nimport { SVGDrawingHelper } from '../types';\n\nfunction drawLinkedTextBox(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textBoxUID: string,\n  //\n  textLines: Array<string>,\n  textBoxPosition: Types.Point2,\n  annotationAnchorPoints: Array<Types.Point2>,\n  textBox: unknown,\n  options = {}\n  // TODO: yCenter as an option\n): SVGRect {\n  const mergedOptions = Object.assign(\n    {\n      handleRadius: '6',\n      centering: {\n        x: false,\n        y: true, // yCenter,\n      },\n    },\n    options\n  );\n\n  // Draw the text box\n  const canvasBoundingBox = drawTextBox(\n    svgDrawingHelper,\n    annotationUID,\n    textBoxUID,\n    textLines,\n    textBoxPosition,\n    mergedOptions\n  );\n  // if (textBox.hasMoved) {\n  //   // Draw dashed link line between tool and text\n  drawLink(\n    svgDrawingHelper,\n    annotationUID,\n    textBoxUID,\n    annotationAnchorPoints, // annotationAnchorPoints\n    textBoxPosition, // refPoint (text)\n    canvasBoundingBox, // textBoxBoundingBox\n    mergedOptions\n  );\n  // }\n\n  // const { top, left, width, height } = canvasBoundingBox\n\n  // textBox.worldBoundingBox = {\n  //   topLeft: canvasToWorld([left, top]),\n  //   topRight: canvasToWorld([left + width, top]),\n  //   bottomLeft: canvasToWorld([left, top + height]),\n  //   bottomRight: canvasToWorld([left + width, top + height]),\n  // }\n\n  return canvasBoundingBox;\n}\n\nexport default drawLinkedTextBox;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './_setNewAttributesIfValid';\nimport { SVGDrawingHelper } from '../types';\n\n// <rect x=\"120\" y=\"100\" width=\"100\" height=\"100\" />\nexport default function drawRect(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  rectangleUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {},\n  dataId = ''\n): void {\n  const {\n    color,\n    width: _width,\n    lineWidth,\n    lineDash,\n  } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || _width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n  const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n  const width = Math.abs(start[0] - end[0]);\n  const height = Math.abs(start[1] - end[1]);\n\n  const attributes = {\n    x: `${tlhc[0]}`,\n    y: `${tlhc[1]}`,\n    width: `${width}`,\n    height: `${height}`,\n    stroke: color,\n    fill: 'transparent',\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingRect) {\n    _setAttributesIfNecessary(attributes, existingRect);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const svgRectElement = document.createElementNS(svgns, 'rect');\n\n    if (dataId !== '') {\n      svgRectElement.setAttribute('data-id', dataId);\n    }\n\n    _setNewAttributesIfValid(attributes, svgRectElement);\n\n    svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\nimport drawLine from './drawLine';\n\nexport default function drawArrow(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  arrowUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {}\n): void {\n  // if length is NaN return\n  if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n    return;\n  }\n\n  const { color, width, lineWidth, lineDash } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // The line itself\n  drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {\n    color,\n    width,\n    lineWidth,\n    lineDash,\n  });\n\n  // Drawing the head arrow with two lines\n  // Variables to be used when creating the arrow\n  const headLength = 10;\n  const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n\n  const firstLine = {\n    start: [\n      end[0] - headLength * Math.cos(angle - Math.PI / 7),\n      end[1] - headLength * Math.sin(angle - Math.PI / 7),\n    ] as Types.Point2,\n    end: end,\n  };\n\n  const secondLine = {\n    start: [\n      end[0] - headLength * Math.cos(angle + Math.PI / 7),\n      end[1] - headLength * Math.sin(angle + Math.PI / 7),\n    ] as Types.Point2,\n    end: end,\n  };\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    '2',\n    firstLine.start,\n    firstLine.end,\n    {\n      color,\n      width,\n      lineWidth,\n    }\n  );\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    '3',\n    secondLine.start,\n    secondLine.end,\n    {\n      color,\n      width,\n      lineWidth,\n    }\n  );\n}\n","import { ToolGroupManager } from '../store';\nimport { ToolModes } from '../enums';\nimport { getEnabledElement } from '@cornerstonejs/core';\n\ntype ModesFilter = Array<ToolModes>;\n\n/**\n * Finds the enabled element, and iterates over the tools inside its\n * toolGroup. Returns the list of tool instances that are valid based\n * on the provided tool mode.\n *\n * @param element Canvas element\n * @param modesFilter tool modes: active, passive, enabled, disabled\n * @returns enabled tool instances\n */\nexport default function getToolsWithModesForElement(\n  element: HTMLDivElement,\n  modesFilter: ModesFilter\n) {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return [];\n  }\n\n  const enabledTools = [];\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    /* filter out tools that don't have options */\n    if (!toolOptions) {\n      continue;\n    }\n\n    if (modesFilter.includes(toolOptions.mode)) {\n      const toolInstance = toolGroup.getToolInstance(toolName);\n      enabledTools.push(toolInstance);\n    }\n  }\n\n  return enabledTools;\n}\n","import {\n  getEnabledElement,\n  triggerEvent,\n  getRenderingEngine,\n} from '@cornerstonejs/core';\nimport { Events, ToolModes } from '../enums';\nimport { draw as drawSvg } from '../drawingSvg';\nimport getToolsWithModesForElement from './getToolsWithModesForElement';\nimport { AnnotationRenderedEventDetail } from '../types/EventTypes';\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * AnnotationRenderingEngine is a class that is responsible for rendering\n * annotations defined in the renderAnnotation method of annotation tools on the page.\n * It mimics the RenderingEngine in the Cornerstone Core. Here it uses requestAnimationFrame\n * is used to render annotations by calling renderAnnotations() on each enabled tool. Note: This\n * is a Singleton class and should not be instantiated directly. To trigger\n * an annotation render for an HTML element containing a viewport you can use\n *\n * ```\n * triggerAnnotationRender(element)\n * ```\n */\nclass AnnotationRenderingEngine {\n  public hasBeenDestroyed: boolean;\n  private _needsRender: Set<HTMLDivElement> = new Set();\n  private _animationFrameSet = false;\n  private _animationFrameHandle: number | null = null;\n  private _viewportElements: Map<string, HTMLDivElement>;\n\n  constructor() {\n    this._viewportElements = new Map();\n  }\n\n  /**\n   * Add the viewport's HTMLDivElement to the viewports for rendering. This method\n   * just informs the annotationRenderingEngine about the viewport and\n   * does not initiate a render.\n   * @param viewportId - Viewport Unique identifier\n   * @param element - HTMLDivElement\n   */\n  public addViewportElement(viewportId: string, element: HTMLDivElement) {\n    this._viewportElements.set(viewportId, element);\n  }\n\n  /**\n   * Remove the viewport's HTMLDivElement from subsequent annotation renders\n   * @param viewportId - Viewport Unique identifier\n   */\n  public removeViewportElement(viewportId: string, element: HTMLDivElement) {\n    this._viewportElements.delete(viewportId);\n\n    // delete element from needsRender if element exist\n    this._needsRender.delete(element);\n\n    // I don' think there is any disadvantage to canceling the animation frame\n    // and resetting the flags on viewport's element removal, since the removeVIewportElement\n    // might be as a result of reEnabling the element (in re-enable we disable first), hence the need to render the\n    // new one while removing the old one\n    this._reset();\n  }\n\n  /**\n   * It tells the AnnotationRenderingEngine to render the viewport element the next\n   * time it renders.\n   *\n   * @param element - The element to render.\n   */\n  public renderViewport(element: HTMLDivElement): void {\n    this._setViewportsToBeRenderedNextFrame([element]);\n  }\n\n  /**\n   * _throwIfDestroyed Throws an error if trying to interact with the `RenderingEngine`\n   * instance after its `destroy` method has been called.\n   */\n  private _throwIfDestroyed() {\n    if (this.hasBeenDestroyed) {\n      throw new Error(\n        'this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.'\n      );\n    }\n  }\n\n  private _renderFlaggedViewports = () => {\n    this._throwIfDestroyed();\n\n    const elements = Array.from(this._viewportElements.values());\n\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (this._needsRender.has(element)) {\n        this._triggerRender(element);\n\n        // This viewport has been rendered, we can remove it from the set\n        this._needsRender.delete(element);\n\n        // If there is nothing left that is flagged for rendering, stop here\n        // and allow RAF to be called again\n        if (this._needsRender.size === 0) {\n          this._animationFrameSet = false;\n          this._animationFrameHandle = null;\n          return;\n        }\n      }\n    }\n  };\n\n  private _setAllViewportsToBeRenderedNextFrame() {\n    const elements = [...this._viewportElements.values()];\n\n    elements.forEach((element) => {\n      this._needsRender.add(element);\n    });\n\n    this._renderFlaggedViewports();\n  }\n\n  private _setViewportsToBeRenderedNextFrame(elements: HTMLDivElement[]) {\n    const elementsEnabled = [...this._viewportElements.values()];\n\n    // Add the viewports to the set of flagged viewports\n    elements.forEach((element) => {\n      // only enabledElement need to render\n      if (elementsEnabled.indexOf(element) !== -1) {\n        this._needsRender.add(element);\n      }\n    });\n\n    // Render any flagged viewports\n    this._render();\n  }\n\n  /**\n   * _render Sets up animation frame if necessary\n   */\n  private _render() {\n    // If we have viewports that need rendering and we have not already\n    // set the RAF callback to run on the next frame.\n    if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n      this._animationFrameHandle = window.requestAnimationFrame(\n        this._renderFlaggedViewports\n      );\n\n      // Set the flag that we have already set up the next RAF call.\n      this._animationFrameSet = true;\n    }\n  }\n\n  _triggerRender(element) {\n    const enabledElement = getEnabledElement(element);\n\n    if (!enabledElement) {\n      console.warn('Element has been disabled');\n      return;\n    }\n\n    const renderingEngine = getRenderingEngine(\n      enabledElement.renderingEngineId\n    );\n    if (!renderingEngine) {\n      console.warn('rendering Engine has been destroyed');\n      return;\n    }\n\n    const enabledTools = getToolsWithModesForElement(element, [\n      Active,\n      Passive,\n      Enabled,\n    ]);\n\n    const { renderingEngineId, viewportId } = enabledElement;\n    const eventDetail: AnnotationRenderedEventDetail = {\n      element,\n      renderingEngineId,\n      viewportId,\n    };\n\n    // const enabledToolsWithAnnotations = enabledTools.filter((tool) => {\n    //   const annotations = getAnnotations(tool.getToolName(), {FrameOfReferenceUID});\n    //   return annotations && annotations.length;\n    // });\n\n    drawSvg(element, (svgDrawingHelper) => {\n      let anyRendered = false;\n      const handleDrawSvg = (tool) => {\n        if (tool.renderAnnotation) {\n          const rendered = tool.renderAnnotation(\n            enabledElement,\n            svgDrawingHelper\n          );\n          anyRendered = anyRendered || rendered;\n        }\n      };\n\n      /**\n       * We should be able to filter tools that don't have annotations, but\n       * currently some of tools have renderAnnotation method BUT\n       * don't keep annotation in the state, so if we do so, the tool will not be\n       * rendered.\n       */\n      enabledTools.forEach(handleDrawSvg);\n\n      if (anyRendered) {\n        triggerEvent(element, Events.ANNOTATION_RENDERED, { ...eventDetail });\n      }\n    });\n  }\n\n  /**\n   * _reset Resets the `RenderingEngine`\n   */\n  private _reset() {\n    window.cancelAnimationFrame(this._animationFrameHandle);\n\n    this._needsRender.clear();\n    this._animationFrameSet = false;\n    this._animationFrameHandle = null;\n\n    this._setAllViewportsToBeRenderedNextFrame();\n  }\n}\n\nconst annotationRenderingEngine = new AnnotationRenderingEngine();\n\n/**\n * It triggers the rendering of the annotations for the given HTML element using\n * the `AnnotationRenderingEngine`\n * @param element - The element to render the annotation on.\n */\nfunction triggerAnnotationRender(element: HTMLDivElement): void {\n  annotationRenderingEngine.renderViewport(element);\n}\n\nexport { annotationRenderingEngine, triggerAnnotationRender };\n\nexport default triggerAnnotationRender;\n","import { vec3 } from 'gl-matrix';\nimport { CONSTANTS, metaData } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { Annotations, Annotation } from '../../types';\nimport { debug } from 'console';\n\nconst { EPSILON } = CONSTANTS;\n\nconst PARALLEL_THRESHOLD = 1 - EPSILON;\n\n/**\n * given some `Annotations`, and the slice defined by the camera's normal\n * direction and the spacing in the normal, filter the `Annotations` which\n * is within the slice.\n *\n * @param annotations - Annotations\n * @param camera - The camera\n * @param spacingInNormalDirection - The spacing in the normal direction\n * @returns The filtered `Annotations`.\n */\nexport default function filterAnnotationsWithinSlice(\n  annotations: Annotations,\n  camera: Types.ICamera,\n  spacingInNormalDirection: number\n): Annotations {\n  const { viewPlaneNormal } = camera;\n\n  // The reason we use parallel normals instead of actual orientation is that\n  // flipped action is done through camera API, so we can't rely on the\n  // orientation (viewplaneNormal and viewUp) since even the same image and\n  // same slice if flipped will have different orientation, but still rendering\n  // the same slice. Instead, we choose to use the parallel normals to filter\n  // the annotations and later we fine tune it with the annotation within slice\n  // logic down below.\n  const annotationsWithParallelNormals = annotations.filter(\n    (td: Annotation) => {\n      let annotationViewPlaneNormal = td.metadata.viewPlaneNormal;\n\n      if (!annotationViewPlaneNormal) {\n        // This code is run to set the annotation view plane normal\n        // for historical data which was saved without the normal.\n        const { referencedImageId } = td.metadata;\n        const { imageOrientationPatient } = metaData.get(\n          'imagePlaneModule',\n          referencedImageId\n        );\n        const rowCosineVec = vec3.fromValues(\n          imageOrientationPatient[0],\n          imageOrientationPatient[1],\n          imageOrientationPatient[2]\n        );\n\n        const colCosineVec = vec3.fromValues(\n          imageOrientationPatient[3],\n          imageOrientationPatient[4],\n          imageOrientationPatient[5]\n        );\n\n        annotationViewPlaneNormal = vec3.create() as Types.Point3;\n\n        vec3.cross(annotationViewPlaneNormal, rowCosineVec, colCosineVec);\n        td.metadata.viewPlaneNormal = annotationViewPlaneNormal;\n      }\n      const isParallel =\n        Math.abs(vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >\n        PARALLEL_THRESHOLD;\n\n      return annotationViewPlaneNormal && isParallel;\n    }\n  );\n\n  // No in plane annotations.\n  if (!annotationsWithParallelNormals.length) {\n    return [];\n  }\n\n  // Annotation should be within the slice, which means that it should be between\n  // camera's focalPoint +/- spacingInNormalDirection.\n\n  const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n  const { focalPoint } = camera;\n\n  const annotationsWithinSlice = [];\n\n  for (const annotation of annotationsWithParallelNormals) {\n    const data = annotation.data;\n    const point = data.handles.points[0];\n\n    if (!annotation.isVisible) {\n      continue;\n    }\n    // A = point\n    // B = focal point\n    // P = normal\n\n    // B-A dot P  => Distance in the view direction.\n    // this should be less than half the slice distance.\n\n    const dir = vec3.create();\n\n    vec3.sub(dir, focalPoint, point);\n\n    const dot = vec3.dot(dir, viewPlaneNormal);\n\n    if (Math.abs(dot) < halfSpacingInNormalDirection) {\n      annotationsWithinSlice.push(annotation);\n    }\n  }\n\n  return annotationsWithinSlice;\n}\n","import {\n  StackViewport,\n  VolumeViewport,\n  Types,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\n\nimport filterAnnotationsWithinSlice from './filterAnnotationsWithinSlice';\nimport { Annotations } from '../../types';\n\n/**\n * Given the viewport and the annotations, it filters the annotations array and only\n * return those annotation that should be displayed on the viewport\n * @param annotations - Annotations\n * @returns A filtered version of the annotations.\n */\nexport default function filterAnnotationsForDisplay(\n  viewport: Types.IViewport,\n  annotations: Annotations\n): Annotations {\n  if (viewport instanceof StackViewport) {\n    // 1. Get the currently displayed imageId from the StackViewport\n    const imageId = viewport.getCurrentImageId();\n\n    // 2. remove the dataLoader scheme since it might be an annotation that was\n    // created on the volumeViewport initially and has the volumeLoader scheme\n    // but shares the same imageId\n    const colonIndex = imageId.indexOf(':');\n    const imageURI = imageId.substring(colonIndex + 1);\n\n    // 3. Filter annotation in the frame of reference by the referenced image ID property\n    // Note: With the current implementation drawing on the stack (PT stack) will not\n    // show the annotation on a volume that does not share the same imageURIs (CT Volume),\n    // and we don't have a proper way to check distance either since a stack can be\n    // composed of multiple unrelated images\n    return annotations.filter((annotation) => {\n      if (!annotation.isVisible) {\n        return false;\n      }\n\n      const imageId = annotation.metadata.referencedImageId;\n\n      if (imageId === undefined) {\n        // This annotation was not drawn on a non-coplanar reformat, and such does\n        // note have a referenced imageId.\n        return false;\n      }\n\n      const colonIndex = imageId.indexOf(':');\n      const referenceImageURI = imageId.substring(colonIndex + 1);\n      return referenceImageURI === imageURI;\n    });\n  } else if (viewport instanceof VolumeViewport) {\n    const camera = viewport.getCamera();\n\n    const { spacingInNormalDirection } =\n      csUtils.getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n\n    // Get data with same normal and within the same slice\n    return filterAnnotationsWithinSlice(\n      annotations,\n      camera,\n      spacingInNormalDirection\n    );\n  } else {\n    throw new Error(`Viewport Type ${viewport.type} not supported`);\n  }\n}\n","import {\n  StyleConfig,\n  ToolStyleConfig,\n  StyleSpecifier,\n  AnnotationStyle,\n} from '../../../types/AnnotationStyle';\n\n/**\n * This class handles the configuration of the tool style. You can use it to set\n * the style of a tool at various levels (annotation, viewport, toolGroup, global).\n *\n * The hierarchy of the configuration is as follows (each level falls back to the\n * next level if not specified):\n *\n * 1) Annotation-level styles (with annotationUID)\n *     2) Viewport-level tool styles\n *         - Per-tool: Length on the viewport with viewportId\n *         - Global: All tools on the viewport with viewportId\n *             3) ToolGroup tool styles\n *                 - Per-tool: Angle on toolGroupId in all viewports of the toolGroup\n *                 - Global: All tools in the toolGroupId for all viewports\n *                     4) Default level:\n *                         - Per-tool: Length styles\n *                         - Global: Opinionated styles by CornerstoneJS\n */\nclass ToolStyle {\n  config: StyleConfig;\n\n  constructor() {\n    const defaultConfig = {\n      color: 'rgb(255, 255, 0)',\n      colorHighlighted: 'rgb(0, 255, 0)',\n      colorSelected: 'rgb(0, 220, 0)',\n      colorLocked: 'rgb(255, 255, 0)',\n      lineWidth: '1',\n      lineDash: '',\n      shadow: true,\n      textBoxFontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n      textBoxFontSize: '14px',\n      textBoxColor: 'rgb(255, 255, 0)',\n      textBoxColorHighlighted: 'rgb(0, 255, 0)',\n      textBoxColorSelected: 'rgb(0, 255, 0)',\n      textBoxColorLocked: 'rgb(255, 255, 0)',\n      textBoxBackground: '',\n      textBoxLinkLineWidth: '1',\n      textBoxLinkLineDash: '2,3',\n      textBoxShadow: true,\n    };\n\n    this._initializeConfig(defaultConfig);\n  }\n\n  /**\n   * It returns the annotation-specific tool styles for the annotation with the given UID\n   * @param annotationUID - The unique identifier of the annotation.\n   * @returns The annotation tool styles for the annotation with the given UID.\n   */\n  getAnnotationToolStyles(annotationUID: string): AnnotationStyle {\n    return this.config.annotations && this.config.annotations[annotationUID];\n  }\n\n  /**\n   * It returns the styles for a given viewport. It includes tool-specific and\n   * global styles (all tools in the viewport)\n   * @param viewportId - The id of the viewport\n   * @returns The viewport tool styles for the given viewport id.\n   */\n  getViewportToolStyles(viewportId: string): ToolStyleConfig {\n    return this.config.viewports && this.config.viewports[viewportId];\n  }\n\n  /**\n   * It returns the tool style for the given toolGroup. It includes tool-specific and\n   * global styles (all tools in the toolGroup)\n   * @param toolGroupId - The id of the toolGroup.\n   * @returns The tool styles for the tool group with the given id.\n   */\n  getToolGroupToolStyles(toolGroupId: string): ToolStyleConfig {\n    return this.config.toolGroups && this.config.toolGroups[toolGroupId];\n  }\n\n  /**\n   * It returns the default tool styles from the config file. It includes tool-specific and\n   * global styles (all tools in all tooLGroups)\n   * @returns The default tool styles.\n   */\n  getDefaultToolStyles(): ToolStyleConfig {\n    return this.config.default;\n  }\n\n  /**\n   * It takes an annotationUID and a style object and sets the styles at\n   * the annotationLevel (highest priority in the hierarchy). The styles is an\n   * object with key value pairs.\n   * @param annotationUID - string - The unique identifier for the annotation.\n   * @param styles - ToolStyles\n   */\n  setAnnotationStyles(annotationUID: string, styles: AnnotationStyle) {\n    let annotationSpecificStyles = this.config.annotations;\n\n    if (!annotationSpecificStyles) {\n      this.config = {\n        ...this.config,\n        annotations: {},\n      };\n\n      annotationSpecificStyles = this.config.annotations;\n    }\n\n    annotationSpecificStyles[annotationUID] = styles;\n  }\n\n  /**\n   * It takes a viewportId and a ToolStyles object, and adds the ToolStyles object\n   * at the viewport level (second highest priority in the hierarchy after the annotation level).\n   * @param viewportId - The id of the viewport\n   * @param styles - style object including tool-specific and/or global styles (All tools in the viewport)\n   */\n  setViewportToolStyles(viewportId: string, styles: ToolStyleConfig) {\n    let viewportSpecificStyles = this.config.viewports;\n\n    if (!viewportSpecificStyles) {\n      this.config = {\n        ...this.config,\n        viewports: {},\n      };\n\n      viewportSpecificStyles = this.config.viewports;\n    }\n\n    viewportSpecificStyles[viewportId] = styles;\n  }\n\n  /**\n   * It takes a toolGroupId and a ToolStyles object, and it adds the ToolStyles object\n   * at the toolGroup level (third highest priority in the hierarchy after the viewport level).\n   * @param toolGroupId - The id of the toolGroup\n   * @param styles - style object including tool-specific (in all viewports of the toolGroup) and/or\n   * global styles (All tools in the toolGroup for all viewports)\n   */\n  setToolGroupToolStyles(toolGroupId: string, styles: ToolStyleConfig) {\n    let toolGroupSpecificStyles = this.config.toolGroups;\n\n    if (!toolGroupSpecificStyles) {\n      this.config = {\n        ...this.config,\n        toolGroups: {},\n      };\n\n      toolGroupSpecificStyles = this.config.toolGroups;\n    }\n\n    toolGroupSpecificStyles[toolGroupId] = styles;\n  }\n\n  /**\n   * Sets the default tool styles for the editor. It overrides the default styles for all tools.\n   * @param styles - style object including tool-specific (a tool in all toolGroups) and/or\n   * global styles (All tools in all tooLGroups)\n   */\n  setDefaultToolStyles(styles: ToolStyleConfig) {\n    this.config.default = styles;\n  }\n\n  /**\n   * It returns the value for a given style key, based on the provided specifications.\n   * It starts by looking at the annotation-specific styles, then at the viewport-specific styles,\n   * then at the toolGroup-specific styles, and finally at the default styles.\n   * @param styleKey - The key of the style.\n   * @param styleSpecifier - An object containing the specifications such as viewportId,\n   * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n   * met\n   * @returns The value for the given style key.\n   */\n  getStyleProperty(toolStyle: string, specifications: StyleSpecifier) {\n    const { annotationUID, viewportId, toolGroupId, toolName } = specifications;\n\n    return this._getToolStyle(\n      toolStyle,\n      annotationUID,\n      viewportId,\n      toolGroupId,\n      toolName\n    );\n  }\n\n  private _getToolStyle(\n    property: string,\n    annotationUID: string,\n    viewportId: string,\n    toolGroupId: string,\n    toolName: string\n  ) {\n    if (annotationUID) {\n      const styles = this.getAnnotationToolStyles(annotationUID);\n\n      if (styles) {\n        // check first in the toolSpecific styles\n        if (styles[property]) {\n          return styles[property];\n        }\n      }\n    }\n\n    if (viewportId) {\n      const styles = this.getViewportToolStyles(viewportId);\n\n      if (styles) {\n        // check if we have the viewportId specific style\n        // check first in the toolSpecific styles\n        if (styles[toolName] && styles[toolName][property]) {\n          return styles[toolName][property];\n        }\n\n        // check if we have the style in the viewport specific global viewportSpecificStyles\n        if (styles.global && styles.global[property]) {\n          return styles.global[property];\n        }\n      }\n    }\n\n    if (toolGroupId) {\n      const styles = this.getToolGroupToolStyles(toolGroupId);\n\n      if (styles) {\n        // check first in the toolSpecific styles\n        if (styles[toolName] && styles[toolName][property]) {\n          return styles[toolName][property];\n        }\n\n        // check if we have the style in the toolGroup specific global styles\n        if (styles.global && styles.global[property]) {\n          return styles.global[property];\n        }\n      }\n    }\n\n    const globalStyles = this.getDefaultToolStyles();\n\n    if (globalStyles[toolName] && globalStyles[toolName][property]) {\n      return globalStyles[toolName][property];\n    }\n\n    if (globalStyles.global && globalStyles.global[property]) {\n      return globalStyles.global[property];\n    }\n  }\n\n  private _initializeConfig(config) {\n    const toolStyles = {};\n    for (const name in config) {\n      toolStyles[name] = config[name];\n    }\n\n    this.config = {\n      default: {\n        global: toolStyles as AnnotationStyle,\n      },\n    };\n  }\n}\n\nconst toolStyle = new ToolStyle();\n\nexport default toolStyle;\n","import { StyleSpecifier } from '../../../types/AnnotationStyle';\nimport { ToolModes, AnnotationStyleStates } from '../../../enums';\nimport toolStyle from './ToolStyle';\n\n/**\n * Build a list of hierarchal property names in ascending order of priority\n * @param property - The base property name -- e.g., 'color'\n * @param state - An optional state to determine the final property name\n * @param mode - An optional mode to determine the final property name\n * @returns A list of property names\n */\nfunction getHierarchalPropertyStyles(\n  property: string,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string[] {\n  const list = [`${property}`];\n  if (state) list.push(`${list[0]}${state}`);\n  if (mode) list.push(`${list[list.length - 1]}${mode}`);\n  return list;\n}\n\n/**\n * Get the value of a style property from the ToolStyle config\n * @param property - The name of the property to get.\n * @param styleSpecifier - An object containing the specifications such as viewportId,\n * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n * met (hierarchy is checked from most specific to least specific which is\n * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n * @param state - The state of the tool (Default, Locked etc.)\n * @param mode - The current tool mode. (Active, Passive etc.)\n * @returns The value of the property.\n */\nfunction getStyleProperty(\n  property: string,\n  styleSpecifier: StyleSpecifier,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string {\n  // Hierarchal property styles is a list of property names with priority in ascending\n  // order like: ['color', 'colorSelected', 'colorSelectedActive'], if in the toolStyle\n  // config, the `colorSelectedActive` property is defined, it will be used, otherwise\n  // the `colorSelected` property will be used, and if that is not defined, the `color`\n  // property will be used. This is done to ensure that the most specific property is used.\n  // Thus, we attempt resolving property names in reverse order\n  const alternatives = getHierarchalPropertyStyles(property, state, mode);\n  for (let i = alternatives.length - 1; i >= 0; --i) {\n    const style = toolStyle.getStyleProperty(alternatives[i], styleSpecifier);\n    if (style !== undefined) {\n      return style;\n    }\n  }\n}\n\nexport { getStyleProperty };\n","import { Annotation } from '../../../types';\nimport { isAnnotationLocked } from '../annotationLocking';\nimport { isAnnotationSelected } from '../annotationSelection';\nimport { AnnotationStyleStates } from '../../../enums';\n\n/**\n * Given a Annotation object, return the annotationStyle State that it\n * should be in based on its data\n * @param annotation - The annotation that we want to style.\n * @returns The state of the annotation whether it is Default, Highlighted, Locked, or Selected.\n */\nfunction getState(annotation?: Annotation): AnnotationStyleStates {\n  if (annotation) {\n    if (annotation.data && annotation.highlighted)\n      return AnnotationStyleStates.Highlighted;\n    if (isAnnotationSelected(annotation.annotationUID))\n      return AnnotationStyleStates.Selected;\n\n    // Todo: make annotation lock api not to rely on the annotation itself\n    if (isAnnotationLocked(annotation)) return AnnotationStyleStates.Locked;\n  }\n\n  return AnnotationStyleStates.Default;\n}\n\nexport default getState;\n","import { ToolModes, AnnotationStyleStates } from '../../../enums';\nimport { getStyleProperty } from './helpers';\nimport { StyleSpecifier } from '../../../types/AnnotationStyle';\n\n/**\n * getFont - Returns a font string of the form \"{fontSize}px fontName\" used by `canvas`.\n * @param styleSpecifier - An object containing the specifications such as viewportId,\n * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n * met (hierarchy is checked from most specific to least specific which is\n * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n * @param state - An optional state to determine the final property name\n * @param mode - An optional mode to determine the final property name\n * @returns The font string.\n */\nfunction getFont(\n  styleSpecifier: StyleSpecifier,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string {\n  const fontSize = getStyleProperty(\n    'textBoxFontSize',\n    styleSpecifier,\n    state,\n    mode\n  );\n  const fontFamily = getStyleProperty(\n    'textBoxFontFamily',\n    styleSpecifier,\n    state,\n    mode\n  );\n\n  return `${fontSize}px ${fontFamily}`;\n}\n\nexport default getFont;\n","import {\n  utilities,\n  getEnabledElement,\n  VolumeViewport,\n  StackViewport,\n  cache,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport BaseTool from './BaseTool';\nimport { getAnnotationManager } from '../../stateManagement/annotation/annotationState';\nimport { Annotation, Annotations, SVGDrawingHelper } from '../../types';\nimport triggerAnnotationRender from '../../utilities/triggerAnnotationRender';\nimport filterAnnotationsForDisplay from '../../utilities/planar/filterAnnotationsForDisplay';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nimport { getState } from '../../stateManagement/annotation/config';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\n/**\n * Abstract class for tools which create and display annotations on the\n * cornerstone3D canvas. In addition, it provides a base class for segmentation\n * tools that require drawing an annotation before running the segmentation strategy\n * for instance threshold segmentation based on an area and a threshold.\n * Annotation tools make use of drawing utilities to draw SVG elements on the viewport.\n *\n * To create a new annotation tool, derive from this class and implement the\n * abstract methods.\n */\nabstract class AnnotationDisplayTool extends BaseTool {\n  static toolName;\n\n  // ===================================================================\n  // Abstract Methods - Must be implemented.\n  // ===================================================================\n\n  /**\n   * @abstract renderAnnotation it used to draw the tool's annotation in each\n   * request animation frame\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  abstract renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  );\n\n  /**\n   * @virtual Given the element and annotations which is an array of annotation, it\n   * filters the annotations array to only include the annotation based on the viewportType.\n   * If the viewport is StackViewport, it filters based on the current imageId of the viewport,\n   * if the viewport is volumeViewport, it only returns those that are within the\n   * same slice as the current rendered slice in the volume viewport.\n   * imageId as the enabledElement.\n   * @param element - The HTML element\n   * @param annotations - The annotations to filter (array of annotation)\n   * @returns The filtered annotations\n   */\n  filterInteractableAnnotationsForElement(\n    element: HTMLDivElement,\n    annotations: Annotations\n  ): Annotations | undefined {\n    if (!annotations || !annotations.length) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    return filterAnnotationsForDisplay(viewport, annotations);\n  }\n\n  /**\n   * On Image Calibration, take all the annotation from the AnnotationState manager,\n   * and invalidate them to force them to be re-rendered and their stats to be recalculated.\n   * Then use the old and new imageData (non-calibrated and calibrated) to calculate the\n   * new position for the annotations in the space of the new imageData.\n   *\n   * @param evt - The calibration event\n   *\n   */\n  public onImageSpacingCalibrated = (\n    evt: Types.EventTypes.ImageSpacingCalibratedEvent\n  ) => {\n    const { element, imageId } = evt.detail;\n\n    const imageURI = utilities.imageIdToURI(imageId);\n    const annotationManager = getAnnotationManager();\n    const framesOfReference = annotationManager.getFramesOfReference();\n\n    // For each frame Of Reference\n    framesOfReference.forEach((frameOfReference) => {\n      const frameOfReferenceSpecificAnnotations =\n        annotationManager.getAnnotations(frameOfReference);\n\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[this.getToolName()];\n\n      if (!toolSpecificAnnotations || !toolSpecificAnnotations.length) {\n        return;\n      }\n\n      // for this specific tool\n      toolSpecificAnnotations.forEach((annotation) => {\n        // if the annotation is drawn on the same imageId\n        const referencedImageURI = utilities.imageIdToURI(\n          annotation.metadata.referencedImageId\n        );\n\n        if (referencedImageURI === imageURI) {\n          // make them invalid since the image has been calibrated so that\n          // we can update the cachedStats and also rendering\n          annotation.invalidated = true;\n          annotation.data.cachedStats = {};\n        }\n      });\n      triggerAnnotationRender(element);\n    });\n  };\n\n  protected getReferencedImageId(\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    worldPos: Types.Point3,\n    viewPlaneNormal: Types.Point3,\n    viewUp: Types.Point3\n  ): string {\n    const targetId = this.getTargetId(viewport);\n\n    let referencedImageId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    } else {\n      const volumeId = targetId.split('volumeId:')[1];\n      const imageVolume = cache.getVolume(volumeId);\n\n      referencedImageId = utilities.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    return referencedImageId;\n  }\n\n  /**\n   * It takes the property (color, lineDash, etc.) and based on the state of the\n   * annotation (selected, highlighted etc.) it returns the appropriate value\n   * based on the central toolStyle settings for each level of specification.\n   * @param property - The name of the style property to get.\n   * @param styleSpecifier - An object containing the specifications such as viewportId,\n   * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n   * met (hierarchy is checked from most specific to least specific which is\n   * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n   * @param annotation - The annotation for the tool that is\n   * currently active.\n   * @returns The value of the property.\n   */\n  public getStyle(\n    property: string,\n    specifications: StyleSpecifier,\n    annotation?: Annotation\n  ): unknown {\n    return getStyleProperty(\n      property,\n      specifications,\n      getState(annotation),\n      this.mode\n    );\n  }\n}\n\nAnnotationDisplayTool.toolName = 'AnnotationDisplayTool';\nexport default AnnotationDisplayTool;\n","import {\n  BaseVolumeViewport,\n  StackViewport,\n  cache,\n  getEnabledElement,\n  metaData,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { vec2 } from 'gl-matrix';\n\nimport AnnotationDisplayTool from './AnnotationDisplayTool';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  Annotation,\n  Annotations,\n  EventTypes,\n  ToolHandle,\n  InteractionTypes,\n} from '../../types';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\n/**\n * Abstract class for tools which create and display annotations on the\n * cornerstone3D canvas. In addition, it provides a base class for segmentation\n * tools that require drawing an annotation before running the segmentation strategy\n * for instance threshold segmentation based on an area and a threshold.\n * Annotation tools make use of drawing utilities to draw SVG elements on the viewport.\n *\n * To create a new annotation tool, derive from this class and implement the\n * abstract methods.\n */\nabstract class AnnotationTool extends AnnotationDisplayTool {\n  static toolName;\n  // ===================================================================\n  // Abstract Methods - Must be implemented.\n  // ===================================================================\n\n  /**\n   * @abstract addNewAnnotation Creates a new annotation based on the clicked mouse position\n   *\n   * @param evt - The normalized mouse event\n   * @param interactionType -  The interaction type used to add the annotation.\n   */\n  abstract addNewAnnotation(\n    evt: EventTypes.InteractionEventType,\n    interactionType: InteractionTypes\n  ): Annotation;\n\n  /**\n   * @abstract cancel Used to cancel the ongoing tool drawing and manipulation\n   *\n   */\n  abstract cancel(element: HTMLDivElement);\n\n  /**\n   * handleSelectedCallback Custom callback for when a handle is selected.\n   *\n   * @param evt - The normalized mouse event\n   * @param annotation - The annotation selected.\n   * @param handle - The selected handle (either Types.Point3 in space for annotations, or TextBoxHandle object for text boxes).\n   * @param interactionType - The interaction type the handle was selected with.\n   */\n  abstract handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    handle: ToolHandle,\n    interactionType: InteractionTypes\n  ): void;\n\n  /**\n   * Custom callback for when an annotation is selected\n   *\n   * @param evt - The normalized mouse event\n   * @param annotation - The `Annotation` to check.\n   * @param interactionType - The interaction type used to select the tool.\n   */\n  abstract toolSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    interactionType: InteractionTypes\n  ): void;\n\n  /**\n   * Returns true if the provided canvas coordinate tool is near the annotation\n   *\n   * @param element - The HTML element\n   * @param annotation - The annotation to check\n   * @param canvasCoords - The canvas coordinate to check\n   * @param proximity - The minimum proximity to consider the point near\n   * @param interactionType - The interaction type used to select the tool.\n   *\n   * @returns boolean if the point is near.\n   */\n  abstract isPointNearTool(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number,\n    interactionType: string\n  ): boolean;\n\n  /**\n   * @virtual Event handler for Cornerstone MOUSE_MOVE event.\n   *\n   *\n   * @param evt - The normalized mouse event\n   * @param filteredAnnotations - The annotations to check for hover interactions\n   * @returns True if the annotation needs to be re-drawn by the annotationRenderingEngine.\n   */\n  public mouseMoveCallback = (\n    evt: EventTypes.MouseMoveEventType,\n    filteredAnnotations?: Annotations\n  ): boolean => {\n    if (!filteredAnnotations) {\n      return false;\n    }\n\n    const { element, currentPoints } = evt.detail;\n    const canvasCoords = currentPoints.canvas;\n    let annotationsNeedToBeRedrawn = false;\n\n    for (const annotation of filteredAnnotations) {\n      // Do not do anything if the annotation is locked or hidden.\n      if (\n        isAnnotationLocked(annotation) ||\n        !isAnnotationVisible(annotation.annotationUID)\n      ) {\n        continue;\n      }\n\n      const { data } = annotation;\n      const activateHandleIndex = data.handles\n        ? data.handles.activeHandleIndex\n        : undefined;\n\n      // Perform tool specific imagePointNearToolOrHandle to determine if the mouse\n      // is near the tool or its handles or its textBox.\n      const near = this._imagePointNearToolOrHandle(\n        element,\n        annotation,\n        canvasCoords,\n        6 // Todo: This should come from the state\n      );\n\n      const nearToolAndNotMarkedActive = near && !annotation.highlighted;\n      const notNearToolAndMarkedActive = !near && annotation.highlighted;\n      if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n        annotation.highlighted = !annotation.highlighted;\n        annotationsNeedToBeRedrawn = true;\n      } else if (\n        data.handles &&\n        data.handles.activeHandleIndex !== activateHandleIndex\n      ) {\n        // Active handle index has changed, re-render.\n        annotationsNeedToBeRedrawn = true;\n      }\n    }\n\n    return annotationsNeedToBeRedrawn;\n  };\n\n  /**\n   * It checks if the mouse click is near TextBoxHandle or AnnotationHandle itself, and\n   * return either it. It prioritize TextBoxHandle over AnnotationHandle. If\n   * the mouse click is not near any of the handles, it does not return anything.\n   *\n   * @param element - The element that the tool is attached to.\n   * @param annotation - The annotation object associated with the annotation\n   * @param canvasCoords - The coordinates of the mouse click on canvas\n   * @param proximity - The distance from the mouse cursor to the point\n   * that is considered \"near\".\n   * @returns The handle that is closest to the cursor, or null if the cursor\n   * is not near any of the handles.\n   */\n  getHandleNearImagePoint(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): ToolHandle | undefined {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points, textBox } = data.handles;\n    const { worldBoundingBox } = textBox;\n\n    if (worldBoundingBox) {\n      const canvasBoundingBox = {\n        topLeft: viewport.worldToCanvas(worldBoundingBox.topLeft),\n        topRight: viewport.worldToCanvas(worldBoundingBox.topRight),\n        bottomLeft: viewport.worldToCanvas(worldBoundingBox.bottomLeft),\n        bottomRight: viewport.worldToCanvas(worldBoundingBox.bottomRight),\n      };\n\n      if (\n        canvasCoords[0] >= canvasBoundingBox.topLeft[0] &&\n        canvasCoords[0] <= canvasBoundingBox.bottomRight[0] &&\n        canvasCoords[1] >= canvasBoundingBox.topLeft[1] &&\n        canvasCoords[1] <= canvasBoundingBox.bottomRight[1]\n      ) {\n        data.handles.activeHandleIndex = null;\n        return textBox;\n      }\n    }\n\n    for (let i = 0; i < points.length; i++) {\n      const point = points[i];\n      const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n\n      const near =\n        vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n\n      if (near === true) {\n        data.handles.activeHandleIndex = i;\n        return point;\n      }\n    }\n\n    data.handles.activeHandleIndex = null;\n  }\n\n  /**\n   * It returns the style for the text box\n   * @param styleSpecifier - An object containing the specifications such as viewportId,\n   * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n   * met (hierarchy is checked from most specific to least specific which is\n   * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n   * @param annotation - The annotation for the tool that is\n   * currently active.\n   * @returns An object of the style settings for the text box.\n   */\n  public getLinkedTextBoxStyle(\n    specifications: StyleSpecifier,\n    annotation?: Annotation\n  ): Record<string, unknown> {\n    // Todo: this function can be used to set different styles for different toolMode\n    // for the textBox.\n\n    return {\n      fontFamily: this.getStyle(\n        'textBoxFontFamily',\n        specifications,\n        annotation\n      ),\n      fontSize: this.getStyle('textBoxFontSize', specifications, annotation),\n      color: this.getStyle('textBoxColor', specifications, annotation),\n      shadow: this.getStyle('textBoxShadow', specifications, annotation),\n      background: this.getStyle(\n        'textBoxBackground',\n        specifications,\n        annotation\n      ),\n      lineWidth: this.getStyle(\n        'textBoxLinkLineWidth',\n        specifications,\n        annotation\n      ),\n      lineDash: this.getStyle(\n        'textBoxLinkLineDash',\n        specifications,\n        annotation\n      ),\n    };\n  }\n\n  /**\n   * Returns true if the viewport is scaled to SUV units\n   * @param viewport - The viewport\n   * @param targetId - The annotation targetId\n   * @param imageId - The annotation imageId\n   * @returns\n   */\n  isSuvScaled(\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    targetId: string,\n    imageId?: string\n  ): boolean {\n    if (viewport instanceof BaseVolumeViewport) {\n      const volumeId = targetId.split('volumeId:')[1];\n      const volume = cache.getVolume(volumeId);\n      return volume.scaling?.PT !== undefined;\n    } else if (viewport instanceof StackViewport) {\n      const scalingModule: Types.ScalingParameters | undefined =\n        imageId && metaData.get('scalingModule', imageId);\n      return typeof scalingModule?.suvbw === 'number';\n    } else {\n      throw new Error('Viewport is not a valid type');\n    }\n  }\n\n  /**\n   * Returns true if the `canvasCoords` are near a handle or selectable part of the tool\n   *\n   * @param element - The HTML element\n   * @param annotation - The annotation to check\n   * @param canvasCoords - The canvas coordinates to check\n   * @param proximity - The proximity to consider\n   *\n   * @returns If the point is near.\n   */\n  private _imagePointNearToolOrHandle(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean {\n    // Based on the tool instance type, check if the point is near the tool handles\n    const handleNearImagePoint = this.getHandleNearImagePoint(\n      element,\n      annotation,\n      canvasCoords,\n      proximity\n    );\n\n    if (handleNearImagePoint) {\n      return true;\n    }\n\n    // If the point is not near the handles, check if the point is near the tool\n    const toolNewImagePoint = this.isPointNearTool(\n      element,\n      annotation,\n      canvasCoords,\n      proximity,\n      'mouse'\n    );\n\n    if (toolNewImagePoint) {\n      return true;\n    }\n  }\n}\n\nAnnotationTool.toolName = 'AnnotationTool';\nexport default AnnotationTool;\n","import {\n  getEnabledElementByIds,\n  Types,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { config as segmentationConfig } from '../../stateManagement/segmentation';\nimport { setSegmentationVisibility } from '../../stateManagement/segmentation/config/segmentationVisibility';\nimport { getSegmentationRepresentations } from '../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport { PublicToolProps, ToolProps } from '../../types';\nimport { BaseTool } from '../base';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../types/SegmentationStateTypes';\nimport { contourDisplay } from './Contour';\nimport { labelmapDisplay } from './Labelmap';\n\n/**\n * In Cornerstone3DTools, displaying of segmentations are handled by the SegmentationDisplayTool.\n * Generally, any Segmentation can be viewed in various representations such as\n * labelmap (3d), contours, surface etc. As of now, Cornerstone3DTools only implements\n * Labelmap representation.\n *\n * SegmentationDisplayTool works at ToolGroup level, and is responsible for displaying the\n * segmentation representation for ALL viewports of a toolGroup, this way we can support complex\n * scenarios for displaying segmentations.\n *\n * Current Limitations:\n * - Only supports rendering of the volumetric segmentations in 3D space. (StackViewport segmentations are not supported yet)\n * - Labelmap representation is the only supported representation for now.\n *\n * Similar to other tools in Cornerstone3DTools, the SegmentationDisplayTool should\n * be added to the CornerstoneTools by calling cornerstoneTools.addTool(SegmentationDisplayTool)\n * and a toolGroup should be created for it using the ToolGroupManager API, finally\n * viewports information such as viewportId and renderingEngineId should be provided\n * to the toolGroup and the SegmentationDisplayTool should be set to be activated.\n *\n *\n */\nclass SegmentationDisplayTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {},\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  onSetToolEnabled(): void {\n    const toolGroupId = this.toolGroupId;\n    const toolGroupSegmentationRepresentations =\n      getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      toolGroupSegmentationRepresentations.length === 0\n    ) {\n      return;\n    }\n\n    // for each segmentationData, make the visibility true\n    toolGroupSegmentationRepresentations.forEach(\n      (segmentationRepresentation) => {\n        setSegmentationVisibility(\n          toolGroupId,\n          segmentationRepresentation.segmentationRepresentationUID,\n          true\n        );\n      }\n    );\n  }\n\n  onSetToolDisabled(): void {\n    const toolGroupId = this.toolGroupId;\n    const toolGroupSegmentationRepresentations =\n      getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      toolGroupSegmentationRepresentations.length === 0\n    ) {\n      return;\n    }\n\n    // for each segmentationData, make the visibility false\n    toolGroupSegmentationRepresentations.forEach(\n      (segmentationRepresentation) => {\n        setSegmentationVisibility(\n          toolGroupId,\n          segmentationRepresentation.segmentationRepresentationUID,\n          false\n        );\n      }\n    );\n  }\n\n  /**\n   * It is used to trigger the render for each segmentations in the toolGroup.\n   * Based on the segmentation representation type, it will call the corresponding\n   * render function.\n   *\n   * @param toolGroupId - the toolGroupId\n   */\n  renderSegmentation = (toolGroupId: string): void => {\n    const toolGroup = getToolGroup(toolGroupId);\n\n    if (!toolGroup) {\n      return;\n    }\n\n    const toolGroupSegmentationRepresentations =\n      getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      toolGroupSegmentationRepresentations.length === 0\n    ) {\n      return;\n    }\n\n    // toolGroup Viewports\n    const toolGroupViewports = toolGroup.viewportsInfo.map(\n      ({ renderingEngineId, viewportId }) => {\n        const enabledElement = getEnabledElementByIds(\n          viewportId,\n          renderingEngineId\n        );\n\n        if (enabledElement) {\n          return enabledElement.viewport;\n        }\n      }\n    );\n\n    // Render each segmentationData, in each viewport in the toolGroup\n    const segmentationRenderList = toolGroupSegmentationRepresentations.map(\n      (representation: ToolGroupSpecificRepresentation) => {\n        const config = this._getMergedRepresentationsConfig(toolGroupId);\n\n        const viewportsRenderList = [];\n        for (const viewport of toolGroupViewports) {\n          if (representation.type == Representations.Labelmap) {\n            viewportsRenderList.push(\n              labelmapDisplay.render(\n                viewport as Types.IVolumeViewport,\n                representation,\n                config\n              )\n            );\n          } else if (representation.type == Representations.Contour) {\n            viewportsRenderList.push(\n              contourDisplay.render(\n                viewport as Types.IVolumeViewport,\n                representation,\n                config\n              )\n            );\n          }\n        }\n\n        return viewportsRenderList;\n      }\n    );\n\n    Promise.allSettled(segmentationRenderList).then(() => {\n      // for all viewports in the toolGroup trigger a re-render\n      toolGroupViewports.forEach((viewport) => {\n        viewport.render();\n      });\n    });\n  };\n\n  /**\n   * Merge the toolGroup specific configuration with the default global configuration\n   * @param toolGroupId\n   * @returns\n   */\n  _getMergedRepresentationsConfig(\n    toolGroupId: string\n  ): SegmentationRepresentationConfig {\n    const toolGroupConfig =\n      segmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n    const globalConfig = segmentationConfig.getGlobalConfig();\n\n    // merge two configurations and override the global config\n    const mergedConfig = csUtils.deepMerge(globalConfig, toolGroupConfig);\n\n    return mergedConfig;\n  }\n}\n\nSegmentationDisplayTool.toolName = 'SegmentationDisplay';\nexport default SegmentationDisplayTool;\n","import {\n  triggerEvent,\n  eventTarget,\n  getRenderingEngine,\n  Enums,\n  Types,\n} from '@cornerstonejs/core';\nimport { Events as csToolsEvents } from '../../enums';\nimport {\n  getToolGroup,\n  getToolGroupForViewport,\n} from '../../store/ToolGroupManager';\n\nimport SegmentationDisplayTool from '../../tools/displayTools/SegmentationDisplayTool';\nimport { SegmentationRenderedEventDetail } from '../../types/EventTypes';\n\n/**\n * SegmentationRenderingEngine is a class that is responsible for rendering\n * segmentations for a toolGroup. It will call SegmentationDisplayTool to render the segmentation\n * based on the segmentation data and their configurations. Note: This is a Singleton class\n * and should not be instantiated directly. To trigger a render for all the\n * segmentations of a tool group you can use.\n *\n * ```\n * triggerSegmentationRender(toolGroupId)\n * ```\n */\nclass SegmentationRenderingEngine {\n  private _needsRender: Set<string> = new Set();\n  private _animationFrameSet = false;\n  private _animationFrameHandle: number | null = null;\n  public hasBeenDestroyed: boolean;\n\n  public removeToolGroup(toolGroupId) {\n    this._needsRender.delete(toolGroupId);\n\n    if (this._needsRender.size === 0) {\n      this._reset();\n    }\n  }\n\n  public renderToolGroupSegmentations(toolGroupId): void {\n    this._setToolGroupSegmentationToBeRenderedNextFrame([toolGroupId]);\n  }\n\n  /**\n   *  _throwIfDestroyed Throws an error if trying to interact with the `RenderingEngine`\n   * instance after its `destroy` method has been called.\n   */\n  private _throwIfDestroyed() {\n    if (this.hasBeenDestroyed) {\n      throw new Error(\n        'this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.'\n      );\n    }\n  }\n\n  private _setToolGroupSegmentationToBeRenderedNextFrame(\n    toolGroupIds: string[]\n  ) {\n    // Add the viewports to the set of flagged viewports\n    toolGroupIds.forEach((toolGroupId) => {\n      this._needsRender.add(toolGroupId);\n    });\n\n    // Render any flagged viewports\n    this._render();\n  }\n\n  /**\n   *  _render Sets up animation frame if necessary\n   */\n  private _render() {\n    // If we have viewports that need rendering and we have not already\n    // set the RAF callback to run on the next frame.\n    if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n      this._animationFrameHandle = window.requestAnimationFrame(\n        this._renderFlaggedToolGroups\n      );\n\n      // Set the flag that we have already set up the next RAF call.\n      this._animationFrameSet = true;\n    }\n  }\n\n  private _renderFlaggedToolGroups = () => {\n    this._throwIfDestroyed();\n\n    // for each toolGroupId insides the _needsRender set, render the segmentation\n    const toolGroupIds = Array.from(this._needsRender.values());\n\n    for (const toolGroupId of toolGroupIds) {\n      this._triggerRender(toolGroupId);\n\n      // This viewport has been rendered, we can remove it from the set\n      this._needsRender.delete(toolGroupId);\n\n      // If there is nothing left that is flagged for rendering, stop here\n      // and allow RAF to be called again\n      if (this._needsRender.size === 0) {\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        return;\n      }\n    }\n  };\n  _triggerRender(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n\n    if (!toolGroup) {\n      console.warn(`No tool group found with toolGroupId: ${toolGroupId}`);\n      return;\n    }\n\n    const { viewportsInfo } = toolGroup;\n    const viewports = [];\n\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const renderingEngine = getRenderingEngine(renderingEngineId);\n\n      if (!renderingEngine) {\n        console.warn('rendering Engine has been destroyed');\n        return;\n      }\n\n      viewports.push(renderingEngine.getViewport(viewportId));\n    });\n\n    const segmentationDisplayToolInstance = toolGroup.getToolInstance(\n      SegmentationDisplayTool.toolName\n    ) as SegmentationDisplayTool;\n    if (!segmentationDisplayToolInstance) {\n      console.warn('No segmentation tool found inside', toolGroupId);\n      return;\n    }\n\n    function onSegmentationRender(evt: Types.EventTypes.ImageRenderedEvent) {\n      const { element, viewportId, renderingEngineId } = evt.detail;\n\n      element.removeEventListener(\n        Enums.Events.IMAGE_RENDERED,\n        onSegmentationRender as EventListener\n      );\n\n      const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n\n      if (!toolGroup) {\n        console.warn('toolGroup has been destroyed');\n        return;\n      }\n\n      const eventDetail: SegmentationRenderedEventDetail = {\n        toolGroupId: toolGroup.id,\n        viewportId,\n      };\n\n      triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n        ...eventDetail,\n      });\n    }\n\n    // Todo: for other representations we probably need the drawSVG, but right now we are not using it\n    // drawSvg(element, (svgDrawingHelper) => {\n    //   const handleDrawSvg = (tool) => {\n    //     if (tool instanceof SegmentationDisplayTool && tool.renderAnnotation) {\n    //       tool.renderAnnotation({ detail: eventDetail })\n    //       triggerEvent(element, csToolsEvents.SEGMENTATION_RENDERED, { ...eventDetail })\n    //     }\n    //   }\n    //   enabledTools.forEach(handleDrawSvg)\n    // })\n\n    viewports.forEach(({ element }) => {\n      element.addEventListener(\n        Enums.Events.IMAGE_RENDERED,\n        onSegmentationRender\n      );\n    });\n\n    segmentationDisplayToolInstance.renderSegmentation(toolGroupId);\n  }\n\n  /**\n   *  _reset Resets the `RenderingEngine`\n   */\n  private _reset() {\n    window.cancelAnimationFrame(this._animationFrameHandle);\n\n    this._needsRender.clear();\n    this._animationFrameSet = false;\n    this._animationFrameHandle = null;\n  }\n}\n\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\n\n/**\n * It triggers a render for all the segmentations of the tool group with the given Id.\n * @param toolGroupId - The Id of the tool group to render.\n */\nfunction triggerSegmentationRender(toolGroupId: string): void {\n  segmentationRenderingEngine.renderToolGroupSegmentations(toolGroupId);\n}\n\nexport { segmentationRenderingEngine, triggerSegmentationRender };\nexport default triggerSegmentationRender;\n","import triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport { SegmentationRepresentationModifiedEventType } from '../../types/EventTypes';\n\n/** A function that listens to the `segmentationStateModified` event and triggers\n * the `triggerSegmentationRender` function. This function is called when the\n * segmentation state or config is modified.\n */\nconst segmentationRepresentationModifiedListener = function (\n  evt: SegmentationRepresentationModifiedEventType\n): void {\n  const { toolGroupId } = evt.detail;\n  triggerSegmentationRender(toolGroupId);\n};\n\nexport default segmentationRepresentationModifiedListener;\n","import { cache } from '@cornerstonejs/core';\n\nimport triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../stateManagement/segmentation/segmentationState';\nimport { SegmentationDataModifiedEventType } from '../../types/EventTypes';\n\n/** A callback function that is called when the segmentation data is modified which\n *  often is as a result of tool interactions e.g., scissors, eraser, etc.\n */\nconst onSegmentationDataModified = function (\n  evt: SegmentationDataModifiedEventType\n): void {\n  const { segmentationId, modifiedSlicesToUse } = evt.detail;\n\n  const { representationData, type } =\n    SegmentationState.getSegmentation(segmentationId);\n\n  let toolGroupIds;\n  if (type === SegmentationRepresentations.Labelmap) {\n    // get the volume from cache, we need the openGLTexture to be updated to GPU\n    const segmentationVolume = cache.getVolume(\n      representationData[type].volumeId\n    );\n\n    if (!segmentationVolume) {\n      console.warn('segmentation not found in cache');\n      return;\n    }\n\n    const { imageData, vtkOpenGLTexture } = segmentationVolume;\n\n    // Update the texture for the volume in the GPU\n    let slicesToUpdate;\n    if (modifiedSlicesToUse && Array.isArray(modifiedSlicesToUse)) {\n      slicesToUpdate = modifiedSlicesToUse;\n    } else {\n      const numSlices = imageData.getDimensions()[2];\n      slicesToUpdate = [...Array(numSlices).keys()];\n    }\n\n    slicesToUpdate.forEach((i) => {\n      vtkOpenGLTexture.setUpdatedFrame(i);\n    });\n\n    // Trigger modified on the imageData to update the image\n    imageData.modified();\n    toolGroupIds =\n      SegmentationState.getToolGroupIdsWithSegmentation(segmentationId);\n  } else {\n    throw new Error(\n      `onSegmentationDataModified: representationType ${type} not supported yet`\n    );\n  }\n\n  toolGroupIds.forEach((toolGroupId) => {\n    triggerSegmentationRender(toolGroupId);\n  });\n};\n\nexport default onSegmentationDataModified;\n","import triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport { SegmentationRepresentationRemovedEventType } from '../../types/EventTypes';\n\n/** A function that listens to the `segmentationRepresentationRemoved` event and triggers\n * the `triggerSegmentationRender` function. This function is called when the\n * segmentation state or config is modified.\n */\nconst segmentationRepresentationRemovedEventListener = function (\n  evt: SegmentationRepresentationRemovedEventType\n): void {\n  const { toolGroupId, segmentationRepresentationUID } = evt.detail;\n\n  triggerSegmentationRender(toolGroupId);\n};\n\nexport default segmentationRepresentationRemovedEventListener;\n","import { SegmentationModifiedEventType } from '../../types/EventTypes';\nimport {\n  getToolGroupIdsWithSegmentation,\n  getSegmentationRepresentations,\n} from '../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationRepresentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\n\n/** A function that listens to the `segmentationModified` event and triggers\n * the triggerSegmentationRepresentationModified on each toolGroup that\n * has a representation of the given segmentationId.\n */\nconst segmentationModifiedListener = function (\n  evt: SegmentationModifiedEventType\n): void {\n  const { segmentationId } = evt.detail;\n\n  const toolGroupIds = getToolGroupIdsWithSegmentation(segmentationId);\n\n  toolGroupIds.forEach((toolGroupId) => {\n    const segRepresentations = getSegmentationRepresentations(toolGroupId);\n    segRepresentations.forEach((representation) => {\n      if (representation.segmentationId === segmentationId) {\n        triggerSegmentationRepresentationModified(\n          toolGroupId,\n          representation.segmentationRepresentationUID\n        );\n      }\n    });\n  });\n};\n\nexport default segmentationModifiedListener;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool, BaseTool } from '../tools';\nimport { Annotation } from '../types';\nimport { getAnnotations } from '../stateManagement/annotation/annotationState';\nimport * as ToolGroupManager from '../store/ToolGroupManager';\n\n/**\n * Get the annotation that is close to the provided canvas point, it will return\n * the first annotation that is found.\n *\n * @param element - The element to search for an annotation on.\n * @param canvasPoint - The canvasPoint on the page where the user clicked.\n * @param proximity - The distance from the canvasPoint to the annotation.\n * @returns The annotation for the element\n */\nfunction getAnnotationNearPoint(\n  element: HTMLDivElement,\n  canvasPoint: Types.Point2,\n  proximity = 5\n): Annotation | null {\n  // Todo: this function should return closest annotation, BUT, we are not using\n  // the function anywhere.\n  const enabledElement = getEnabledElement(element);\n  if (!enabledElement) {\n    throw new Error('getAnnotationNearPoint: enabledElement not found');\n  }\n\n  return getAnnotationNearPointOnEnabledElement(\n    enabledElement,\n    canvasPoint,\n    proximity\n  );\n}\n\n/**\n * \"Find the annotation near the point on the enabled element.\" it will return the\n * first annotation that is found.\n *\n * @param enabledElement - The element that is currently active.\n * @param point - The point to search near.\n * @param proximity - The distance from the point that the annotation must\n * be within.\n * @returns A Annotation object.\n */\nfunction getAnnotationNearPointOnEnabledElement(\n  enabledElement: Types.IEnabledElement,\n  point: Types.Point2,\n  proximity: number\n): Annotation | null {\n  // Todo: this function should return closest annotation, BUT, we are not using\n  // the function anywhere.\n  const { renderingEngineId, viewportId } = enabledElement;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const { _toolInstances: tools } = toolGroup;\n  for (const name in tools) {\n    const found = findAnnotationNearPointByTool(\n      tools[name],\n      enabledElement,\n      point,\n      proximity\n    );\n    if (found) {\n      return found;\n    }\n  }\n\n  return null;\n}\n\n/**\n * For the provided toolClass, it will find the annotation that is near the point,\n * it will return the first annotation that is found.\n *\n * @param tool - AnnotationTool\n * @param enabledElement - The element that is currently active.\n * @param point - The point in the image where the user clicked.\n * @param proximity - The distance from the point that the tool must be\n * within to be considered \"near\" the point.\n * @returns The annotation object that is being returned is the annotation object that\n * is being used in the tool.\n */\nfunction findAnnotationNearPointByTool(\n  tool: AnnotationTool,\n  enabledElement: Types.IEnabledElement,\n  point: Types.Point2,\n  proximity: number\n): Annotation | null {\n  // Todo: this function does not return closest annotation. It just returns\n  // the first annotation that is found in the proximity. BUT, we are not using\n  // the function anywhere.\n  const { viewport } = enabledElement;\n\n  const annotations = getAnnotations(\n    (tool.constructor as typeof BaseTool).toolName,\n    viewport?.element\n  );\n  const currentId = viewport?.getCurrentImageId?.();\n  if (annotations?.length) {\n    const { element } = enabledElement.viewport;\n    for (const annotation of annotations) {\n      const referencedImageId = annotation.metadata?.referencedImageId;\n      if (\n        (currentId && referencedImageId && currentId !== referencedImageId) ||\n        !tool.isPointNearTool\n      ) {\n        continue;\n      }\n\n      if (\n        tool.isPointNearTool(element, annotation, point, proximity, '') ||\n        tool.getHandleNearImagePoint(element, annotation, point, proximity)\n      ) {\n        return annotation;\n      }\n    }\n  }\n  return null;\n}\n\nexport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement };\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @since 0.1.0\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * isObject({})\n * // => true\n *\n * isObject([1, 2, 3])\n * // => true\n *\n * isObject(Function)\n * // => true\n *\n * isObject(null)\n * // => false\n */\nfunction isObject(value) {\n  const type = typeof value;\n\n  return value !== null && (type === 'object' || type === 'function');\n}\n\nexport default isObject;\n","import isObject from './isObject';\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }))\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * jQuery(source).on('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nfunction debounce(func, wait, options) {\n  let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;\n\n  let lastInvokeTime = 0;\n  let leading = false;\n  let maxing = false;\n  let trailing = true;\n\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  const useRAF =\n    !wait && wait !== 0 && typeof window.requestAnimationFrame === 'function';\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n  wait = Number(wait) || 0;\n  if (isObject(options)) {\n    leading = Boolean(options.leading);\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n  }\n\n  function invokeFunc(time) {\n    const args = lastArgs;\n    const thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n\n    return result;\n  }\n\n  function startTimer(pendingFunc, wait) {\n    if (useRAF) {\n      return window.requestAnimationFrame(pendingFunc);\n    }\n\n    return setTimeout(pendingFunc, wait);\n  }\n\n  function cancelTimer(id) {\n    if (useRAF) {\n      return window.cancelAnimationFrame(id);\n    }\n    clearTimeout(id);\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = startTimer(timerExpired, wait);\n\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    const timeSinceLastCall = time - lastCallTime;\n    const timeSinceLastInvoke = time - lastInvokeTime;\n    const timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    const timeSinceLastCall = time - lastCallTime;\n    const timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (\n      lastCallTime === undefined ||\n      timeSinceLastCall >= wait ||\n      timeSinceLastCall < 0 ||\n      (maxing && timeSinceLastInvoke >= maxWait)\n    );\n  }\n\n  function timerExpired() {\n    const time = Date.now();\n\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = startTimer(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      cancelTimer(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(Date.now());\n  }\n\n  function pending() {\n    return timerId !== undefined;\n  }\n\n  function debounced(...args) {\n    const time = Date.now();\n    const isInvoking = shouldInvoke(time);\n\n    lastArgs = args;\n    lastThis = this; // eslint-disable-line consistent-this\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = startTimer(timerExpired, wait);\n\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = startTimer(timerExpired, wait);\n    }\n\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  debounced.pending = pending;\n\n  return debounced;\n}\n\nexport default debounce;\n","import debounce from './debounce';\nimport isObject from './isObject';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds (or once per browser frame). The throttled function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `throttle` and `debounce`.\n *\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0]\n *  The number of milliseconds to throttle invocations to; if omitted,\n *  `requestAnimationFrame` is used (if available).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', throttle(updatePosition, 100))\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * const throttled = throttle(renewToken, 300000, { 'trailing': false })\n * jQuery(element).on('click', throttled)\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel)\n */\nfunction throttle(func, wait, options) {\n  let leading = true;\n  let trailing = true;\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? Boolean(options.leading) : leading;\n    trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n  }\n\n  return debounce(func, wait, {\n    leading,\n    trailing,\n    maxWait: wait,\n  });\n}\n\nexport default throttle;\n","/**\n * Clips a value to an upper and lower bound.\n * @export @public @method\n * @name clip\n *\n * @param  {number} val  The value to clip.\n * @param  {number} low  The lower bound.\n * @param  {number} high The upper bound.\n * @returns {number}      The clipped value.\n */\nexport function clip(val, low, high) {\n  return Math.min(Math.max(low, val), high);\n}\n\n/**\n * Clips a value within a box.\n * @export @public @method\n * @name clipToBox\n *\n * @param  {Object} point The point to clip\n * @param  {Object} box   The bounding box to clip to.\n * @returns {Object}       The clipped point.\n */\nexport function clipToBox(point, box) {\n  // Clip an {x, y} point to a box of size {width, height}\n  point.x = clip(point.x, 0, box.width);\n  point.y = clip(point.y, 0, box.height);\n}\n\nexport default clip;\n","import { utilities, Enums } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nconst { calibratedPixelSpacingMetadataProvider } = utilities;\n\n/**\n * It adds the provided spacing to the Cornerstone internal calibratedPixelSpacing\n * metadata provider, then it invalidates all the tools that have the imageId as\n * their reference imageIds. Finally, it triggers a re-render for invalidated annotations.\n * @param imageId - ImageId for the calibrated image\n * @param rowPixelSpacing - Spacing in row direction\n * @param calibrationOrScale - either the calibration object or a scale value\n */\nexport default function calibrateImageSpacing(\n  imageId: string,\n  renderingEngine: Types.IRenderingEngine,\n  calibrationOrScale: Types.IImageCalibration | number\n): void {\n  // Handle simple parameter version\n  if (typeof calibrationOrScale === 'number') {\n    calibrationOrScale = {\n      type: Enums.CalibrationTypes.USER,\n      scale: calibrationOrScale,\n    };\n  }\n  // 1. Add the calibratedPixelSpacing metadata to the metadata\n  calibratedPixelSpacingMetadataProvider.add(imageId, calibrationOrScale);\n\n  // 2. Update the actor for stackViewports\n  const viewports = renderingEngine.getStackViewports();\n\n  // 2.1 If imageId is already being used in a stackViewport -> update actor\n  viewports.forEach((viewport) => {\n    const imageIds = viewport.getImageIds();\n    if (imageIds.includes(imageId)) {\n      viewport.calibrateSpacing(imageId);\n    }\n  });\n\n  // 2.2 If imageId is cached but not being displayed in a viewport, stackViewport\n  // will handle using the calibratedPixelSpacing since it has been added\n  // to the provider\n}\n","import type { Types } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\n\nexport function triggerAnnotationRenderForViewportIds(\n  renderingEngine: Types.IRenderingEngine,\n  viewportIdsToRender: string[]\n): void {\n  if (!viewportIdsToRender.length) {\n    return;\n  }\n\n  viewportIdsToRender.forEach((viewportId) => {\n    const { element } = renderingEngine.getViewport(viewportId);\n    triggerAnnotationRender(element);\n  });\n}\n\nexport default triggerAnnotationRenderForViewportIds;\n","import {\n  StackViewport,\n  Types,\n  VolumeViewport,\n  eventTarget,\n  EVENTS,\n  utilities as csUtils,\n  getEnabledElement,\n} from '@cornerstonejs/core';\nimport { ScrollOptions, EventTypes } from '../types';\n\n/**\n * It scrolls one slice in the Stack or Volume Viewport, it uses the options provided\n * to determine the slice to scroll to. For Stack Viewport, it scrolls in the 1 or -1\n * direction, for Volume Viewport, it uses the camera and focal point to determine the\n * slice to scroll to based on the spacings.\n * @param viewport - The viewport in which to scroll\n * @param options - Options to use for scrolling, including direction, invert, and volumeId\n * @returns\n */\nexport default function scroll(\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  options: ScrollOptions\n): void {\n  // check if viewport is disabled then throw error\n  const enabledElement = getEnabledElement(viewport.element);\n\n  if (!enabledElement) {\n    throw new Error('Scroll::Viewport is not enabled (it might be disabled)');\n  }\n\n  if (\n    viewport instanceof StackViewport &&\n    viewport.getImageIds().length === 0\n  ) {\n    throw new Error('Scroll::Stack Viewport has no images');\n  }\n\n  const { type: viewportType } = viewport;\n  const { volumeId, delta } = options;\n\n  if (viewport instanceof StackViewport) {\n    viewport.scroll(delta, options.debounceLoading, options.loop);\n  } else if (viewport instanceof VolumeViewport) {\n    scrollVolume(viewport, volumeId, delta);\n  } else {\n    throw new Error(`Not implemented for Viewport Type: ${viewportType}`);\n  }\n}\n\nexport function scrollVolume(\n  viewport: VolumeViewport,\n  volumeId: string,\n  delta: number\n) {\n  const { numScrollSteps, currentStepIndex, sliceRangeInfo } =\n    csUtils.getVolumeViewportScrollInfo(viewport, volumeId);\n\n  if (!sliceRangeInfo) {\n    return;\n  }\n\n  const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;\n  const { focalPoint, viewPlaneNormal, position } = camera;\n\n  const { newFocalPoint, newPosition } = csUtils.snapFocalPointToSlice(\n    focalPoint,\n    position,\n    sliceRange,\n    viewPlaneNormal,\n    spacingInNormalDirection,\n    delta\n  );\n\n  viewport.setCamera({\n    focalPoint: newFocalPoint,\n    position: newPosition,\n  });\n  viewport.render();\n\n  const desiredStepIndex = currentStepIndex + delta;\n\n  if (\n    (desiredStepIndex > numScrollSteps || desiredStepIndex < 0) &&\n    viewport.getCurrentImageId() // Check that we are in the plane of acquistion\n  ) {\n    // One common use case of this trigger might be to load the next\n    // volume in a time series or the next segment of a partially loaded volume.\n\n    const VolumeScrollEventDetail = {\n      volumeId,\n      viewport,\n      delta,\n      desiredStepIndex,\n      currentStepIndex,\n      numScrollSteps,\n      currentImageId: viewport.getCurrentImageId(),\n    };\n\n    csUtils.triggerEvent(\n      eventTarget,\n      EVENTS.VOLUME_SCROLL_OUT_OF_BOUNDS,\n      VolumeScrollEventDetail as EventTypes.VolumeScrollOutOfBoundsEventDetail\n    );\n  }\n}\n","import {\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  utilities as csUtils,\n  Types,\n} from '@cornerstonejs/core';\nimport JumpToSliceOptions from '../../types/JumpToSliceOptions';\nimport clip from '../clip';\nimport scroll from '../scroll';\n\n/**\n * It uses the imageIndex in the Options to scroll to the slice that is intended.\n * It works for both Stack and Volume viewports. In VolumeViewports, the imageIndex\n * should be given with respect to the index in the 3D image in the view direction\n * (i.e. the index of the slice in Axial, Sagittal, Coronal, or Oblique).\n *\n * @param element - the HTML Div element scrolling inside\n * @param options - the options used for jumping to a slice\n * @returns Promise that resolves to ImageIdIndex\n */\nasync function jumpToSlice(\n  element: HTMLDivElement,\n  options = {} as JumpToSliceOptions\n): Promise<void> {\n  const { imageIndex, debounceLoading, volumeId } = options;\n  const enabledElement = getEnabledElement(element);\n\n  if (!enabledElement) {\n    throw new Error('Element has been disabled');\n  }\n\n  const { viewport } = enabledElement;\n\n  const { imageIndex: currentImageIndex, numberOfSlices } = _getImageSliceData(\n    viewport,\n    debounceLoading\n  );\n\n  const imageIndexToJump = _getImageIndexToJump(numberOfSlices, imageIndex);\n  const delta = imageIndexToJump - currentImageIndex;\n\n  scroll(viewport, { delta, debounceLoading, volumeId });\n}\n\nfunction _getImageSliceData(\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  debounceLoading?: boolean\n): Types.ImageSliceData {\n  if (viewport instanceof StackViewport) {\n    return {\n      numberOfSlices: viewport.getImageIds().length,\n      imageIndex: debounceLoading\n        ? viewport.getTargetImageIdIndex()\n        : viewport.getCurrentImageIdIndex(),\n    };\n  } else if (viewport instanceof VolumeViewport) {\n    return csUtils.getImageSliceDataForVolumeViewport(viewport);\n  } else {\n    throw new Error('Unsupported viewport type');\n  }\n}\n\nfunction _getImageIndexToJump(\n  numberOfSlices: number,\n  imageIndex: number\n): number {\n  const lastSliceIndex = numberOfSlices - 1;\n\n  return clip(imageIndex, 0, lastSliceIndex);\n}\n\nexport default jumpToSlice;\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\nimport type { vtkImageData } from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport BoundsIJK from '../types/BoundsIJK';\n\nexport type PointInShapeCallback = ({\n  value,\n  index,\n  pointIJK,\n  pointLPS,\n}: {\n  value: number;\n  index: number;\n  pointIJK: Types.Point3;\n  pointLPS: Types.Point3;\n}) => void;\n\nexport type ShapeFnCriteria = (\n  pointIJK: Types.Point3,\n  pointLPS: Types.Point3\n) => boolean;\n\n/**\n * For each point in the image (If boundsIJK is not provided, otherwise, for each\n * point in the provided bounding box), It runs the provided callback IF the point\n * passes the provided criteria to be inside the shape (which is defined by the\n * provided pointInShapeFn)\n *\n * @param imageData - The image data object.\n * @param dimensions - The dimensions of the image.\n * @param pointInShapeFn - A function that takes a point in LPS space and returns\n * true if the point is in the shape and false if it is not.\n * @param callback - A function that will be called for\n * every point in the shape.\n * @param boundsIJK - The bounds of the volume in IJK coordinates.\n */\nexport default function pointInShapeCallback(\n  imageData: vtkImageData | Types.CPUImageData,\n  pointInShapeFn: ShapeFnCriteria,\n  callback: PointInShapeCallback,\n  boundsIJK?: BoundsIJK\n): void {\n  let iMin, iMax, jMin, jMax, kMin, kMax;\n\n  let scalarData;\n\n  // if getScalarData is a method on imageData\n  if ((imageData as Types.CPUImageData).getScalarData) {\n    scalarData = (imageData as Types.CPUImageData).getScalarData();\n  } else {\n    scalarData = (imageData as vtkImageData)\n      .getPointData()\n      .getScalars()\n      .getData();\n  }\n\n  const dimensions = imageData.getDimensions();\n\n  if (!boundsIJK) {\n    iMin = 0;\n    iMax = dimensions[0];\n    jMin = 0;\n    jMax = dimensions[1];\n    kMin = 0;\n    kMax = dimensions[2];\n  } else {\n    [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = boundsIJK;\n  }\n\n  const start = vec3.fromValues(iMin, jMin, kMin);\n\n  const direction = imageData.getDirection();\n  const rowCosines = direction.slice(0, 3);\n  const columnCosines = direction.slice(3, 6);\n  const scanAxisNormal = direction.slice(6, 9);\n\n  const spacing = imageData.getSpacing();\n  const [rowSpacing, columnSpacing, scanAxisSpacing] = spacing;\n\n  // @ts-ignore will be fixed in vtk-master\n  const worldPosStart = imageData.indexToWorld(start);\n\n  const rowStep = vec3.fromValues(\n    rowCosines[0] * rowSpacing,\n    rowCosines[1] * rowSpacing,\n    rowCosines[2] * rowSpacing\n  );\n\n  const columnStep = vec3.fromValues(\n    columnCosines[0] * columnSpacing,\n    columnCosines[1] * columnSpacing,\n    columnCosines[2] * columnSpacing\n  );\n\n  const scanAxisStep = vec3.fromValues(\n    scanAxisNormal[0] * scanAxisSpacing,\n    scanAxisNormal[1] * scanAxisSpacing,\n    scanAxisNormal[2] * scanAxisSpacing\n  );\n\n  const yMultiple = dimensions[0];\n  const zMultiple = dimensions[0] * dimensions[1];\n\n  for (let k = kMin; k <= kMax; k++) {\n    for (let j = jMin; j <= jMax; j++) {\n      for (let i = iMin; i <= iMax; i++) {\n        const pointIJK: Types.Point3 = [i, j, k];\n        const dI = i - iMin;\n        const dJ = j - jMin;\n        const dK = k - kMin;\n\n        const startWorld = worldPosStart;\n\n        const pointLPS: Types.Point3 = [\n          startWorld[0] +\n            dI * rowStep[0] +\n            dJ * columnStep[0] +\n            dK * scanAxisStep[0],\n          startWorld[1] +\n            dI * rowStep[1] +\n            dJ * columnStep[1] +\n            dK * scanAxisStep[1],\n          startWorld[2] +\n            dI * rowStep[2] +\n            dJ * columnStep[2] +\n            dK * scanAxisStep[2],\n        ];\n\n        if (pointInShapeFn(pointLPS, pointIJK)) {\n          const index = k * zMultiple + j * yMultiple + i;\n          const value = scalarData[index];\n\n          callback({ value, index, pointIJK, pointLPS });\n        }\n      }\n    }\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Uses the current bounds of the 2D rectangle and extends it in the view axis by numSlices\n * It compares min and max of each IJK to find the view axis (for axial, zMin === zMax) and\n * then calculates the extended range. It will assume the slice is relative to the\n * current slice and will add the given slices to the current max of the boundingBox.\n * @param boundsIJK - [[iMin, iMax], [jMin, jMax], [kMin, kMax]]\n * @param slices - number of slices to project before and after\n * @returns extended bounds\n */\nfunction extend2DBoundingBoxInViewAxis(\n  boundsIJK: [Types.Point2, Types.Point2, Types.Point2],\n  numSlicesToProject: number\n): [Types.Point2, Types.Point2, Types.Point2] {\n  // find which index in boundsIJK has the same first and last value\n  const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);\n\n  if (sliceNormalIndex === -1) {\n    throw new Error('3D bounding boxes not supported in an oblique plane');\n  }\n\n  // get the index and subtract slices from the min and add to the max\n  boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;\n  boundsIJK[sliceNormalIndex][1] += numSlicesToProject;\n  return boundsIJK;\n}\n\nexport default extend2DBoundingBoxInViewAxis;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * With a given vertices (points) coordinates in IJK, it calculates the minimum and maximum\n * coordinate in each axis, and returns them. If dimensions are provided it also\n * clip the min, max to the provided width, height and depth\n *\n * @param points - shape corner points coordinates (IJK)\n * @param dimensions - dimensions of the image\n * @returns [[xMin,xMax],[yMin,yMax], [zMin,zMax]]\n */\nfunction getBoundingBoxAroundShape(\n  points: Types.Point3[],\n  dimensions?: Types.Point3\n): [Types.Point2, Types.Point2, Types.Point2] {\n  let xMin = Infinity;\n  let xMax = 0;\n  let yMin = Infinity;\n  let yMax = 0;\n  let zMin = Infinity;\n  let zMax = 0;\n\n  points.forEach((p) => {\n    xMin = Math.min(p[0], xMin);\n    xMax = Math.max(p[0], xMax);\n    yMin = Math.min(p[1], yMin);\n    yMax = Math.max(p[1], yMax);\n    zMin = Math.min(p[2], zMin);\n    zMax = Math.max(p[2], zMax);\n  });\n\n  xMin = Math.floor(xMin);\n  xMax = Math.floor(xMax);\n  yMin = Math.floor(yMin);\n  yMax = Math.floor(yMax);\n  zMin = Math.floor(zMin);\n  zMax = Math.floor(zMax);\n\n  if (dimensions) {\n    // clip the min, max to the provided width, height and depth\n    const [width, height, depth] = dimensions;\n    xMin = Math.max(0, xMin);\n    xMax = Math.min(width - 1, xMax);\n    yMin = Math.max(0, yMin);\n    yMax = Math.min(height - 1, yMax);\n    zMin = Math.max(0, zMin);\n    zMax = Math.min(depth - 1, zMax);\n  }\n\n  return [\n    [xMin, xMax],\n    [yMin, yMax],\n    [zMin, zMax],\n  ];\n}\n\nexport default getBoundingBoxAroundShape;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport type { vtkImageData } from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { vec3 } from 'gl-matrix';\nimport { pointInSphere } from './math/sphere';\nimport pointInShapeCallback, {\n  PointInShapeCallback,\n} from './pointInShapeCallback';\nimport { BoundsIJK } from '../types';\nimport { getBoundingBoxAroundShape } from './boundingBox';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * Given an imageData, and the great circle top and bottom points of a sphere,\n * this function will run the callback for each point of the imageData that is\n * within the sphere defined by the great circle points. If the viewport\n * is provided, region of interest will be an accurate approximation of the\n * sphere (using viewport camera), and the resulting performance will be\n * better.\n *\n * @privateRemarks great circle also known as orthodrome is the intersection of\n * the sphere and the plane that passes through the center of the sphere\n *\n * @param imageData - The volume imageData\n * @param circlePoints - bottom and top points of the great circle in world coordinates\n * @param callback - A callback function that will be called for each point in the shape.\n */\nexport default function pointInSurroundingSphereCallback(\n  imageData: vtkImageData,\n  circlePoints: [Types.Point3, Types.Point3],\n  callback: PointInShapeCallback,\n  viewport?: Types.IVolumeViewport\n): void {\n  // We can run the sphere equation to determine if a point is inside\n  // the sphere; however, since the imageData dimensions can be quite large, we\n  // can narrow down the search by estimating the bounds of the sphere in index\n  // space.\n  const { boundsIJK, centerWorld, radiusWorld } = _getBounds(\n    circlePoints,\n    imageData,\n    viewport\n  );\n\n  const sphereObj = {\n    center: centerWorld,\n    radius: radiusWorld,\n  };\n\n  pointInShapeCallback(\n    imageData,\n    (pointLPS) => pointInSphere(sphereObj, pointLPS),\n    callback,\n    boundsIJK\n  );\n}\n\nfunction _getBounds(\n  circlePoints: [Types.Point3, Types.Point3],\n  imageData: vtkImageData,\n  viewport\n): {\n  boundsIJK: BoundsIJK;\n  centerWorld: Types.Point3;\n  radiusWorld: number;\n} {\n  const [bottom, top] = circlePoints;\n\n  // Sphere center in world\n  const centerWorld = vec3.fromValues(\n    (bottom[0] + top[0]) / 2,\n    (bottom[1] + top[1]) / 2,\n    (bottom[2] + top[2]) / 2\n  );\n\n  // sphere radius in world\n  const radiusWorld = vec3.distance(bottom, top) / 2;\n\n  let boundsIJK;\n\n  if (!viewport) {\n    // If no viewport is provide (no camera), we can estimate the bounding box\n    // of the sphere in index space.\n    // This is done by calculating the maximum value for radius in the index\n    // space (since the radius is in world space, we need to convert it to index, and\n    // each dimensions can have a different scale factor). Therefore, by finding\n    // the minimum spacing value in the imageData, we can calculate the maximum\n    // radius in index space and use that to calculate the bounds of the sphere\n    // This will not be accurate, but it is a good first approximation.\n    // sphere center in index\n    const centerIJK = transformWorldToIndex(\n      imageData,\n      centerWorld as Types.Point3\n    );\n\n    const spacings = imageData.getSpacing();\n    const minSpacing = Math.min(...spacings);\n\n    const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);\n\n    boundsIJK = [\n      [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],\n      [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],\n      [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK],\n    ];\n\n    return {\n      boundsIJK,\n      centerWorld: centerWorld as Types.Point3,\n      radiusWorld,\n    };\n  }\n\n  boundsIJK = _computeBoundsIJKWithCamera(\n    imageData,\n    viewport,\n    circlePoints,\n    centerWorld,\n    radiusWorld\n  );\n\n  return {\n    boundsIJK,\n    centerWorld: centerWorld as Types.Point3,\n    radiusWorld,\n  };\n}\n\nfunction _computeBoundsIJKWithCamera(\n  imageData,\n  viewport,\n  circlePoints,\n  centerWorld,\n  radiusWorld\n) {\n  const [bottom, top] = circlePoints;\n\n  const dimensions = imageData.getDimensions() as Types.Point3;\n  const camera = viewport.getCamera();\n\n  // Calculate viewRight from the camera, this will get used in order to\n  // calculate circles topLeft and bottomRight on different planes of intersection\n  // between sphere and viewPlane\n  const viewUp = vec3.fromValues(\n    camera.viewUp[0],\n    camera.viewUp[1],\n    camera.viewUp[2]\n  );\n  const viewPlaneNormal = vec3.fromValues(\n    camera.viewPlaneNormal[0],\n    camera.viewPlaneNormal[1],\n    camera.viewPlaneNormal[2]\n  );\n  const viewRight = vec3.create();\n\n  vec3.cross(viewRight, viewUp, viewPlaneNormal);\n\n  // we need to find the bounding box of the sphere in the image, e.g., the\n  // topLeftWorld and bottomRightWorld points of the bounding box.\n  // We go from the sphereCenter in the normal direction of amount radius, and\n  // we go left to find the topLeftWorld point of the bounding box. Next we go\n  // in the opposite direction and go right to find the bottomRightWorld point\n  // of the bounding box.\n  const topLeftWorld = vec3.create();\n  const bottomRightWorld = vec3.create();\n\n  vec3.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);\n  vec3.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);\n\n  // go in the direction of viewRight with the value of radius\n  vec3.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);\n  vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);\n\n  // convert the world coordinates to index coordinates\n\n  const sphereCornersIJK = [\n    <Types.Point3>transformWorldToIndex(imageData, <Types.Point3>topLeftWorld),\n    <Types.Point3>(\n      transformWorldToIndex(imageData, <Types.Point3>bottomRightWorld)\n    ),\n  ];\n\n  // get the bounding box of the sphere in the image\n  const boundsIJK = getBoundingBoxAroundShape(sphereCornersIJK, dimensions);\n\n  return boundsIJK;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\ntype Sphere = {\n  center: Types.Point3 | vec3;\n  radius: number;\n};\n\n/**\n * Checks if a point is inside a sphere. Note: this is similar to the\n * `pointInEllipse` function, but since we don't need checks for the\n * ellipse's rotation in different views, we can use a simpler equation\n * which would be faster (no if statements).\n *\n * @param sphere - Sphere object with center and radius\n * @param pointLPS - the point to check in world coordinates\n * @returns boolean\n */\nexport default function pointInSphere(\n  sphere: Sphere,\n  pointLPS: Types.Point3\n): boolean {\n  const { center, radius } = sphere;\n\n  return (\n    (pointLPS[0] - center[0]) ** 2 +\n      (pointLPS[1] - center[1]) ** 2 +\n      (pointLPS[2] - center[2]) ** 2 <=\n    radius ** 2\n  );\n}\n","/**\n * Truncates decimal points to that there is at least 1+precision significant\n * digits.\n *\n * For example, with the default precision 2 (3 significant digits)\n * * Values larger than 100 show no information after the decimal point\n * * Values between 10 and 99 show 1 decimal point\n * * Values between 1 and 9 show 2 decimal points\n *\n * @param value - to return a fixed measurement value from\n * @param precision - defining how many digits after 1..9 are desired\n */\nfunction roundNumber(value: string | number, precision = 2): string {\n  if (value === undefined || value === null || value === '') return 'NaN';\n  value = Number(value);\n  if (value < 0.0001) return `${value}`;\n  const fixedPrecision =\n    value >= 100\n      ? precision - 2\n      : value >= 10\n      ? precision - 1\n      : value >= 1\n      ? precision\n      : value >= 0.1\n      ? precision + 1\n      : value >= 0.01\n      ? precision + 2\n      : value >= 0.001\n      ? precision + 3\n      : precision + 4;\n  return value.toFixed(fixedPrecision);\n}\n\nexport default roundNumber;\n","import type { Types } from '@cornerstonejs/core';\n\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { pointInSurroundingSphereCallback } from '../../../utilities';\n\ntype OperationData = {\n  points: [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n  volume: Types.IImageVolume;\n  segmentIndex: number;\n  segmentationId: string;\n  segmentsLocked: number[];\n  viewPlaneNormal: Types.Point3;\n  viewUp: Types.Point3;\n  constraintFn: () => boolean;\n};\n\nfunction fillSphere(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData,\n  _inside = true\n): void {\n  const { viewport } = enabledElement;\n  const {\n    volume: segmentation,\n    segmentsLocked,\n    segmentIndex,\n    segmentationId,\n    points,\n  } = operationData;\n\n  const { imageData, dimensions } = segmentation;\n  const scalarData = segmentation.getScalarData();\n  const scalarIndex = [];\n\n  const callback = ({ index, value }) => {\n    if (segmentsLocked.includes(value)) {\n      return;\n    }\n    scalarData[index] = segmentIndex;\n    scalarIndex.push(index);\n  };\n\n  pointInSurroundingSphereCallback(\n    imageData,\n    [points[0], points[1]],\n    callback,\n    viewport as Types.IVolumeViewport\n  );\n\n  // Since the scalar indexes start from the top left corner of the cube, the first\n  // slice that needs to be rendered can be calculated from the first mask coordinate\n  // divided by the zMultiple, as well as the last slice for the last coordinate\n  const zMultiple = dimensions[0] * dimensions[1];\n  const minSlice = Math.floor(scalarIndex[0] / zMultiple);\n  const maxSlice = Math.floor(scalarIndex[scalarIndex.length - 1] / zMultiple);\n  const sliceArray = Array.from(\n    { length: maxSlice - minSlice + 1 },\n    (v, k) => k + minSlice\n  );\n\n  triggerSegmentationDataModified(segmentationId, sliceArray);\n}\n\n/**\n * Fill inside a sphere with the given segment index in the given operation data. The\n * operation data contains the sphere required points.\n * @param enabledElement - The element that is enabled and selected.\n * @param operationData - OperationData\n */\nexport function fillInsideSphere(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillSphere(enabledElement, operationData, true);\n}\n\n/**\n * Fill outside a sphere with the given segment index in the given operation data. The\n * operation data contains the sphere required points.\n * @param enabledElement - The element that is enabled and selected.\n * @param operationData - OperationData\n */\nexport function fillOutsideSphere(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillSphere(enabledElement, operationData, false);\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport { fillInsideSphere } from './fillSphere';\n\ntype OperationData = {\n  points: [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n  volume: Types.IImageVolume;\n  segmentIndex: number;\n  segmentationId: string;\n  segmentsLocked: number[];\n  viewPlaneNormal: Types.Point3;\n  viewUp: Types.Point3;\n  constraintFn: () => boolean;\n};\n\nexport function eraseInsideSphere(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  // Take the arguments and set the segmentIndex to 0,\n  // Then use existing fillInsideCircle functionality.\n  const eraseOperationData = Object.assign({}, operationData, {\n    segmentIndex: 0,\n  });\n\n  fillInsideSphere(enabledElement, eraseOperationData);\n}\n","import type { Types } from '@cornerstonejs/core';\n\ntype Ellipse = {\n  center: Types.Point3;\n  xRadius: number;\n  yRadius: number;\n  zRadius: number;\n};\n\n/**\n * Given an ellipse and a point, return true if the point is inside the ellipse\n * @param ellipse - The ellipse object to check against.\n * @param pointLPS - The point in LPS space to test.\n * @returns A boolean value.\n */\nexport default function pointInEllipse(\n  ellipse: Ellipse,\n  pointLPS: Types.Point3\n): boolean {\n  const { center: circleCenterWorld, xRadius, yRadius, zRadius } = ellipse;\n  const [x, y, z] = pointLPS;\n  const [x0, y0, z0] = circleCenterWorld;\n\n  let inside = 0;\n  if (xRadius !== 0) {\n    inside += ((x - x0) * (x - x0)) / (xRadius * xRadius);\n  }\n\n  if (yRadius !== 0) {\n    inside += ((y - y0) * (y - y0)) / (yRadius * yRadius);\n  }\n\n  if (zRadius !== 0) {\n    inside += ((z - z0) * (z - z0)) / (zRadius * zRadius);\n  }\n\n  return inside <= 1;\n}\n","import type { Types } from '@cornerstonejs/core';\n\ntype canvasCoordinates = [\n  Types.Point2, // bottom\n  Types.Point2, // top\n  Types.Point2, // left\n  Types.Point2 // right\n];\n\n/**\n * It takes the canvas coordinates of the ellipse corners and returns the top left and bottom right\n * corners of it\n *\n * @param ellipseCanvasPoints - The coordinates of the ellipse in the canvas.\n * @returns An array of two points.\n */\nexport default function getCanvasEllipseCorners(\n  ellipseCanvasPoints: canvasCoordinates\n): Array<Types.Point2> {\n  const [bottom, top, left, right] = ellipseCanvasPoints;\n\n  const topLeft = <Types.Point2>[left[0], top[1]];\n  const bottomRight = <Types.Point2>[right[0], bottom[1]];\n\n  return [topLeft, bottomRight];\n}\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\nimport { utilities as csUtils } from '@cornerstonejs/core';\n\nimport {\n  getCanvasEllipseCorners,\n  pointInEllipse,\n} from '../../../utilities/math/ellipse';\nimport { getBoundingBoxAroundShape } from '../../../utilities/boundingBox';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { pointInShapeCallback } from '../../../utilities';\n\nconst { transformWorldToIndex } = csUtils;\n\ntype OperationData = {\n  segmentationId: string;\n  imageVolume: Types.IImageVolume;\n  points: any; // Todo:fix\n  volume: Types.IImageVolume;\n  segmentIndex: number;\n  segmentsLocked: number[];\n  viewPlaneNormal: number[];\n  viewUp: number[];\n  strategySpecificConfiguration: any;\n  constraintFn: () => boolean;\n};\n\nfunction fillCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData,\n  threshold = false\n): void {\n  const {\n    volume: segmentationVolume,\n    imageVolume,\n    points,\n    segmentsLocked,\n    segmentIndex,\n    segmentationId,\n    strategySpecificConfiguration,\n  } = operationData;\n  const { imageData, dimensions } = segmentationVolume;\n  const scalarData = segmentationVolume.getScalarData();\n  const { viewport } = enabledElement;\n\n  // Average the points to get the center of the ellipse\n  const center = vec3.fromValues(0, 0, 0);\n  points.forEach((point) => {\n    vec3.add(center, center, point);\n  });\n  vec3.scale(center, center, 1 / points.length);\n\n  const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n  // 1. From the drawn tool: Get the ellipse (circle) topLeft and bottomRight\n  // corners in canvas coordinates\n  const [topLeftCanvas, bottomRightCanvas] =\n    getCanvasEllipseCorners(canvasCoordinates);\n\n  // 2. Find the extent of the ellipse (circle) in IJK index space of the image\n  const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n  const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n\n  const ellipsoidCornersIJK = [\n    <Types.Point3>transformWorldToIndex(imageData, topLeftWorld),\n    <Types.Point3>transformWorldToIndex(imageData, bottomRightWorld),\n  ];\n\n  const boundsIJK = getBoundingBoxAroundShape(ellipsoidCornersIJK, dimensions);\n\n  if (boundsIJK.every(([min, max]) => min !== max)) {\n    throw new Error('Oblique segmentation tools are not supported yet');\n  }\n\n  // using circle as a form of ellipse\n  const ellipseObj = {\n    center: center as Types.Point3,\n    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n  };\n\n  const modifiedSlicesToUse = new Set() as Set<number>;\n\n  let callback;\n\n  if (threshold) {\n    callback = ({ value, index, pointIJK }) => {\n      if (segmentsLocked.includes(value)) {\n        return;\n      }\n\n      if (\n        isWithinThreshold(index, imageVolume, strategySpecificConfiguration)\n      ) {\n        scalarData[index] = segmentIndex;\n        //Todo: I don't think this will always be index 2 in streamingImageVolume?\n        modifiedSlicesToUse.add(pointIJK[2]);\n      }\n    };\n  } else {\n    callback = ({ value, index, pointIJK }) => {\n      if (segmentsLocked.includes(value)) {\n        return;\n      }\n      scalarData[index] = segmentIndex;\n      //Todo: I don't think this will always be index 2 in streamingImageVolume?\n      modifiedSlicesToUse.add(pointIJK[2]);\n    };\n  }\n\n  pointInShapeCallback(\n    imageData,\n    (pointLPS, pointIJK) => pointInEllipse(ellipseObj, pointLPS),\n    callback,\n    boundsIJK\n  );\n\n  const arrayOfSlices: number[] = Array.from(modifiedSlicesToUse);\n\n  triggerSegmentationDataModified(segmentationId, arrayOfSlices);\n}\n\nfunction isWithinThreshold(\n  index: number,\n  imageVolume: Types.IImageVolume,\n  strategySpecificConfiguration: any\n) {\n  const { THRESHOLD_INSIDE_CIRCLE } = strategySpecificConfiguration;\n\n  const voxelValue = imageVolume.getScalarData()[index];\n  const { threshold } = THRESHOLD_INSIDE_CIRCLE;\n\n  return threshold[0] <= voxelValue && voxelValue <= threshold[1];\n}\n\n/**\n * Fill inside the circular region segment inside the segmentation defined by the operationData.\n * It fills the segmentation pixels inside the defined circle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function fillInsideCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillCircle(enabledElement, operationData, false);\n}\n\n/**\n * Fill inside the circular region segment inside the segmentation defined by the operationData.\n * It fills the segmentation pixels inside the defined circle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function thresholdInsideCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  const { volume, imageVolume } = operationData;\n\n  if (\n    !csUtils.isEqual(volume.dimensions, imageVolume.dimensions) ||\n    !csUtils.isEqual(volume.direction, imageVolume.direction)\n  ) {\n    throw new Error(\n      'Only source data the same dimensions/size/orientation as the segmentation currently supported.'\n    );\n  }\n\n  fillCircle(enabledElement, operationData, true);\n}\n\n/**\n * Fill outside the circular region segment inside the segmentation defined by the operationData.\n * It fills the segmentation pixels outside the  defined circle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function fillOutsideCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  throw new Error('Not yet implemented');\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport { fillInsideCircle } from './fillCircle';\n\ntype OperationData = {\n  segmentationId: string;\n  imageVolume: Types.IImageVolume;\n  points: any; // Todo:fix\n  volume: Types.IImageVolume;\n  segmentIndex: number;\n  segmentsLocked: number[];\n  viewPlaneNormal: number[];\n  viewUp: number[];\n  strategySpecificConfiguration: any;\n  constraintFn: () => boolean;\n};\n\nexport function eraseInsideCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  // Take the arguments and set the segmentIndex to 0,\n  // Then use existing fillInsideCircle functionality.\n  const eraseOperationData = {\n    ...operationData,\n    segmentIndex: 0,\n  };\n\n  fillInsideCircle(enabledElement, eraseOperationData);\n}\n","const DEFINED_CURSORS = Symbol('DefinedCursors');\nconst STANDARD_CURSORS = new Set([\n  'alias',\n  'all-scroll',\n  'auto',\n  'cell',\n  'col-resize',\n  'context-menu',\n  'copy',\n  'crosshair',\n  'default',\n  'e-resize',\n  'ew-resize',\n  'grab',\n  'grabbing',\n  'help',\n  'move',\n  'ne-resize',\n  'nesw-resize',\n  'no-drop',\n  'none',\n  'not-allowed',\n  'n-resize',\n  'ns-resize',\n  'nw-resize',\n  'nwse-resize',\n  'pointer',\n  'progress',\n  'row-resize',\n  'se-resize',\n  's-resize',\n  'sw-resize',\n  'text',\n  'vertical-text',\n  'wait',\n  'w-resize',\n  'zoom-in',\n  'zoom-out',\n]);\n\nexport default class MouseCursor {\n  private name: string;\n  private fallback: MouseCursor | undefined;\n\n  constructor(name: string, fallback?: MouseCursor | undefined) {\n    this.name = name + '';\n    this.fallback = fallback;\n  }\n\n  getName(): string {\n    return this.name + '';\n  }\n\n  addFallbackStyleProperty(style: string): string {\n    const { fallback } = this;\n    if (fallback instanceof MouseCursor) {\n      return `${style}, ${fallback.getStyleProperty()}`;\n    }\n    return style + '';\n  }\n\n  getStyleProperty(): string {\n    return this.addFallbackStyleProperty(this.name) + '';\n  }\n\n  static getDefinedCursor(name: string): MouseCursor | undefined {\n    const definedCursors = getDefinedCursors(\n      // @ts-ignore\n      MouseCursor as Record<symbol, Map<string, MouseCursor>>,\n      DEFINED_CURSORS\n    );\n    let mouseCursor = definedCursors.get(name);\n    if (mouseCursor instanceof MouseCursor) {\n      return mouseCursor;\n    }\n    if (STANDARD_CURSORS.has(name)) {\n      mouseCursor = new MouseCursor(name);\n      definedCursors.set(name, mouseCursor);\n      return mouseCursor;\n    }\n  }\n\n  static setDefinedCursor(name: string, cursor: MouseCursor): boolean {\n    if (cursor instanceof MouseCursor) {\n      const definedCursors = getDefinedCursors(\n        // @ts-ignore\n        MouseCursor as Record<symbol, Map<string, MouseCursor>>,\n        DEFINED_CURSORS\n      );\n      definedCursors.set(name, cursor);\n      return true;\n    }\n    return false;\n  }\n}\n\n/*\n * Helpers\n */\n\nfunction getDefinedCursors(\n  context: Record<symbol, Map<string, MouseCursor>>,\n  symbol: symbol\n): Map<string, MouseCursor> {\n  let definedCursors = context[symbol];\n  if (!(definedCursors instanceof Map)) {\n    definedCursors = new Map();\n    Object.defineProperty(context, symbol, { value: definedCursors });\n  }\n  return definedCursors;\n}\n\nconst standardCursorNames = STANDARD_CURSORS.values();\nexport { standardCursorNames };\n","import { utilities } from '@cornerstonejs/core';\nimport MouseCursor from './MouseCursor';\n\nconst DEFAULT_NAME = 'image-cursor';\n\nexport default class ImageMouseCursor extends MouseCursor {\n  private url: string;\n  private x: number;\n  private y: number;\n\n  constructor(\n    url: string,\n    x?: number,\n    y?: number,\n    name?: string | undefined,\n    fallback?: MouseCursor | undefined\n  ) {\n    super(\n      name || ImageMouseCursor.getUniqueInstanceName(DEFAULT_NAME),\n      fallback\n    );\n    this.url = url;\n    this.x = Number(x) || 0;\n    this.y = Number(y) || 0;\n  }\n\n  getStyleProperty(): string {\n    const { url, x, y } = this;\n    let style = `url('${url}')`;\n    if (x >= 0 && y >= 0 && (x > 0 || y > 0)) {\n      style += ` ${x} ${y}`;\n    }\n    return this.addFallbackStyleProperty(style);\n  }\n\n  static getUniqueInstanceName(prefix: string): string {\n    return `${prefix}-${utilities.getRuntimeId(ImageMouseCursor)}`;\n  }\n}\n","import { SVGCursorDescriptor } from '../types';\n\n/*\n * Definitions\n */\n\nconst BASE: SVGCursorDescriptor = {\n  iconContent: '',\n  iconSize: 16,\n  viewBox: {\n    x: 16,\n    y: 16,\n  },\n  mousePoint: {\n    x: 8,\n    y: 8,\n  },\n  mousePointerGroupString: `\n    <path stroke=\"{{color}}\" d=\"M8 16L8 0\"></path>\n    <path stroke=\"{{color}}\" d=\"M16 8L0 8\"></path>\n  `,\n};\n\nconst SEGMENTATION_CURSOR_BOUNDARIES = {\n  x: 127,\n  y: 60,\n};\n\nconst MINUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n`;\n\nconst PLUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n<rect fill=\"{{color}}\" x=\"95.84\" y=\"9.38\" width=\"15.85\" height=\"47.14\"/>\n`;\n\nconst SCISSOR_ICON = `<path fill=\"{{color}}\" d=\"M82.89,10a12.09,12.09,0,0,0-16.8-2.5l-27.5,20.4-8.5-6.3a2.93,2.93,0,0,1-1.1-3,14.66,14.66,0,0,0,.1-6.6,14.08,14.08,0,1,0-6.5,15.2,2.87,2.87,0,0,1,3.2.2l8.2,6.1-8.2,6.1a2.87,2.87,0,0,1-3.2.2,14.16,14.16,0,1,0,6.7,14.4,14,14,0,0,0-.3-5.8,2.93,2.93,0,0,1,1.1-3l8.5-6.3,27.5,20.4A11.91,11.91,0,0,0,82.89,57l-31.7-23.5ZM15.29,21a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,21Zm0,36.8a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,57.77Zm28.3-21.5a2.8,2.8,0,1,1,2.8-2.8A2.8,2.8,0,0,1,43.59,36.27Z\" transform=\"translate(-1.17 -0.96)\"/>`;\nconst RECTANGLE_ICON = `<path fill=\"{{color}}\" d=\"M8.86,2.25V66.08H72.69V2.25H8.86ZM65.28,58.67h-49v-49h49v49Z\" transform=\"translate(-8.86 -2.25)\"/>`;\nconst CIRCLE_ICON = `<path fill=\"{{color}}\" d=\"M40.77,2.25A31.92,31.92,0,1,0,72.69,34.16,31.92,31.92,0,0,0,40.77,2.25Zm0,57.63A25.71,25.71,0,1,1,66.48,34.16,25.71,25.71,0,0,1,40.77,59.87Z\" transform=\"translate(-8.86 -2.25)\"/>`;\n\nconst CursorSVG = {\n  Angle: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1203 544q0 13-10 23l-393 393 393 393q10 10 10 23t-10 23l-50\n    50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23\n    10l50 50q10 10 10 23z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  ArrowAnnotate: extend(BASE, {\n    iconContent: `<g id=\"arrowAnnotate-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"arrowAnnotate-arrow\" d=\"M23,7 l-15,15 M7,17 l0,6 6,0\" stroke-width=\"2\" />\n  </g>`,\n    viewBox: {\n      x: 24,\n      y: 24,\n    },\n  }),\n  Bidirectional: extend(BASE, {\n    iconContent: `<g fill=\"{{color}}\" stroke-width=\"3\" stroke=\"{{color}}\">\n    <path d=\"M27.63 3.21L3.12 28.81\"></path>\n    <path d=\"M27.63 15.75L15.27 4.43\"></path>\n    <path d=\"M16.5 4.28C16.5 4.96 15.95 5.51 15.27 5.51C14.59 5.51 14.03 4.96 14.03 4.28C14.03 3.59 14.59 3.04 15.27 3.04C15.95 3.04 16.5 3.59 16.5 4.28Z\" ></path>\n    <path d=\"M28.87 3.19C28.87 3.87 28.31 4.43 27.63 4.43C26.95 4.43 26.4 3.87 26.4 3.19C26.4 2.51 26.95 1.95 27.63 1.95C28.31 1.95 28.87 2.51 28.87 3.19Z\"></path>\n    <path d=\"M28.87 15.75C28.87 16.43 28.31 16.99 27.63 16.99C26.95 16.99 26.4 16.43 26.4 15.75C26.4 15.07 26.95 14.51 27.63 14.51C28.31 14.51 28.87 15.07 28.87 15.75Z\"></path>\n    <path d=\"M4.73 28.44C4.73 29.12 4.17 29.68 3.49 29.68C2.81 29.68 2.25 29.12 2.25 28.44C2.25 27.76 2.81 27.2 3.49 27.2C4.17 27.2 4.73 27.76 4.73 28.44Z\"></path>\n  </g>`,\n    viewBox: {\n      x: 48,\n      y: 48,\n    },\n  }),\n  CobbAngle: extend(BASE, {\n    iconContent: `<g stroke=\"{{color}}\" stroke-width=\"3\">\n    <path d=\"M28.59 2.34L3.82 12.32\"></path>\n    <path d=\"M28.59 29.66L3.82 19.68\"></path>\n    <path stroke-dasharray=\"2\" fill-opacity=\"0\" d=\"M12.37\n      23.06C12.67 22.36 12.85 21.93 12.92 21.76C14.6 17.8 14.68 13.35 13.15\n      9.33C13.11 9.24 13.02 9 12.88 8.63\">\n    </path>\n  </g>`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  CircleROI: extend(BASE, {\n    iconContent: `<circle stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" cx=\"16\" cy=\"16\" r=\"14\" />`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  EllipticalROI: extend(BASE, {\n    iconContent: `<path stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" d=\"M30.74 15.76C30.74 20.99 24.14 25.23 16\n    25.23C7.86 25.23 1.26 20.99 1.26 15.76C1.26 10.54 7.86 6.3 16 6.3C24.14\n    6.3 30.74 10.54 30.74 15.76Z\" />`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  FreehandROI: extend(BASE, {\n    iconContent: `<g fill=\"{{color}}\" stroke=\"{{color}}\" stroke-width=\"2\">\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_3\" cy=\"4.240343\" cx=\"14.306499\"/>\n    <line id=\"svg_4\" y2=\"3.58462\" x2=\"12.242186\" y1=\"3.997482\" x1=\"13.432202\"/>\n    <line id=\"svg_5\" y2=\"3.268901\" x2=\"10.857882\" y1=\"3.608906\" x1=\"12.387902\"/>\n    <line id=\"svg_6\" y2=\"3.147471\" x2=\"9.740724\" y1=\"3.293187\" x1=\"10.955026\"/>\n    <line id=\"svg_7\" y2=\"3.147471\" x2=\"8.089274\" y1=\"3.196043\" x1=\"9.983585\"/>\n    <line id=\"svg_8\" y2=\"3.268901\" x2=\"6.874972\" y1=\"3.123185\" x1=\"8.307848\"/>\n    <line id=\"svg_9\" y2=\"3.657478\" x2=\"5.587812\" y1=\"3.220329\" x1=\"7.020688\"/>\n    <line id=\"svg_10\" y2=\"4.046054\" x2=\"4.737801\" y1=\"3.560334\" x1=\"5.854959\"/>\n    <line id=\"svg_11\" y2=\"4.337487\" x2=\"4.300652\" y1=\"3.997482\" x1=\"4.834945\"/>\n    <line id=\"svg_12\" y2=\"4.726063\" x2=\"3.88779\" y1=\"4.191771\" x1=\"4.470655\"/>\n    <line id=\"svg_15\" y2=\"5.3575\" x2=\"3.377783\" y1=\"4.604633\" x1=\"3.960648\"/>\n    <line id=\"svg_16\" y2=\"6.183226\" x2=\"2.916348\" y1=\"5.138926\" x1=\"3.547785\"/>\n    <line id=\"svg_17\" y2=\"6.960379\" x2=\"2.770632\" y1=\"5.867507\" x1=\"3.037779\"/>\n    <line id=\"svg_18\" y2=\"7.713246\" x2=\"2.673488\" y1=\"6.741804\" x1=\"2.819204\"/>\n    <line id=\"svg_19\" y2=\"8.684687\" x2=\"2.697774\" y1=\"7.616102\" x1=\"2.673488\"/>\n    <line id=\"svg_20\" y2=\"9.753273\" x2=\"2.892062\" y1=\"8.611829\" x1=\"2.697774\"/>\n    <line id=\"svg_21\" y2=\"10.724714\" x2=\"3.134923\" y1=\"9.534698\" x1=\"2.84349\"/>\n    <line id=\"svg_23\" y2=\"11.647583\" x2=\"3.596357\" y1=\"10.578998\" x1=\"3.086351\"/>\n    <line id=\"svg_25\" y2=\"12.521881\" x2=\"4.276366\" y1=\"11.501867\" x1=\"3.499213\"/>\n    <line id=\"svg_26\" y2=\"13.930471\" x2=\"5.830673\" y1=\"12.376165\" x1=\"4.13065\"/>\n    <line id=\"svg_28\" y2=\"14.707624\" x2=\"7.263549\" y1=\"13.881899\" x1=\"5.733528\"/>\n    <line id=\"svg_29\" y2=\"15.339061\" x2=\"8.963571\" y1=\"14.61048\" x1=\"7.06926\"/>\n    <line id=\"svg_30\" y2=\"15.581921\" x2=\"10.882168\" y1=\"15.314775\" x1=\"8.817855\"/>\n    <line id=\"svg_31\" y2=\"15.460491\" x2=\"12.023612\" y1=\"15.581921\" x1=\"10.785024\"/>\n    <line id=\"svg_33\" y2=\"15.120487\" x2=\"13.092197\" y1=\"15.484777\" x1=\"11.877895\"/>\n    <line id=\"svg_34\" y2=\"14.586194\" x2=\"13.86935\" y1=\"15.217631\" x1=\"12.897909\"/>\n    <line id=\"svg_35\" y2=\"13.833327\" x2=\"14.597931\" y1=\"14.756196\" x1=\"13.699348\"/>\n    <line id=\"svg_37\" y2=\"12.716169\" x2=\"15.180796\" y1=\"13.881899\" x1=\"14.549359\"/>\n    <line id=\"svg_39\" y2=\"11.429009\" x2=\"15.520801\" y1=\"12.813313\" x1=\"15.15651\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_40\" cy=\"10.967574\" cx=\"15.520801\"/>\n  </g>`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  FreehandROISculptor: extend(BASE, {\n    iconContent: `<g id=\"icon-freehand-sculpt\" fill=\"none\" stroke-width=\"1.5\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <line id=\"svg_1\" y2=\"2.559367\" x2=\"10.184807\" y1=\"4.467781\" x1=\"8.81711\"/>\n    <line id=\"svg_4\" y2=\"1.493836\" x2=\"11.727442\" y1=\"2.766112\" x1=\"10.089386\"/>\n    <line id=\"svg_7\" y2=\"1.080346\" x2=\"13.047428\" y1=\"1.748291\" x1=\"11.345759\"/>\n    <line id=\"svg_8\" y2=\"1.000829\" x2=\"14.351511\" y1=\"1.112153\" x1=\"12.77707\"/>\n    <line id=\"svg_9\" y2=\"1.350705\" x2=\"15.242104\" y1=\"0.905408\" x1=\"13.969828\"/>\n    <line id=\"svg_10\" y2=\"2.098167\" x2=\"15.862339\" y1=\"1.14396\" x1=\"14.955842\"/>\n    <line id=\"svg_11\" y2=\"3.195505\" x2=\"16.41896\" y1=\"1.939133\" x1=\"15.766918\"/>\n    <line id=\"svg_12\" y2=\"4.292843\" x2=\"16.530284\" y1=\"2.925147\" x1=\"16.387153\"/>\n    <line id=\"svg_16\" y2=\"5.644637\" x2=\"16.196311\" y1=\"3.831643\" x1=\"16.593898\"/>\n    <line id=\"svg_18\" y2=\"7.266789\" x2=\"15.623787\" y1=\"5.19934\" x1=\"16.275829\"/>\n    <line id=\"svg_19\" y2=\"10.813258\" x2=\"14.526449\" y1=\"6.726071\" x1=\"15.766918\"/>\n    <line id=\"svg_20\" y2=\"5.056209\" x2=\"8.085552\" y1=\"4.181519\" x1=\"8.976145\"/>\n    <line id=\"svg_23\" y2=\"5.326568\" x2=\"7.481221\" y1=\"4.78585\" x1=\"8.403621\"/>\n    <line id=\"svg_24\" y2=\"5.565119\" x2=\"6.749662\" y1=\"5.294761\" x1=\"7.624352\"/>\n    <line id=\"svg_25\" y2=\"5.994512\" x2=\"5.429675\" y1=\"5.533312\" x1=\"6.956407\"/>\n    <line id=\"svg_27\" y2=\"6.551133\" x2=\"4.284627\" y1=\"5.962706\" x1=\"5.572807\"/>\n    <line id=\"svg_28\" y2=\"7.584858\" x2=\"3.044158\" y1=\"6.392099\" x1=\"4.427758\"/>\n    <line id=\"svg_29\" y2=\"8.84123\" x2=\"2.185372\" y1=\"7.489437\" x1=\"3.219096\"/>\n    <line id=\"svg_31\" y2=\"10.606513\" x2=\"1.644654\" y1=\"8.602678\" x1=\"2.280792\"/>\n    <line id=\"svg_32\" y2=\"13.214679\" x2=\"1.48562\" y1=\"10.352058\" x1=\"1.724171\"/>\n    <line id=\"svg_33\" y2=\"14.375631\" x2=\"1.676461\" y1=\"12.992031\" x1=\"1.453813\"/>\n    <line id=\"svg_34\" y2=\"15.298031\" x2=\"2.264889\" y1=\"14.152983\" x1=\"1.517427\"/>\n    <line id=\"svg_35\" y2=\"16.172721\" x2=\"3.521261\" y1=\"14.948155\" x1=\"1.915013\"/>\n    <line id=\"svg_36\" y2=\"16.824762\" x2=\"5.207027\" y1=\"15.997783\" x1=\"3.28271\"/>\n    <line id=\"svg_38\" y2=\"17.063314\" x2=\"7.035924\" y1=\"16.745245\" x1=\"4.968475\"/>\n    <line id=\"svg_39\" y2=\"16.888376\" x2=\"9.278311\" y1=\"17.047411\" x1=\"6.733758\"/>\n    <line id=\"svg_40\" y2=\"16.284045\" x2=\"10.661911\" y1=\"16.983797\" x1=\"8.992048\"/>\n    <line id=\"svg_41\" y2=\"15.313934\" x2=\"11.647925\" y1=\"16.395369\" x1=\"10.455166\"/>\n    <line id=\"svg_44\" y2=\"13.898527\" x2=\"12.82478\" y1=\"15.425259\" x1=\"11.504794\"/>\n    <line id=\"svg_45\" y2=\"12.037824\" x2=\"14.144766\" y1=\"14.312017\" x1=\"12.522614\"/>\n    <line id=\"svg_47\" y2=\"10.59061\" x2=\"14.605966\" y1=\"12.228665\" x1=\"13.953925\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_48\" cy=\"3.982726\" cx=\"13.460918\"/>\n  </g>`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  Length: extend(BASE, {\n    iconContent: `<g id=\"length-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"length-dashes\" d=\"m22.5,6 -16.5,16.5\" stroke-width=\"3\" stroke-dasharray=\"0.6666,5\" />\n  </g>`,\n    viewBox: {\n      x: 24,\n      y: 24,\n    },\n  }),\n  Probe: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1152 896q0 106-75 181t-181 75-181-75-75-181 75-181 181-75 181 75\n    75 181zm-256-544q-148 0-273 73t-198 198-73 273 73 273 198 198 273 73 273-73\n    198-198 73-273-73-273-198-198-273-73zm768 544q0 209-103 385.5t-279.5\n    279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5\n    385.5-103 385.5 103 279.5 279.5 103 385.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  RectangleROI: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1312 256h-832q-66 0-113 47t-47 113v832q0 66 47\n    113t113 47h832q66 0 113-47t47-113v-832q0-66-47-113t-113-47zm288 160v832q0\n    119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119\n    84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  TextMarker: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M789 559l-170 450q33 0 136.5 2t160.5 2q19 0\n    57-2-87-253-184-452zm-725 1105l2-79q23-7 56-12.5t57-10.5 49.5-14.5 44.5-29\n    31-50.5l237-616 280-724h128q8 14 11 21l205 480q33 78 106 257.5t114 274.5q15\n    34 58 144.5t72 168.5q20 45 35 57 19 15 88 29.5t84 20.5q6 38 6 57 0 5-.5\n    13.5t-.5 12.5q-63 0-190-8t-191-8q-76 0-215 7t-178 8q0-43 4-78l131-28q1 0\n    12.5-2.5t15.5-3.5 14.5-4.5 15-6.5 11-8 9-11\n    2.5-14q0-16-31-96.5t-72-177.5-42-100l-450-2q-26 58-76.5 195.5t-50.5 162.5q0\n    22 14 37.5t43.5 24.5 48.5 13.5 57 8.5 41 4q1 19 1 58 0 9-2 27-58\n    0-174.5-10t-174.5-10q-8 0-26.5 4t-21.5 4q-80 14-188 14z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Crosshairs: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1325 1024h-109q-26 0-45-19t-19-45v-128q0-26\n    19-45t45-19h109q-32-108-112.5-188.5t-188.5-112.5v109q0 26-19 45t-45\n    19h-128q-26 0-45-19t-19-45v-109q-108 32-188.5 112.5t-112.5 188.5h109q26\n    0 45 19t19 45v128q0 26-19 45t-45 19h-109q32 108 112.5 188.5t188.5\n    112.5v-109q0-26 19-45t45-19h128q26 0 45 19t19 45v109q108-32\n    188.5-112.5t112.5-188.5zm339-192v128q0 26-19 45t-45 19h-143q-37 161-154.5\n    278.5t-278.5 154.5v143q0 26-19 45t-45 19h-128q-26\n    0-45-19t-19-45v-143q-161-37-278.5-154.5t-154.5-278.5h-143q-26\n    0-45-19t-19-45v-128q0-26 19-45t45-19h143q37-161\n    154.5-278.5t278.5-154.5v-143q0-26 19-45t45-19h128q26 0 45 19t19 45v143q161\n    37 278.5 154.5t154.5 278.5h143q26 0 45 19t19 45z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Eraser: extend(BASE, {\n    iconContent: `<path transform=\"translate(0,1792) scale(1,-1)\" fill=\"{{color}}\" d=\"M960 1408l336-384h-768l-336 384h768zm1013-1077q15\n    34 9.5 71.5t-30.5 65.5l-896 1024q-38 44-96 44h-768q-38\n    0-69.5-20.5t-47.5-54.5q-15-34-9.5-71.5t30.5-65.5l896-1024q38-44 96-44h768q38\n    0 69.5 20.5t47.5 54.5z\" />`,\n    viewBox: {\n      x: 2048,\n      y: 1792,\n    },\n  }),\n  Magnify: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />`,\n    viewBox: {\n      x: 512,\n      y: 512,\n    },\n  }),\n  Pan: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1411 541l-355 355 355 355 144-144q29-31 70-14 39 17\n    39 59v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39 14-69l144-144-355-355-355\n    355 144 144q31 30 14 69-17 40-59 40h-448q-26 0-45-19t-19-45v-448q0-42 40-59\n    39-17 69 14l144 144 355-355-355-355-144 144q-19 19-45 19-12\n    0-24-5-40-17-40-59v-448q0-26 19-45t45-19h448q42 0 59 40 17 39-14 69l-144\n    144 355 355 355-355-144-144q-31-30-14-69 17-40 59-40h448q26 0 45 19t19\n    45v448q0 42-39 59-13 5-25 5-26 0-45-19z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Rotate: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1664 256v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39\n    14-69l138-138q-148-137-349-137-104 0-198.5 40.5t-163.5 109.5-109.5\n    163.5-40.5 198.5 40.5 198.5 109.5 163.5 163.5 109.5 198.5 40.5q119 0\n    225-52t179-147q7-10 23-12 15 0 25 9l137 138q9 8 9.5 20.5t-7.5 22.5q-109\n    132-264 204.5t-327 72.5q-156 0-298-61t-245-164-164-245-61-298 61-298\n    164-245 245-164 298-61q147 0 284.5 55.5t244.5 156.5l130-129q29-31 70-14\n    39 17 39 59z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  StackScroll: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M24 21v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1zM24 13v2c0\n    0.547-0.453 1-1 1h-22c-0.547 0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547\n    0 1 0.453 1 1zM24 5v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1z\" />`,\n    viewBox: {\n      x: 24,\n      y: 28,\n    },\n  }),\n  WindowLevelRegion: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1664 416v960q0 119-84.5 203.5t-203.5 84.5h-960q-119\n    0-203.5-84.5t-84.5-203.5v-960q0-119 84.5-203.5t203.5-84.5h960q119 0 203.5\n    84.5t84.5 203.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  WindowLevel: extend(BASE, {\n    iconContent: `\n    <path fill=\"{{color}}\" d=\"M14.5,3.5 a1 1 0 0 1 -11,11 Z\" stroke=\"none\" opacity=\"0.8\" />\n    <circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"none\" stroke-width=\"2\" stroke=\"{{color}}\" />`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  Zoom: extend(BASE, {\n    iconContent: `\n  <path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />\n  <path fill=\"{{color}}\" transform=\"scale(0.22,0.22) translate(1400,0)\" d=\"M1216\n    320q0 26-19 45t-45 19h-128v1024h128q26 0 45 19t19 45-19 45l-256 256q-19\n    19-45 19t-45-19l-256-256q-19-19-19-45t19-45 45-19h128v-1024h-128q-26\n    0-45-19t-19-45 19-45l256-256q19-19 45-19t45 19l256 256q19 19 19 45z\" />`,\n    viewBox: {\n      x: 640,\n      y: 512,\n    },\n  }),\n\n  /*\n   * Segmentation Cursors\n   */\n\n  SegmentationFreeHandEraseInside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandFillInside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandEraseOutside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandFillOutside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationRectangleEraseInside: extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  // Default Rectangle Scissors\n  RectangleScissor: extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.FILL_INSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.FILL_OUTSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.ERASE_OUTSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.ERASE_INSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  CircleScissor: extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.FILL_INSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.ERASE_OUTSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.FILL_OUTSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n};\n\n/*\n * Utils\n */\n\nfunction extend(\n  base: SVGCursorDescriptor,\n  values: Record<string, unknown>\n): SVGCursorDescriptor {\n  return Object.assign(Object.create(base), values);\n}\n\n/**\n * Registers a cursor to the list, so that it will be used for the given `toolName`.\n * Overwrites the given cursor if it is already set.\n *\n * @param toolName - The name of the tool to assign a cursor to.\n * @param iconContent - The SVG icon content of the cursor.\n * @param viewBox - The viewBox of the cursor object.\n */\nfunction registerCursor(\n  toolName: string,\n  iconContent: string,\n  viewBox: { x: number; y: number }\n) {\n  CursorSVG[toolName] = extend(BASE, {\n    iconContent,\n    viewBox,\n  });\n}\n\nfunction getDefinedSVGCursorDescriptor(\n  name: string\n): SVGCursorDescriptor | undefined {\n  if (Object.prototype.hasOwnProperty.call(CursorSVG, name)) {\n    return CursorSVG[name];\n  }\n}\n\n/*\n * Exports\n */\nconst svgCursorNames = Object.keys(CursorSVG);\n\nexport {\n  getDefinedSVGCursorDescriptor,\n  registerCursor,\n  svgCursorNames,\n  CursorSVG,\n};\n","import { ToolModes, AnnotationStyleStates } from '../enums';\nimport MouseCursor from './MouseCursor';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport { getDefinedSVGCursorDescriptor } from './SVGCursorDescriptor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\n\nimport type { StyleSpecifier } from '../types/AnnotationStyle';\nimport type { SVGCursorDescriptor } from '../types';\n\nconst PROPERTY = 'color';\nconst STATE = AnnotationStyleStates.Highlighted;\nconst MODE = ToolModes.Active;\n\nexport default class SVGMouseCursor extends ImageMouseCursor {\n  constructor(\n    url: string,\n    x?: number,\n    y?: number,\n    name?: string | undefined,\n    fallback?: MouseCursor | undefined\n  ) {\n    super(url, x, y, name, fallback);\n  }\n\n  /**\n   * Get a shared instance of the SVGMouseCursor class satisfying the given parameters.\n   *\n   * @param name - The name of the cursor (defined in SVGCursorDescriptor.ts);\n   * @param pointer - Should be true to use the version of the cursor containing\n   * a mouse pointer. Defaults to false (which does not add a pointer to the cursor);\n   * @param color - The color of the cursor. Defaults to tool.style.colorHighlightedActive;\n   * @returns a SVGMouseCursor instance or\n   * undefined if no SVG cursor descriptor was found with the given name;\n   */\n  static getDefinedCursor(\n    name: string,\n    pointer = false,\n    color?: string\n  ): MouseCursor {\n    if (!color) {\n      color = getStyleProperty(PROPERTY, {} as StyleSpecifier, STATE, MODE);\n    }\n    const urn = getCursorURN(name, pointer, color);\n    let cursor = super.getDefinedCursor(urn);\n    if (!cursor) {\n      const descriptor = getDefinedSVGCursorDescriptor(name);\n      if (descriptor) {\n        cursor = createSVGMouseCursor(\n          descriptor,\n          urn,\n          pointer,\n          color,\n          super.getDefinedCursor('default')\n        );\n        super.setDefinedCursor(urn, cursor);\n      }\n    }\n    return cursor;\n  }\n}\n\n/*\n * Helpers\n */\n\nfunction format(template: string, dictionary: Record<string, unknown>): string {\n  const dict = Object(dictionary);\n  const defined = Object.prototype.hasOwnProperty.bind(dict);\n  return (template + '').replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\n    return defined(key) ? dict[key] + '' : '';\n  });\n}\n\nfunction getCursorURN(name: string, pointer: boolean, color: string) {\n  const type = pointer ? 'pointer' : 'cursor';\n  return `${type}:${name}/${color}`;\n}\n\nfunction createSVGMouseCursor(\n  descriptor: SVGCursorDescriptor,\n  name: string,\n  pointer: boolean,\n  color: string,\n  fallback: MouseCursor\n): SVGMouseCursor {\n  const { x, y } = descriptor.mousePoint;\n  return new SVGMouseCursor(\n    createSVGIconUrl(descriptor, pointer, { color }),\n    x,\n    y,\n    name,\n    fallback\n  );\n}\n\nfunction createSVGIconUrl(\n  descriptor: SVGCursorDescriptor,\n  pointer: boolean,\n  options: Record<string, unknown>\n): string {\n  return URL.createObjectURL(createSVGIconBlob(descriptor, pointer, options));\n}\n\nfunction createSVGIconBlob(\n  descriptor: SVGCursorDescriptor,\n  pointer: boolean,\n  options: Record<string, unknown>\n): Blob {\n  const svgString = (pointer ? createSVGIconWithPointer : createSVGIcon)(\n    descriptor,\n    options\n  );\n  return new Blob([svgString], { type: 'image/svg+xml' });\n}\n\nfunction createSVGIcon(\n  descriptor: SVGCursorDescriptor,\n  options: Record<string, unknown>\n): string {\n  const { iconContent, iconSize, viewBox } = descriptor;\n  const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${iconSize}\" height=\"${iconSize}\" viewBox=\"0 0\n      ${viewBox.x} ${viewBox.y}\">\n      ${iconContent}\n    </svg>`;\n  return format(svgString, options);\n}\n\nfunction createSVGIconWithPointer(\n  descriptor: SVGCursorDescriptor,\n  options: Record<string, unknown>\n) {\n  const { iconContent, iconSize, viewBox, mousePointerGroupString } =\n    descriptor;\n  const scale = iconSize / Math.max(viewBox.x, viewBox.y, 1);\n  const svgSize = 16 + iconSize;\n  const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${svgSize}\" height=\"${svgSize}\" viewBox=\"0 0 ${svgSize} ${svgSize}\">\n      <g>${mousePointerGroupString}</g>\n      <g transform=\"translate(16, 16) scale(${scale})\">${iconContent}</g>\n    </svg>`;\n  return format(svgString, options);\n}\n","import { setElementCursor } from './elementCursor';\nimport MouseCursor from './MouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\n\n/**\n * Set the cursor for an HTML element. cursorNames can be either\n * cornerstone3DTools cursors or standard cursors.\n *\n * @param element - The element to set the cursor on.\n * @param cursorName - The name of the cursor to set. This can be\n * any cursor name either Cornerstone-specific cursor names or the standard\n * CSS cursor names.\n */\nfunction setCursorForElement(\n  element: HTMLDivElement,\n  cursorName: string\n): void {\n  let cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n  if (!cursor) {\n    cursor = MouseCursor.getDefinedCursor(cursorName);\n  }\n\n  if (!cursor) {\n    console.log(\n      `Cursor ${cursorName} is not defined either as SVG or as a standard cursor.`\n    );\n    cursor = MouseCursor.getDefinedCursor(cursorName);\n  }\n\n  setElementCursor(element, cursor);\n}\n\nexport default setCursorForElement;\n","import MouseCursor, { standardCursorNames } from './MouseCursor';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\nimport * as elementCursor from './elementCursor';\nimport setCursorForElement from './setCursorForElement';\nimport {\n  registerCursor,\n  svgCursorNames,\n  CursorSVG,\n} from './SVGCursorDescriptor';\n\n// Todo: this should be enum\nconst CursorNames = [...svgCursorNames, ...standardCursorNames];\n\nexport {\n  MouseCursor,\n  ImageMouseCursor,\n  SVGMouseCursor,\n  elementCursor,\n  registerCursor,\n  CursorNames,\n  CursorSVG,\n  setCursorForElement,\n};\n","import { MouseCursor } from '.';\n\nconst ELEMENT_CURSORS_MAP = Symbol('ElementCursorsMap');\n\n/*\n * Public Methods\n */\n\nfunction initElementCursor(\n  element: HTMLDivElement,\n  cursor: MouseCursor | null\n): void {\n  _getElementCursors(element)[0] = cursor;\n  _setElementCursor(element, cursor);\n}\n\nfunction _setElementCursor(\n  element: HTMLDivElement,\n  cursor: MouseCursor | null\n): void {\n  const cursors = _getElementCursors(element);\n  cursors[1] = cursors[0];\n  cursors[0] = cursor;\n  element.style.cursor = (\n    cursor instanceof MouseCursor\n      ? cursor\n      : MouseCursor.getDefinedCursor('auto')\n  ).getStyleProperty();\n}\n\nfunction resetElementCursor(element: HTMLDivElement): void {\n  _setElementCursor(element, _getElementCursors(element)[1]);\n}\n\nfunction hideElementCursor(element: HTMLDivElement): void {\n  _setElementCursor(element, MouseCursor.getDefinedCursor('none'));\n}\n\n/*\n * Helpers\n */\n\nfunction _getElementCursors(\n  element: HTMLDivElement\n): [MouseCursor | null, MouseCursor | null] {\n  let map = _getElementCursors[ELEMENT_CURSORS_MAP];\n  if (!(map instanceof WeakMap)) {\n    map = new WeakMap();\n    Object.defineProperty(_getElementCursors, ELEMENT_CURSORS_MAP, {\n      value: map,\n    });\n  }\n  let cursors = map.get(element);\n  if (!cursors) {\n    cursors = [null, null];\n    map.set(element, cursors);\n  }\n  return cursors;\n}\n\n/*\n * Exports\n */\nexport {\n  initElementCursor,\n  resetElementCursor,\n  hideElementCursor,\n  _setElementCursor as setElementCursor,\n};\n","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\n\nimport type { Types } from '@cornerstonejs/core';\nimport type {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { BaseTool } from '../base';\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport {\n  thresholdInsideCircle,\n  fillInsideCircle,\n} from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events, ToolModes } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  state as segmentationState,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\n/**\n * @public\n */\nclass BrushTool extends BaseTool {\n  static toolName;\n  private _editData: {\n    segmentation: Types.IImageVolume;\n    imageVolume: Types.IImageVolume; //\n    segmentsLocked: number[]; //\n  } | null;\n  private _hoverData?: {\n    brushCursor: any;\n    segmentationId: string;\n    segmentIndex: number;\n    segmentationRepresentationUID: string;\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    centerCanvas?: Array<number>;\n  };\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE_CIRCLE: fillInsideCircle,\n          THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n          ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n          FILL_INSIDE_SPHERE: fillInsideSphere,\n          ERASE_INSIDE_SPHERE: eraseInsideSphere,\n        },\n        strategySpecificConfiguration: {\n          THRESHOLD_INSIDE_CIRCLE: {\n            threshold: [-150, -70], // E.g. CT Fat // Only used during threshold strategies.\n          },\n        },\n        defaultStrategy: 'FILL_INSIDE_CIRCLE',\n        activeStrategy: 'FILL_INSIDE_CIRCLE',\n        brushSize: 25,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  onSetToolPassive = () => {\n    this.disableCursor();\n  };\n\n  onSetToolEnabled = () => {\n    this.disableCursor();\n  };\n\n  onSetToolDisabled = () => {\n    this.disableCursor();\n  };\n\n  private disableCursor() {\n    this._hoverData = undefined;\n  }\n\n  preMouseDownCallback = (\n    evt: EventTypes.MouseDownActivateEventType\n  ): boolean => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using the brush tool'\n      );\n    }\n\n    const { segmentationId, type } = activeSegmentationRepresentation;\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const { representationData } =\n      segmentationState.getSegmentation(segmentationId);\n\n    // Todo: are we going to support contour editing with this tool?\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n\n    const actors = viewport.getActors();\n\n    // Note: For tools that need the source data. Assumed to use\n    // First volume actor for now.\n    const firstVolumeActorUID = actors[0].uid;\n    const imageVolume = cache.getVolume(firstVolumeActorUID);\n\n    const viewportIdsToRender = [viewport.id];\n\n    this._editData = {\n      segmentation,\n      imageVolume,\n      segmentsLocked,\n    };\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportUIDs(\n      renderingEngine,\n      viewportIdsToRender\n    );\n\n    return true;\n  };\n\n  mouseMoveCallback = (evt: EventTypes.InteractionEventType): void => {\n    if (this.mode === ToolModes.Active) {\n      this.updateCursor(evt);\n    }\n  };\n\n  private updateCursor(evt: EventTypes.InteractionEventType) {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const { currentPoints } = eventData;\n    const centerCanvas = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      console.warn(\n        'No active segmentation detected, create one before using the brush tool'\n      );\n      return;\n    }\n\n    const { segmentationRepresentationUID, segmentationId } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const viewportIdsToRender = [viewport.id];\n\n    // Center of circle in canvas Coordinates\n\n    const brushCursor = {\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {},\n    };\n\n    this._hoverData = {\n      brushCursor,\n      centerCanvas,\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      segmentColor,\n      viewportIdsToRender,\n    };\n\n    this._calculateCursor(element, centerCanvas);\n\n    triggerAnnotationRenderForViewportUIDs(\n      renderingEngine,\n      viewportIdsToRender\n    );\n  }\n\n  private _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const { imageVolume, segmentation, segmentsLocked } = this._editData;\n\n    this.updateCursor(evt);\n\n    const {\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      brushCursor,\n      viewportIdsToRender,\n    } = this._hoverData;\n\n    const { data } = brushCursor;\n    const { viewPlaneNormal, viewUp } = brushCursor.metadata;\n\n    triggerAnnotationRenderForViewportUIDs(\n      renderingEngine,\n      viewportIdsToRender\n    );\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation, // todo: just pass the segmentationId instead\n      imageVolume,\n      segmentIndex,\n      segmentsLocked,\n      viewPlaneNormal,\n      toolGroupId: this.toolGroupId,\n      segmentationId,\n      segmentationRepresentationUID,\n      viewUp,\n      strategySpecificConfiguration:\n        this.configuration.strategySpecificConfiguration,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  private _calculateCursor(element, centerCanvas) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n    const { brushSize } = this.configuration;\n    // Center of circle in canvas Coordinates\n\n    const radius = brushSize;\n\n    const bottomCanvas: Types.Point2 = [\n      centerCanvas[0],\n      centerCanvas[1] + radius,\n    ];\n    const topCanvas: Types.Point2 = [centerCanvas[0], centerCanvas[1] - radius];\n    const leftCanvas: Types.Point2 = [\n      centerCanvas[0] - radius,\n      centerCanvas[1],\n    ];\n    const rightCanvas: Types.Point2 = [\n      centerCanvas[0] + radius,\n      centerCanvas[1],\n    ];\n\n    const { brushCursor } = this._hoverData;\n    const { data } = brushCursor;\n\n    if (data.handles === undefined) {\n      data.handles = {};\n    }\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    data.invalidated = false;\n  }\n\n  private _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const { imageVolume, segmentation, segmentsLocked } = this._editData;\n    const {\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      brushCursor,\n    } = this._hoverData;\n\n    const { data } = brushCursor;\n    const { viewPlaneNormal, viewUp } = brushCursor.metadata;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    this._editData = null;\n    this.updateCursor(evt);\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation,\n      imageVolume,\n      segmentIndex,\n      segmentsLocked,\n      viewPlaneNormal,\n      toolGroupId: this.toolGroupId,\n      segmentationId,\n      segmentationRepresentationUID,\n      viewUp,\n      strategySpecificConfiguration:\n        this.configuration.strategySpecificConfiguration,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  private _activateDraw = (element: HTMLDivElement): void => {\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  private _deactivateDraw = (element: HTMLDivElement): void => {\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n  };\n\n  public invalidateBrushCursor() {\n    if (this._hoverData !== undefined) {\n      const { data } = this._hoverData.brushCursor;\n\n      data.invalidated = true;\n    }\n  }\n\n  renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): void {\n    if (!this._hoverData) {\n      return;\n    }\n\n    const { viewport } = enabledElement;\n\n    const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return;\n    }\n\n    const brushCursor = this._hoverData.brushCursor;\n\n    if (brushCursor.data.invalidated === true) {\n      const { centerCanvas } = this._hoverData;\n      const { element } = viewport;\n\n      // This can be set true when changing the brush size programmatically\n      // whilst the cursor is being rendered.\n      this._calculateCursor(element, centerCanvas);\n    }\n\n    const toolMetadata = brushCursor.metadata;\n    const annotationUID = toolMetadata.brushCursorUID;\n\n    const data = brushCursor.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n  }\n}\n\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import { Types } from '@cornerstonejs/core';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nimport getBoundingBoxAroundShape from '../boundingBox/getBoundingBoxAroundShape';\n\nexport type ThresholdInformation = {\n  volume: Types.IImageVolume;\n  lower: number;\n  upper: number;\n};\n\nexport default function getBrushToolInstances(toolGroupId) {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const toolInstances = toolGroup._toolInstances;\n\n  if (!Object.keys(toolInstances).length) {\n    return;\n  }\n\n  // For each tool that has BrushTool as base class, set the brush size.\n  const brushBasedToolInstances = Object.values(toolInstances).filter(\n    (toolInstance) => toolInstance instanceof BrushTool\n  ) as BrushTool[];\n\n  return brushBasedToolInstances;\n}\n\nconst equalsCheck = (a, b) => {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\n\n/**\n * Given the center of a voxel in world coordinates, calculate the voxel\n * corners in world coords to calculate the voxel overlap in another volume\n */\nexport function getVoxelOverlap(\n  imageData,\n  dimensions,\n  voxelSpacing,\n  voxelCenter\n) {\n  const voxelCornersWorld = [];\n  for (let i = 0; i < 2; i++) {\n    for (let j = 0; j < 2; j++) {\n      for (let k = 0; k < 2; k++) {\n        const point = voxelCenter;\n        point[0] = point[0] + ((i * 2 - 1) * voxelSpacing[0]) / 2;\n        point[1] = point[1] + ((j * 2 - 1) * voxelSpacing[1]) / 2;\n        point[2] = point[2] + ((k * 2 - 1) * voxelSpacing[2]) / 2;\n        voxelCornersWorld.push(point);\n      }\n    }\n  }\n  const voxelCornersIJK = voxelCornersWorld.map(\n    (world) => csUtils.transformWorldToIndex(imageData, world) as Types.Point3\n  );\n  const overlapBounds = getBoundingBoxAroundShape(voxelCornersIJK, dimensions);\n\n  return overlapBounds;\n}\n\n/**\n * Prepare a list of volume information objects for callback functions\n */\nexport function processVolumes(\n  segmentationVolume: Types.IImageVolume,\n  thresholdVolumeInformation: ThresholdInformation[]\n) {\n  const { spacing: segmentationSpacing, imageData: segmentationImageData } =\n    segmentationVolume;\n  const scalarData = segmentationVolume.getScalarData();\n\n  // prepare a list of volume information objects for callback functions\n  const volumeInfoList = [];\n  let baseVolumeIdx = 0;\n  for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n    const { imageData, spacing, dimensions } =\n      thresholdVolumeInformation[i].volume;\n\n    const volumeSize =\n      thresholdVolumeInformation[i].volume.getScalarData().length;\n    // discover the index of the volume the segmentation data is based on\n    if (\n      volumeSize === scalarData.length &&\n      equalsCheck(spacing, segmentationSpacing)\n    ) {\n      baseVolumeIdx = i;\n    }\n\n    // prepare information used in callback functions\n    const referenceValues = imageData.getPointData().getScalars().getData();\n    const lower = thresholdVolumeInformation[i].lower;\n    const upper = thresholdVolumeInformation[i].upper;\n\n    volumeInfoList.push({\n      imageData,\n      referenceValues,\n      lower,\n      upper,\n      spacing,\n      dimensions,\n      volumeSize,\n    });\n  }\n\n  return {\n    volumeInfoList,\n    baseVolumeIdx,\n  };\n}\n","import { Types } from '@cornerstonejs/core';\nimport { pointInShapeCallback } from '../../utilities';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { BoundsIJK } from '../../types';\nimport {\n  getVoxelOverlap,\n  processVolumes,\n  ThresholdInformation,\n} from './utilities';\n\nexport type ThresholdRangeOptions = {\n  overwrite: boolean;\n  boundsIJK: BoundsIJK;\n  overlapType?: number;\n};\n\n/**\n * It thresholds a segmentation volume based on a set of threshold values with\n * respect to a list of volumes and respective threshold ranges.\n * @param segmentationVolume - the segmentation volume to be modified\n * @param thresholdVolumeInformation - array of objects containing volume data\n * and a range (lower and upper values) to threshold\n * @param options - the options for thresholding\n * As there is a chance the volumes might have different dimensions and spacing,\n * could be the case of no 1 to 1 mapping. So we need to work with the idea of\n * voxel overlaps (1 to many mappings). We consider all intersections valid, to\n * avoid the complexity to calculate a minimum voxel intersection percentage.\n * This function, given a voxel center and spacing, calculates the overlap of\n * the voxel with another volume and range check the voxels in the overlap.\n * Three situations can occur: all voxels pass the range check, some voxels pass\n * or none voxels pass. The overlapType parameter indicates if the user requires\n * all voxels pass (overlapType = 1) or any voxel pass (overlapType = 0)\n *\n * @returns segmented volume\n */\nfunction thresholdVolumeByRange(\n  segmentationVolume: Types.IImageVolume,\n  thresholdVolumeInformation: ThresholdInformation[],\n  options: ThresholdRangeOptions\n): Types.IImageVolume {\n  const { imageData: segmentationImageData } = segmentationVolume;\n  const scalarData = segmentationVolume.getScalarData();\n\n  const { overwrite, boundsIJK } = options;\n  const overlapType = options?.overlapType || 0;\n\n  // set the segmentation to all zeros\n  if (overwrite) {\n    for (let i = 0; i < scalarData.length; i++) {\n      scalarData[i] = 0;\n    }\n  }\n\n  const { baseVolumeIdx, volumeInfoList } = processVolumes(\n    segmentationVolume,\n    thresholdVolumeInformation\n  );\n\n  // global variables used in callbackOverlap function\n  let overlaps, total, range;\n\n  const testOverlapRange = (volumeInfo, voxelSpacing, voxelCenter) => {\n    /**\n     * This callback function will test all overlaps between a voxel in base\n     * volume (the reference for segmentation volume creation) and voxels in other\n     * volumes.\n     */\n    const callbackOverlap = ({ value }) => {\n      total = total + 1;\n      if (value >= range.lower && value <= range.upper) {\n        overlaps = overlaps + 1;\n      }\n    };\n\n    const { imageData, dimensions, lower, upper } = volumeInfo;\n\n    const overlapBounds = getVoxelOverlap(\n      imageData,\n      dimensions,\n      voxelSpacing,\n      voxelCenter\n    );\n\n    // reset global variables and setting the range check\n    total = 0;\n    overlaps = 0;\n    range = { lower, upper };\n\n    let overlapTest = false;\n\n    // check all voxel overlaps\n    pointInShapeCallback(imageData, () => true, callbackOverlap, overlapBounds);\n\n    if (overlapType === 0) {\n      overlapTest = overlaps > 0; // any voxel overlap is accepted\n    } else if (overlapType == 1) {\n      overlapTest = overlaps === total; // require all voxel overlaps\n    }\n    return overlapTest;\n  };\n\n  // range checks a voxel in a volume with same dimension as the segmentation\n  const testRange = (volumeInfo, pointIJK) => {\n    const { imageData, referenceValues, lower, upper } = volumeInfo;\n    const offset = imageData.computeOffsetIndex(pointIJK);\n\n    const value = referenceValues[offset];\n    if (value <= lower || value >= upper) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  /**\n   * This callback function will test all overlaps between a voxel in base\n   * volume (the reference for segmentation volume creation) and voxels in other\n   * volumes.\n   */\n  const callback = ({ index, pointIJK, pointLPS }) => {\n    let insert = volumeInfoList.length > 0;\n    for (let i = 0; i < volumeInfoList.length; i++) {\n      // if volume has the same size as segmentation volume, just range check\n      if (volumeInfoList[i].volumeSize === scalarData.length) {\n        insert = testRange(volumeInfoList[i], pointIJK);\n      } else {\n        // if not, need to calculate overlaps\n        insert = testOverlapRange(\n          volumeInfoList[i],\n          volumeInfoList[baseVolumeIdx].spacing,\n          pointLPS\n        );\n      }\n      if (!insert) {\n        break;\n      }\n    }\n\n    // Todo: make the segmentIndex a parameter\n    if (insert) scalarData[index] = 1;\n  };\n\n  pointInShapeCallback(segmentationImageData, () => true, callback, boundsIJK);\n\n  triggerSegmentationDataModified(segmentationVolume.volumeId);\n\n  return segmentationVolume;\n}\n\nexport default thresholdVolumeByRange;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\n\n/**\n * Tool that pans the camera in the plane defined by the viewPlaneNormal and the viewUp.\n */\nclass PanTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n\n    const deltaPointsWorld = deltaPoints.world;\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    enabledElement.viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n    enabledElement.viewport.render();\n  }\n}\n\nPanTool.toolName = 'Pan';\nexport default PanTool;\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\n\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\nimport { BaseTool } from './base';\n\n/**\n * Tool that rotates the camera in the plane defined by the viewPlaneNormal and the viewUp.\n */\nclass TrackballRotateTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  mouseDragCallback: (evt: EventTypes.InteractionEventType) => void;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        rotateIncrementDegrees: 2,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this.touchDragCallback = this._dragCallback.bind(this);\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  rotateCamera = (viewport, centerWorld, axis, angle) => {\n    const vtkCamera = viewport.getVtkActiveCamera();\n    const viewUp = vtkCamera.getViewUp();\n    const focalPoint = vtkCamera.getFocalPoint();\n    const position = vtkCamera.getPosition();\n\n    const newPosition: Types.Point3 = [0, 0, 0];\n    const newFocalPoint: Types.Point3 = [0, 0, 0];\n    const newViewUp: Types.Point3 = [0, 0, 0];\n\n    const transform = mat4.identity(new Float32Array(16));\n    mat4.translate(transform, transform, centerWorld);\n    mat4.rotate(transform, transform, angle, axis);\n    mat4.translate(transform, transform, [\n      -centerWorld[0],\n      -centerWorld[1],\n      -centerWorld[2],\n    ]);\n    vec3.transformMat4(newPosition, position, transform);\n    vec3.transformMat4(newFocalPoint, focalPoint, transform);\n\n    mat4.identity(transform);\n    mat4.rotate(transform, transform, angle, axis);\n    vec3.transformMat4(newViewUp, viewUp, transform);\n\n    viewport.setCamera({\n      position: newPosition,\n      viewUp: newViewUp,\n      focalPoint: newFocalPoint,\n    });\n  };\n\n  // pseudocode inspired from\n  // https://github.com/kitware/vtk-js/blob/HEAD/Sources/Interaction/Manipulators/MouseCameraUnicamRotateManipulator/index.js\n  _dragCallback(evt: EventTypes.InteractionEventType): void {\n    const { element, currentPoints, lastPoints } = evt.detail;\n    const currentPointsCanvas = currentPoints.canvas;\n    const lastPointsCanvas = lastPoints.canvas;\n    const { rotateIncrementDegrees } = this.configuration;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const camera = viewport.getCamera();\n    const width = element.clientWidth;\n    const height = element.clientHeight;\n\n    const normalizedPosition = [\n      currentPointsCanvas[0] / width,\n      currentPointsCanvas[1] / height,\n    ];\n\n    const normalizedPreviousPosition = [\n      lastPointsCanvas[0] / width,\n      lastPointsCanvas[1] / height,\n    ];\n\n    const center: Types.Point2 = [width * 0.5, height * 0.5];\n    // NOTE: centerWorld corresponds to the focal point in cornerstone3D\n    const centerWorld = viewport.canvasToWorld(center);\n    const normalizedCenter = [0.5, 0.5];\n\n    const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n    const op = [normalizedPreviousPosition[0], 0, 0];\n    const oe = [normalizedPosition[0], 0, 0];\n\n    const opsq = op[0] ** 2;\n    const oesq = oe[0] ** 2;\n\n    const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n    const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n\n    const nop: Types.Point3 = [op[0], 0, lop];\n    vtkMath.normalize(nop);\n    const noe: Types.Point3 = [oe[0], 0, loe];\n    vtkMath.normalize(noe);\n\n    const dot = vtkMath.dot(nop, noe);\n    if (Math.abs(dot) > 0.0001) {\n      const angleX =\n        -2 *\n        Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n        Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n        rotateIncrementDegrees;\n\n      const upVec = camera.viewUp;\n      const atV = camera.viewPlaneNormal;\n      const rightV: Types.Point3 = [0, 0, 0];\n      const forwardV: Types.Point3 = [0, 0, 0];\n\n      vtkMath.cross(upVec, atV, rightV);\n      vtkMath.normalize(rightV);\n\n      vtkMath.cross(atV, rightV, forwardV);\n      vtkMath.normalize(forwardV);\n      vtkMath.normalize(upVec);\n\n      this.rotateCamera(viewport, centerWorld, forwardV, angleX);\n\n      const angleY =\n        (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n        rotateIncrementDegrees;\n\n      this.rotateCamera(viewport, centerWorld, rightV, angleY);\n\n      viewport.render();\n    }\n  }\n}\n\nTrackballRotateTool.toolName = 'TrackballRotate';\nexport default TrackballRotateTool;\n","import { BaseTool } from './base';\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  StackViewport,\n  utilities,\n  cache,\n  Types,\n} from '@cornerstonejs/core';\nimport { EventTypes } from '../types';\n\n// Todo: should move to configuration\nconst DEFAULT_MULTIPLIER = 4;\nconst DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;\nconst PT = 'PT';\n\n/**\n * WindowLevel tool manipulates the windowLevel applied to a viewport. It\n * provides a way to set the windowCenter and windowWidth of a viewport\n * by dragging mouse over the image.\n *\n */\nclass WindowLevelTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this.mouseDragCallback(evt);\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n\n    let volumeId,\n      lower,\n      upper,\n      modality,\n      newRange,\n      viewportsContainingVolumeUID;\n    let isPreScaled = false;\n\n    if (viewport instanceof VolumeViewport) {\n      const targetId = this.getTargetId(viewport as Types.IVolumeViewport);\n      volumeId = targetId.split('volumeId:')[1];\n      viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(\n        volumeId,\n        renderingEngine.id\n      );\n      const properties = viewport.getProperties();\n      ({ lower, upper } = properties.voiRange);\n      const volume = cache.getVolume(volumeId);\n      modality = volume.metadata.Modality;\n      isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;\n    } else if (viewport instanceof StackViewport) {\n      const properties = viewport.getProperties();\n      modality = viewport.modality;\n      ({ lower, upper } = properties.voiRange);\n      const { preScale } = viewport.getImageData();\n      isPreScaled =\n        preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;\n    } else {\n      throw new Error('Viewport is not a valid type');\n    }\n\n    // If modality is PT, treat it special to not include the canvas delta in\n    // the x direction. For other modalities, use the canvas delta in both\n    // directions, and if the viewport is a volumeViewport, the multiplier\n    // is calculate using the volume min and max.\n    if (modality === PT) {\n      newRange = this.getPTScaledNewRange({\n        deltaPointsCanvas: deltaPoints.canvas,\n        lower,\n        upper,\n        clientHeight: element.clientHeight,\n        isPreScaled,\n        viewport,\n        volumeId,\n      });\n    } else {\n      newRange = this.getNewRange({\n        viewport,\n        deltaPointsCanvas: deltaPoints.canvas,\n        volumeId,\n        lower,\n        upper,\n      });\n    }\n\n    if (viewport instanceof StackViewport) {\n      viewport.setProperties({\n        voiRange: newRange,\n      });\n\n      viewport.render();\n      return;\n    }\n\n    if (viewport instanceof VolumeViewport) {\n      viewport.setProperties({\n        voiRange: newRange,\n      });\n\n      viewportsContainingVolumeUID.forEach((vp) => {\n        vp.render();\n      });\n      return;\n    }\n  }\n\n  getPTScaledNewRange({\n    deltaPointsCanvas,\n    lower,\n    upper,\n    clientHeight,\n    viewport,\n    volumeId,\n    isPreScaled,\n  }) {\n    let multiplier = DEFAULT_MULTIPLIER;\n\n    if (isPreScaled) {\n      multiplier = 5 / clientHeight;\n    } else {\n      multiplier =\n        this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n        DEFAULT_MULTIPLIER;\n    }\n\n    const deltaY = deltaPointsCanvas[1];\n    const wcDelta = deltaY * multiplier;\n\n    upper -= wcDelta;\n    upper = isPreScaled ? Math.max(upper, 0.1) : upper;\n\n    return { lower, upper };\n  }\n\n  getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {\n    const multiplier =\n      this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n      DEFAULT_MULTIPLIER;\n\n    const wwDelta = deltaPointsCanvas[0] * multiplier;\n    const wcDelta = deltaPointsCanvas[1] * multiplier;\n\n    let { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(\n      lower,\n      upper\n    );\n\n    windowWidth += wwDelta;\n    windowCenter += wcDelta;\n\n    windowWidth = Math.max(windowWidth, 1);\n\n    // Convert back to range\n    return utilities.windowLevel.toLowHighRange(windowWidth, windowCenter);\n  }\n\n  _getMultiplierFromDynamicRange(viewport, volumeId) {\n    let imageDynamicRange;\n\n    if (volumeId) {\n      const imageVolume = cache.getVolume(volumeId);\n      const { dimensions } = imageVolume;\n      const scalarData = imageVolume.getScalarData();\n      const calculatedDynamicRange = this._getImageDynamicRangeFromMiddleSlice(\n        scalarData,\n        dimensions\n      );\n      const BitsStored = imageVolume?.metadata?.BitsStored;\n      const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;\n      // Burned in Pixels often use pixel values above the BitsStored.\n      // This results in a multiplier which is way higher than what you would\n      // want in practice. Thus we take the min between the metadata dynamic\n      // range and actual middel slice dynamic range.\n      imageDynamicRange = Math.min(\n        calculatedDynamicRange,\n        metadataDynamicRange\n      );\n    } else {\n      imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);\n    }\n\n    const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;\n\n    let multiplier = DEFAULT_MULTIPLIER;\n\n    if (ratio > 1) {\n      multiplier = Math.round(ratio);\n    }\n    return multiplier;\n  }\n\n  _getImageDynamicRangeFromViewport(viewport) {\n    const { imageData } = viewport.getImageData();\n    const dimensions = imageData.getDimensions();\n\n    let scalarData;\n    // if getScalarData is a method on imageData\n    if (imageData.getScalarData) {\n      scalarData = imageData.getScalarData();\n    } else {\n      scalarData = imageData.getPointData().getScalars();\n    }\n\n    if (dimensions[2] !== 1) {\n      return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);\n    }\n\n    let range;\n    if (scalarData.getRange) {\n      range = scalarData.getRange();\n    } else {\n      const { min, max } = this._getMinMax(scalarData, scalarData.length);\n      range = [min, max];\n    }\n\n    return range[1] - range[0];\n  }\n\n  _getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {\n    const middleSliceIndex = Math.floor(dimensions[2] / 2);\n\n    const frameLength = dimensions[0] * dimensions[1];\n    let bytesPerVoxel;\n    let TypedArrayConstructor;\n\n    if (scalarData instanceof Float32Array) {\n      bytesPerVoxel = 4;\n      TypedArrayConstructor = Float32Array;\n    } else if (scalarData instanceof Uint8Array) {\n      bytesPerVoxel = 1;\n      TypedArrayConstructor = Uint8Array;\n    } else if (scalarData instanceof Uint16Array) {\n      bytesPerVoxel = 2;\n      TypedArrayConstructor = Uint16Array;\n    } else if (scalarData instanceof Int16Array) {\n      bytesPerVoxel = 2;\n      TypedArrayConstructor = Int16Array;\n    }\n\n    const buffer = scalarData.buffer;\n    const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;\n    const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);\n\n    const { max, min } = this._getMinMax(frame, frameLength);\n\n    return max - min;\n  };\n\n  private _getMinMax(frame: Uint8Array | Float32Array, frameLength: number) {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let i = 0; i < frameLength; i++) {\n      const voxel = frame[i];\n\n      if (voxel < min) {\n        min = voxel;\n      }\n\n      if (voxel > max) {\n        max = voxel;\n      }\n    }\n    return { max, min };\n  }\n}\n\nWindowLevelTool.toolName = 'WindowLevel';\nexport default WindowLevelTool;\n","import {\n  getEnabledElementByIds,\n  VolumeViewport,\n  StackViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { scroll } from '../utilities';\nimport { PublicToolProps, ToolProps, EventTypes } from '../types';\n\n/**\n * The StackScrollTool is a tool that allows the user to scroll through a\n * stack of images by pressing the mouse click and dragging\n */\nclass StackScrollTool extends BaseTool {\n  static toolName;\n  deltaY: number;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        invert: false,\n        debounceIfNotLoaded: true,\n        loop: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.deltaY = 1;\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { deltaPoints, viewportId, renderingEngineId } = evt.detail;\n    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n\n    const targetId = this.getTargetId(viewport);\n    const { debounceIfNotLoaded, invert, loop } = this.configuration;\n\n    const deltaPointY = deltaPoints.canvas[1];\n\n    let volumeId;\n    if (viewport instanceof VolumeViewport) {\n      volumeId = targetId.split('volumeId:')[1];\n    }\n\n    const pixelsPerImage = this._getPixelPerImage(viewport);\n    const deltaY = deltaPointY + this.deltaY;\n\n    if (!pixelsPerImage) {\n      return;\n    }\n\n    if (Math.abs(deltaY) >= pixelsPerImage) {\n      const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);\n\n      scroll(viewport, {\n        delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,\n        volumeId,\n        debounceLoading: debounceIfNotLoaded,\n        loop: loop,\n      });\n\n      this.deltaY = deltaY % pixelsPerImage;\n    } else {\n      this.deltaY = deltaY;\n    }\n  }\n\n  _getPixelPerImage(viewport) {\n    const { element } = viewport;\n    const numberOfSlices = this._getNumberOfSlices(viewport);\n\n    // The Math.max here makes it easier to mouseDrag-scroll small or really large image stacks\n    return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));\n  }\n\n  _getNumberOfSlices(viewport) {\n    if (viewport instanceof VolumeViewport) {\n      const { numberOfSlices } =\n        csUtils.getImageSliceDataForVolumeViewport(viewport);\n      return numberOfSlices;\n    } else if (viewport instanceof StackViewport) {\n      return viewport.getImageIds().length;\n    }\n  }\n}\n\nStackScrollTool.toolName = 'StackScroll';\nexport default StackScrollTool;\n","import type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\ntype Line = [Types.Point3, Types.Point3];\n\n/**\n * It returns the angle between two lines in degrees.\n * The angle measured is that between the vectors\n * line1[1]->line1[0] AND line2[0]->line2[1].\n * @param line1 - Line = [p1, p2]\n * @param line2 - Line = [p3, p4]\n * @returns The angle between two lines in degrees.\n */\nexport default function angleBetweenLines(line1: Line, line2: Line): number {\n  const [p1, p2] = line1;\n  const [p3, p4] = line2;\n\n  const v1 = vec3.sub(vec3.create(), p2, p1);\n  const v2 = vec3.sub(vec3.create(), p3, p4);\n\n  const dot = vec3.dot(v1, v2);\n\n  const v1Length = vec3.length(v1);\n  const v2Length = vec3.length(v2);\n\n  const cos = dot / (v1Length * v2Length);\n\n  const radian = Math.acos(cos);\n\n  return (radian * 180) / Math.PI;\n}\n","import {\n  BaseVolumeViewport,\n  getEnabledElement,\n  Types,\n} from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nimport { PublicToolProps, ToolProps, EventTypes } from '../types';\n\n/**\n * The PlanarRotateTool is a tool that allows the user to rotate\n * the image by pressing the mouse click and dragging\n */\nclass PlanarRotateTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.MouseDragEventType) => void;\n  mouseDragCallback: (evt: EventTypes.MouseDragEventType) => void;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this.touchDragCallback = this._dragCallback.bind(this);\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  _dragCallback(evt: EventTypes.MouseDragEventType) {\n    const { element, currentPoints, startPoints } = evt.detail;\n    const currentPointWorld = currentPoints.world;\n    const startPointWorld = startPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const camera = viewport.getCamera();\n    const width = element.clientWidth;\n    const height = element.clientHeight;\n\n    const centerCanvas: Types.Point2 = [width * 0.5, height * 0.5];\n    const centerWorld = viewport.canvasToWorld(centerCanvas);\n\n    let angle = angleBetweenLines(\n      [startPointWorld, centerWorld],\n      [centerWorld, currentPointWorld]\n    );\n\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n    const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n    const cross = vec3.cross(vec3.create(), v1, v2);\n    if (vec3.dot(viewPlaneNormal, cross) > 0) {\n      angle = -angle;\n    }\n\n    if (Number.isNaN(angle)) return;\n\n    if (viewport instanceof BaseVolumeViewport) {\n      const rotAngle = (angle * Math.PI) / 180;\n      const rotMat = mat4.identity(new Float32Array(16));\n      mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n      const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n      viewport.setCamera({ viewUp: rotatedViewUp as Types.Point3 });\n    } else {\n      const { rotation } = (viewport as Types.IStackViewport).getProperties();\n      viewport.setProperties({ rotation: rotation + angle });\n    }\n\n    viewport.render();\n  }\n}\n\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { MouseWheelEventType } from '../types/EventTypes';\nimport scroll from '../utilities/scroll';\n\n/**\n * The StackScrollMouseWheelTool is a tool that allows the user to scroll through a\n * stack of images using the mouse wheel\n */\nclass StackScrollMouseWheelTool extends BaseTool {\n  static toolName;\n\n  _configuration: any;\n\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        invert: false,\n        debounceIfNotLoaded: true,\n        loop: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  mouseWheelCallback(evt: MouseWheelEventType): void {\n    const { wheel, element } = evt.detail;\n    const { direction } = wheel;\n    const { invert } = this.configuration;\n    const { viewport } = getEnabledElement(element);\n    const delta = direction * (invert ? -1 : 1);\n\n    const targetId = this.getTargetId(viewport);\n    const volumeId = targetId.split('volumeId:')[1];\n\n    scroll(viewport, {\n      delta,\n      debounceLoading: this.configuration.debounceIfNotLoaded,\n      loop: this.configuration.loop,\n      volumeId,\n    });\n  }\n}\n\nStackScrollMouseWheelTool.toolName = 'StackScrollMouseWheel';\nexport default StackScrollMouseWheelTool;\n","import { vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { getEnabledElement, Types } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\n\n/**\n * ZoomTool tool manipulates the camera zoom applied to a viewport. It\n * provides a way to set the zoom of a viewport by dragging mouse over the image.\n *\n */\nclass ZoomTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  mouseDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  initialMousePosWorld: Types.Point3;\n  dirVec: Types.Point3;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        // whether zoom to the center of the image OR zoom to the mouse position\n        zoomToCenter: false,\n        minZoomScale: 0.1,\n        maxZoomScale: 30,\n        pinchToZoom: true,\n        pan: true,\n        invert: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.initialMousePosWorld = [0, 0, 0];\n    this.dirVec = [0, 0, 0];\n    if (this.configuration.pinchToZoom) {\n      this.touchDragCallback = this._pinchCallback.bind(this);\n    } else {\n      this.touchDragCallback = this._dragCallback.bind(this);\n    }\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventData = evt.detail;\n    const { element, currentPoints } = eventData;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint } = camera;\n\n    this.initialMousePosWorld = worldPos;\n\n    // The direction vector from the clicked location to the focal point\n    // which would act as the vector to translate the image (if zoomToCenter is false)\n    let dirVec = vec3.fromValues(\n      focalPoint[0] - worldPos[0],\n      focalPoint[1] - worldPos[1],\n      focalPoint[2] - worldPos[2]\n    );\n\n    dirVec = vec3.normalize(vec3.create(), dirVec);\n\n    this.dirVec = dirVec as Types.Point3;\n\n    // we should not return true here, returning true in the preMouseDownCallback\n    // means that the event is handled by the tool and no other methods\n    // can claim the event, which will result in a bug where having Zoom on primary\n    // and clicking on an annotation will not manipulate the annotation, but will\n    // instead zoom the image (which is not what we want), so we return false here\n    return false;\n  };\n\n  preTouchStartCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    if (!this.configuration.pinchToZoom) {\n      return this.preMouseDownCallback(evt);\n    }\n  };\n\n  _pinchCallback(evt: EventTypes.InteractionEventType) {\n    const pointsList = (evt as EventTypes.TouchStartEventType).detail\n      .currentPointsList;\n\n    if (pointsList.length > 1) {\n      const { element, currentPoints } = evt.detail;\n      const enabledElement = getEnabledElement(element);\n      const { viewport } = enabledElement;\n      const camera = viewport.getCamera();\n      const worldPos = currentPoints.world;\n      const { focalPoint } = camera;\n      this.initialMousePosWorld = worldPos;\n      // The direction vector from the clicked location to the focal point\n      // which would act as the vector to translate the image (if zoomToCenter is false)\n      let dirVec = vec3.fromValues(\n        focalPoint[0] - worldPos[0],\n        focalPoint[1] - worldPos[1],\n        focalPoint[2] - worldPos[2]\n      );\n      dirVec = vec3.normalize(vec3.create(), dirVec);\n\n      this.dirVec = dirVec as Types.Point3;\n      if (camera.parallelProjection) {\n        this._dragParallelProjection(evt, viewport, camera, true);\n      } else {\n        this._dragPerspectiveProjection(evt, viewport, camera, true);\n      }\n      viewport.render();\n    }\n\n    if (this.configuration.pan) {\n      this._panCallback(evt);\n    }\n  }\n\n  // Takes ICornerstoneEvent, Mouse or Touch\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { element } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n\n    if (camera.parallelProjection) {\n      this._dragParallelProjection(evt, viewport, camera);\n    } else {\n      this._dragPerspectiveProjection(evt, viewport, camera);\n    }\n\n    viewport.render();\n  }\n\n  _dragParallelProjection = (\n    evt: EventTypes.InteractionEventType,\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    camera: Types.ICamera,\n    pinch = false\n  ): void => {\n    const { element, deltaPoints } = evt.detail;\n    const deltaY = pinch\n      ? (evt as EventTypes.TouchDragEventType).detail.deltaDistance.canvas\n      : deltaPoints.canvas[1];\n\n    const size = [element.clientWidth, element.clientHeight];\n    const { parallelScale, focalPoint, position } = camera;\n\n    const zoomScale = 1.5 / size[1];\n    const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n\n    let parallelScaleToSet = (1.0 - k) * parallelScale;\n\n    let focalPointToSet = focalPoint;\n    let positionToSet = position;\n\n    // if we're not zooming to the center, we need to adjust the focal point\n    // and position to set the focal point and position to the value that\n    // would simulate the zoom to the mouse position\n    if (!this.configuration.zoomToCenter) {\n      // Distance of the initial mouse position (world) to the focal point\n      // which is always the center of the canvas.\n      const distanceToCanvasCenter = vec3.distance(\n        focalPoint,\n        this.initialMousePosWorld\n      );\n      // const initialYDistanceBetweenInitialAndFocalPoint;\n\n      // we need to move in the direction of the vector between the focal point\n      // and the initial mouse position by some amount until ultimately we\n      // reach the mouse position at the focal point\n      const zoomScale = 5 / size[1];\n      const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n      parallelScaleToSet = (1.0 - k) * parallelScale;\n\n      positionToSet = vec3.scaleAndAdd(\n        vec3.create(),\n        position,\n        this.dirVec,\n        -distanceToCanvasCenter * k\n      ) as Types.Point3;\n\n      focalPointToSet = vec3.scaleAndAdd(\n        vec3.create(),\n        focalPoint,\n        this.dirVec,\n        -distanceToCanvasCenter * k\n      ) as Types.Point3;\n    }\n\n    // If it is a regular GPU accelerated viewport, then parallel scale\n    // has a physical meaning and we can use that to determine the threshold\n    // Added spacing preset in case there is no imageData on viewport\n    const imageData = viewport.getImageData();\n    let spacing = [1, 1, 1];\n    if (imageData) {\n      spacing = imageData.spacing;\n    }\n\n    const { minZoomScale, maxZoomScale } = this.configuration;\n\n    const t = element.clientHeight * spacing[1] * 0.5;\n    const scale = t / parallelScaleToSet;\n\n    let cappedParallelScale = parallelScaleToSet;\n    let thresholdExceeded = false;\n\n    if (imageData) {\n      if (scale < minZoomScale) {\n        cappedParallelScale = t / minZoomScale;\n        thresholdExceeded = true;\n      } else if (scale >= maxZoomScale) {\n        cappedParallelScale = t / maxZoomScale;\n        thresholdExceeded = true;\n      }\n    }\n\n    viewport.setCamera({\n      parallelScale: cappedParallelScale,\n      focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,\n      position: thresholdExceeded ? position : positionToSet,\n    });\n  };\n\n  _dragPerspectiveProjection = (\n    evt: EventTypes.InteractionEventType,\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    camera: Types.ICamera,\n    pinch = false\n  ): void => {\n    const { element, deltaPoints } = evt.detail;\n    const deltaY = pinch\n      ? (evt as EventTypes.TouchDragEventType).detail.deltaDistance.canvas\n      : deltaPoints.canvas[1];\n\n    const size = [element.clientWidth, element.clientHeight];\n    const { position, focalPoint, viewPlaneNormal } = camera;\n\n    const distance = vtkMath.distance2BetweenPoints(position, focalPoint);\n    const zoomScale = Math.sqrt(distance) / size[1];\n\n    const directionOfProjection = [\n      -viewPlaneNormal[0],\n      -viewPlaneNormal[1],\n      -viewPlaneNormal[2],\n    ];\n\n    const k = this.configuration.invert\n      ? deltaY / zoomScale\n      : deltaY * zoomScale;\n\n    let tmp = k * directionOfProjection[0];\n    position[0] += tmp;\n    focalPoint[0] += tmp;\n\n    tmp = k * directionOfProjection[1];\n    position[1] += tmp;\n    focalPoint[1] += tmp;\n\n    tmp = k * directionOfProjection[2];\n    position[2] += tmp;\n    focalPoint[2] += tmp;\n\n    viewport.setCamera({ position, focalPoint });\n  };\n\n  _panCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n\n    const deltaPointsWorld = deltaPoints.world;\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    enabledElement.viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n    enabledElement.viewport.render();\n  }\n}\n\nZoomTool.toolName = 'Zoom';\nexport default ZoomTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { mat4, vec3 } from 'gl-matrix';\nimport { PublicToolProps, ToolProps } from '../types';\nimport { MouseWheelEventType } from '../types/EventTypes';\n\nconst DIRECTIONS = {\n  X: [1, 0, 0],\n  Y: [0, 1, 0],\n  Z: [0, 0, 1],\n  CUSTOM: [],\n};\n\n/**\n * Tool that rotates the camera on mouse wheel.\n * It rotates the camera around the focal point, and around a defined axis. Default\n * axis is set to be Z axis, but it can be configured to any custom normalized axis.\n *\n */\nclass VolumeRotateMouseWheelTool extends BaseTool {\n  static toolName;\n  _configuration: any;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        direction: DIRECTIONS.Z,\n        rotateIncrementDegrees: 0.5,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  mouseWheelCallback(evt: MouseWheelEventType) {\n    // https://github.com/kitware/vtk-js/blob/HEAD/Sources/Interaction/Manipulators/MouseCameraUnicamRotateManipulator/index.js#L73\n    const { element, wheel } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { direction, rotateIncrementDegrees } = this.configuration;\n\n    const camera = viewport.getCamera();\n    const { viewUp, position, focalPoint } = camera;\n\n    const { direction: deltaY } = wheel;\n\n    const [cx, cy, cz] = focalPoint;\n    const [ax, ay, az] = direction;\n\n    const angle = deltaY * rotateIncrementDegrees;\n\n    // position[3] = 1.0\n    // focalPoint[3] = 1.0\n    // viewUp[3] = 0.0\n\n    const newPosition: Types.Point3 = [0, 0, 0];\n    const newFocalPoint: Types.Point3 = [0, 0, 0];\n    const newViewUp: Types.Point3 = [0, 0, 0];\n\n    const transform = mat4.identity(new Float32Array(16));\n    mat4.translate(transform, transform, [cx, cy, cz]);\n    mat4.rotate(transform, transform, angle, [ax, ay, az]);\n    mat4.translate(transform, transform, [-cx, -cy, -cz]);\n    vec3.transformMat4(newPosition, position, transform);\n    vec3.transformMat4(newFocalPoint, focalPoint, transform);\n\n    mat4.identity(transform);\n    mat4.rotate(transform, transform, angle, [ax, ay, az]);\n    vec3.transformMat4(<Types.Point3>newViewUp, viewUp, transform);\n\n    viewport.setCamera({\n      position: newPosition,\n      viewUp: newViewUp,\n      focalPoint: newFocalPoint,\n    });\n\n    viewport.render();\n  }\n}\n\nVolumeRotateMouseWheelTool.toolName = 'VolumeRotateMouseWheel';\nexport default VolumeRotateMouseWheelTool;\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Given two world positions and an orthogonal view to an `imageVolume` defined\n * by a `viewPlaneNormal` and a `viewUp`, get the width and height in world coordinates\n * of the rectangle defined by the two points. The implementation works both with orthogonal\n * non-orthogonal rectangles.\n *\n * @param viewPlaneNormal - The normal of the view.\n * @param viewUp - The up direction of the view.\n * @param imageVolume - The imageVolume to use to measure.\n * @param topLeftWorld - The first world position.\n * @param bottomRightWorld - The second world position.\n *\n * @returns The `worldWidth` and `worldHeight`.\n */\nexport default function getWorldWidthAndHeightFromCorners(\n  viewPlaneNormal: Types.Point3,\n  viewUp: Types.Point3,\n  topLeftWorld: Types.Point3,\n  bottomRightWorld: Types.Point3\n): { worldWidth: number; worldHeight: number } {\n  const viewRight = vec3.create();\n\n  vec3.cross(viewRight, <vec3>viewUp, <vec3>viewPlaneNormal);\n\n  const pos1 = vec3.fromValues(...topLeftWorld);\n  const pos2 = vec3.fromValues(...bottomRightWorld);\n\n  const diagonal = vec3.create();\n  vec3.subtract(diagonal, pos1, pos2);\n\n  const diagonalLength = vec3.length(diagonal);\n\n  // When the two points are very close to each other return width as 0\n  // to avoid NaN the cosTheta formula calculation\n  if (diagonalLength < 0.0001) {\n    return { worldWidth: 0, worldHeight: 0 };\n  }\n\n  const cosTheta =\n    vec3.dot(diagonal, viewRight) / (diagonalLength * vec3.length(viewRight));\n\n  const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);\n\n  const worldWidth = sinTheta * diagonalLength;\n  const worldHeight = cosTheta * diagonalLength;\n\n  return { worldWidth, worldHeight };\n}\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n/**\n * Returns a point based on some criteria (e.g., minimum or maximum intensity) in\n * the line of sight (on the line between the passed worldPosition and camera position).\n * It iterated over the points with a step size on the line.\n *\n * @param viewport - Volume viewport\n * @param worldPos - World coordinates of the clicked location\n * @param targetVolumeId - target Volume ID in the viewport\n * @param criteriaFunction - A function that returns the point if it passes a certain\n * written logic, for instance, it can be a maxValue function that keeps the\n * records of all intensity values, and only return the point if its intensity\n * is greater than the maximum intensity of the points passed before.\n * @param stepsSize - Percentage of the spacing in the normal direction, default value\n * is 0.25 which means steps = 1/4 of the spacing in the normal direction.\n * @returns the World pos of the point that passes the criteriaFunction\n */\nexport default function getPointInLineOfSightWithCriteria(\n  viewport: Types.IVolumeViewport,\n  worldPos: Types.Point3,\n  targetVolumeId: string,\n  criteriaFunction: (intensity: number, point: Types.Point3) => Types.Point3,\n  stepSize = 0.25\n): Types.Point3 {\n  // 1. Getting the camera from the event details\n  const camera = viewport.getCamera();\n  const { position: cameraPosition } = camera;\n\n  // 2. Calculating the spacing in the normal direction, this will get\n  // used as the step size for iterating over the points in the line of sight\n  const { spacingInNormalDirection } =\n    csUtils.getTargetVolumeAndSpacingInNormalDir(\n      viewport,\n      camera,\n      targetVolumeId\n    );\n  // 2.1 Making sure, we are not missing any point\n  const step = spacingInNormalDirection * stepSize;\n\n  // 3. Getting the bounds of the viewports. Search for brightest point is\n  // limited to the visible bound\n  // Todo: this might be a problem since bounds will change to spatial bounds.\n  const bounds = viewport.getBounds();\n  const xMin = bounds[0];\n  const xMax = bounds[1];\n\n  // 5. Calculating the line, we use a parametric line definition\n  const vector = <Types.Point3>[0, 0, 0];\n\n  // 5.1 Point coordinate on the line\n  let point = <Types.Point3>[0, 0, 0];\n\n  // 5.2 Calculating the line direction, and storing in vector\n  vtkMath.subtract(worldPos, cameraPosition, vector);\n\n  let pickedPoint;\n\n  // 6. Iterating over the line from the lower bound to the upper bound, with the\n  // specified step size\n  for (let pointT = xMin; pointT <= xMax; pointT = pointT + step) {\n    // 6.1 Calculating the point x location\n    point = [pointT, 0, 0];\n    // 6.2 Calculating the point y,z location based on the line equation\n    const t = (pointT - cameraPosition[0]) / vector[0];\n    point[1] = t * vector[1] + cameraPosition[1];\n    point[2] = t * vector[2] + cameraPosition[2];\n\n    // 6.3 Checking if the points is inside the bounds\n    if (_inBounds(point, bounds)) {\n      // 6.4 Getting the intensity of the point\n      const intensity = viewport.getIntensityFromWorld(point);\n      // 6.5 Passing the intensity to the maximum value functions which decides\n      // whether the current point is of interest based on some criteria\n      const pointToPick = criteriaFunction(intensity, point);\n      if (pointToPick) {\n        pickedPoint = pointToPick;\n      }\n    }\n  }\n\n  return pickedPoint;\n}\n\n/**\n * Returns whether the point in the world is inside the bounds of the viewport\n * @param point - coordinates in the world\n * @returns boolean\n */\nconst _inBounds = function (\n  point: Types.Point3,\n  bounds: Array<number>\n): boolean {\n  const [xMin, xMax, yMin, yMax, zMin, zMax] = bounds;\n  return (\n    point[0] > xMin &&\n    point[0] < xMax &&\n    point[1] > yMin &&\n    point[1] < yMax &&\n    point[2] > zMin &&\n    point[2] < zMax\n  );\n};\n","import filterAnnotationsWithinSlice from './filterAnnotationsWithinSlice';\nimport getWorldWidthAndHeightFromCorners from './getWorldWidthAndHeightFromCorners';\nimport filterAnnotationsForDisplay from './filterAnnotationsForDisplay';\nimport getPointInLineOfSightWithCriteria from './getPointInLineOfSightWithCriteria';\n\nexport default {\n  filterAnnotationsWithinSlice,\n  getWorldWidthAndHeightFromCorners,\n  filterAnnotationsForDisplay,\n  getPointInLineOfSightWithCriteria,\n};\n\nexport {\n  filterAnnotationsWithinSlice,\n  getWorldWidthAndHeightFromCorners,\n  filterAnnotationsForDisplay,\n  getPointInLineOfSightWithCriteria,\n};\n","import { VolumeViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { vec3 } from 'gl-matrix';\n\n// Todo: merge this utility functionality with Crosshair _jump\n/**\n * Uses the viewport's current camera to jump to a specific world coordinate\n * @param enabledElement - enabled element\n * @param jumpWorld - location in the world to jump to\n * @returns True if successful\n */\nexport default function jumpToWorld(\n  viewport: Types.IVolumeViewport,\n  jumpWorld: Types.Point3\n): true | undefined {\n  // if not instance of volumeViewport, return\n  if (!(viewport instanceof VolumeViewport)) {\n    return;\n  }\n\n  const { focalPoint } = viewport.getCamera();\n\n  const delta: Types.Point3 = [0, 0, 0];\n  vec3.sub(delta, jumpWorld, focalPoint);\n\n  _applyShift(viewport, delta);\n\n  return true;\n}\n\nfunction _applyShift(viewport, delta) {\n  const camera = viewport.getCamera();\n  const normal = camera.viewPlaneNormal;\n\n  const dotProd = vec3.dot(delta, normal);\n  const projectedDelta = vec3.fromValues(normal[0], normal[1], normal[2]);\n\n  vec3.scale(projectedDelta, projectedDelta, dotProd);\n\n  if (\n    Math.abs(projectedDelta[0]) > 1e-3 ||\n    Math.abs(projectedDelta[1]) > 1e-3 ||\n    Math.abs(projectedDelta[2]) > 1e-3\n  ) {\n    const newFocalPoint: Types.Point3 = [0, 0, 0];\n    const newPosition: Types.Point3 = [0, 0, 0];\n\n    vec3.add(newFocalPoint, camera.focalPoint, projectedDelta);\n    vec3.add(newPosition, camera.position, projectedDelta);\n\n    viewport.setCamera({\n      focalPoint: newFocalPoint,\n      position: newPosition,\n    });\n    viewport.render();\n  }\n}\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { getPointInLineOfSightWithCriteria } from '../utilities/planar';\nimport jumpToWorld from '../utilities/viewport/jumpToWorld';\nimport { PublicToolProps, ToolProps } from '../types';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\n\n/**\n * On a Maximum Intensity Projection (MIP) viewport, MIPJumpToClickTool allows the\n * user to click on a point in the MIP and the targetViewportIdS (provided in the\n * tool configuration) will be scrolled (jumped) to the location of the point with\n * the highest intensity value in the MIP.\n */\nclass MIPJumpToClickTool extends BaseTool {\n  static toolName;\n\n  _bounds: any;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        targetViewportIds: [],\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Handles the click event, and move the camera's focal point the brightest\n   * point that is in the line of sight of camera. This function 1) search for the\n   * brightest point in the line of sight, 2) move the camera to that point,\n   * this triggers a cameraModified event which then 4) moves all other synced\n   * viewports and their crosshairs.\n   *\n   * @param evt - click event\n   */\n  mouseClickCallback(evt): void {\n    const { element, currentPoints } = evt.detail;\n\n    // 1. Getting the enabled element\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    // 2. Getting the target volume that is clicked on\n    const targetId = this.getTargetId(viewport as Types.IVolumeViewport);\n\n    if (!targetId.startsWith('volumeId')) {\n      throw new Error(\n        `MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`\n      );\n    }\n\n    const volumeId = targetId.split('volumeId:')[1];\n\n    // 3. Criteria function to search for the point (maximum intensity)\n    let maxIntensity = -Infinity;\n    const maxFn = (intensity, point) => {\n      if (intensity > maxIntensity) {\n        maxIntensity = intensity;\n        return point;\n      }\n    };\n\n    // 4. Search for the brightest point location in the line of sight\n    const brightestPoint = getPointInLineOfSightWithCriteria(\n      viewport as Types.IVolumeViewport,\n      currentPoints.world,\n      volumeId,\n      maxFn\n    );\n\n    if (!brightestPoint || !brightestPoint.length) {\n      return;\n    }\n\n    const { targetViewportIds, toolGroupId } = this.configuration;\n    // TODO - consider making this a utility\n    const viewports = renderingEngine.getViewports().filter((vp) => {\n      if (targetViewportIds?.indexOf(vp.id) >= 0) return true;\n      const foundToolGroup = getToolGroupForViewport(vp.id, renderingEngine.id);\n      if (toolGroupId && toolGroupId === foundToolGroup?.id) return true;\n      return false;\n    });\n\n    // 6. Update all the targetedViewports to jump\n    viewports.forEach((viewport) => {\n      // Todo: current limitation is that we cannot jump in viewports\n      // that don't belong to the renderingEngine of the source clicked viewport\n      if (viewport instanceof VolumeViewport) {\n        jumpToWorld(viewport, brightestPoint);\n      } else {\n        console.warn(\n          'Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport'\n        );\n      }\n    });\n  }\n}\n\nMIPJumpToClickTool.toolName = 'MIPJumpToClickTool';\nexport default MIPJumpToClickTool;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Given an array of viewports, returns a list of viewports that are viewing a\n * world space with the given `FrameOfReferenceUID`.\n *\n * @param viewports - An array of viewports.\n * @param FrameOfReferenceUID - The UID defining a particular world space/Frame Of Reference.\n *\n * @returns A filtered array of viewports.\n */\nexport default function filterViewportsWithFrameOfReferenceUID(\n  viewports: Array<Types.IStackViewport | Types.IVolumeViewport>,\n  FrameOfReferenceUID: string\n): Array<Types.IStackViewport | Types.IVolumeViewport> {\n  const numViewports = viewports.length;\n  const viewportsWithFrameOfReferenceUID = [];\n\n  for (let vp = 0; vp < numViewports; vp++) {\n    const viewport = viewports[vp];\n\n    if (viewport.getFrameOfReferenceUID() === FrameOfReferenceUID) {\n      viewportsWithFrameOfReferenceUID.push(viewport);\n    }\n  }\n\n  return viewportsWithFrameOfReferenceUID;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport type { IToolGroup } from '../../types';\nimport { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\n\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * Given an array of viewports, returns a list of viewports that have the the specified tool enabled.\n *\n * @param viewports - An array of viewports.\n * @param toolName - The name of the tool to filter on.\n *\n * @returns A filtered array of viewports.\n */\nexport default function filterViewportsWithToolEnabled(\n  viewports: Array<Types.IStackViewport | Types.IVolumeViewport>,\n  toolName: string\n): Array<Types.IStackViewport | Types.IVolumeViewport> {\n  const numViewports = viewports.length;\n\n  const viewportsWithToolEnabled = [];\n\n  for (let vp = 0; vp < numViewports; vp++) {\n    const viewport = viewports[vp];\n\n    const toolGroup = ToolGroupManager.getToolGroupForViewport(\n      viewport.id,\n      viewport.renderingEngineId\n    );\n\n    if (!toolGroup) {\n      continue;\n    }\n\n    const hasTool = _toolGroupHasActiveEnabledOrPassiveTool(\n      toolGroup,\n      toolName\n    );\n\n    if (hasTool) {\n      viewportsWithToolEnabled.push(viewport);\n    }\n  }\n\n  return viewportsWithToolEnabled;\n}\n\n/**\n * Given a toolGroup, return true if it contains the tool with the given `toolName` and it is\n * active, passive or enabled.\n *\n * @param toolGroup - The `toolGroup` to check.\n * @param toolName - The name of the tool.\n *\n * @returns True if the tool is enabled, passive or active in the `toolGroup`.\n */\nfunction _toolGroupHasActiveEnabledOrPassiveTool(\n  toolGroup: IToolGroup,\n  toolName: string\n) {\n  const { toolOptions } = toolGroup;\n  const tool = toolOptions[toolName];\n\n  if (!tool) {\n    return false;\n  }\n\n  const toolMode = tool.mode;\n\n  return toolMode === Active || toolMode === Passive || toolMode === Enabled;\n}\n","import { vec3 } from 'gl-matrix';\n\n/**\n * It filters the viewports that are looking in the same view as the camera\n * It basically checks if the viewPlaneNormal is parallel to the camera viewPlaneNormal\n * @param viewports - Array of viewports to filter\n * @param camera - Camera to compare against\n * @returns - Array of viewports with the same view\n */\nexport function filterViewportsWithParallelNormals(\n  viewports,\n  camera,\n  EPS = 0.999\n) {\n  return viewports.filter((viewport) => {\n    const vpCamera = viewport.getCamera();\n\n    const isParallel =\n      Math.abs(vec3.dot(vpCamera.viewPlaneNormal, camera.viewPlaneNormal)) >\n      EPS;\n\n    return isParallel;\n  });\n}\n\nexport default filterViewportsWithParallelNormals;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport filterViewportsWithFrameOfReferenceUID from './filterViewportsWithFrameOfReferenceUID';\nimport filterViewportsWithToolEnabled from './filterViewportsWithToolEnabled';\nimport filterViewportsWithParallelNormals from './filterViewportsWithParallelNormals';\n\n/**\n * Given a cornerstone3D enabled `element`, and a `toolName`, find all viewportIds\n * looking at the same Frame Of Reference that have the tool with the given `toolName`\n * active, passive or enabled.\n *\n * @param element - The target cornerstone3D enabled element.\n * @param toolName - The string toolName.\n * @param requireParallelNormals - If true, only return viewports that have parallel normals.\n *\n * @returns An array of viewportIds.\n */\nexport default function getViewportIdsWithToolToRender(\n  element: HTMLDivElement,\n  toolName: string,\n  requireParallelNormals = true\n): string[] {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, FrameOfReferenceUID } = enabledElement;\n\n  let viewports = renderingEngine.getViewports();\n\n  viewports = filterViewportsWithFrameOfReferenceUID(\n    viewports,\n    FrameOfReferenceUID\n  );\n  viewports = filterViewportsWithToolEnabled(viewports, toolName);\n\n  const viewport = renderingEngine.getViewport(enabledElement.viewportId);\n\n  if (requireParallelNormals) {\n    viewports = filterViewportsWithParallelNormals(\n      viewports,\n      viewport.getCamera()\n    );\n  }\n\n  const viewportIds = viewports.map((vp) => vp.id);\n\n  return viewportIds;\n}\n","// Pulled from source: https://github.com/w8r/liang-barsky\n// MIT Licensed.\n\n/**\n * Fast, destructive implementation of Liang-Barsky line clipping algorithm.\n * It clips a 2D segment by a rectangle.\n * @author Alexander Milevski <info@w8r.name>\n * @license MIT\n */\n\nconst EPSILON = 1e-6;\nconst INSIDE = 1;\nconst OUTSIDE = 0;\n\nfunction clipT(num, denom, c) {\n  const [tE, tL] = c;\n  if (Math.abs(denom) < EPSILON) return num < 0;\n  const t = num / denom;\n\n  if (denom > 0) {\n    if (t > tL) return 0;\n    if (t > tE) c[0] = t;\n  } else {\n    if (t < tE) return 0;\n    if (t < tL) c[1] = t;\n  }\n  return 1;\n}\n\n/**\n * @param  {Point} a\n * @param  {Point} b\n * @param  {BoundingBox} box [xmin, ymin, xmax, ymax]\n * @param  {Point?} [da]\n * @param  {Point?} [db]\n * @return {number}\n */\nexport default function clip(a, b, box, da?, db?) {\n  const [x1, y1] = a;\n  const [x2, y2] = b;\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n\n  if (da === undefined || db === undefined) {\n    da = a;\n    db = b;\n  } else {\n    da[0] = a[0];\n    da[1] = a[1];\n    db[0] = b[0];\n    db[1] = b[1];\n  }\n\n  if (\n    Math.abs(dx) < EPSILON &&\n    Math.abs(dy) < EPSILON &&\n    x1 >= box[0] &&\n    x1 <= box[2] &&\n    y1 >= box[1] &&\n    y1 <= box[3]\n  ) {\n    return INSIDE;\n  }\n\n  const c = [0, 1];\n  if (\n    clipT(box[0] - x1, dx, c) &&\n    clipT(x1 - box[2], -dx, c) &&\n    clipT(box[1] - y1, dy, c) &&\n    clipT(y1 - box[3], -dy, c)\n  ) {\n    const [tE, tL] = c;\n    if (tL < 1) {\n      db[0] = x1 + tL * dx;\n      db[1] = y1 + tL * dy;\n    }\n    if (tE > 0) {\n      da[0] += tE * dx;\n      da[1] += tE * dy;\n    }\n    return INSIDE;\n  }\n  return OUTSIDE;\n}\n","import { Types } from '@cornerstonejs/core';\n\nfunction dist2(p1: Types.Point2, p2: Types.Point2): number {\n  return (p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]);\n}\n\n/**\n * Calculates the distance-squared of a point to a line\n *\n * @param lineStart - x,y coordinates of the start of the line\n * @param lineEnd - x,y coordinates of the end of the line\n * @param point - x,y of the point\n * @returns distance-squared\n */\nexport default function distanceToPointSquared(\n  lineStart: Types.Point2,\n  lineEnd: Types.Point2,\n  point: Types.Point2\n): number {\n  const d2 = dist2(lineStart, lineEnd);\n\n  if (d2 === 0) {\n    return dist2(point, lineStart);\n  }\n\n  const t =\n    ((point[0] - lineStart[0]) * (lineEnd[0] - lineStart[0]) +\n      (point[1] - lineStart[1]) * (lineEnd[1] - lineStart[1])) /\n    d2;\n\n  if (t < 0) {\n    return dist2(point, lineStart);\n  }\n  if (t > 1) {\n    return dist2(point, lineEnd);\n  }\n\n  const pt: Types.Point2 = [\n    lineStart[0] + t * (lineEnd[0] - lineStart[0]),\n    lineStart[1] + t * (lineEnd[1] - lineStart[1]),\n  ];\n\n  return dist2(point, pt);\n}\n","import distanceToPointSquared from './distanceToPointSquared';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Calculates the distance of a point to a line\n *\n * @param lineStart - x,y coordinates of the start of the line\n * @param lineEnd - x,y coordinates of the end of the line\n * @param point - x,y of the point\n * @returns distance\n */\nexport default function distanceToPoint(\n  lineStart: Types.Point2,\n  lineEnd: Types.Point2,\n  point: Types.Point2\n): number {\n  if (lineStart.length !== 2 || lineEnd.length !== 2 || point.length !== 2) {\n    throw Error(\n      'lineStart, lineEnd, and point should have 2 elements of [x, y]'\n    );\n  }\n\n  return Math.sqrt(distanceToPointSquared(lineStart, lineEnd, point));\n}\n","import type { Types } from '@cornerstonejs/core';\n\n// Returns sign of number\nfunction sign(x: any) {\n  return typeof x === 'number'\n    ? x\n      ? x < 0\n        ? -1\n        : 1\n      : x === x\n      ? 0\n      : NaN\n    : NaN;\n}\n\n/**\n * Calculates the intersection point between two lines in the 2D plane\n *\n * @param line1Start - x,y coordinates of the start of the first line\n * @param line1End - x,y coordinates of the end of the first line\n * @param line2Start - x,y coordinates of the start of the second line\n * @param line2End - x,y coordinates of the end of the second line\n * @returns [x,y] - point x,y of the point\n */\n\nexport default function intersectLine(\n  line1Start: Types.Point2,\n  line1End: Types.Point2,\n  line2Start: Types.Point2,\n  line2End: Types.Point2\n): number[] {\n  const [x1, y1] = line1Start;\n  const [x2, y2] = line1End;\n  const [x3, y3] = line2Start;\n  const [x4, y4] = line2End;\n\n  // Compute a1, b1, c1, where line joining points 1 and 2 is \"a1 x  +  b1 y  +  c1  =  0\"\n  const a1 = y2 - y1;\n  const b1 = x1 - x2;\n  const c1 = x2 * y1 - x1 * y2;\n\n  // Compute r3 and r4\n  const r3 = a1 * x3 + b1 * y3 + c1;\n  const r4 = a1 * x4 + b1 * y4 + c1;\n\n  /* Check signs of r3 and r4.  If both point 3 and point 4 lie on\n   * same side of line 1, the line segments do not intersect.\n   */\n\n  if (r3 !== 0 && r4 !== 0 && sign(r3) === sign(r4)) {\n    return;\n  }\n\n  // Compute a2, b2, c2\n  const a2 = y4 - y3;\n  const b2 = x3 - x4;\n  const c2 = x4 * y3 - x3 * y4;\n\n  // Compute r1 and r2\n  const r1 = a2 * x1 + b2 * y1 + c2;\n  const r2 = a2 * x2 + b2 * y2 + c2;\n\n  /* Check signs of r1 and r2.  If both point 1 and point 2 lie\n   * on same side of second line segment, the line segments do\n   * not intersect.\n   */\n\n  if (r1 !== 0 && r2 !== 0 && sign(r1) === sign(r2)) {\n    return;\n  }\n\n  /* Line segments intersect: compute intersection point.\n   */\n\n  const denom = a1 * b2 - a2 * b1;\n  let num;\n\n  /* The denom/2 is to get rounding instead of truncating.  It\n   * is added or subtracted to the numerator, depending upon the\n   * sign of the numerator.\n   */\n\n  num = b1 * c2 - b2 * c1;\n  const x = num / denom;\n\n  num = a2 * c1 - a1 * c2;\n  const y = num / denom;\n\n  const intersectionPoint = [x, y];\n\n  return intersectionPoint;\n}\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\n\nimport { AnnotationTool } from './base';\n\nimport {\n  getEnabledElementByIds,\n  getEnabledElement,\n  utilities as csUtils,\n  Enums,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getToolGroup,\n  getToolGroupForViewport,\n} from '../store/ToolGroupManager';\n\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../stateManagement/annotation/annotationState';\n\nimport {\n  drawCircle as drawCircleSvg,\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n} from '../drawingSvg';\nimport { state } from '../store';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\n\nimport * as lineSegment from '../utilities/math/line';\nimport {\n  Annotation,\n  Annotations,\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../types';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { CONSTANTS } from '@cornerstonejs/core';\n\nconst { RENDERING_DEFAULTS } = CONSTANTS;\n\n// TODO: nested config is weird\ninterface ToolConfiguration {\n  configuration?: {\n    getReferenceLineColor?: (viewportId: string) => string;\n    getReferenceLineControllable?: (viewportId: string) => boolean;\n    getReferenceLineDraggableRotatable?: (viewportId: string) => boolean;\n    getReferenceLineSlabThicknessControlsOn?: (viewportId: string) => boolean;\n    referenceLinesCenterGapRadius?: number;\n    shadow?: boolean;\n    autopan?: {\n      enabled: boolean;\n      panSize: number;\n    };\n    mobile?: {\n      enabled: boolean;\n      opacity: number;\n      handleRadius: number;\n    };\n  };\n}\n\ninterface CrosshairsAnnotation extends Annotation {\n  data: {\n    handles: {\n      rotationPoints: any[]; // rotation handles, used for rotation interactions\n      slabThicknessPoints: any[]; // slab thickness handles, used for setting the slab thickness\n      activeOperation: number | null; // 0 translation, 1 rotation handles, 2 slab thickness handles\n      toolCenter: Types.Point3;\n    };\n    activeViewportIds: string[]; // a list of the viewport ids connected to the reference lines being translated\n    viewportId: string;\n  };\n}\n\nfunction defaultReferenceLineColor() {\n  return 'rgb(0, 200, 0)';\n}\n\nfunction defaultReferenceLineControllable() {\n  return true;\n}\n\nfunction defaultReferenceLineDraggableRotatable() {\n  return true;\n}\n\nfunction defaultReferenceLineSlabThicknessControlsOn() {\n  return true;\n}\n\nconst OPERATION = {\n  DRAG: 1,\n  ROTATE: 2,\n  SLAB: 3,\n};\n\nconst EPSILON = 1e-3;\n\n/**\n * CrosshairsTool is a tool that provides reference lines between different viewports\n * of a toolGroup. Using crosshairs, you can jump to a specific location in one\n * viewport and the rest of the viewports in the toolGroup will be aligned to that location.\n * Crosshairs have grababble handles that can be used to rotate and translate the\n * reference lines. They can also be used to set the slab thickness of the viewports\n * by modifying the slab thickness handles.\n *\n */\nclass CrosshairsTool extends AnnotationTool {\n  static toolName;\n\n  toolCenter: Types.Point3 = [0, 0, 0]; // NOTE: it is assumed that all the active/linked viewports share the same crosshair center.\n  // This because the rotation operation rotates also all the other active/intersecting reference lines of the same angle\n  _getReferenceLineColor?: (viewportId: string) => string;\n  _getReferenceLineControllable?: (viewportId: string) => boolean;\n  _getReferenceLineDraggableRotatable?: (viewportId: string) => boolean;\n  _getReferenceLineSlabThicknessControlsOn?: (viewportId: string) => boolean;\n  editData: {\n    annotation: any;\n  } | null;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse'],\n      configuration: {\n        shadow: true,\n        // renders a colored circle on top right of the viewports whose color\n        // matches the color of the reference line\n        viewportIndicators: true,\n        // Auto pan is a configuration which will update pan\n        // other viewports in the toolGroup if the center of the crosshairs\n        // is outside of the viewport. This might be useful for the case\n        // when the user is scrolling through an image (usually in the zoomed view)\n        // and the crosshairs will eventually get outside of the viewport for\n        // the other viewports.\n        autoPan: {\n          enabled: false,\n          panSize: 10,\n        },\n        // radius of the area around the intersection of the planes, in which\n        // the reference lines will not be rendered. This is only used when\n        // having 3 viewports in the toolGroup.\n        referenceLinesCenterGapRadius: 20,\n        // actorUIDs for slabThickness application, if not defined, the slab thickness\n        // will be applied to all actors of the viewport\n        filterActorUIDsToSetSlabThickness: [],\n        // blend mode for slabThickness modifications\n        slabThicknessBlendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n        mobile: {\n          enabled: false,\n          opacity: 0.8,\n          handleRadius: 9,\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._getReferenceLineColor =\n      toolProps.configuration?.getReferenceLineColor ||\n      defaultReferenceLineColor;\n    this._getReferenceLineControllable =\n      toolProps.configuration?.getReferenceLineControllable ||\n      defaultReferenceLineControllable;\n    this._getReferenceLineDraggableRotatable =\n      toolProps.configuration?.getReferenceLineDraggableRotatable ||\n      defaultReferenceLineDraggableRotatable;\n    this._getReferenceLineSlabThicknessControlsOn =\n      toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||\n      defaultReferenceLineSlabThicknessControlsOn;\n  }\n\n  /**\n   * Gets the camera from the viewport, and adds crosshairs annotation for the viewport\n   * to the annotationManager. If any annotation is found in the annotationManager, it\n   * overwrites it.\n   * @param viewportInfo - The viewportInfo for the viewport to add the crosshairs\n   * @returns viewPlaneNormal and center of viewport canvas in world space\n   */\n  initializeViewport = ({\n    renderingEngineId,\n    viewportId,\n  }: Types.IViewportId): {\n    normal: Types.Point3;\n    point: Types.Point3;\n  } => {\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    const { FrameOfReferenceUID, viewport } = enabledElement;\n    const { element } = viewport;\n    const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n\n    // Check if there is already annotation for this viewport\n    let annotations = this._getAnnotations(enabledElement);\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (annotations.length) {\n      // If found, it will override it by removing the annotation and adding it later\n      removeAnnotation(annotations[0].annotationUID);\n    }\n\n    const annotation = {\n      highlighted: false,\n      metadata: {\n        cameraPosition: <Types.Point3>[...position],\n        cameraFocalPoint: <Types.Point3>[...focalPoint],\n        FrameOfReferenceUID,\n        toolName: this.getToolName(),\n      },\n      data: {\n        handles: {\n          rotationPoints: [], // rotation handles, used for rotation interactions\n          slabThicknessPoints: [], // slab thickness handles, used for setting the slab thickness\n          toolCenter: this.toolCenter,\n        },\n        activeOperation: null, // 0 translation, 1 rotation handles, 2 slab thickness handles\n        activeViewportIds: [], // a list of the viewport ids connected to the reference lines being translated\n        viewportId,\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    return {\n      normal: viewPlaneNormal,\n      point: viewport.canvasToWorld([\n        viewport.canvas.clientWidth / 2,\n        viewport.canvas.clientHeight / 2,\n      ]),\n    };\n  };\n\n  _getViewportsInfo = () => {\n    const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    return viewports;\n  };\n\n  onSetToolActive() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    // Upon new setVolumes on viewports we need to update the crosshairs\n    // reference points in the new space, so we subscribe to the event\n    // and update the reference points accordingly.\n    this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n    this._subscribeToViewportNewVolumeSet(viewportsInfo);\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolPassive() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolEnabled() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolDisabled() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n\n    // Crosshairs annotations in the state\n    // has no value when the tool is disabled\n    // since viewports can change (zoom, pan, scroll)\n    // between disabled and enabled/active states.\n    // so we just remove the annotations from the state\n    viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const annotations = this._getAnnotations(enabledElement);\n\n      if (annotations?.length) {\n        annotations.forEach((annotation) => {\n          removeAnnotation(annotation.annotationUID);\n        });\n      }\n    });\n  }\n\n  /**\n   * When activated, it initializes the crosshairs. It begins by computing\n   * the intersection of viewports associated with the crosshairs instance.\n   * When all three views are accessible, the intersection (e.g., crosshairs tool centre)\n   * will be an exact point in space; however, with two viewports, because the\n   * intersection of two planes is a line, it assumes the last view is between the centre\n   * of the two rendering viewports.\n   * @param viewportsInfo Array of viewportInputs which each item containing {viewportId, renderingEngineId}\n   */\n  computeToolCenter = (viewportsInfo): void => {\n    if (!viewportsInfo.length || viewportsInfo.length === 1) {\n      throw new Error(\n        'For crosshairs to operate, at least two viewports must be given.'\n      );\n    }\n\n    // Todo: handle two same view viewport, or more than 3 viewports\n    const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;\n\n    // Initialize first viewport\n    const { normal: normal1, point: point1 } =\n      this.initializeViewport(firstViewport);\n\n    // Initialize second viewport\n    const { normal: normal2, point: point2 } =\n      this.initializeViewport(secondViewport);\n\n    let normal3 = <Types.Point3>[0, 0, 0];\n    let point3 = vec3.create();\n\n    // If there are three viewports\n    if (thirdViewport) {\n      ({ normal: normal3, point: point3 } =\n        this.initializeViewport(thirdViewport));\n    } else {\n      // If there are only two views (viewport) associated with the crosshairs:\n      // In this situation, we don't have a third information to find the\n      // exact intersection, and we \"assume\" the third view is looking at\n      // a location in between the first and second view centers\n      vec3.add(point3, point1, point2);\n      vec3.scale(point3, point3, 0.5);\n      vec3.cross(normal3, normal1, normal2);\n    }\n\n    // Planes of each viewport\n    const firstPlane = csUtils.planar.planeEquation(normal1, point1);\n    const secondPlane = csUtils.planar.planeEquation(normal2, point2);\n    const thirdPlane = csUtils.planar.planeEquation(normal3, point3);\n\n    // Calculating the intersection of 3 planes\n    // prettier-ignore\n    this.toolCenter = csUtils.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane)\n\n    // assuming all viewports are in the same rendering engine\n    const { renderingEngine } = getEnabledElementByIds(\n      viewportsInfo[0].viewportId,\n      viewportsInfo[0].renderingEngineId\n    );\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportsInfo.map(({ viewportId }) => viewportId)\n    );\n  };\n\n  /**\n   * addNewAnnotation acts as jump for the crosshairs tool. It is called when\n   * the user clicks on the image. It does not store the annotation in the stateManager though.\n   *\n   * @param evt - The mouse event\n   * @param interactionType - The type of interaction (e.g., mouse, touch, etc.)\n   * @returns Crosshairs annotation\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): CrosshairsAnnotation => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { currentPoints } = eventDetail;\n    const jumpWorld = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    this._jump(enabledElement, jumpWorld);\n\n    const annotations = this._getAnnotations(enabledElement);\n    const filteredAnnotations = this.filterInteractableAnnotationsForElement(\n      viewport.element,\n      annotations\n    );\n\n    // viewport Annotation\n    const { data } = filteredAnnotations[0];\n\n    const { rotationPoints } = data.handles;\n    const viewportIdArray = [];\n    // put all the draggable reference lines in the viewportIdArray\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      if (!viewportControllable || !viewportDraggableRotatable) {\n        continue;\n      }\n      viewportIdArray.push(otherViewport.id);\n      // rotation handles are two per viewport\n      i++;\n    }\n\n    data.activeViewportIds = [...viewportIdArray];\n    // set translation operation\n    data.handles.activeOperation = OPERATION.DRAG;\n\n    evt.preventDefault();\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n    return filteredAnnotations[0];\n  };\n\n  cancel = () => {\n    console.log('Not implemented yet');\n  };\n\n  /**\n   * It checks if the mouse click is near crosshairs handles, if yes\n   * it returns the handle location. If the mouse click is not near any\n   * of the handles, it does not return anything.\n   *\n   * @param element - The element that the tool is attached to.\n   * @param annotation - The annotation object associated with the annotation\n   * @param canvasCoords - The coordinates of the mouse click on canvas\n   * @param proximity - The distance from the mouse cursor to the point\n   * that is considered \"near\".\n   * @returns The handle that is closest to the cursor, or null if the cursor\n   * is not near any of the handles.\n   */\n  getHandleNearImagePoint(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): ToolHandle | undefined {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    let point = this._getRotationHandleNearImagePoint(\n      viewport,\n      annotation,\n      canvasCoords,\n      proximity\n    );\n\n    if (point !== null) {\n      return point;\n    }\n\n    point = this._getSlabThicknessHandleNearImagePoint(\n      viewport,\n      annotation,\n      canvasCoords,\n      proximity\n    );\n\n    if (point !== null) {\n      return point;\n    }\n  }\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    annotation.highlighted = true;\n\n    // NOTE: handle index or coordinates are not used when dragging.\n    // This because the handle points are actually generated in the renderTool and they are a derivative\n    // from the camera variables of the viewports and of the slab thickness variable.\n    // Remember that the translation and rotation operations operate on the camera\n    // variables and not really on the handles. Similar for the slab thickness.\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * It returns if the canvas point is near the provided crosshairs annotation in the\n   * provided element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: CrosshairsAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    interactionType: InteractionTypes\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    annotation.highlighted = true;\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  onCameraModified = (evt) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n    const viewport = enabledElement.viewport as Types.IVolumeViewport;\n\n    const annotations = this._getAnnotations(enabledElement);\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport that the camera modified is originating from\n    const viewportAnnotation =\n      filteredToolAnnotations[0] as CrosshairsAnnotation;\n\n    if (!viewportAnnotation) {\n      return;\n    }\n\n    // -- Update the camera of other linked viewports containing the same volumeId that\n    //    have the same camera in case of translation\n    // -- Update the crosshair center in world coordinates in annotation.\n    // This is necessary because other tools can modify the position of the slices,\n    // e.g. stackScroll tool at wheel scroll. So we update the coordinates of the center always here.\n    // NOTE: rotation and slab thickness handles are created/updated in renderTool.\n    const currentCamera = viewport.getCamera();\n    const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;\n    const deltaCameraPosition: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(\n      currentCamera.position,\n      oldCameraPosition,\n      deltaCameraPosition\n    );\n\n    const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;\n    const deltaCameraFocalPoint: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(\n      currentCamera.focalPoint,\n      oldCameraFocalPoint,\n      deltaCameraFocalPoint\n    );\n\n    // updated cached \"previous\" camera position and focal point\n    viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];\n    viewportAnnotation.metadata.cameraFocalPoint = [\n      ...currentCamera.focalPoint,\n    ];\n\n    const viewportControllable = this._getReferenceLineControllable(\n      viewport.id\n    );\n    const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(\n      viewport.id\n    );\n    if (\n      !csUtils.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&\n      viewportControllable &&\n      viewportDraggableRotatable\n    ) {\n      // Is camera Modified a TRANSLATION or ROTATION?\n      let isRotation = false;\n\n      // This is guaranteed to be the same diff for both position and focal point\n      // if the camera is modified by pan, zoom, or scroll BUT for rotation of\n      // crosshairs handles it will be different.\n      const cameraModifiedSameForPosAndFocalPoint = csUtils.isEqual(\n        deltaCameraPosition,\n        deltaCameraFocalPoint,\n        1e-3\n      );\n\n      // NOTE: it is a translation if the the focal point and camera position shifts are the same\n      if (!cameraModifiedSameForPosAndFocalPoint) {\n        isRotation = true;\n      }\n\n      const cameraModifiedInPlane =\n        Math.abs(\n          vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)\n        ) < 1e-2;\n\n      // TRANSLATION\n      // NOTE1: if the camera modified is a result of a pan or zoom don't update the crosshair center\n      // NOTE2: rotation handles are updates in renderTool\n      if (!isRotation && !cameraModifiedInPlane) {\n        this.toolCenter[0] += deltaCameraPosition[0];\n        this.toolCenter[1] += deltaCameraPosition[1];\n        this.toolCenter[2] += deltaCameraPosition[2];\n      }\n    }\n\n    // AutoPan modification\n    if (this.configuration.autoPan?.enabled) {\n      const toolGroup = getToolGroupForViewport(\n        viewport.id,\n        renderingEngine.id\n      );\n\n      const otherViewportIds = toolGroup\n        .getViewportIds()\n        .filter((id) => id !== viewport.id);\n\n      otherViewportIds.forEach((viewportId) => {\n        this._autoPanViewportIfNecessary(viewportId, renderingEngine);\n      });\n    }\n\n    const requireSameOrientation = false;\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      requireSameOrientation\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  mouseMoveCallback = (\n    evt: EventTypes.MouseMoveEventType,\n    filteredToolAnnotations: Annotations\n  ): boolean => {\n    const { element, currentPoints } = evt.detail;\n    const canvasCoords = currentPoints.canvas;\n    let imageNeedsUpdate = false;\n\n    for (let i = 0; i < filteredToolAnnotations.length; i++) {\n      const annotation = filteredToolAnnotations[i] as CrosshairsAnnotation;\n\n      if (isAnnotationLocked(annotation)) {\n        continue;\n      }\n\n      const { data, highlighted } = annotation;\n      if (!data.handles) {\n        continue;\n      }\n\n      const previousActiveOperation = data.handles.activeOperation;\n      const previousActiveViewportIds =\n        data.activeViewportIds && data.activeViewportIds.length > 0\n          ? [...data.activeViewportIds]\n          : [];\n\n      // This init are necessary, because when we move the mouse they are not cleaned by _endCallback\n      data.activeViewportIds = [];\n      data.handles.activeOperation = null;\n\n      const handleNearImagePoint = this.getHandleNearImagePoint(\n        element,\n        annotation,\n        canvasCoords,\n        6\n      );\n\n      let near = false;\n      if (handleNearImagePoint) {\n        near = true;\n      } else {\n        near = this._pointNearTool(element, annotation, canvasCoords, 6);\n      }\n\n      const nearToolAndNotMarkedActive = near && !highlighted;\n      const notNearToolAndMarkedActive = !near && highlighted;\n      if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n        annotation.highlighted = !highlighted;\n        imageNeedsUpdate = true;\n      } else if (\n        data.handles.activeOperation !== previousActiveOperation ||\n        !this._areViewportIdArraysEqual(\n          data.activeViewportIds,\n          previousActiveViewportIds\n        )\n      ) {\n        imageNeedsUpdate = true;\n      }\n    }\n\n    return imageNeedsUpdate;\n  };\n\n  filterInteractableAnnotationsForElement = (element, annotations) => {\n    if (!annotations || !annotations.length) {\n      return [];\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewportId } = enabledElement;\n\n    const viewportUIDSpecificCrosshairs = annotations.filter(\n      (annotation) => annotation.data.viewportId === viewportId\n    );\n\n    return viewportUIDSpecificCrosshairs;\n  };\n\n  /**\n   * renders the crosshairs lines and handles in the requestAnimationFrame callback\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, renderingEngine } = enabledElement;\n    const { element } = viewport;\n    const annotations = this._getAnnotations(enabledElement);\n    const camera = viewport.getCamera();\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport Annotation\n    const viewportAnnotation = filteredToolAnnotations[0];\n    if (!annotations?.length || !viewportAnnotation?.data) {\n      // No annotations yet, and didn't just create it as we likely don't have a FrameOfReference/any data loaded yet.\n      return renderStatus;\n    }\n\n    const annotationUID = viewportAnnotation.annotationUID;\n\n    // Get cameras/canvases for each of these.\n    // -- Get two world positions for this canvas in this line (e.g. the diagonal)\n    // -- Convert these world positions to this canvas.\n    // -- Extend/confine this line to fit in this canvas.\n    // -- Render this line.\n    const { clientWidth, clientHeight } = viewport.canvas;\n    const canvasDiagonalLength = Math.sqrt(\n      clientWidth * clientWidth + clientHeight * clientHeight\n    );\n    const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);\n\n    const data = viewportAnnotation.data;\n    const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n\n    const otherViewportAnnotations =\n      this._filterAnnotationsByUniqueViewportOrientations(\n        enabledElement,\n        annotations\n      );\n\n    const referenceLines = [];\n\n    // get canvas information for points and lines (canvas box, canvas horizontal distances)\n    const canvasBox = [0, 0, clientWidth, clientHeight];\n\n    otherViewportAnnotations.forEach((annotation) => {\n      const { data } = annotation;\n\n      data.handles.toolCenter = this.toolCenter;\n\n      const otherViewport = renderingEngine.getViewport(\n        data.viewportId\n      ) as Types.IVolumeViewport;\n\n      const otherCamera = otherViewport.getCamera();\n\n      const otherViewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const otherViewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      const otherViewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n      // get coordinates for the reference line\n      const { clientWidth, clientHeight } = otherViewport.canvas;\n      const otherCanvasDiagonalLength = Math.sqrt(\n        clientWidth * clientWidth + clientHeight * clientHeight\n      );\n      const otherCanvasCenter: Types.Point2 = [\n        clientWidth * 0.5,\n        clientHeight * 0.5,\n      ];\n      const otherViewportCenterWorld =\n        otherViewport.canvasToWorld(otherCanvasCenter);\n\n      const direction: Types.Point3 = [0, 0, 0];\n      vtkMath.cross(\n        camera.viewPlaneNormal,\n        otherCamera.viewPlaneNormal,\n        direction\n      );\n      vtkMath.normalize(direction);\n      vtkMath.multiplyScalar(\n        <Types.Point3>direction,\n        otherCanvasDiagonalLength\n      );\n\n      const pointWorld0: Types.Point3 = [0, 0, 0];\n      vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n\n      const pointWorld1: Types.Point3 = [0, 0, 0];\n      vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n\n      const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n\n      const otherViewportCenterCanvas = viewport.worldToCanvas(\n        otherViewportCenterWorld\n      );\n\n      const canvasUnitVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasUnitVectorFromCenter,\n        pointCanvas0,\n        otherViewportCenterCanvas\n      );\n      vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n\n      // Graphic:\n      // Mid -> SlabThickness handle\n      // Short -> Rotation handle\n      //                           Long\n      //                            |\n      //                            |\n      //                            |\n      //                           Mid\n      //                            |\n      //                            |\n      //                            |\n      //                          Short\n      //                            |\n      //                            |\n      //                            |\n      // Long --- Mid--- Short--- Center --- Short --- Mid --- Long\n      //                            |\n      //                            |\n      //                            |\n      //                          Short\n      //                            |\n      //                            |\n      //                            |\n      //                           Mid\n      //                            |\n      //                            |\n      //                            |\n      //                           Long\n      const canvasVectorFromCenterLong = vec2.create();\n\n      vec2.scale(\n        canvasVectorFromCenterLong,\n        canvasUnitVectorFromCenter,\n        canvasDiagonalLength * 100\n      );\n      const canvasVectorFromCenterMid = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterMid,\n        canvasUnitVectorFromCenter,\n        // to maximize the visibility of the controls, they need to be\n        // placed at most at half the length of the shortest side of the canvas.\n        // Chosen 0.4 to have some margin to the edge.\n        canvasMinDimensionLength * 0.4\n      );\n      const canvasVectorFromCenterShort = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterShort,\n        canvasUnitVectorFromCenter,\n        // Chosen 0.2 because is half of 0.4.\n        canvasMinDimensionLength * 0.2\n      );\n      const canvasVectorFromCenterStart = vec2.create();\n      const centerGap = this.configuration.referenceLinesCenterGapRadius;\n      vec2.scale(\n        canvasVectorFromCenterStart,\n        canvasUnitVectorFromCenter,\n        // Don't put a gap if the the third view is missing\n        otherViewportAnnotations.length === 2 ? centerGap : 0\n      );\n\n      // Computing Reference start and end (4 lines per viewport in case of 3 view MPR)\n      const refLinePointOne = vec2.create();\n      const refLinePointTwo = vec2.create();\n      const refLinePointThree = vec2.create();\n      const refLinePointFour = vec2.create();\n\n      let refLinesCenter = vec2.clone(crosshairCenterCanvas);\n      if (!otherViewportDraggableRotatable || !otherViewportControllable) {\n        refLinesCenter = vec2.clone(otherViewportCenterCanvas);\n      }\n\n      vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);\n      vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);\n      vec2.subtract(\n        refLinePointThree,\n        refLinesCenter,\n        canvasVectorFromCenterStart\n      );\n      vec2.subtract(\n        refLinePointFour,\n        refLinesCenter,\n        canvasVectorFromCenterLong\n      );\n\n      // Clipping lines to be only included in a box (canvas), we don't want\n      // the lines goes beyond canvas\n      liangBarksyClip(refLinePointOne, refLinePointTwo, canvasBox);\n      liangBarksyClip(refLinePointThree, refLinePointFour, canvasBox);\n\n      // Computing rotation handle positions\n      const rotHandleOne = vec2.create();\n      vec2.subtract(\n        rotHandleOne,\n        crosshairCenterCanvas,\n        canvasVectorFromCenterMid\n      );\n\n      const rotHandleTwo = vec2.create();\n      vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);\n\n      // Computing SlabThickness (st below) position\n\n      // SlabThickness center in canvas\n      let stHandlesCenterCanvas = vec2.clone(crosshairCenterCanvas);\n      if (\n        !otherViewportDraggableRotatable &&\n        otherViewportSlabThicknessControlsOn\n      ) {\n        stHandlesCenterCanvas = vec2.clone(otherViewportCenterCanvas);\n      }\n\n      // SlabThickness center in world\n      let stHandlesCenterWorld: Types.Point3 = [...this.toolCenter];\n      if (\n        !otherViewportDraggableRotatable &&\n        otherViewportSlabThicknessControlsOn\n      ) {\n        stHandlesCenterWorld = [...otherViewportCenterWorld];\n      }\n\n      const worldUnitVectorFromCenter: Types.Point3 = [0, 0, 0];\n      vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);\n      vtkMath.normalize(worldUnitVectorFromCenter);\n\n      const { viewPlaneNormal } = camera;\n      // @ts-ignore // Todo: fix after vtk pr merged\n      const { matrix } = vtkMatrixBuilder\n        .buildFromDegree()\n        // @ts-ignore fix after vtk pr merged\n        .rotate(90, viewPlaneNormal);\n\n      const worldUnitOrthoVectorFromCenter: Types.Point3 = [0, 0, 0];\n      vec3.transformMat4(\n        worldUnitOrthoVectorFromCenter,\n        worldUnitVectorFromCenter,\n        matrix\n      );\n\n      const slabThicknessValue = otherViewport.getSlabThickness();\n      const worldOrthoVectorFromCenter: Types.Point3 = [\n        ...worldUnitOrthoVectorFromCenter,\n      ];\n      vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);\n\n      const worldVerticalRefPoint: Types.Point3 = [0, 0, 0];\n      vtkMath.add(\n        stHandlesCenterWorld,\n        worldOrthoVectorFromCenter,\n        worldVerticalRefPoint\n      );\n\n      // convert vertical world distances in canvas coordinates\n      const canvasVerticalRefPoint = viewport.worldToCanvas(\n        worldVerticalRefPoint\n      );\n\n      // points for slab thickness lines\n      const canvasOrthoVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasOrthoVectorFromCenter,\n        stHandlesCenterCanvas,\n        canvasVerticalRefPoint\n      );\n\n      const stLinePointOne = vec2.create();\n      vec2.subtract(\n        stLinePointOne,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);\n\n      const stLinePointTwo = vec2.create();\n      vec2.add(\n        stLinePointTwo,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);\n\n      liangBarksyClip(stLinePointOne, stLinePointTwo, canvasBox);\n\n      const stLinePointThree = vec2.create();\n      vec2.add(\n        stLinePointThree,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.subtract(\n        stLinePointThree,\n        stLinePointThree,\n        canvasOrthoVectorFromCenter\n      );\n\n      const stLinePointFour = vec2.create();\n      vec2.subtract(\n        stLinePointFour,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.subtract(\n        stLinePointFour,\n        stLinePointFour,\n        canvasOrthoVectorFromCenter\n      );\n\n      liangBarksyClip(stLinePointThree, stLinePointFour, canvasBox);\n\n      // points for slab thickness handles\n      const stHandleOne = vec2.create();\n      const stHandleTwo = vec2.create();\n      const stHandleThree = vec2.create();\n      const stHandleFour = vec2.create();\n\n      vec2.subtract(\n        stHandleOne,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);\n      vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n      vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);\n      vec2.subtract(\n        stHandleThree,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);\n      vec2.add(\n        stHandleFour,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);\n\n      referenceLines.push([\n        otherViewport,\n        refLinePointOne,\n        refLinePointTwo,\n        refLinePointThree,\n        refLinePointFour,\n        stLinePointOne,\n        stLinePointTwo,\n        stLinePointThree,\n        stLinePointFour,\n        rotHandleOne,\n        rotHandleTwo,\n        stHandleOne,\n        stHandleTwo,\n        stHandleThree,\n        stHandleFour,\n      ]);\n    });\n\n    const newRtpoints = [];\n    const newStpoints = [];\n    const viewportColor = this._getReferenceLineColor(viewport.id);\n    const color =\n      viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n    referenceLines.forEach((line, lineIndex) => {\n      // get color for the reference line\n      const otherViewport = line[0];\n      const viewportColor = this._getReferenceLineColor(otherViewport.id);\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id) ||\n        this.configuration.mobile?.enabled;\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||\n        this.configuration.mobile?.enabled;\n      const selectedViewportId = data.activeViewportIds.find(\n        (id) => id === otherViewport.id\n      );\n\n      let color =\n        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n      let lineWidth = 1;\n\n      const lineActive =\n        data.handles.activeOperation !== null &&\n        data.handles.activeOperation === OPERATION.DRAG &&\n        selectedViewportId;\n\n      if (lineActive) {\n        lineWidth = 2.5;\n      }\n\n      let lineUID = `${lineIndex}`;\n      if (viewportControllable && viewportDraggableRotatable) {\n        lineUID = `${lineIndex}One`;\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[1],\n          line[2],\n          {\n            color,\n            lineWidth,\n          }\n        );\n\n        lineUID = `${lineIndex}Two`;\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[3],\n          line[4],\n          {\n            color,\n            lineWidth,\n          }\n        );\n      } else {\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[2],\n          line[4],\n          {\n            color,\n            lineWidth,\n          }\n        );\n      }\n\n      if (viewportControllable) {\n        color =\n          viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n        const rotHandlesActive =\n          data.handles.activeOperation === OPERATION.ROTATE;\n        const rotationHandles = [line[9], line[10]];\n\n        const rotHandleWorldOne = [\n          viewport.canvasToWorld(line[9]),\n          otherViewport,\n          line[1],\n          line[2],\n        ];\n        const rotHandleWorldTwo = [\n          viewport.canvasToWorld(line[10]),\n          otherViewport,\n          line[3],\n          line[4],\n        ];\n        newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);\n\n        const slabThicknessHandlesActive =\n          data.handles.activeOperation === OPERATION.SLAB;\n        const slabThicknessHandles = [line[11], line[12], line[13], line[14]];\n\n        const slabThicknessHandleWorldOne = [\n          viewport.canvasToWorld(line[11]),\n          otherViewport,\n          line[5],\n          line[6],\n        ];\n        const slabThicknessHandleWorldTwo = [\n          viewport.canvasToWorld(line[12]),\n          otherViewport,\n          line[5],\n          line[6],\n        ];\n        const slabThicknessHandleWorldThree = [\n          viewport.canvasToWorld(line[13]),\n          otherViewport,\n          line[7],\n          line[8],\n        ];\n        const slabThicknessHandleWorldFour = [\n          viewport.canvasToWorld(line[14]),\n          otherViewport,\n          line[7],\n          line[8],\n        ];\n        newStpoints.push(\n          slabThicknessHandleWorldOne,\n          slabThicknessHandleWorldTwo,\n          slabThicknessHandleWorldThree,\n          slabThicknessHandleWorldFour\n        );\n\n        if (\n          (lineActive || this.configuration.mobile?.enabled) &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportDraggableRotatable &&\n          viewportSlabThicknessControlsOn\n        ) {\n          // draw all handles inactive (rotation and slab thickness)\n          let handleUID = `${lineIndex}One`;\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'circle',\n            }\n          );\n          handleUID = `${lineIndex}Two`;\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'rect',\n            }\n          );\n        } else if (\n          lineActive &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportDraggableRotatable\n        ) {\n          const handleUID = `${lineIndex}`;\n          // draw rotation handles inactive\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'circle',\n            }\n          );\n        } else if (\n          selectedViewportId &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportSlabThicknessControlsOn\n        ) {\n          const handleUID = `${lineIndex}`;\n          // draw slab thickness handles inactive\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'rect',\n            }\n          );\n        } else if (rotHandlesActive && viewportDraggableRotatable) {\n          const handleUID = `${lineIndex}`;\n          // draw all rotation handles as active\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: 2,\n              fill: color,\n              type: 'circle',\n            }\n          );\n        } else if (\n          slabThicknessHandlesActive &&\n          selectedViewportId &&\n          viewportSlabThicknessControlsOn\n        ) {\n          // draw only the slab thickness handles for the active viewport as active\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: 2,\n              fill: color,\n              type: 'rect',\n            }\n          );\n        }\n        const slabThicknessValue = otherViewport.getSlabThickness();\n        if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {\n          // draw slab thickness reference lines\n          lineUID = `${lineIndex}STOne`;\n          drawLineSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            line[5],\n            line[6],\n            {\n              color,\n              width: 1,\n              lineDash: [2, 3],\n            }\n          );\n\n          lineUID = `${lineIndex}STTwo`;\n          drawLineSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            line[7],\n            line[8],\n            {\n              color,\n              width: line,\n              lineDash: [2, 3],\n            }\n          );\n        }\n      }\n    });\n\n    renderStatus = true;\n\n    // Save new handles points in annotation\n    data.handles.rotationPoints = newRtpoints;\n    data.handles.slabThicknessPoints = newStpoints;\n\n    if (this.configuration.viewportIndicators) {\n      // render a circle to pin point the viewport color\n      // TODO: This should not be part of the tool, and definitely not part of the renderAnnotation loop\n      const referenceColorCoordinates = [\n        clientWidth * 0.95,\n        clientHeight * 0.05,\n      ] as Types.Point2;\n      const circleRadius = canvasDiagonalLength * 0.01;\n\n      const circleUID = '0';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID,\n        referenceColorCoordinates,\n        circleRadius,\n        { color, fill: color }\n      );\n    }\n\n    return renderStatus;\n  };\n\n  _getAnnotations = (enabledElement: Types.IEnabledElement) => {\n    const { viewport } = enabledElement;\n    return getAnnotations(this.getToolName(), viewport.element);\n  };\n\n  _onNewVolume = (e: any) => {\n    const viewportsInfo = this._getViewportsInfo();\n    this.computeToolCenter(viewportsInfo);\n  };\n\n  _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const { viewport } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      const { element } = viewport;\n\n      element.removeEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        this._onNewVolume\n      );\n    });\n  }\n\n  _subscribeToViewportNewVolumeSet(viewports) {\n    viewports.forEach(({ viewportId, renderingEngineId }) => {\n      const { viewport } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      const { element } = viewport;\n\n      element.addEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        this._onNewVolume\n      );\n    });\n  }\n\n  _autoPanViewportIfNecessary(\n    viewportId: string,\n    renderingEngine: Types.IRenderingEngine\n  ): void {\n    // 1. Check if the toolCenter is outside the viewport\n    // 2. If it is outside, pan the viewport to fit in the toolCenter\n\n    const viewport = renderingEngine.getViewport(viewportId);\n    const { clientWidth, clientHeight } = viewport.canvas;\n\n    const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n\n    // pan the viewport to fit the toolCenter in the direction\n    // that is out of bounds\n    const pan = this.configuration.autoPan.panSize;\n\n    const visiblePointCanvas = <Types.Point2>[\n      toolCenterCanvas[0],\n      toolCenterCanvas[1],\n    ];\n\n    if (toolCenterCanvas[0] < 0) {\n      visiblePointCanvas[0] = pan;\n    } else if (toolCenterCanvas[0] > clientWidth) {\n      visiblePointCanvas[0] = clientWidth - pan;\n    }\n\n    if (toolCenterCanvas[1] < 0) {\n      visiblePointCanvas[1] = pan;\n    } else if (toolCenterCanvas[1] > clientHeight) {\n      visiblePointCanvas[1] = clientHeight - pan;\n    }\n\n    if (\n      visiblePointCanvas[0] === toolCenterCanvas[0] &&\n      visiblePointCanvas[1] === toolCenterCanvas[1]\n    ) {\n      return;\n    }\n\n    const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);\n\n    const deltaPointsWorld = [\n      visiblePointWorld[0] - this.toolCenter[0],\n      visiblePointWorld[1] - this.toolCenter[1],\n      visiblePointWorld[2] - this.toolCenter[2],\n    ];\n\n    const camera = viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n\n    viewport.render();\n  }\n\n  _areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {\n    if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {\n      return false;\n    }\n\n    viewportIdArrayOne.forEach((id) => {\n      let itemFound = false;\n      for (let i = 0; i < viewportIdArrayTwo.length; ++i) {\n        if (id === viewportIdArrayTwo[i]) {\n          itemFound = true;\n          break;\n        }\n      }\n      if (itemFound === false) {\n        return false;\n      }\n    });\n\n    return true;\n  };\n\n  // It filters the viewports with crosshairs and only return viewports\n  // that have different camera.\n  _getAnnotationsForViewportsWithDifferentCameras = (\n    enabledElement,\n    annotations\n  ) => {\n    const { viewportId, renderingEngine, viewport } = enabledElement;\n\n    const otherViewportAnnotations = annotations.filter(\n      (annotation) => annotation.data.viewportId !== viewportId\n    );\n\n    if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n      return [];\n    }\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, position } = camera;\n\n    const viewportsWithDifferentCameras = otherViewportAnnotations.filter(\n      (annotation) => {\n        const { viewportId } = annotation.data;\n        const targetViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfTarget = targetViewport.getCamera();\n\n        return !(\n          csUtils.isEqual(\n            cameraOfTarget.viewPlaneNormal,\n            viewPlaneNormal,\n            1e-2\n          ) && csUtils.isEqual(cameraOfTarget.position, position, 1)\n        );\n      }\n    );\n\n    return viewportsWithDifferentCameras;\n  };\n\n  _filterViewportWithSameOrientation = (\n    enabledElement,\n    referenceAnnotation,\n    annotations\n  ) => {\n    const { renderingEngine } = enabledElement;\n    const { data } = referenceAnnotation;\n    const viewport = renderingEngine.getViewport(data.viewportId);\n\n    const linkedViewportAnnotations = annotations.filter((annotation) => {\n      const { data } = annotation;\n      const otherViewport = renderingEngine.getViewport(data.viewportId);\n      const otherViewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n\n      return otherViewportControllable === true;\n    });\n\n    if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n      return [];\n    }\n\n    const camera = viewport.getCamera();\n    const viewPlaneNormal = camera.viewPlaneNormal;\n    vtkMath.normalize(viewPlaneNormal);\n\n    const otherViewportsAnnotationsWithSameCameraDirection =\n      linkedViewportAnnotations.filter((annotation) => {\n        const { viewportId } = annotation.data;\n        const otherViewport = renderingEngine.getViewport(viewportId);\n        const otherCamera = otherViewport.getCamera();\n        const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n        vtkMath.normalize(otherViewPlaneNormal);\n\n        return (\n          csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n          csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2)\n        );\n      });\n\n    return otherViewportsAnnotationsWithSameCameraDirection;\n  };\n\n  _filterAnnotationsByUniqueViewportOrientations = (\n    enabledElement,\n    annotations\n  ) => {\n    const { renderingEngine, viewport } = enabledElement;\n    const camera = viewport.getCamera();\n    const viewPlaneNormal = camera.viewPlaneNormal;\n    vtkMath.normalize(viewPlaneNormal);\n\n    const otherLinkedViewportAnnotationsFromSameScene = annotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const otherViewportControllable = this._getReferenceLineControllable(\n          otherViewport.id\n        );\n\n        return (\n          viewport !== otherViewport &&\n          // scene === otherScene &&\n          otherViewportControllable === true\n        );\n      }\n    );\n\n    const otherViewportsAnnotationsWithUniqueCameras = [];\n    // Iterate first on other viewport from the same scene linked\n    for (\n      let i = 0;\n      i < otherLinkedViewportAnnotationsFromSameScene.length;\n      ++i\n    ) {\n      const annotation = otherLinkedViewportAnnotationsFromSameScene[i];\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const otherViewportControllable = this._getReferenceLineControllable(\n          otherViewport.id\n        );\n\n        return (\n          viewport !== otherViewport &&\n          // scene === otherScene &&\n          otherViewportControllable !== true\n        );\n      }\n    );\n\n    // Iterate second on other viewport from the same scene non linked\n    for (\n      let i = 0;\n      i < otherNonLinkedViewportAnnotationsFromSameScene.length;\n      ++i\n    ) {\n      const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    // Iterate on all the viewport\n    const otherViewportAnnotations =\n      this._getAnnotationsForViewportsWithDifferentCameras(\n        enabledElement,\n        annotations\n      );\n\n    for (let i = 0; i < otherViewportAnnotations.length; ++i) {\n      const annotation = otherViewportAnnotations[i];\n      if (\n        otherViewportsAnnotationsWithUniqueCameras.some(\n          (element) => element === annotation\n        )\n      ) {\n        continue;\n      }\n\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    return otherViewportsAnnotationsWithUniqueCameras;\n  };\n\n  _checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {\n    const actors = viewport.getActors();\n    const otherViewportActors = otherViewport.getActors();\n\n    let sameScene = true;\n\n    actors.forEach((actor) => {\n      if (\n        actors.length !== otherViewportActors.length ||\n        otherViewportActors.find(({ uid }) => uid === actor.uid) === undefined\n      ) {\n        sameScene = false;\n      }\n    });\n\n    return sameScene;\n  };\n\n  _jump = (enabledElement, jumpWorld) => {\n    state.isInteractingWithTool = true;\n    const { viewport, renderingEngine } = enabledElement;\n\n    const annotations = this._getAnnotations(enabledElement);\n\n    const delta: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(jumpWorld, this.toolCenter, delta);\n\n    // TRANSLATION\n    // get the annotation of the other viewport which are parallel to the delta shift and are of the same scene\n    const otherViewportAnnotations =\n      this._getAnnotationsForViewportsWithDifferentCameras(\n        enabledElement,\n        annotations\n      );\n\n    const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n\n        const sameScene = this._checkIfViewportsRenderingSameScene(\n          viewport,\n          otherViewport\n        );\n\n        return (\n          this._getReferenceLineControllable(otherViewport.id) &&\n          this._getReferenceLineDraggableRotatable(otherViewport.id) &&\n          sameScene\n        );\n      }\n    );\n\n    if (viewportsAnnotationsToUpdate.length === 0) {\n      state.isInteractingWithTool = false;\n      return false;\n    }\n\n    this._applyDeltaShiftToSelectedViewportCameras(\n      renderingEngine,\n      viewportsAnnotationsToUpdate,\n      delta\n    );\n\n    state.isInteractingWithTool = false;\n\n    return true;\n  };\n\n  _activateModify = (element) => {\n    // mobile sometimes has lingering interaction even when touchEnd triggers\n    // this check allows for multiple handles to be active which doesn't affect\n    // tool usage.\n    state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    this.editData.annotation.data.handles.activeOperation = null;\n    this.editData.annotation.data.activeViewportIds = [];\n\n    this._deactivateModify(element);\n\n    resetElementCursor(element);\n\n    this.editData = null;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const requireSameOrientation = false;\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      requireSameOrientation\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const delta = eventDetail.deltaPoints.world;\n\n    if (\n      Math.abs(delta[0]) < 1e-3 &&\n      Math.abs(delta[1]) < 1e-3 &&\n      Math.abs(delta[2]) < 1e-3\n    ) {\n      return;\n    }\n\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const annotations = this._getAnnotations(\n      enabledElement\n    ) as CrosshairsAnnotation[];\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport Annotation\n    const viewportAnnotation = filteredToolAnnotations[0];\n    if (!viewportAnnotation) {\n      return;\n    }\n\n    const { handles } = viewportAnnotation.data;\n    const { currentPoints } = evt.detail;\n    const canvasCoords = currentPoints.canvas;\n\n    if (handles.activeOperation === OPERATION.DRAG) {\n      // TRANSLATION\n      // get the annotation of the other viewport which are parallel to the delta shift and are of the same scene\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportDraggableRotatable =\n            this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportDraggableRotatable === true &&\n            viewportAnnotation.data.activeViewportIds.find(\n              (id) => id === otherViewport.id\n            )\n          );\n        }\n      );\n\n      this._applyDeltaShiftToSelectedViewportCameras(\n        renderingEngine,\n        viewportsAnnotationsToUpdate,\n        delta\n      );\n    } else if (handles.activeOperation === OPERATION.ROTATE) {\n      // ROTATION\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportDraggableRotatable =\n            this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportDraggableRotatable === true\n          );\n        }\n      );\n\n      const dir1 = vec2.create();\n      const dir2 = vec2.create();\n\n      const center: Types.Point3 = [\n        this.toolCenter[0],\n        this.toolCenter[1],\n        this.toolCenter[2],\n      ];\n\n      const centerCanvas = viewport.worldToCanvas(center);\n\n      const finalPointCanvas = eventDetail.currentPoints.canvas;\n      const originalPointCanvas = vec2.create();\n      vec2.sub(\n        originalPointCanvas,\n        finalPointCanvas,\n        eventDetail.deltaPoints.canvas\n      );\n      vec2.sub(dir1, originalPointCanvas, <vec2>centerCanvas);\n      vec2.sub(dir2, finalPointCanvas, <vec2>centerCanvas);\n\n      let angle = vec2.angle(dir1, dir2);\n\n      if (\n        this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)\n      ) {\n        angle *= -1;\n      }\n\n      // Rounding the angle to allow rotated handles to be undone\n      // If we don't round and rotate handles clockwise by 0.0131233 radians,\n      // there's no assurance that the counter-clockwise rotation occurs at\n      // precisely -0.0131233, resulting in the drawn annotations being lost.\n      angle = Math.round(angle * 100) / 100;\n\n      const rotationAxis = viewport.getCamera().viewPlaneNormal;\n      // @ts-ignore : vtkjs incorrect typing\n      const { matrix } = vtkMatrixBuilder\n        .buildFromRadian()\n        .translate(center[0], center[1], center[2])\n        // @ts-ignore\n        .rotate(angle, rotationAxis) //todo: why we are passing\n        .translate(-center[0], -center[1], -center[2]);\n\n      const otherViewportsIds = [];\n      // update camera for the other viewports.\n      // NOTE: The lines then are rendered by the onCameraModified\n      viewportsAnnotationsToUpdate.forEach((annotation) => {\n        const { data } = annotation;\n        data.handles.toolCenter = center;\n\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const camera = otherViewport.getCamera();\n        const { viewUp, position, focalPoint } = camera;\n\n        viewUp[0] += position[0];\n        viewUp[1] += position[1];\n        viewUp[2] += position[2];\n\n        vec3.transformMat4(focalPoint, focalPoint, matrix);\n        vec3.transformMat4(position, position, matrix);\n        vec3.transformMat4(viewUp, viewUp, matrix);\n\n        viewUp[0] -= position[0];\n        viewUp[1] -= position[1];\n        viewUp[2] -= position[2];\n\n        otherViewport.setCamera({\n          position,\n          viewUp,\n          focalPoint,\n        });\n        otherViewportsIds.push(otherViewport.id);\n      });\n      renderingEngine.renderViewports(otherViewportsIds);\n    } else if (handles.activeOperation === OPERATION.SLAB) {\n      // SLAB THICKNESS\n      // this should be just the active one under the mouse,\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const referenceAnnotations = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportSlabThicknessControlsOn =\n            this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportSlabThicknessControlsOn === true &&\n            viewportAnnotation.data.activeViewportIds.find(\n              (id) => id === otherViewport.id\n            )\n          );\n        }\n      );\n\n      if (referenceAnnotations.length === 0) {\n        return;\n      }\n      const viewportsAnnotationsToUpdate =\n        this._filterViewportWithSameOrientation(\n          enabledElement,\n          referenceAnnotations[0],\n          annotations\n        );\n\n      const viewportsIds = [];\n      viewportsIds.push(viewport.id);\n      viewportsAnnotationsToUpdate.forEach(\n        (annotation: CrosshairsAnnotation) => {\n          const { data } = annotation;\n\n          const otherViewport = renderingEngine.getViewport(\n            data.viewportId\n          ) as Types.IVolumeViewport;\n          const camera = otherViewport.getCamera();\n          const normal = camera.viewPlaneNormal;\n\n          const dotProd = vtkMath.dot(delta, normal);\n          const projectedDelta: Types.Point3 = [...normal];\n          vtkMath.multiplyScalar(projectedDelta, dotProd);\n\n          if (\n            Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3\n          ) {\n            const mod = Math.sqrt(\n              projectedDelta[0] * projectedDelta[0] +\n                projectedDelta[1] * projectedDelta[1] +\n                projectedDelta[2] * projectedDelta[2]\n            );\n\n            const currentPoint = eventDetail.lastPoints.world;\n            const direction: Types.Point3 = [0, 0, 0];\n\n            const currentCenter: Types.Point3 = [\n              this.toolCenter[0],\n              this.toolCenter[1],\n              this.toolCenter[2],\n            ];\n\n            // use this.toolCenter only if viewportDraggableRotatable\n            const viewportDraggableRotatable =\n              this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportDraggableRotatable) {\n              const { rotationPoints } = this.editData.annotation.data.handles;\n              // Todo: what is a point uid?\n              const otherViewportRotationPoints = rotationPoints.filter(\n                (point) => point[1].uid === otherViewport.id\n              );\n              if (otherViewportRotationPoints.length === 2) {\n                const point1 = viewport.canvasToWorld(\n                  otherViewportRotationPoints[0][3]\n                );\n                const point2 = viewport.canvasToWorld(\n                  otherViewportRotationPoints[1][3]\n                );\n                vtkMath.add(point1, point2, currentCenter);\n                vtkMath.multiplyScalar(<Types.Point3>currentCenter, 0.5);\n              }\n            }\n\n            vtkMath.subtract(currentPoint, currentCenter, direction);\n            const dotProdDirection = vtkMath.dot(direction, normal);\n            const projectedDirection: Types.Point3 = [...normal];\n            vtkMath.multiplyScalar(projectedDirection, dotProdDirection);\n            const normalizedProjectedDirection: Types.Point3 = [\n              projectedDirection[0],\n              projectedDirection[1],\n              projectedDirection[2],\n            ];\n            vec3.normalize(\n              normalizedProjectedDirection,\n              normalizedProjectedDirection\n            );\n            const normalizedProjectedDelta: Types.Point3 = [\n              projectedDelta[0],\n              projectedDelta[1],\n              projectedDelta[2],\n            ];\n            vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);\n\n            let slabThicknessValue = otherViewport.getSlabThickness();\n            if (\n              csUtils.isOpposite(\n                normalizedProjectedDirection,\n                normalizedProjectedDelta,\n                1e-3\n              )\n            ) {\n              slabThicknessValue -= mod;\n            } else {\n              slabThicknessValue += mod;\n            }\n\n            slabThicknessValue = Math.abs(slabThicknessValue);\n            slabThicknessValue = Math.max(\n              RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS,\n              slabThicknessValue\n            );\n\n            const near = this._pointNearReferenceLine(\n              viewportAnnotation,\n              canvasCoords,\n              6,\n              otherViewport\n            );\n\n            if (near) {\n              slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n            }\n\n            // We want to set the slabThickness for the viewport's actors but\n            // since the crosshairs tool instance has configuration regarding which\n            // actorUIDs (in case of volume -> actorUID = volumeIds) to set the\n            // slabThickness for, we need to delegate the slabThickness setting\n            // to the crosshairs tool instance of the toolGroup since configurations\n            // exist on the toolInstance and each toolGroup has its own crosshairs\n            // tool instance (Otherwise, we would need to set this filterActorUIDsToSetSlabThickness at\n            // the viewport level which makes tool and viewport state convoluted).\n            const toolGroup = getToolGroupForViewport(\n              otherViewport.id,\n              renderingEngine.id\n            );\n            const crosshairsInstance = toolGroup.getToolInstance(\n              this.getToolName()\n            );\n            crosshairsInstance.setSlabThickness(\n              otherViewport,\n              slabThicknessValue\n            );\n\n            viewportsIds.push(otherViewport.id);\n          }\n        }\n      );\n      renderingEngine.renderViewports(viewportsIds);\n    }\n  };\n\n  setSlabThickness(viewport, slabThickness) {\n    let actorUIDs;\n    const { filterActorUIDsToSetSlabThickness } = this.configuration;\n    if (\n      filterActorUIDsToSetSlabThickness &&\n      filterActorUIDsToSetSlabThickness.length > 0\n    ) {\n      actorUIDs = filterActorUIDsToSetSlabThickness;\n    }\n\n    let blendModeToUse = this.configuration.slabThicknessBlendMode;\n    if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {\n      blendModeToUse = Enums.BlendModes.COMPOSITE;\n    }\n\n    const immediate = false;\n    viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);\n    viewport.setSlabThickness(slabThickness, actorUIDs);\n  }\n\n  _isClockWise(a, b, c) {\n    // return true if the rotation is clockwise\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;\n  }\n\n  _applyDeltaShiftToSelectedViewportCameras(\n    renderingEngine,\n    viewportsAnnotationsToUpdate,\n    delta\n  ) {\n    // update camera for the other viewports.\n    // NOTE1: The lines then are rendered by the onCameraModified\n    // NOTE2: crosshair center are automatically updated in the onCameraModified event\n    viewportsAnnotationsToUpdate.forEach((annotation) => {\n      this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n    });\n  }\n\n  _applyDeltaShiftToViewportCamera(\n    renderingEngine: Types.IRenderingEngine,\n    annotation,\n    delta\n  ) {\n    // update camera for the other viewports.\n    // NOTE1: The lines then are rendered by the onCameraModified\n    // NOTE2: crosshair center are automatically updated in the onCameraModified event\n    const { data } = annotation;\n\n    const viewport = renderingEngine.getViewport(data.viewportId);\n    const camera = viewport.getCamera();\n    const normal = camera.viewPlaneNormal;\n\n    // Project delta over camera normal\n    // (we don't need to pan, we need only to scroll the camera as in the wheel stack scroll tool)\n    const dotProd = vtkMath.dot(delta, normal);\n    const projectedDelta: Types.Point3 = [...normal];\n    vtkMath.multiplyScalar(projectedDelta, dotProd);\n\n    if (\n      Math.abs(projectedDelta[0]) > 1e-3 ||\n      Math.abs(projectedDelta[1]) > 1e-3 ||\n      Math.abs(projectedDelta[2]) > 1e-3\n    ) {\n      const newFocalPoint: Types.Point3 = [0, 0, 0];\n      const newPosition: Types.Point3 = [0, 0, 0];\n\n      vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n      vtkMath.add(camera.position, projectedDelta, newPosition);\n\n      viewport.setCamera({\n        focalPoint: newFocalPoint,\n        position: newPosition,\n      });\n      viewport.render();\n    }\n  }\n\n  _pointNearReferenceLine = (\n    annotation,\n    canvasCoords,\n    proximity,\n    lineViewport\n  ) => {\n    const { data } = annotation;\n    const { rotationPoints } = data.handles;\n\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      if (otherViewport.id !== lineViewport.id) {\n        continue;\n      }\n\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const lineSegment1 = {\n        start: {\n          x: rotationPoints[i][2][0],\n          y: rotationPoints[i][2][1],\n        },\n        end: {\n          x: rotationPoints[i][3][0],\n          y: rotationPoints[i][3][1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: rotationPoints[i + 1][2][0],\n          y: rotationPoints[i + 1][2][1],\n        },\n        end: {\n          x: rotationPoints[i + 1][3][0],\n          y: rotationPoints[i + 1][3][1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        return true;\n      }\n\n      // rotation handles are two for viewport\n      i++;\n    }\n\n    return false;\n  };\n\n  _getRotationHandleNearImagePoint(\n    viewport,\n    annotation,\n    canvasCoords,\n    proximity\n  ) {\n    const { data } = annotation;\n    const { rotationPoints } = data.handles;\n\n    for (let i = 0; i < rotationPoints.length; i++) {\n      const point = rotationPoints[i][0];\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      if (!viewportDraggableRotatable) {\n        continue;\n      }\n\n      const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n      if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n        data.handles.activeOperation = OPERATION.ROTATE;\n\n        this.editData = {\n          annotation,\n        };\n\n        return point;\n      }\n    }\n\n    return null;\n  }\n\n  _getSlabThicknessHandleNearImagePoint(\n    viewport,\n    annotation,\n    canvasCoords,\n    proximity\n  ) {\n    const { data } = annotation;\n    const { slabThicknessPoints } = data.handles;\n\n    for (let i = 0; i < slabThicknessPoints.length; i++) {\n      const point = slabThicknessPoints[i][0];\n      const otherViewport = slabThicknessPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n      if (!viewportSlabThicknessControlsOn) {\n        continue;\n      }\n\n      const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n      if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n        data.handles.activeOperation = OPERATION.SLAB;\n\n        data.activeViewportIds = [otherViewport.id];\n\n        this.editData = {\n          annotation,\n        };\n\n        return point;\n      }\n    }\n\n    return null;\n  }\n\n  _pointNearTool(element, annotation, canvasCoords, proximity) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { clientWidth, clientHeight } = viewport.canvas;\n    const canvasDiagonalLength = Math.sqrt(\n      clientWidth * clientWidth + clientHeight * clientHeight\n    );\n    const { data } = annotation;\n\n    const { rotationPoints } = data.handles;\n    const { slabThicknessPoints } = data.handles;\n    const viewportIdArray = [];\n\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n      if (!viewportControllable || !viewportDraggableRotatable) {\n        continue;\n      }\n\n      const lineSegment1 = {\n        start: {\n          x: rotationPoints[i][2][0],\n          y: rotationPoints[i][2][1],\n        },\n        end: {\n          x: rotationPoints[i][3][0],\n          y: rotationPoints[i][3][1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: rotationPoints[i + 1][2][0],\n          y: rotationPoints[i + 1][2][1],\n        },\n        end: {\n          x: rotationPoints[i + 1][3][0],\n          y: rotationPoints[i + 1][3][1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        viewportIdArray.push(otherViewport.id);\n        data.handles.activeOperation = OPERATION.DRAG;\n      }\n\n      // rotation handles are two for viewport\n      i++;\n    }\n\n    for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {\n      const otherViewport = slabThicknessPoints[i][1];\n      if (viewportIdArray.find((id) => id === otherViewport.id)) {\n        continue;\n      }\n\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n      if (!viewportControllable || !viewportSlabThicknessControlsOn) {\n        continue;\n      }\n\n      const stPointLineCanvas1 = slabThicknessPoints[i][2];\n      const stPointLineCanvas2 = slabThicknessPoints[i][3];\n\n      const centerCanvas = vec2.create();\n      vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);\n      vec2.scale(centerCanvas, centerCanvas, 0.5);\n\n      const canvasUnitVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasUnitVectorFromCenter,\n        stPointLineCanvas1,\n        centerCanvas\n      );\n      vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n\n      const canvasVectorFromCenterStart = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterStart,\n        canvasUnitVectorFromCenter,\n        canvasDiagonalLength * 0.05\n      );\n\n      const stPointLineCanvas1Start = vec2.create();\n      const stPointLineCanvas2Start = vec2.create();\n      vec2.add(\n        stPointLineCanvas1Start,\n        centerCanvas,\n        canvasVectorFromCenterStart\n      );\n      vec2.subtract(\n        stPointLineCanvas2Start,\n        centerCanvas,\n        canvasVectorFromCenterStart\n      );\n\n      const lineSegment1 = {\n        start: {\n          x: stPointLineCanvas1Start[0],\n          y: stPointLineCanvas1Start[1],\n        },\n        end: {\n          x: stPointLineCanvas1[0],\n          y: stPointLineCanvas1[1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: stPointLineCanvas2Start[0],\n          y: stPointLineCanvas2Start[1],\n        },\n        end: {\n          x: stPointLineCanvas2[0],\n          y: stPointLineCanvas2[1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        viewportIdArray.push(otherViewport.id); // we still need this to draw inactive slab thickness handles\n        data.handles.activeOperation = null; // no operation\n      }\n\n      // slab thickness handles are in couples\n      i++;\n    }\n\n    data.activeViewportIds = [...viewportIdArray];\n\n    this.editData = {\n      annotation,\n    };\n\n    return data.handles.activeOperation === OPERATION.DRAG ? true : false;\n  }\n}\n\nCrosshairsTool.toolName = 'Crosshairs';\nexport default CrosshairsTool;\n","import { BaseTool } from './base';\nimport { Events } from '../enums';\n\nimport { getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { state } from '../store';\nimport { Enums } from '@cornerstonejs/core';\n\nimport {\n  hideElementCursor,\n  resetElementCursor,\n} from '../cursors/elementCursor';\nimport { IPoints } from '../types';\n\nconst MAGNIFY_VIEWPORT_ID = 'magnify-viewport';\n\nclass MagnifyTool extends BaseTool {\n  static toolName;\n  _bounds: any;\n  editData: {\n    referencedImageId: string;\n    viewportIdsToRender: string[];\n    enabledElement: Types.IEnabledElement;\n    renderingEngine: Types.IRenderingEngine;\n    currentPoints: IPoints;\n  } | null;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        magnifySize: 10, // parallel scale , higher more zoom\n        magnifyWidth: 250, //px\n        magnifyHeight: 250, //px\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  _getReferencedImageId(\n    viewport: Types.IStackViewport | Types.IVolumeViewport\n  ): string {\n    const targetId = this.getTargetId(viewport);\n\n    let referencedImageId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    }\n\n    return referencedImageId;\n  }\n\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element, currentPoints } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    if (!(viewport instanceof StackViewport)) {\n      throw new Error('MagnifyTool only works on StackViewports');\n    }\n\n    const referencedImageId = this._getReferencedImageId(viewport);\n\n    if (!referencedImageId) {\n      throw new Error(\n        'MagnifyTool: No referenced image id found, reconstructed planes not supported yet'\n      );\n    }\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      referencedImageId,\n      viewportIdsToRender,\n      enabledElement,\n      renderingEngine,\n      currentPoints,\n    };\n\n    this._createMagnificationViewport();\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  preTouchStartCallback = (evt: EventTypes.InteractionEventType) => {\n    this.preMouseDownCallback(evt);\n  };\n\n  _createMagnificationViewport = () => {\n    const {\n      enabledElement,\n      referencedImageId,\n      viewportIdsToRender,\n      renderingEngine,\n      currentPoints,\n    } = this.editData;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n    const { voiRange } = viewport.getProperties();\n\n    const { canvas: canvasPos, world: worldPos } = currentPoints;\n\n    let magnifyToolElement: HTMLDivElement;\n\n    magnifyToolElement = element.querySelector('.magnifyTool');\n    if (magnifyToolElement === null) {\n      const magnifyElement = document.createElement('div');\n\n      magnifyElement.classList.add('magnifyTool');\n\n      magnifyElement.style.display = 'block';\n      magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;\n      magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;\n      magnifyElement.style.position = 'absolute';\n\n      magnifyToolElement = magnifyElement;\n\n      const viewportElement = element.querySelector('.viewport-element');\n      viewportElement.appendChild(magnifyElement);\n\n      const viewportInput = {\n        viewportId: MAGNIFY_VIEWPORT_ID,\n        type: Enums.ViewportType.STACK,\n        element: magnifyToolElement as HTMLDivElement,\n      };\n\n      renderingEngine.enableElement(viewportInput);\n    }\n\n    // Todo: use CSS transform instead of setting top and left for better performance\n    magnifyToolElement.style.top = `${\n      canvasPos[1] - this.configuration.magnifyHeight / 2\n    }px`;\n    magnifyToolElement.style.left = `${\n      canvasPos[0] - this.configuration.magnifyWidth / 2\n    }px`;\n\n    const magnifyViewport = renderingEngine.getViewport(\n      MAGNIFY_VIEWPORT_ID\n    ) as Types.IStackViewport;\n\n    magnifyViewport.setStack([referencedImageId]).then(() => {\n      // match the original viewport voi range\n      magnifyViewport.setProperties({ voiRange });\n\n      // Use the original viewport for the base for parallelScale\n      const { parallelScale } = viewport.getCamera();\n\n      const { focalPoint, position, viewPlaneNormal } =\n        magnifyViewport.getCamera();\n\n      const distance = Math.sqrt(\n        Math.pow(focalPoint[0] - position[0], 2) +\n          Math.pow(focalPoint[1] - position[1], 2) +\n          Math.pow(focalPoint[2] - position[2], 2)\n      );\n\n      const updatedFocalPoint = <Types.Point3>[\n        worldPos[0],\n        worldPos[1],\n        worldPos[2],\n      ];\n\n      const updatedPosition = <Types.Point3>[\n        updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n        updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n        updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n      ];\n\n      magnifyViewport.setCamera({\n        parallelScale: parallelScale * (1 / this.configuration.magnifySize),\n        focalPoint: updatedFocalPoint,\n        position: updatedPosition,\n      });\n      magnifyViewport.render();\n    });\n\n    magnifyToolElement.style.display = 'block';\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n\n    const { deltaPoints, element, currentPoints } = eventDetail;\n    const deltaPointsWorld = deltaPoints.world;\n    const canvasPos = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n\n    const magnifyElement = element.querySelector(\n      '.magnifyTool'\n    ) as HTMLDivElement;\n\n    if (!magnifyElement) {\n      return;\n    }\n\n    magnifyElement.style.top = `${\n      canvasPos[1] - this.configuration.magnifyHeight / 2\n    }px`;\n    magnifyElement.style.left = `${\n      canvasPos[0] - this.configuration.magnifyWidth / 2\n    }px`;\n\n    const { focalPoint, position } = magnifyViewport.getCamera();\n\n    const updatedPosition = <Types.Point3>[\n      position[0] + deltaPointsWorld[0],\n      position[1] + deltaPointsWorld[1],\n      position[2] + deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] + deltaPointsWorld[0],\n      focalPoint[1] + deltaPointsWorld[1],\n      focalPoint[2] + deltaPointsWorld[2],\n    ];\n\n    magnifyViewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n\n    magnifyViewport.render();\n  };\n\n  _dragEndCallback = (evt: EventTypes.InteractionEventType) => {\n    const { element } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);\n\n    const viewportElement = element.querySelector('.viewport-element');\n\n    const magnifyToolElement = viewportElement.querySelector(\n      '.magnifyTool'\n    ) as HTMLDivElement;\n\n    viewportElement.removeChild(magnifyToolElement);\n\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._dragEndCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._dragEndCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._dragEndCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n}\n\nMagnifyTool.toolName = 'Magnify';\nexport default MagnifyTool;\n","import { vec3 } from 'gl-matrix';\nimport {\n  getRenderingEngines,\n  CONSTANTS,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\n\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\n\nimport { PublicToolProps, ToolProps, SVGDrawingHelper } from '../types';\nimport { ReferenceLineAnnotation } from '../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\n\nconst { EPSILON } = CONSTANTS;\n\n/**\n * @public\n */\n\nclass ReferenceLines extends AnnotationDisplayTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    renderingEngine: any;\n    sourceViewport: any;\n    annotation: ReferenceLineAnnotation;\n  } | null = {} as any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        sourceViewportId: '',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    // this._throttledCalculateCachedStats = throttle(\n    //   this._calculateCachedStats,\n    //   100,\n    //   { trailing: true }\n    // );\n  }\n\n  _init = (): void => {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n\n    // Todo: handle this case where it is too soon to get the rendering engine\n    if (!renderingEngine) {\n      return;\n    }\n\n    let viewports = renderingEngine.getViewports();\n    viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n\n    const sourceViewport = renderingEngine.getViewport(\n      this.configuration.sourceViewportId\n    ) as Types.IVolumeViewport;\n\n    if (!sourceViewport || !sourceViewport.getImageData()) {\n      return;\n    }\n\n    const { element } = sourceViewport;\n    const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();\n\n    const sourceViewportCanvasCornersInWorld =\n      csUtils.getViewportImageCornersInWorld(sourceViewport);\n\n    let annotation = this.editData.annotation;\n    const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();\n\n    if (!annotation) {\n      const newAnnotation: ReferenceLineAnnotation = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n          toolName: this.getToolName(),\n          viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n          viewUp: <Types.Point3>[...viewUp],\n          FrameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          handles: {\n            points: sourceViewportCanvasCornersInWorld,\n          },\n        },\n      };\n\n      addAnnotation(newAnnotation, element);\n      annotation = newAnnotation;\n    } else {\n      this.editData.annotation.data.handles.points =\n        sourceViewportCanvasCornersInWorld;\n    }\n\n    this.editData = {\n      sourceViewport,\n      renderingEngine,\n      annotation,\n    };\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewports\n        .filter((viewport) => viewport.id !== sourceViewport.id)\n        .map((viewport) => viewport.id)\n    );\n  };\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onCameraModified = (evt: Types.EventTypes.CameraModifiedEvent): void => {\n    // If the camera is modified, we need to update the reference lines\n    // we really don't care which viewport triggered the\n    // camera modification, since we want to update all of them\n    // with respect to the targetViewport\n    this._init();\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    const { viewport: targetViewport } = enabledElement;\n    const { annotation, sourceViewport } = this.editData;\n\n    let renderStatus = false;\n\n    if (!sourceViewport) {\n      return renderStatus;\n    }\n\n    if (sourceViewport.id === targetViewport.id) {\n      // If the source viewport is the same as the current viewport, we don't need to render\n      return renderStatus;\n    }\n\n    if (!annotation || !annotation?.data?.handles?.points) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // top left world, top right world, bottom right world, bottom left world\n    const topLeft = annotation.data.handles.points[0];\n    const topRight = annotation.data.handles.points[1];\n    const bottomLeft = annotation.data.handles.points[2];\n    const bottomRight = annotation.data.handles.points[3];\n\n    const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();\n    const { viewPlaneNormal: sourceViewPlaneNormal } =\n      sourceViewport.getCamera();\n\n    if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {\n      // If the source and target viewports are parallel, we don't need to render\n      return renderStatus;\n    }\n\n    const targetViewportPlane = csUtils.planar.planeEquation(\n      viewPlaneNormal,\n      focalPoint\n    );\n\n    // check if the topLeft and bottomLeft line is parallel to the viewUp\n    const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n    const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n\n    let pointSetToUse = pointSet1;\n\n    let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n    topBottomVec = vec3.normalize(vec3.create(), topBottomVec) as Types.Point3;\n\n    let topRightVec = vec3.subtract(vec3.create(), pointSet1[2], pointSet1[0]);\n    topRightVec = vec3.normalize(vec3.create(), topRightVec);\n\n    const newNormal = vec3.cross(\n      vec3.create(),\n      topBottomVec,\n      topRightVec\n    ) as Types.Point3;\n\n    if (this.isParallel(newNormal, viewPlaneNormal)) {\n      return renderStatus;\n    }\n\n    // check if it is perpendicular to the viewPlaneNormal which means\n    // the line does not intersect the viewPlaneNormal\n    if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n      // 'use pointSet2';\n      pointSetToUse = pointSet2;\n    }\n\n    const lineStartWorld = csUtils.planar.linePlaneIntersection(\n      pointSetToUse[0],\n      pointSetToUse[1],\n      targetViewportPlane\n    );\n\n    const lineEndWorld = csUtils.planar.linePlaneIntersection(\n      pointSetToUse[2],\n      pointSetToUse[3],\n      targetViewportPlane\n    );\n    const { annotationUID } = annotation;\n\n    styleSpecifier.annotationUID = annotationUID;\n    const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n    const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n    const color = this.getStyle('color', styleSpecifier, annotation);\n    const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n    const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) =>\n      targetViewport.worldToCanvas(world)\n    );\n\n    const dataId = `${annotationUID}-line`;\n    const lineUID = '1';\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      lineUID,\n      canvasCoordinates[0],\n      canvasCoordinates[1],\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      dataId\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n\n  isPerpendicular = (vec1: Types.Point3, vec2: Types.Point3): boolean => {\n    const dot = vec3.dot(vec1, vec2);\n    return Math.abs(dot) < EPSILON;\n  };\n\n  isParallel(vec1: Types.Point3, vec2: Types.Point3): boolean {\n    return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n  }\n}\n\nReferenceLines.toolName = 'ReferenceLines';\nexport default ReferenceLines;\n","import { Enums } from '@cornerstonejs/core';\n\nconst { CalibrationTypes } = Enums;\nconst PIXEL_UNITS = 'px';\n\n/**\n * Extracts the length units and the type of calibration for those units\n * into the response.  The length units will typically be either mm or px\n * while the calibration type can be any of a number of different calibraiton types.\n *\n * Volumetric images have no calibration type, so are just the raw mm.\n *\n * TODO: Handle region calibration\n *\n * @param handles - used to detect if the spacing information is different\n *   between various points (eg angled ERMF or US Region).\n *   Currently unused, but needed for correct US Region handling\n * @param image - to extract the calibration from\n *        image.calibration - calibration value to extract units form\n * @returns String containing the units and type of calibration\n */\nconst getCalibratedLengthUnits = (handles, image): string => {\n  const { calibration, hasPixelSpacing } = image;\n  // Anachronistic - moving to using calibration consistently, but not completed yet\n  const units = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n  if (!calibration || !calibration.type) return units;\n  if (calibration.type === CalibrationTypes.UNCALIBRATED) return PIXEL_UNITS;\n  // TODO - handle US regions properly\n  if (calibration.SequenceOfUltrasoundRegions) return 'US Region';\n  return `${units} ${calibration.type}`;\n};\n\nconst SQUARE = '\\xb2';\n/**\n *  Extracts the area units, including the squared sign plus calibration type.\n */\nconst getCalibratedAreaUnits = (handles, image): string => {\n  const { calibration, hasPixelSpacing } = image;\n  const units = (hasPixelSpacing ? 'mm' : PIXEL_UNITS) + SQUARE;\n  if (!calibration || !calibration.type) return units;\n  if (calibration.SequenceOfUltrasoundRegions) return 'US Region';\n  return `${units} ${calibration.type}`;\n};\n\n/**\n * Gets the scale divisor for converting from internal spacing to\n * image spacing for calibrated images.\n */\nconst getCalibratedScale = (image) => image.calibration?.scale || 1;\n\n/** Gets the aspect ratio of the screen display relative to the image\n * display in order to square up measurement values.\n * That is, suppose the spacing on the image is 1, 0.5 (x,y spacing)\n * This is displayed at 1, 1 spacing on screen, then the\n * aspect value will be 1/0.5 = 2\n */\nconst getCalibratedAspect = (image) => image.calibration?.aspect || 1;\n\nexport default getCalibratedLengthUnits;\n\nexport {\n  getCalibratedAreaUnits,\n  getCalibratedLengthUnits,\n  getCalibratedScale,\n  getCalibratedAspect,\n};\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Determine the coordinates that will place the textbox to the right of the\n * annotation.\n *\n * @param annotationCanvasPoints - The canvas points of the annotation's handles.\n * @returns - The coordinates for default placement of the textbox.\n */\nexport default function getTextBoxCoordsCanvas(\n  annotationCanvasPoints: Array<Types.Point2>\n): Types.Point2 {\n  const corners = _determineCorners(annotationCanvasPoints);\n  const centerY = (corners.top[1] + corners.bottom[1]) / 2;\n  const textBoxCanvas = <Types.Point2>[corners.right[0], centerY];\n\n  return textBoxCanvas;\n}\n\n/**\n * Determine the handles that have the min/max x and y values.\n *\n * @param canvasPoints - The canvas points of the annotation's handles.\n * @returns - The top, left, bottom, and right handles.\n */\nfunction _determineCorners(canvasPoints: Array<Types.Point2>) {\n  const handlesLeftToRight = [canvasPoints[0], canvasPoints[1]].sort(_compareX);\n  const handlesTopToBottom = [canvasPoints[0], canvasPoints[1]].sort(_compareY);\n  const right = handlesLeftToRight[handlesLeftToRight.length - 1];\n  const top = handlesTopToBottom[0];\n  const bottom = handlesTopToBottom[handlesTopToBottom.length - 1];\n\n  return {\n    top,\n    bottom,\n    right,\n  };\n\n  function _compareX(a, b) {\n    return a[0] < b[0] ? -1 : 1;\n  }\n  function _compareY(a, b) {\n    return a[1] < b[1] ? -1 : 1;\n  }\n}\n","import { vec2, vec3 } from 'gl-matrix';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedLengthUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawLine as drawLineSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { BidirectionalAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n  MouseDragEventType,\n  MouseMoveEventType,\n} from '../../types/EventTypes';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * BidirectionalTool let you draw annotations that measures the length and\n * width at the same time in `mm` unit. It is consisted of two perpendicular lines and\n * a text box. You can use the BidirectionalTool in all planes even in oblique\n * reconstructed planes. Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(BidirectionalTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(BidirectionalTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(BidirectionalTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n */\nclass BidirectionalTool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n  preventHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Bidirectional Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation(\n    evt: EventTypes.InteractionEventType\n  ): BidirectionalAnnotation {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation: BidirectionalAnnotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [\n            // long\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            // short\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          activeHandleIndex: null,\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  }\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: BidirectionalAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // Check long axis\n    let canvasPoint1 = viewport.worldToCanvas(points[0]);\n    let canvasPoint2 = viewport.worldToCanvas(points[1]);\n\n    let line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    let distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    // Check short axis\n    canvasPoint1 = viewport.worldToCanvas(points[2]);\n    canvasPoint2 = viewport.worldToCanvas(points[3]);\n\n    line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Handles the toolSelected callback for bidirectional tool\n   * @param evt - EventTypes.MouseDownEventType\n   * @param annotation - Bidirectional annotation\n   * @param interactionType - interaction type (mouse, touch)\n   */\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: BidirectionalAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * Executes the callback for when mouse has selected a handle (anchor point) of\n   * the bidirectional tool or when the text box has been selected.\n   *\n   * @param evt - EventTypes.MouseDownEventType\n   * @param annotation - Bidirectional annotation\n   * @param handle - Handle index or selected textBox information\n   * @param interactionType - interaction type (mouse, touch)\n   */\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: BidirectionalAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const data = annotation.data;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    hideElementCursor(element);\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * Handles the mouse up action for the bidirectional tool. It can be at the end\n   * of the annotation drawing (MouseUpEventType) or when the user clicks and release\n   * the mouse button instantly which let to the annotation to draw without holding\n   * the mouse button (MouseClickEventType).\n   *\n   * @param evt - mouse up or mouse click event types\n   */\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (this.editData.handleIndex !== undefined) {\n      const { points } = data.handles;\n      const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n      const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n\n      if (secondLineSegmentLength > firstLineSegmentLength) {\n        // Switch points so [0,1] is the long axis and [2,3] is the short axis.\n\n        const longAxis = [[...points[2]], [...points[3]]];\n\n        const shortAxisPoint0 = [...points[0]];\n        const shortAxisPoint1 = [...points[1]];\n\n        // shortAxis[0->1] should be perpendicular (counter-clockwise) to longAxis[0->1]\n        const longAxisVector = vec2.create();\n\n        vec2.set(\n          longAxisVector,\n          longAxis[1][0] - longAxis[0][0],\n          longAxis[1][1] - longAxis[1][0]\n        );\n\n        const counterClockWisePerpendicularToLongAxis = vec2.create();\n\n        vec2.set(\n          counterClockWisePerpendicularToLongAxis,\n          -longAxisVector[1],\n          longAxisVector[0]\n        );\n\n        const currentShortAxisVector = vec2.create();\n\n        vec2.set(\n          currentShortAxisVector,\n          shortAxisPoint1[0] - shortAxisPoint0[0],\n          shortAxisPoint1[1] - shortAxisPoint0[0]\n        );\n\n        let shortAxis;\n\n        if (\n          vec2.dot(\n            currentShortAxisVector,\n            counterClockWisePerpendicularToLongAxis\n          ) > 0\n        ) {\n          shortAxis = [shortAxisPoint0, shortAxisPoint1];\n        } else {\n          shortAxis = [shortAxisPoint1, shortAxisPoint0];\n        }\n\n        data.handles.points = [\n          longAxis[0],\n          longAxis[1],\n          shortAxis[0],\n          shortAxis[1],\n        ];\n      }\n    }\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  /**\n   * @param evt - mouse move event type or mouse drag\n   */\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { worldToCanvas } = viewport;\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    const worldPos = currentPoints.world;\n\n    // Update first move handle\n    data.handles.points[handleIndex] = [...worldPos];\n\n    const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n\n    const canvasCoords = {\n      longLineSegment: {\n        start: {\n          x: canvasCoordPoints[0][0],\n          y: canvasCoordPoints[0][1],\n        },\n        end: {\n          x: canvasCoordPoints[1][0],\n          y: canvasCoordPoints[1][1],\n        },\n      },\n      shortLineSegment: {\n        start: {\n          x: canvasCoordPoints[2][0],\n          y: canvasCoordPoints[2][1],\n        },\n        end: {\n          x: canvasCoordPoints[3][0],\n          y: canvasCoordPoints[3][1],\n        },\n      },\n    };\n\n    // ~~ calculate worldPos of our short axis handles\n    // short axis is perpendicular to long axis, and we set its length to be 2/3 of long axis\n    // (meaning each)\n    const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n\n    const shortAxisDistFromCenter = dist / 3;\n    // Calculate long line's incline\n    const dx =\n      canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n    const dy =\n      canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const vectorX = dx / length;\n    const vectorY = dy / length;\n    // middle point between long line segment's points\n    const xMid =\n      (canvasCoords.longLineSegment.start.x +\n        canvasCoords.longLineSegment.end.x) /\n      2;\n    const yMid =\n      (canvasCoords.longLineSegment.start.y +\n        canvasCoords.longLineSegment.end.y) /\n      2;\n    // short points 1/3 distance from center of long points\n    const startX = xMid + shortAxisDistFromCenter * vectorY;\n    const startY = yMid - shortAxisDistFromCenter * vectorX;\n    const endX = xMid - shortAxisDistFromCenter * vectorY;\n    const endY = yMid + shortAxisDistFromCenter * vectorX;\n\n    // Update perpendicular line segment's points\n    data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n    data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n\n    annotation.invalidated = true;\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.editData.hasMoved = true;\n  };\n\n  /**\n   * Mouse drag to edit annotation callback\n   * @param evt - mouse drag event\n   */\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragModifyHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  /**\n   * Mouse dragging a handle callback\n   * @param evt - mouse drag event\n   */\n  _dragModifyHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { annotation, handleIndex: movingHandleIndex } = this.editData;\n    const { data } = annotation;\n\n    // Moving handle\n    const worldPos = currentPoints.world;\n    const canvasCoordHandlesCurrent = [\n      viewport.worldToCanvas(data.handles.points[0]),\n      viewport.worldToCanvas(data.handles.points[1]),\n      viewport.worldToCanvas(data.handles.points[2]),\n      viewport.worldToCanvas(data.handles.points[3]),\n    ];\n\n    const firstLineSegment = {\n      start: {\n        x: canvasCoordHandlesCurrent[0][0],\n        y: canvasCoordHandlesCurrent[0][1],\n      },\n      end: {\n        x: canvasCoordHandlesCurrent[1][0],\n        y: canvasCoordHandlesCurrent[1][1],\n      },\n    };\n    const secondLineSegment = {\n      start: {\n        x: canvasCoordHandlesCurrent[2][0],\n        y: canvasCoordHandlesCurrent[2][1],\n      },\n      end: {\n        x: canvasCoordHandlesCurrent[3][0],\n        y: canvasCoordHandlesCurrent[3][1],\n      },\n    };\n\n    // Handle we've selected's proposed point\n    const proposedPoint = <Types.Point3>[...worldPos];\n    const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n\n    if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n      const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n\n      const fixedHandleCanvasCoord =\n        canvasCoordHandlesCurrent[fixedHandleIndex];\n\n      const fixedHandleToProposedCoordVec = vec2.set(\n        vec2.create(),\n        proposedCanvasCoord[0] - fixedHandleCanvasCoord[0],\n        proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]\n      );\n\n      const fixedHandleToOldCoordVec = vec2.set(\n        vec2.create(),\n        canvasCoordHandlesCurrent[movingHandleIndex][0] -\n          fixedHandleCanvasCoord[0],\n        canvasCoordHandlesCurrent[movingHandleIndex][1] -\n          fixedHandleCanvasCoord[1]\n      );\n\n      // normalize vector\n      vec2.normalize(\n        fixedHandleToProposedCoordVec,\n        fixedHandleToProposedCoordVec\n      );\n      vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n\n      // Check whether this\n      const proposedFirstLineSegment = {\n        start: {\n          x: fixedHandleCanvasCoord[0],\n          y: fixedHandleCanvasCoord[1],\n        },\n        end: {\n          x: proposedCanvasCoord[0],\n          y: proposedCanvasCoord[1],\n        },\n      };\n\n      // Note: this is the case when we are modifying the long axis line segment\n      // and we make it shorter and shorter until its second half size becomes zero\n      // which basically means that any more modification would make the long axis\n      // second half disappear. In this case, we just bail out and do not update\n      // since we don't want to disrupt the bidirectional shape.\n      if (\n        this._movingLongAxisWouldPutItThroughShortAxis(\n          proposedFirstLineSegment,\n          secondLineSegment\n        )\n      ) {\n        return;\n      }\n\n      const centerOfRotation = fixedHandleCanvasCoord;\n\n      const angle = this._getSignedAngle(\n        fixedHandleToOldCoordVec,\n        fixedHandleToProposedCoordVec\n      );\n\n      // rotate handles around the center of rotation, first translate to origin,\n      // then rotate, then translate back\n      let firstPointX = canvasCoordHandlesCurrent[2][0];\n      let firstPointY = canvasCoordHandlesCurrent[2][1];\n\n      let secondPointX = canvasCoordHandlesCurrent[3][0];\n      let secondPointY = canvasCoordHandlesCurrent[3][1];\n\n      // translate to origin\n      firstPointX -= centerOfRotation[0];\n      firstPointY -= centerOfRotation[1];\n\n      secondPointX -= centerOfRotation[0];\n      secondPointY -= centerOfRotation[1];\n\n      // rotate\n      const rotatedFirstPoint =\n        firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n      const rotatedFirstPointY =\n        firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n\n      const rotatedSecondPoint =\n        secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n      const rotatedSecondPointY =\n        secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n\n      // translate back\n      firstPointX = rotatedFirstPoint + centerOfRotation[0];\n      firstPointY = rotatedFirstPointY + centerOfRotation[1];\n\n      secondPointX = rotatedSecondPoint + centerOfRotation[0];\n      secondPointY = rotatedSecondPointY + centerOfRotation[1];\n\n      // update handles\n      const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n      const newSecondPoint = viewport.canvasToWorld([\n        secondPointX,\n        secondPointY,\n      ]);\n\n      // the fixed handle is the one that is not being moved so we\n      // don't need to update it\n      data.handles.points[movingHandleIndex] = proposedPoint;\n      data.handles.points[2] = newFirstPoint;\n      data.handles.points[3] = newSecondPoint;\n    } else {\n      // Translation manipulator\n      const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n\n      const canvasCoordsCurrent = {\n        longLineSegment: {\n          start: firstLineSegment.start,\n          end: firstLineSegment.end,\n        },\n        shortLineSegment: {\n          start: secondLineSegment.start,\n          end: secondLineSegment.end,\n        },\n      };\n\n      const longLineSegmentVec = vec2.subtract(\n        vec2.create(),\n        [\n          canvasCoordsCurrent.longLineSegment.end.x,\n          canvasCoordsCurrent.longLineSegment.end.y,\n        ],\n        [\n          canvasCoordsCurrent.longLineSegment.start.x,\n          canvasCoordsCurrent.longLineSegment.start.y,\n        ]\n      );\n\n      const longLineSegmentVecNormalized = vec2.normalize(\n        vec2.create(),\n        longLineSegmentVec\n      );\n\n      const proposedToCurrentVec = vec2.subtract(\n        vec2.create(),\n        [proposedCanvasCoord[0], proposedCanvasCoord[1]],\n        [\n          canvasCoordHandlesCurrent[movingHandleIndex][0],\n          canvasCoordHandlesCurrent[movingHandleIndex][1],\n        ]\n      );\n\n      const movementLength = vec2.length(proposedToCurrentVec);\n\n      const angle = this._getSignedAngle(\n        longLineSegmentVecNormalized,\n        proposedToCurrentVec\n      );\n\n      const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n\n      const newTranslatedPoint = vec2.scaleAndAdd(\n        vec2.create(),\n        [\n          canvasCoordHandlesCurrent[translateHandleIndex][0],\n          canvasCoordHandlesCurrent[translateHandleIndex][1],\n        ],\n        longLineSegmentVecNormalized,\n        movementAlongLineSegmentLength\n      );\n\n      // don't update if it passes through the other line segment\n      if (\n        this._movingLongAxisWouldPutItThroughShortAxis(\n          {\n            start: {\n              x: proposedCanvasCoord[0],\n              y: proposedCanvasCoord[1],\n            },\n            end: {\n              x: newTranslatedPoint[0],\n              y: newTranslatedPoint[1],\n            },\n          },\n          {\n            start: {\n              x: canvasCoordsCurrent.longLineSegment.start.x,\n              y: canvasCoordsCurrent.longLineSegment.start.y,\n            },\n            end: {\n              x: canvasCoordsCurrent.longLineSegment.end.x,\n              y: canvasCoordsCurrent.longLineSegment.end.y,\n            },\n          }\n        )\n      ) {\n        return;\n      }\n\n      const intersectionPoint = lineSegment.intersectLine(\n        [proposedCanvasCoord[0], proposedCanvasCoord[1]],\n        [newTranslatedPoint[0], newTranslatedPoint[1]],\n        [firstLineSegment.start.x, firstLineSegment.start.y],\n        [firstLineSegment.end.x, firstLineSegment.end.y]\n      );\n\n      // don't update if it doesn't intersect\n      if (!intersectionPoint) {\n        return;\n      }\n\n      data.handles.points[translateHandleIndex] = viewport.canvasToWorld(\n        newTranslatedPoint as Types.Point2\n      );\n      data.handles.points[movingHandleIndex] = proposedPoint;\n    }\n  };\n\n  /**\n   * Cancels an ongoing drawing of a bidirectional annotation\n   * @param element - HTML Element\n   */\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragDrawCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragDrawCallback as EventListener\n    );\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragModifyCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragModifyCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the bidirectional annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = true;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as BidirectionalAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].unit === undefined\n      ) {\n        data.cachedStats[targetId] = {\n          length: null,\n          width: null,\n          unit: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId1 = `${annotationUID}-line-1`;\n      const dataId2 = `${annotationUID}-line-2`;\n\n      const lineUID = '0';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          lineDash,\n          lineWidth,\n          shadow,\n        },\n        dataId1\n      );\n\n      const secondLineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        secondLineUID,\n        canvasCoordinates[2],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n          shadow,\n        },\n        dataId2\n      );\n\n      renderStatus = true;\n\n      const textLines = this._getTextLines(data, targetId);\n\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _movingLongAxisWouldPutItThroughShortAxis = (\n    firstLineSegment,\n    secondLineSegment\n  ) => {\n    const vectorInSecondLineDirection = vec2.create();\n\n    vec2.set(\n      vectorInSecondLineDirection,\n      secondLineSegment.end.x - secondLineSegment.start.x,\n      secondLineSegment.end.y - secondLineSegment.start.y\n    );\n\n    vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n\n    const extendedSecondLineSegment = {\n      start: {\n        x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n        y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n      },\n      end: {\n        x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n        y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n      },\n    };\n\n    // Add some buffer in the secondLineSegment when finding the proposedIntersectionPoint\n    // Of points to stop us getting stack when rotating quickly.\n\n    const proposedIntersectionPoint = lineSegment.intersectLine(\n      [extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y],\n      [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y],\n      [firstLineSegment.start.x, firstLineSegment.start.y],\n      [firstLineSegment.end.x, firstLineSegment.end.y]\n    );\n\n    const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n\n    return wouldPutThroughShortAxis;\n  };\n\n  /**\n   * get text box content\n   */\n  _getTextLines = (data, targetId) => {\n    const { cachedStats } = data;\n    const { length, width, unit } = cachedStats[targetId];\n\n    if (length === undefined) {\n      return;\n    }\n\n    // spaceBetweenSlices & pixelSpacing &\n    // magnitude in each direction? Otherwise, this is \"px\"?\n    const textLines = [\n      `L: ${roundNumber(length)} ${unit}`,\n      `W: ${roundNumber(width)} ${unit}`,\n    ];\n\n    return textLines;\n  };\n\n  _calculateLength(pos1, pos2) {\n    const dx = pos1[0] - pos2[0];\n    const dy = pos1[1] - pos2[1];\n    const dz = pos1[2] - pos2[2];\n\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  }\n\n  _calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n    const { data } = annotation;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const worldPos3 = data.handles.points[2];\n    const worldPos4 = data.handles.points[3];\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData, dimensions } = image;\n      const scale = getCalibratedScale(image);\n      const dist1 = this._calculateLength(worldPos1, worldPos2) / scale;\n      const dist2 = this._calculateLength(worldPos3, worldPos4) / scale;\n      const length = dist1 > dist2 ? dist1 : dist2;\n      const width = dist1 > dist2 ? dist2 : dist1;\n\n      const index1 = transformWorldToIndex(imageData, worldPos1);\n      const index2 = transformWorldToIndex(imageData, worldPos2);\n      const index3 = transformWorldToIndex(imageData, worldPos3);\n      const index4 = transformWorldToIndex(imageData, worldPos4);\n\n      this._isInsideVolume(index1, index2, index3, index4, dimensions)\n        ? (this.isHandleOutsideImage = false)\n        : (this.isHandleOutsideImage = true);\n\n      cachedStats[targetId] = {\n        length,\n        width,\n        unit: getCalibratedLengthUnits(null, image),\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, index3, index4, dimensions): boolean => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions) &&\n      csUtils.indexWithinDimensions(index3, dimensions) &&\n      csUtils.indexWithinDimensions(index4, dimensions)\n    );\n  };\n\n  _getSignedAngle = (vector1, vector2) => {\n    return Math.atan2(\n      vector1[0] * vector2[1] - vector1[1] * vector2[0],\n      vector1[0] * vector2[0] + vector1[1] * vector2[1]\n    );\n  };\n}\n\nBidirectionalTool.toolName = 'Bidirectional';\nexport default BidirectionalTool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedLengthUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport * as lineSegment from '../../utilities/math/line';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { LengthAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * LengthTool let you draw annotations that measures the length of two drawing\n * points on a slice. You can use the LengthTool in all imaging planes even in oblique\n * reconstructed planes. Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(LengthTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(LengthTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(LengthTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n\n */\n\nclass LengthTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): LengthAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: LengthAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: LengthAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: LengthAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as LengthAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      // Todo: move these into annotationTool class\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      let activeHandleCanvasCoords;\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].unit === undefined\n      ) {\n        data.cachedStats[targetId] = {\n          length: null,\n          unit: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-line`;\n      const lineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n          shadow,\n        },\n        dataId\n      );\n\n      renderStatus = true;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      const textLines = this._getTextLines(data, targetId);\n\n      // Need to update to sync with annotation while unlinked/not moved\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  // text line for the current active length annotation\n  _getTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { length, unit } = cachedVolumeStats;\n\n    // Can be null on load\n    if (length === undefined || length === null || isNaN(length)) {\n      return;\n    }\n\n    const textLines = [`${roundNumber(length)} ${unit}`];\n\n    return textLines;\n  }\n\n  _calculateLength(pos1, pos2) {\n    const dx = pos1[0] - pos2[0];\n    const dy = pos1[1] - pos2[1];\n    const dz = pos1[2] - pos2[2];\n\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  }\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    // TODO clean up, this doesn't need a length per volume, it has no stats derived from volumes.\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData, dimensions } = image;\n      const scale = getCalibratedScale(image);\n\n      const length = this._calculateLength(worldPos1, worldPos2) / scale;\n\n      const index1 = transformWorldToIndex(imageData, worldPos1);\n      const index2 = transformWorldToIndex(imageData, worldPos2);\n\n      this._isInsideVolume(index1, index2, dimensions)\n        ? (this.isHandleOutsideImage = false)\n        : (this.isHandleOutsideImage = true);\n\n      // TODO -> Do we instead want to clip to the bounds of the volume and only include that portion?\n      // Seems like a lot of work for an unrealistic case. At the moment bail out of stat calculation if either\n      // corner is off the canvas.\n\n      // todo: add insideVolume calculation, for removing tool if outside\n      cachedStats[targetId] = {\n        length,\n        unit: getCalibratedLengthUnits(null, image),\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n\n  _isInsideVolume(index1, index2, dimensions) {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  }\n}\n\nLengthTool.toolName = 'Length';\nexport default LengthTool;\n","import { metaData } from '@cornerstonejs/core';\n\ntype ModalityUnitOptions = {\n  isPreScaled: boolean;\n  isSuvScaled: boolean;\n};\n\nfunction getModalityUnit(\n  modality: string,\n  imageId: string,\n  options: ModalityUnitOptions\n): string {\n  if (modality === 'CT') {\n    return 'HU';\n  } else if (modality === 'PT') {\n    return _handlePTModality(imageId, options);\n  } else {\n    return '';\n  }\n}\n\nfunction _handlePTModality(imageId: string, options: ModalityUnitOptions) {\n  if (!options.isPreScaled) {\n    return 'raw';\n  }\n\n  if (options.isSuvScaled) {\n    return 'SUV';\n  }\n\n  const petSeriesModule = metaData.get('petSeriesModule', imageId);\n  return petSeriesModule?.units || 'unitless';\n}\n\nexport { getModalityUnit, ModalityUnitOptions };\n","import {\n  cache,\n  StackViewport,\n  Types,\n  BaseVolumeViewport,\n} from '@cornerstonejs/core';\n\nfunction isViewportPreScaled(\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  targetId: string\n): boolean {\n  if (viewport instanceof BaseVolumeViewport) {\n    const volumeId = targetId.split('volumeId:')[1];\n    const volume = cache.getVolume(volumeId);\n    return !!volume?.scaling && Object.keys(volume.scaling).length > 0;\n  } else if (viewport instanceof StackViewport) {\n    const { preScale } = viewport.getImageData() || {};\n    return !!preScale?.scaled;\n  } else {\n    throw new Error('Viewport is not a valid type');\n  }\n}\n\nexport { isViewportPreScaled };\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { vec2 } from 'gl-matrix';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n  utilities,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { ProbeAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * ProbeTool let you get the underlying voxel value by putting a probe in that\n * location. It will give index of the location and value of the voxel.\n * You can use ProbeTool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Probe tool's text box are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * To use the ProbeTool, you first need to add it to cornerstoneTools, then create\n * a toolGroup and add the ProbeTool to it. Finally, setToolActive on the toolGroup\n *\n * ```js\n * cornerstoneTools.addTool(ProbeTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(ProbeTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(ProbeTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n *\n */\nclass ProbeTool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    newAnnotation?: boolean;\n  } | null;\n  eventDispatchDetail: {\n    viewportId: string;\n    renderingEngineId: string;\n  };\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  // Not necessary for this tool but needs to be defined since it's an abstract\n  // method from the parent class.\n  isPointNearTool(): boolean {\n    return false;\n  }\n\n  toolSelectedCallback() {}\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Probe Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: { points: [<Types.Point3>[...worldPos]] },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      newAnnotation: true,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It checks if the mouse click is near ProveTool, it overwrites the baseAnnotationTool\n   * getHandleNearImagePoint method.\n   *\n   * @param element - The element that the tool is attached to.\n   * @param annotation - The annotation object associated with the annotation\n   * @param canvasCoords - The coordinates of the mouse click on canvas\n   * @param proximity - The distance from the mouse cursor to the point\n   * that is considered \"near\".\n   * @returns The handle that is closest to the cursor, or null if the cursor\n   * is not near any of the handles.\n   */\n  getHandleNearImagePoint(\n    element: HTMLDivElement,\n    annotation: ProbeAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): ToolHandle | undefined {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const point = data.handles.points[0];\n    const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n\n    const near =\n      vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n\n    if (near === true) {\n      return point;\n    }\n  }\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: ProbeAnnotation\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    // Find viewports to render on drag.\n\n    this.editData = {\n      //handle, // This would be useful for other tools with more than one handle\n      annotation,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const { viewportId } = enabledElement;\n    this.eventDispatchDetail = {\n      viewportId,\n      renderingEngineId: renderingEngine.id,\n    };\n\n    this._deactivateModify(element);\n\n    resetElementCursor(element);\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragCallback = (evt) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { data } = annotation;\n\n    data.handles.points[0] = [...worldPos];\n    annotation.invalidated = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the probe annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ProbeAnnotation;\n      const annotationUID = annotation.annotationUID;\n      const data = annotation.data;\n      const point = data.handles.points[0];\n      const canvasCoordinates = viewport.worldToCanvas(point);\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      if (!data.cachedStats[targetId]) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          index: null,\n          value: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n      } else if (annotation.invalidated) {\n        this._calculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related stackViewports data if\n        // they are not at the referencedImageId, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      const handleGroupUID = '0';\n\n      drawHandlesSvg(\n        svgDrawingHelper,\n        annotationUID,\n        handleGroupUID,\n        [canvasCoordinates],\n        { color }\n      );\n\n      renderStatus = true;\n\n      const textLines = this._getTextLines(data, targetId);\n      if (textLines) {\n        const textCanvasCoordinates = [\n          canvasCoordinates[0] + 6,\n          canvasCoordinates[1] - 6,\n        ];\n\n        const textUID = '0';\n        drawTextBoxSvg(\n          svgDrawingHelper,\n          annotationUID,\n          textUID,\n          textLines,\n          [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n          this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n        );\n      }\n    }\n\n    return renderStatus;\n  };\n\n  _getTextLines(data, targetId: string): string[] | undefined {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n\n    if (value === undefined) {\n      return;\n    }\n\n    const textLines = [];\n\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n\n    textLines.push(`${value.toFixed(2)} ${modalityUnit}`);\n\n    return textLines;\n  }\n\n  _calculateCachedStats(\n    annotation,\n    renderingEngine,\n    enabledElement,\n    modalityUnitOptions: ModalityUnitOptions\n  ) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const worldPos = data.handles.points[0];\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata } = image;\n      const scalarData =\n        'getScalarData' in image ? image.getScalarData() : image.scalarData;\n\n      const modality = metadata.Modality;\n      const index = transformWorldToIndex(imageData, worldPos);\n\n      index[0] = Math.round(index[0]);\n      index[1] = Math.round(index[1]);\n      index[2] = Math.round(index[2]);\n\n      if (csUtils.indexWithinDimensions(index, dimensions)) {\n        this.isHandleOutsideImage = false;\n        const yMultiple = dimensions[0];\n        const zMultiple = dimensions[0] * dimensions[1];\n\n        const value =\n          scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\n\n        // Index[2] for stackViewport is always 0, but for visualization\n        // we reset it to be imageId index\n        if (targetId.startsWith('imageId:')) {\n          const imageId = targetId.split('imageId:')[1];\n          const imageURI = csUtils.imageIdToURI(imageId);\n          const viewports = utilities.getViewportsWithImageURI(\n            imageURI,\n            renderingEngineId\n          );\n\n          const viewport = viewports[0];\n\n          index[2] = viewport.getCurrentImageIdIndex();\n        }\n\n        const modalityUnit = getModalityUnit(\n          modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        cachedStats[targetId] = {\n          index,\n          value,\n          Modality: modality,\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n        cachedStats[targetId] = {\n          index,\n          Modality: modality,\n        };\n      }\n\n      annotation.invalidated = false;\n\n      // Dispatching annotation modified\n      const eventType = Events.ANNOTATION_MODIFIED;\n\n      const eventDetail: AnnotationModifiedEventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    return cachedStats;\n  }\n}\n\nProbeTool.toolName = 'Probe';\nexport default ProbeTool;\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  PublicToolProps,\n  SVGDrawingHelper,\n  ToolProps,\n} from '../../types';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport ProbeTool from './ProbeTool';\nimport { ProbeAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\n\nclass DragProbeTool extends ProbeTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    newAnnotation?: boolean;\n  } | null;\n  eventDispatchDetail: {\n    viewportId: string;\n    renderingEngineId: string;\n  };\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  postMouseDownCallback = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const annotation: ProbeAnnotation = {\n      invalidated: true,\n      highlighted: true,\n      isVisible: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: { points: [<Types.Point3>[...worldPos]] },\n        cachedStats: {},\n      },\n    };\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      newAnnotation: true,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  postTouchStartCallback = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    return this.postMouseDownCallback(evt);\n  };\n\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const annotations = this.filterInteractableAnnotationsForElement(\n      viewport.element,\n      [this.editData.annotation]\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const annotation = this.editData.annotation;\n    const annotationUID = annotation.annotationUID;\n    const data = annotation.data;\n    const point = data.handles.points[0];\n    const canvasCoordinates = viewport.worldToCanvas(point);\n\n    styleSpecifier.annotationUID = annotationUID;\n\n    const color = this.getStyle('color', styleSpecifier, annotation);\n\n    const modalityUnitOptions = {\n      isPreScaled: isViewportPreScaled(viewport, targetId),\n\n      isSuvScaled: this.isSuvScaled(\n        viewport,\n        targetId,\n        annotation.metadata.referencedImageId\n      ),\n    };\n\n    if (!data.cachedStats[targetId]) {\n      data.cachedStats[targetId] = {\n        Modality: null,\n        index: null,\n        value: null,\n      };\n\n      this._calculateCachedStats(\n        annotation,\n        renderingEngine,\n        enabledElement,\n        modalityUnitOptions\n      );\n    } else if (annotation.invalidated) {\n      this._calculateCachedStats(\n        annotation,\n        renderingEngine,\n        enabledElement,\n        modalityUnitOptions\n      );\n    }\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const handleGroupUID = '0';\n\n    drawHandlesSvg(\n      svgDrawingHelper,\n      annotationUID,\n      handleGroupUID,\n      [canvasCoordinates],\n      { color }\n    );\n\n    renderStatus = true;\n\n    const textLines = this._getTextLines(data, targetId);\n    if (textLines) {\n      const textCanvasCoordinates = [\n        canvasCoordinates[0] + 6,\n        canvasCoordinates[1] - 6,\n      ];\n\n      const textUID = '0';\n      drawTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textUID,\n        textLines,\n        [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n    }\n\n    return renderStatus;\n  };\n}\n\nDragProbeTool.toolName = 'DragProbe';\nexport default DragProbeTool;\n","import type { Types } from '@cornerstonejs/core';\nimport * as lineSegment from '../line';\n\ntype rectLineSegments = {\n  top: Types.Point2[];\n  right: Types.Point2[];\n  bottom: Types.Point2[];\n  left: Types.Point2[];\n};\n\n/**\n * Given a rectangle left, top, width and height, return an object containing the\n * line segments that make up the rectangle's four sides\n * @param left - The x-coordinate of the left edge of the rectangle.\n * @param top - The y-coordinate of the top edge of the rectangle.\n * @param width - The width of the rectangle.\n * @param height - The height of the rectangle.\n * @returns An object with four keys, each of which contains an array of two\n * points.\n */\nfunction rectToLineSegments(\n  left: number,\n  top: number,\n  width: number,\n  height: number\n): rectLineSegments {\n  const topLineStart: Types.Point2 = [left, top];\n  const topLineEnd: Types.Point2 = [left + width, top];\n\n  const rightLineStart: Types.Point2 = [left + width, top];\n  const rightLineEnd: Types.Point2 = [left + width, top + height];\n\n  const bottomLineStart: Types.Point2 = [left + width, top + height];\n  const bottomLineEnd: Types.Point2 = [left, top + height];\n\n  const leftLineStart: Types.Point2 = [left, top + height];\n  const leftLineEnd: Types.Point2 = [left, top];\n\n  const lineSegments = {\n    top: [topLineStart, topLineEnd],\n    right: [rightLineStart, rightLineEnd],\n    bottom: [bottomLineStart, bottomLineEnd],\n    left: [leftLineStart, leftLineEnd],\n  };\n\n  return lineSegments;\n}\n\n/**\n * Calculates distance of the point to the rectangle. It calculates the minimum\n * distance between the point and each line segment of the rectangle.\n *\n * @param rect - coordinates of the rectangle [left, top, width, height]\n * @param point - [x,y] coordinates of a point\n * @returns\n */\nexport default function distanceToPoint(\n  rect: number[],\n  point: Types.Point2\n): number {\n  if (rect.length !== 4 || point.length !== 2) {\n    throw Error(\n      'rectangle:[left, top, width, height] or point: [x,y] not defined correctly'\n    );\n  }\n\n  const [left, top, width, height] = rect;\n\n  let minDistance = 655535;\n  const lineSegments = rectToLineSegments(left, top, width, height);\n\n  Object.keys(lineSegments).forEach((segment) => {\n    const [lineStart, lineEnd] = lineSegments[segment];\n    const distance = lineSegment.distanceToPoint(lineStart, lineEnd, point);\n\n    if (distance < minDistance) {\n      minDistance = distance;\n    }\n  });\n\n  return minDistance;\n}\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  ToolProps,\n  PublicToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { getModalityUnit } from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * RectangleROIAnnotation let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of a Rectangular region of interest.\n * You can use RectangleROIAnnotation in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. RectangleROI tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(RectangleROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(RectangleROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(RectangleROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n */\nclass RectangleROITool extends AnnotationTool {\n  static toolName;\n\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a RectangleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): RectangleROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: RectangleROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasPoint1 = viewport.worldToCanvas(points[0]);\n    const canvasPoint2 = viewport.worldToCanvas(points[3]);\n\n    const rect = this._getRectangleImageCoordinates([\n      canvasPoint1,\n      canvasPoint2,\n    ]);\n\n    const point = [canvasCoords[0], canvasCoords[1]];\n    const { left, top, width, height } = rect;\n\n    const distanceToPoint = rectangle.distanceToPoint(\n      [left, top, width, height],\n      point as Types.Point2\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: RectangleROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: RectangleROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - Move the text boxes world position\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - Moving tool, so move all points by the world points delta\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { points } = data.handles;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Moving handle.\n      const { currentPoints } = eventDetail;\n      const enabledElement = getEnabledElement(element);\n      const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n      const worldPos = currentPoints.world;\n\n      const { points } = data.handles;\n\n      // Move this handle.\n      points[handleIndex] = [...worldPos];\n\n      let bottomLeftCanvas;\n      let bottomRightCanvas;\n      let topLeftCanvas;\n      let topRightCanvas;\n\n      let bottomLeftWorld;\n      let bottomRightWorld;\n      let topLeftWorld;\n      let topRightWorld;\n\n      switch (handleIndex) {\n        case 0:\n        case 3:\n          // Moving bottomLeft or topRight\n\n          bottomLeftCanvas = worldToCanvas(points[0]);\n          topRightCanvas = worldToCanvas(points[3]);\n\n          bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n          topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n\n          bottomRightWorld = canvasToWorld(bottomRightCanvas);\n          topLeftWorld = canvasToWorld(topLeftCanvas);\n\n          points[1] = bottomRightWorld;\n          points[2] = topLeftWorld;\n\n          break;\n        case 1:\n        case 2:\n          // Moving bottomRight or topLeft\n          bottomRightCanvas = worldToCanvas(points[1]);\n          topLeftCanvas = worldToCanvas(points[2]);\n\n          bottomLeftCanvas = <Types.Point2>[\n            topLeftCanvas[0],\n            bottomRightCanvas[1],\n          ];\n          topRightCanvas = <Types.Point2>[\n            bottomRightCanvas[0],\n            topLeftCanvas[1],\n          ];\n\n          bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n          topRightWorld = canvasToWorld(topRightCanvas);\n\n          points[0] = bottomLeftWorld;\n          points[3] = topRightWorld;\n\n          break;\n      }\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Remove event handlers for the modify event loop, and enable default event propagation.\n   */\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the rectangleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as RectangleROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit === undefined\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          viewPlaneNormal,\n          viewUp,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewPlaneNormal,\n          viewUp,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related stackViewports data if\n        // they are not at the referencedImageId, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-rect`;\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      renderStatus = true;\n\n      const textLines = this._getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _getRectangleImageCoordinates = (\n    points: Array<Types.Point2>\n  ): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n  } => {\n    const [point0, point1] = points;\n\n    return {\n      left: Math.min(point0[0], point1[0]),\n      top: Math.min(point0[1], point1[1]),\n      width: Math.abs(point0[0] - point1[0]),\n      height: Math.abs(point0[1] - point1[1]),\n    };\n  };\n\n  /**\n   * _getTextLines - Returns the Area, mean and std deviation of the area of the\n   * target volume enclosed by the rectangle.\n   *\n   * @param data - The annotation tool-specific data.\n   * @param targetId - The volumeId of the volume to display the stats for.\n   * @param isPreScaled - Whether the viewport is pre-scaled or not.\n   */\n  _getTextLines = (data, targetId: string): string[] | undefined => {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } =\n      cachedVolumeStats;\n\n    if (mean === undefined) {\n      return;\n    }\n\n    const textLines: string[] = [];\n\n    textLines.push(`Area: ${roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n\n    return textLines;\n  };\n\n  /**\n   * _calculateCachedStats - For each volume in the frame of reference that a\n   * tool instance in particular viewport defines as its target volume, find the\n   * volume coordinates (i,j,k) being probed by the two corners. One of i,j or k\n   * will be constant across the two points. In the other two directions iterate\n   * over the voxels and calculate the first and second-order statistics.\n   *\n   * @param data - The annotation tool-specific data.\n   * @param viewPlaneNormal - The normal vector of the camera.\n   * @param viewUp - The viewUp vector of the camera.\n   */\n  _calculateCachedStats = (\n    annotation,\n    viewPlaneNormal,\n    viewUp,\n    renderingEngine,\n    enabledElement,\n    modalityUnitOptions\n  ) => {\n    const { data } = annotation;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[3];\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata } = image;\n      const scalarData =\n        'getScalarData' in image ? image.getScalarData() : image.scalarData;\n\n      const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        this.isHandleOutsideImage = false;\n\n        // Calculate index bounds to iterate over\n\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n        const scale = getCalibratedScale(image);\n\n        const area = Math.abs(worldWidth * worldHeight) / (scale * scale);\n\n        let count = 0;\n        let mean = 0;\n        let stdDev = 0;\n        let max = -Infinity;\n\n        const yMultiple = dimensions[0];\n        const zMultiple = dimensions[0] * dimensions[1];\n\n        //Todo: this can be replaced by pointInShapeCallback....\n        // This is a triple loop, but one of these 3 values will be constant\n        // In the planar view.\n        for (let k = kMin; k <= kMax; k++) {\n          for (let j = jMin; j <= jMax; j++) {\n            for (let i = iMin; i <= iMax; i++) {\n              const value = scalarData[k * zMultiple + j * yMultiple + i];\n\n              if (value > max) {\n                max = value;\n              }\n\n              count++;\n              mean += value;\n            }\n          }\n        }\n\n        mean /= count;\n\n        for (let k = kMin; k <= kMax; k++) {\n          for (let j = jMin; j <= jMax; j++) {\n            for (let i = iMin; i <= iMax; i++) {\n              const value = scalarData[k * zMultiple + j * yMultiple + i];\n\n              const valueMinusMean = value - mean;\n\n              stdDev += valueMinusMean * valueMinusMean;\n            }\n          }\n        }\n\n        stdDev /= count;\n        stdDev = Math.sqrt(stdDev);\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean,\n          stdDev,\n          max,\n          areaUnit: getCalibratedAreaUnits(null, image),\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n}\n\nRectangleROITool.toolName = 'RectangleROI';\nexport default RectangleROITool;\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Given two world positions and an orthogonal view to an `imageVolume` defined by\n * a `viewPlaneNormal` and a `viewUp`, get the width and height in world coordinates of the rectangle\n * defined by the two points. The implementation works both with orthogonal\n * non-orthogonal rectangles.\n *\n * @param viewPlaneNormal - The normal of the view.\n * @param viewUp - The up direction of the view.\n * @param imageVolume - The imageVolume to use to measure.\n * @param worldPos1 - The first world position.\n * @param worldPos2 - The second world position.\n *\n * @returns The `worldWidth` and `worldHeight`.\n */\nexport default function getWorldWidthAndHeightFromTwoPoints(\n  viewPlaneNormal: Types.Point3,\n  viewUp: Types.Point3,\n  worldPos1: Types.Point3,\n  worldPos2: Types.Point3\n): { worldWidth: number; worldHeight: number } {\n  const viewRight = vec3.create();\n\n  vec3.cross(viewRight, <vec3>viewUp, <vec3>viewPlaneNormal);\n\n  const pos1 = vec3.fromValues(...worldPos1);\n  const pos2 = vec3.fromValues(...worldPos2);\n\n  const diagonal = vec3.create();\n  vec3.subtract(diagonal, pos1, pos2);\n\n  const diagonalLength = vec3.length(diagonal);\n\n  // When the two points are very close to each other return width as 0\n  // to avoid NaN the cosTheta formula calculation\n  if (diagonalLength < 0.0001) {\n    return { worldWidth: 0, worldHeight: 0 };\n  }\n\n  const cosTheta =\n    vec3.dot(diagonal, viewRight) / (diagonalLength * vec3.length(viewRight));\n\n  const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);\n\n  const worldWidth = sinTheta * diagonalLength;\n  const worldHeight = cosTheta * diagonalLength;\n\n  return { worldWidth, worldHeight };\n}\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  eventTarget,\n  triggerEvent,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawCircle as drawCircleSvg,\n  drawEllipse as drawEllipseSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport {\n  pointInEllipse,\n  getCanvasEllipseCorners,\n} from '../../utilities/math/ellipse';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { EllipticalROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n  MouseDragEventType,\n  MouseMoveEventType,\n} from '../../types/EventTypes';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { pointInShapeCallback } from '../../utilities/';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * EllipticalROITool let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of an elliptical region of interest.\n * You can use EllipticalROITool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Elliptical tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * Changing tool configuration (see below) you can make the tool to draw the center\n * point circle with a given radius.\n *\n * ```js\n * cornerstoneTools.addTool(EllipticalROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(EllipticalROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(EllipticalROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n *\n * // draw a circle at the center point with 4px radius.\n * toolGroup.setToolConfiguration(EllipticalROITool.toolName, {\n *   centerPointRadius: 4,\n * });\n * ```\n *\n * Read more in the Docs section of the website.\n */\nclass EllipticalROITool extends AnnotationTool {\n  static toolName;\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    centerCanvas?: Array<number>;\n    canvasWidth?: number;\n    canvasHeight?: number;\n    originalHandleCanvas?: Array<number>;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        // Radius of the circle to draw  at the center point of the ellipse.\n        // Set this zero(0) in order not to draw the circle.\n        centerPointRadius: 0,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a EllipticalROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): EllipticalROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          points: [\n            [...worldPos],\n            [...worldPos],\n            [...worldPos],\n            [...worldPos],\n          ] as [Types.Point3, Types.Point3, Types.Point3, Types.Point3],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n        initialRotation: viewport.getRotation(),\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      centerCanvas: canvasPos,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: EllipticalROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // For some reason Typescript doesn't understand this, so we need to be\n    // more specific about the type\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p)) as [\n      Types.Point2,\n      Types.Point2,\n      Types.Point2,\n      Types.Point2\n    ];\n    const canvasCorners = getCanvasEllipseCorners(canvasCoordinates);\n\n    const [canvasPoint1, canvasPoint2] = canvasCorners;\n\n    const minorEllipse = {\n      left: Math.min(canvasPoint1[0], canvasPoint2[0]) + proximity / 2,\n      top: Math.min(canvasPoint1[1], canvasPoint2[1]) + proximity / 2,\n      width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) - proximity,\n      height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) - proximity,\n    };\n\n    const majorEllipse = {\n      left: Math.min(canvasPoint1[0], canvasPoint2[0]) - proximity / 2,\n      top: Math.min(canvasPoint1[1], canvasPoint2[1]) - proximity / 2,\n      width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) + proximity,\n      height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) + proximity,\n    };\n\n    const pointInMinorEllipse = this._pointInEllipseCanvas(\n      minorEllipse,\n      canvasCoords\n    );\n    const pointInMajorEllipse = this._pointInEllipseCanvas(\n      majorEllipse,\n      canvasCoords\n    );\n\n    if (pointInMajorEllipse && !pointInMinorEllipse) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: EllipticalROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: EllipticalROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    let centerCanvas;\n    let canvasWidth;\n    let canvasHeight;\n    let originalHandleCanvas;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      const { points } = data.handles;\n      const enabledElement = getEnabledElement(element);\n      const { worldToCanvas } = enabledElement.viewport;\n\n      handleIndex = points.findIndex((p) => p === handle);\n\n      const pointsCanvas = points.map(worldToCanvas);\n\n      originalHandleCanvas = pointsCanvas[handleIndex];\n\n      canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);\n      canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);\n\n      centerCanvas = [\n        (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,\n        (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,\n      ];\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      canvasWidth,\n      canvasHeight,\n      centerCanvas,\n      originalHandleCanvas,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    // Elliptical ROI tool should reset its highlight to false on mouse up (as opposed\n    // to other tools that keep it highlighted until the user moves. The reason\n    // is that we use top-left and bottom-right handles to define the ellipse,\n    // and they are by definition not in the ellipse on mouse up.\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n    const { data } = annotation;\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n\n    // Todo: why bottom is -dY, it should be +dY\n    const bottomCanvas = <Types.Point2>[centerCanvas[0], centerCanvas[1] - dY];\n    const topCanvas = <Types.Point2>[centerCanvas[0], centerCanvas[1] + dY];\n    const leftCanvas = <Types.Point2>[centerCanvas[0] - dX, centerCanvas[1]];\n    const rightCanvas = <Types.Point2>[centerCanvas[0] + dX, centerCanvas[1]];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { canvasToWorld } = enabledElement.viewport;\n\n    const {\n      annotation,\n      canvasWidth,\n      canvasHeight,\n      handleIndex,\n      centerCanvas,\n      originalHandleCanvas,\n    } = this.editData;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // Move current point in that direction.\n    // Move other points in opposite direction.\n\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n\n    if (handleIndex === 0 || handleIndex === 1) {\n      // Dragging top or bottom point\n      const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n      const canvasBottom = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] - dYCanvas,\n      ];\n      const canvasTop = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] + dYCanvas,\n      ];\n\n      points[0] = canvasToWorld(canvasBottom);\n      points[1] = canvasToWorld(canvasTop);\n\n      const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];\n      const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;\n      const canvasLeft = <Types.Point2>[\n        centerCanvas[0] - newHalfCanvasWidth,\n        centerCanvas[1],\n      ];\n      const canvasRight = <Types.Point2>[\n        centerCanvas[0] + newHalfCanvasWidth,\n        centerCanvas[1],\n      ];\n\n      points[2] = canvasToWorld(canvasLeft);\n      points[3] = canvasToWorld(canvasRight);\n    } else {\n      // Dragging left or right point\n      const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n      const canvasLeft = <Types.Point2>[\n        centerCanvas[0] - dXCanvas,\n        centerCanvas[1],\n      ];\n      const canvasRight = <Types.Point2>[\n        centerCanvas[0] + dXCanvas,\n        centerCanvas[1],\n      ];\n\n      points[2] = canvasToWorld(canvasLeft);\n      points[3] = canvasToWorld(canvasRight);\n\n      const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];\n      const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;\n      const canvasBottom = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] - newHalfCanvasHeight,\n      ];\n      const canvasTop = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] + newHalfCanvasHeight,\n      ];\n\n      points[0] = canvasToWorld(canvasBottom);\n      points[1] = canvasToWorld(canvasTop);\n    }\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the ellipticalROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as EllipticalROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2, Types.Point2, Types.Point2, Types.Point2];\n\n      const rotation = Math.abs(\n        viewport.getRotation() - (data.initialRotation || 0)\n      );\n      let canvasCorners;\n\n      if (rotation == 90 || rotation == 270) {\n        canvasCorners = <Array<Types.Point2>>getCanvasEllipseCorners([\n          canvasCoordinates[2], // bottom\n          canvasCoordinates[3], // top\n          canvasCoordinates[0], // left\n          canvasCoordinates[1], // right\n        ]);\n      } else {\n        canvasCorners = <Array<Types.Point2>>(\n          getCanvasEllipseCorners(canvasCoordinates) // bottom, top, left, right, keep as is\n        );\n      }\n\n      const { centerPointRadius } = this.configuration;\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit === undefined\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related viewports data, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-ellipse`;\n      const ellipseUID = '0';\n      drawEllipseSvg(\n        svgDrawingHelper,\n        annotationUID,\n        ellipseUID,\n        canvasCorners[0],\n        canvasCorners[1],\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      // draw center point, if \"centerPointRadius\" configuration is valid.\n      if (centerPointRadius > 0) {\n        const minRadius = Math.min(\n          Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, // horizontal radius\n          Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2 // vertical radius\n        );\n        if (minRadius > 3 * centerPointRadius) {\n          const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);\n          drawCircleSvg(\n            svgDrawingHelper,\n            annotationUID,\n            `${ellipseUID}-center`,\n            centerPoint,\n            centerPointRadius,\n            {\n              color,\n              lineDash,\n              lineWidth,\n            }\n          );\n        }\n      }\n\n      renderStatus = true;\n\n      const textLines = this._getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      // Poor man's cached?\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _getTextLines = (data, targetId: string): string[] => {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit } =\n      cachedVolumeStats;\n\n    const textLines: string[] = [];\n\n    if (area) {\n      const areaLine = isEmptyArea\n        ? `Area: Oblique not supported`\n        : `Area: ${roundNumber(area)} ${areaUnit}`;\n      textLines.push(areaLine);\n    }\n\n    if (mean) {\n      textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n    }\n\n    if (max) {\n      textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n    }\n\n    if (stdDev) {\n      textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n    }\n\n    return textLines;\n  };\n\n  _calculateCachedStats = (\n    annotation,\n    viewport,\n    renderingEngine,\n    enabledElement,\n    modalityUnitOptions: ModalityUnitOptions\n  ) => {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n    const [topLeftCanvas, bottomRightCanvas] = <Array<Types.Point2>>(\n      getCanvasEllipseCorners(canvasCoordinates)\n    );\n\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n    const worldPos1 = topLeftWorld;\n    const worldPos2 = bottomRightWorld;\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata, hasPixelSpacing } = image;\n\n      const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const center = [\n          (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n          (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n          (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n        ] as Types.Point3;\n\n        const ellipseObj = {\n          center,\n          xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n          yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n          zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n        };\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n        const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n        const scale = getCalibratedScale(image);\n        const area =\n          Math.abs(Math.PI * (worldWidth / 2) * (worldHeight / 2)) /\n          scale /\n          scale;\n\n        let count = 0;\n        let mean = 0;\n        let stdDev = 0;\n        let max = -Infinity;\n\n        const meanMaxCalculator = ({ value: newValue }) => {\n          if (newValue > max) {\n            max = newValue;\n          }\n\n          mean += newValue;\n          count += 1;\n        };\n\n        pointInShapeCallback(\n          imageData,\n          (pointLPS, pointIJK) => pointInEllipse(ellipseObj, pointLPS),\n          meanMaxCalculator,\n          boundsIJK\n        );\n\n        mean /= count;\n\n        const stdCalculator = ({ value }) => {\n          const valueMinusMean = value - mean;\n\n          stdDev += valueMinusMean * valueMinusMean;\n        };\n\n        pointInShapeCallback(\n          imageData,\n          (pointLPS, pointIJK) => pointInEllipse(ellipseObj, pointLPS),\n          stdCalculator,\n          boundsIJK\n        );\n\n        stdDev /= count;\n        stdDev = Math.sqrt(stdDev);\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean,\n          max,\n          stdDev,\n          isEmptyArea,\n          areaUnit: getCalibratedAreaUnits(null, image),\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n\n  /**\n   * This is a temporary function to use the old ellipse's canvas-based\n   * calculation for isPointNearTool, we should move the the world-based\n   * calculation to the tool's isPointNearTool function.\n   *\n   * @param ellipse - The ellipse object\n   * @param location - The location to check\n   * @returns True if the point is inside the ellipse\n   */\n  _pointInEllipseCanvas(ellipse, location: Types.Point2): boolean {\n    const xRadius = ellipse.width / 2;\n    const yRadius = ellipse.height / 2;\n\n    if (xRadius <= 0.0 || yRadius <= 0.0) {\n      return false;\n    }\n\n    const center = [ellipse.left + xRadius, ellipse.top + yRadius];\n    const normalized = [location[0] - center[0], location[1] - center[1]];\n\n    const inEllipse =\n      (normalized[0] * normalized[0]) / (xRadius * xRadius) +\n        (normalized[1] * normalized[1]) / (yRadius * yRadius) <=\n      1.0;\n\n    return inEllipse;\n  }\n\n  /**\n   * It takes the canvas coordinates of the ellipse corners and returns the center point of it\n   *\n   * @param ellipseCanvasPoints - The coordinates of the ellipse in the canvas.\n   * @returns center point.\n   */\n  _getCanvasEllipseCenter(ellipseCanvasPoints: Types.Point2[]): Types.Point2 {\n    const [bottom, top, left, right] = ellipseCanvasPoints;\n    const topLeft = [left[0], top[1]];\n    const bottomRight = [right[0], bottom[1]];\n    return [\n      (topLeft[0] + bottomRight[0]) / 2,\n      (topLeft[1] + bottomRight[1]) / 2,\n    ] as Types.Point2;\n  }\n}\n\nEllipticalROITool.toolName = 'EllipticalROI';\nexport default EllipticalROITool;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Calculates the distance of a point to another point\n *\n * @param p1 - x,y of the point\n * @param p2 - x,y of the point\n * @returns distance\n */\nexport default function distanceToPoint(\n  p1: Types.Point2,\n  p2: Types.Point2\n): number {\n  if (p1?.length !== 2 || p2?.length !== 2) {\n    throw Error('points should have 2 elements of [x, y]');\n  }\n\n  const [x1, y1] = p1;\n  const [x2, y2] = p2;\n\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n","import { distanceToPoint } from '../point';\nimport { canvasCoordinates } from './_types';\n\n/**\n * It takes the canvas coordinates of the circle corners and returns the top left and bottom right\n * corners of it\n *\n * @param circleCanvasPoints - The coordinates of the circle in the canvas.\n * @returns An array of two points.\n */\nexport default function getCanvasCircleRadius(\n  circleCanvasPoints: canvasCoordinates\n): number {\n  const [center, end] = circleCanvasPoints;\n  return distanceToPoint(center, end);\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { distanceToPoint } from '../point';\nimport { canvasCoordinates } from './_types';\n\n/**\n * It takes the canvas coordinates of the circle corners (wrapping square rectangle)\n * and returns the top left and bottom right\n * corners of it\n *\n * @param circleCanvasPoints - The coordinates of the circle in the canvas.\n * @returns An array of two points.\n */\nexport default function getCanvasCircleCorners(\n  circleCanvasPoints: canvasCoordinates\n): Array<Types.Point2> {\n  const [center, end] = circleCanvasPoints;\n  const radius = distanceToPoint(center, end);\n\n  const topLeft = <Types.Point2>[center[0] - radius, center[1] - radius];\n  const bottomRight = <Types.Point2>[center[0] + radius, center[1] + radius];\n\n  return [topLeft, bottomRight];\n}\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  eventTarget,\n  triggerEvent,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedLengthUnits,\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n  getCalibratedAspect,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawCircle as drawCircleSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { CircleROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n  MouseDragEventType,\n  MouseMoveEventType,\n} from '../../types/EventTypes';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { pointInShapeCallback } from '../../utilities';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport {\n  getCanvasCircleCorners,\n  getCanvasCircleRadius,\n} from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * CircleROITool let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of an elliptical region of interest.\n * You can use CircleROITool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Circle tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * Changing tool configuration (see below) you can make the tool to draw the center\n * point circle with a given radius.\n *\n * ```js\n * cornerstoneTools.addTool(CircleROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(CircleROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(CircleROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n *\n * // draw a circle at the center point with 4px radius.\n * toolGroup.setToolConfiguration(CircleROITool.toolName, {\n *   centerPointRadius: 4,\n * });\n * ```\n *\n * Read more in the Docs section of the website.\n */\nclass CircleROITool extends AnnotationTool {\n  static toolName;\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        // Radius of the circle to draw  at the center point of the circle.\n        // Set this zero(0) in order not to draw the circle.\n        centerPointRadius: 0,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a CircleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): CircleROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          points: [[...worldPos], [...worldPos]] as [\n            Types.Point3, // center\n            Types.Point3 // end\n          ],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: CircleROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // For some reason Typescript doesn't understand this, so we need to be\n    // more specific about the type\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p)) as [\n      Types.Point2,\n      Types.Point2\n    ];\n\n    const radius = getCanvasCircleRadius(canvasCoordinates);\n    const radiusPoint = getCanvasCircleRadius([\n      canvasCoordinates[0],\n      canvasCoords,\n    ]);\n\n    if (Math.abs(radiusPoint - radius) < proximity / 2) return true;\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: CircleROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: CircleROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      const { points } = data.handles;\n\n      handleIndex = points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    // Circle ROI tool should reset its highlight to false on mouse up (as opposed\n    // to other tools that keep it highlighted until the user moves. The reason\n    // is that we use top-left and bottom-right handles to define the circle,\n    // and they are by definition not in the circle on mouse up.\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { data } = annotation;\n\n    data.handles.points = [\n      data.handles.points[0], // center stays\n      canvasToWorld(currentCanvasPoints), // end point moves (changing radius)\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n\n    const { annotation, handleIndex } = this.editData;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => worldToCanvas(p));\n\n    // Move current point in that direction.\n    // Move other points in opposite direction.\n\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n\n    if (handleIndex === 0) {\n      // Dragging center, move the circle ROI\n      const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n      const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n\n      const canvasCenter = currentCanvasPoints as Types.Point2;\n      const canvasEnd = <Types.Point2>[\n        canvasCoordinates[1][0] + dXCanvas,\n        canvasCoordinates[1][1] + dYCanvas,\n      ];\n\n      points[0] = canvasToWorld(canvasCenter);\n      points[1] = canvasToWorld(canvasEnd);\n    } else {\n      // Dragging end point, center stays\n      points[1] = canvasToWorld(currentCanvasPoints);\n    }\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the circleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as CircleROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2, Types.Point2];\n      const center = canvasCoordinates[0];\n      const radius = getCanvasCircleRadius(canvasCoordinates);\n      const canvasCorners = getCanvasCircleCorners(canvasCoordinates);\n\n      const { centerPointRadius } = this.configuration;\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit === undefined\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n          radius: null,\n          radiusUnit: null,\n          perimeter: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement,\n          modalityUnitOptions\n        );\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related viewports data, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-circle`;\n      const circleUID = '0';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID,\n        center,\n        radius,\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      // draw center point, if \"centerPointRadius\" configuration is valid.\n      if (centerPointRadius > 0) {\n        if (radius > 3 * centerPointRadius) {\n          drawCircleSvg(\n            svgDrawingHelper,\n            annotationUID,\n            `${circleUID}-center`,\n            center,\n            centerPointRadius,\n            {\n              color,\n              lineDash,\n              lineWidth,\n            }\n          );\n        }\n      }\n\n      renderStatus = true;\n\n      const textLines = this._getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      // Poor man's cached?\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _getTextLines = (data, targetId: string): string[] => {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const {\n      radius,\n      radiusUnit,\n      area,\n      mean,\n      stdDev,\n      max,\n      isEmptyArea,\n      Modality,\n      areaUnit,\n      modalityUnit,\n    } = cachedVolumeStats;\n\n    const textLines: string[] = [];\n\n    if (radius) {\n      const radiusLine = isEmptyArea\n        ? `Radius: Oblique not supported`\n        : `Radius: ${roundNumber(radius)} ${radiusUnit}`;\n      textLines.push(radiusLine);\n    }\n\n    if (area) {\n      const areaLine = isEmptyArea\n        ? `Area: Oblique not supported`\n        : `Area: ${roundNumber(area)} ${areaUnit}`;\n      textLines.push(areaLine);\n    }\n\n    if (mean) {\n      textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n    }\n\n    if (max) {\n      textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n    }\n\n    if (stdDev) {\n      textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n    }\n\n    return textLines;\n  };\n\n  _calculateCachedStats = (\n    annotation,\n    viewport,\n    renderingEngine,\n    enabledElement,\n    modalityUnitOptions: ModalityUnitOptions\n  ) => {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n    const [topLeftCanvas, bottomRightCanvas] = <Array<Types.Point2>>(\n      getCanvasCircleCorners(canvasCoordinates)\n    );\n\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n    const worldPos1 = topLeftWorld;\n    const worldPos2 = bottomRightWorld;\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata, hasPixelSpacing } = image;\n\n      const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const center = [\n          (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n          (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n          (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n        ] as Types.Point3;\n\n        const ellipseObj = {\n          center,\n          xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n          yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n          zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n        };\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n        const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n        const scale = getCalibratedScale(image);\n        const aspect = getCalibratedAspect(image);\n        const area = Math.abs(\n          Math.PI *\n            (worldWidth / scale / 2) *\n            (worldHeight / aspect / scale / 2)\n        );\n\n        let count = 0;\n        let mean = 0;\n        let stdDev = 0;\n        let max = -Infinity;\n\n        const meanMaxCalculator = ({ value: newValue }) => {\n          if (newValue > max) {\n            max = newValue;\n          }\n\n          mean += newValue;\n          count += 1;\n        };\n\n        pointInShapeCallback(\n          imageData,\n          (pointLPS, pointIJK) => pointInEllipse(ellipseObj, pointLPS),\n          meanMaxCalculator,\n          boundsIJK\n        );\n\n        mean /= count;\n\n        const stdCalculator = ({ value }) => {\n          const valueMinusMean = value - mean;\n\n          stdDev += valueMinusMean * valueMinusMean;\n        };\n\n        pointInShapeCallback(\n          imageData,\n          (pointLPS, pointIJK) => pointInEllipse(ellipseObj, pointLPS),\n          stdCalculator,\n          boundsIJK\n        );\n\n        stdDev /= count;\n        stdDev = Math.sqrt(stdDev);\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean,\n          max,\n          stdDev,\n          isEmptyArea,\n          areaUnit: getCalibratedAreaUnits(null, image),\n          radius: worldWidth / 2 / scale,\n          radiusUnit: getCalibratedLengthUnits(null, image),\n          perimeter: (2 * Math.PI * (worldWidth / 2)) / scale,\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n}\n\nCircleROITool.toolName = 'CircleROI';\nexport default CircleROITool;\n","import { vec2 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Orientation algoritm to determine if two lines cross.\n * Credit and details: geeksforgeeks.org/check-if-two-given-line-segments-intersect/\n */\n\nfunction getAllIntersectionsWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): Types.Point2[] {\n  let initialI;\n  let j;\n  const intersections: Types.Point2[] = [];\n\n  if (closed) {\n    j = points.length - 1;\n    initialI = 0;\n  } else {\n    j = 0;\n    initialI = 1;\n  }\n\n  for (let i = initialI; i < points.length; i++) {\n    const p2 = points[j];\n    const q2 = points[i];\n\n    if (doesIntersect(p1, q1, p2, q2)) {\n      intersections.push([j, i]);\n    }\n\n    j = i;\n  }\n\n  return intersections;\n}\n\n/**\n * Returns all intersections points\n * between a line and a polyline\n */\nfunction getIntersectionCoordinatesWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): Types.Point2[] {\n  const result = [];\n  const polylineIndexes = getAllIntersectionsWithPolyline(\n    points,\n    p1,\n    q1,\n    closed\n  );\n\n  for (let i = 0; i < polylineIndexes.length; i++) {\n    const p2 = points[polylineIndexes[i][0]];\n    const q2 = points[polylineIndexes[i][1]];\n    const intersection = getIntersection(p1, q1, p2, q2);\n    result.push(intersection);\n  }\n  return result;\n}\n\n/**\n * Checks whether the line (`p1`,`q1`) intersects any of the other lines in the\n * `points`, and returns the first value.\n */\nfunction getFirstIntersectionWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): Types.Point2 | undefined {\n  let initialI;\n  let j;\n\n  if (closed) {\n    j = points.length - 1;\n    initialI = 0;\n  } else {\n    j = 0;\n    initialI = 1;\n  }\n\n  for (let i = initialI; i < points.length; i++) {\n    const p2 = points[j];\n    const q2 = points[i];\n\n    if (doesIntersect(p1, q1, p2, q2)) {\n      return [j, i];\n    }\n\n    j = i;\n  }\n}\n\n/**\n * Checks whether the line (`p1`,`q1`) intersects any of the other lines in the\n * `points`, and returns the closest value.\n */\nfunction getClosestIntersectionWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): { segment: Types.Point2; distance: number } | undefined {\n  let initialI;\n  let j;\n\n  if (closed) {\n    j = points.length - 1;\n    initialI = 0;\n  } else {\n    j = 0;\n    initialI = 1;\n  }\n\n  const intersections = [];\n\n  for (let i = initialI; i < points.length; i++) {\n    const p2 = points[j];\n    const q2 = points[i];\n\n    if (doesIntersect(p1, q1, p2, q2)) {\n      intersections.push([j, i]);\n    }\n\n    j = i;\n  }\n\n  if (intersections.length === 0) {\n    return;\n  }\n\n  // Find intersection closest to the start point\n  const distances = [];\n\n  intersections.forEach((intersection) => {\n    const intersectionPoints = [\n      points[intersection[0]],\n      points[intersection[1]],\n    ];\n\n    const midpoint = [\n      (intersectionPoints[0][0] + intersectionPoints[1][0]) / 2,\n      (intersectionPoints[0][1] + intersectionPoints[1][1]) / 2,\n    ];\n\n    distances.push(vec2.distance(<vec2>midpoint, p1));\n  });\n\n  const minDistance = Math.min(...distances);\n  const indexOfMinDistance = distances.indexOf(minDistance);\n\n  return {\n    segment: intersections[indexOfMinDistance],\n    distance: minDistance,\n  };\n}\n\n/**\n * Checks whether the line (`p1`,`q1`) intersects the line (`p2`,`q2`) via an orientation algorithm.\n */\nfunction doesIntersect(\n  p1: Types.Point2,\n  q1: Types.Point2,\n  p2: Types.Point2,\n  q2: Types.Point2\n): boolean {\n  let result = false;\n\n  const orient = [\n    orientation(p1, q1, p2),\n    orientation(p1, q1, q2),\n    orientation(p2, q2, p1),\n    orientation(p2, q2, q1),\n  ];\n\n  // General Case\n  if (orient[0] !== orient[1] && orient[2] !== orient[3]) {\n    return true;\n  }\n\n  // Special Cases\n  if (orient[0] === 0 && onSegment(p1, p2, q1)) {\n    // If p1, q1 and p2 are colinear and p2 lies on segment p1q1\n    result = true;\n  } else if (orient[1] === 0 && onSegment(p1, q2, q1)) {\n    // If p1, q1 and p2 are colinear and q2 lies on segment p1q1\n    result = true;\n  } else if (orient[2] === 0 && onSegment(p2, p1, q2)) {\n    // If p2, q2 and p1 are colinear and p1 lies on segment p2q2\n    result = true;\n  } else if (orient[3] === 0 && onSegment(p2, q1, q2)) {\n    // If p2, q2 and q1 are colinear and q1 lies on segment p2q2\n    result = true;\n  }\n\n  return result;\n}\n\n/**\n * Checks the orientation of 3 points, returns a 0, 1 or 2 based on\n * the orientation of the points.\n */\nfunction orientation(\n  p: Types.Point2,\n  q: Types.Point2,\n  r: Types.Point2\n): number {\n  const orientationValue =\n    (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);\n\n  if (orientationValue === 0) {\n    return 0; // Colinear\n  }\n\n  return orientationValue > 0 ? 1 : 2;\n}\n\n/**\n * Checks if point `q` lies on the segment (`p`,`r`).\n */\nfunction onSegment(p: Types.Point2, q: Types.Point2, r: Types.Point2): boolean {\n  if (\n    q[0] <= Math.max(p[0], r[0]) &&\n    q[0] >= Math.min(p[0], r[0]) &&\n    q[1] <= Math.max(p[1], r[1]) &&\n    q[1] >= Math.min(p[1], r[1])\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Gets the intersection between the line (`p1`,`q1`) and the line (`p2`,`q2`)\n * http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\n * https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line\n */\nfunction getIntersection(\n  p1: Types.Point2,\n  q1: Types.Point2,\n  p2: Types.Point2,\n  q2: Types.Point2\n): Types.Point2 {\n  const denominator =\n    (q2[1] - p2[1]) * (q1[0] - p1[0]) - (q2[0] - p2[0]) * (q1[1] - p1[1]);\n  if (denominator == 0) {\n    return;\n  }\n  let a = p1[1] - p2[1];\n  let b = p1[0] - p2[0];\n  const numerator1 = (q2[0] - p2[0]) * a - (q2[1] - p2[1]) * b;\n  const numerator2 = (q1[0] - p1[0]) * a - (q1[1] - p1[1]) * b;\n  a = numerator1 / denominator;\n  b = numerator2 / denominator;\n\n  const resultX = p1[0] + a * (q1[0] - p1[0]);\n  const resultY = p1[1] + a * (q1[1] - p1[1]);\n\n  return [resultX, resultY];\n}\n\nexport {\n  getAllIntersectionsWithPolyline,\n  getFirstIntersectionWithPolyline,\n  getClosestIntersectionWithPolyline,\n  getIntersectionCoordinatesWithPolyline,\n};\n","import { StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\nconst EPSILON = 1e-3;\n\n/**\n * Gets the desired spacing for points in the polyline for the\n * `PlanarFreehandROITool` in the x and y canvas directions, as well as\n * returning these canvas directions in world space.\n *\n * @param viewport - The Cornerstone3D `StackViewport` or `VolumeViewport`.\n * @param subPixelResolution - The number to divide the image pixel spacing by\n * to get the sub pixel spacing. E.g. `10` will return spacings 10x smaller than\n * the native image spacing.\n * @returns The spacings of the X and Y directions, and the 3D directions of the\n * x and y directions.\n */\nconst getSubPixelSpacingAndXYDirections = (\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  subPixelResolution: number\n): { spacing: Types.Point2; xDir: Types.Point3; yDir: Types.Point3 } => {\n  let spacing;\n  let xDir;\n  let yDir;\n\n  if (viewport instanceof StackViewport) {\n    // Check XY directions\n    const imageData = viewport.getImageData();\n\n    xDir = imageData.direction.slice(0, 3);\n    yDir = imageData.direction.slice(3, 6);\n\n    spacing = imageData.spacing;\n  } else {\n    // Check volume directions\n    const imageData = viewport.getImageData();\n    const { direction, spacing: volumeSpacing } = imageData;\n    const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n    // Calculate size of spacing vector in normal direction\n    const iVector = direction.slice(0, 3) as Types.Point3;\n    const jVector = direction.slice(3, 6) as Types.Point3;\n    const kVector = direction.slice(6, 9) as Types.Point3;\n\n    const viewRight = vec3.create(); // Get the X direction of the viewport\n\n    vec3.cross(viewRight, <vec3>viewUp, <vec3>viewPlaneNormal);\n\n    const absViewRightDotI = Math.abs(vec3.dot(viewRight, iVector));\n    const absViewRightDotJ = Math.abs(vec3.dot(viewRight, jVector));\n    const absViewRightDotK = Math.abs(vec3.dot(viewRight, kVector));\n\n    // Get X spacing\n    let xSpacing;\n    if (Math.abs(1 - absViewRightDotI) < EPSILON) {\n      xSpacing = volumeSpacing[0];\n      xDir = iVector;\n    } else if (Math.abs(1 - absViewRightDotJ) < EPSILON) {\n      xSpacing = volumeSpacing[1];\n      xDir = jVector;\n    } else if (Math.abs(1 - absViewRightDotK) < EPSILON) {\n      xSpacing = volumeSpacing[2];\n      xDir = kVector;\n    } else {\n      throw new Error('No support yet for oblique plane planar contours');\n    }\n\n    const absViewUpDotI = Math.abs(vec3.dot(viewUp, iVector));\n    const absViewUpDotJ = Math.abs(vec3.dot(viewUp, jVector));\n    const absViewUpDotK = Math.abs(vec3.dot(viewUp, kVector));\n\n    // Get Y spacing\n    let ySpacing;\n    if (Math.abs(1 - absViewUpDotI) < EPSILON) {\n      ySpacing = volumeSpacing[0];\n      yDir = iVector;\n    } else if (Math.abs(1 - absViewUpDotJ) < EPSILON) {\n      ySpacing = volumeSpacing[1];\n      yDir = jVector;\n    } else if (Math.abs(1 - absViewUpDotK) < EPSILON) {\n      ySpacing = volumeSpacing[2];\n      yDir = kVector;\n    } else {\n      throw new Error('No support yet for oblique plane planar contours');\n    }\n\n    spacing = [xSpacing, ySpacing];\n  }\n\n  const subPixelSpacing: Types.Point2 = [\n    spacing[0] / subPixelResolution,\n    spacing[1] / subPixelResolution,\n  ];\n\n  return { spacing: subPixelSpacing, xDir, yDir };\n};\n\nexport default getSubPixelSpacingAndXYDirections;\n","import { vec2 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Returns true if points `p1` and `p2` are within `closeContourProximity`.\n */\nconst pointsAreWithinCloseContourProximity = (\n  p1: Types.Point2,\n  p2: Types.Point2,\n  closeContourProximity: number\n): boolean => {\n  return vec2.dist(p1, p2) < closeContourProximity;\n};\n\nexport default pointsAreWithinCloseContourProximity;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { PlanarFreehandROICommonData } from './planarFreehandROIInternalTypes';\n\n/**\n * Adds one or more points to the array at a resolution defined by the underlying image.\n */\nconst addCanvasPointsToArray = (\n  element: HTMLDivElement,\n  canvasPoints: Types.Point2[],\n  newCanvasPoint: Types.Point2,\n  commonData: PlanarFreehandROICommonData\n): number => {\n  const { xDir, yDir, spacing } = commonData;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const lastWorldPos = viewport.canvasToWorld(\n    canvasPoints[canvasPoints.length - 1]\n  );\n  const newWorldPos = viewport.canvasToWorld(newCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, newWorldPos, lastWorldPos);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  const numPointsToAdd = Math.max(\n    Math.floor(xDist / spacing[0]),\n    Math.floor(yDist / spacing[0])\n  );\n\n  if (numPointsToAdd > 1) {\n    const lastCanvasPoint = canvasPoints[canvasPoints.length - 1];\n\n    const canvasDist = vec2.dist(lastCanvasPoint, newCanvasPoint);\n\n    const canvasDir = vec2.create();\n\n    vec2.subtract(canvasDir, newCanvasPoint, lastCanvasPoint);\n\n    vec2.set(canvasDir, canvasDir[0] / canvasDist, canvasDir[1] / canvasDist);\n\n    const distPerPoint = canvasDist / numPointsToAdd;\n\n    for (let i = 1; i <= numPointsToAdd; i++) {\n      canvasPoints.push([\n        lastCanvasPoint[0] + distPerPoint * canvasDir[0] * i,\n        lastCanvasPoint[1] + distPerPoint * canvasDir[1] * i,\n      ]);\n    }\n  } else {\n    canvasPoints.push(newCanvasPoint);\n  }\n\n  return numPointsToAdd;\n};\n\nexport default addCanvasPointsToArray;\n","import type { Types } from '@cornerstonejs/core';\nimport { vec2 } from 'gl-matrix';\n\n/**\n * Returns `true` if the point `p` can project onto point (`p1`, `p2`), and if\n * this projected point is less than `proximity` units away.\n */\nconst pointCanProjectOnLine = (\n  p: Types.Point2,\n  p1: Types.Point2,\n  p2: Types.Point2,\n  proximity: number\n): boolean => {\n  // Perfom checks in order of computational complexity.\n  const p1p = [p[0] - p1[0], p[1] - p1[1]];\n  const p1p2 = [p2[0] - p1[0], p2[1] - p1[1]];\n\n  const dot = p1p[0] * p1p2[0] + p1p[1] * p1p2[1];\n\n  // Dot product needs to be positive to be a candidate for projection onto line segment.\n  if (dot < 0) {\n    return false;\n  }\n\n  const p1p2Mag = Math.sqrt(p1p2[0] * p1p2[0] + p1p2[1] * p1p2[1]);\n\n  if (p1p2Mag === 0) {\n    return false;\n  }\n\n  const projectionVectorMag = dot / p1p2Mag;\n  const p1p2UnitVector = [p1p2[0] / p1p2Mag, p1p2[1] / p1p2Mag];\n  const projectionVector = [\n    p1p2UnitVector[0] * projectionVectorMag,\n    p1p2UnitVector[1] * projectionVectorMag,\n  ];\n  const projectionPoint = <Types.Point2>[\n    p1[0] + projectionVector[0],\n    p1[1] + projectionVector[1],\n  ];\n\n  const distance = vec2.distance(p, projectionPoint);\n\n  if (distance > proximity) {\n    // point is too far away.\n    return false;\n  }\n\n  // Check projects onto line segment.\n  if (vec2.distance(p1, projectionPoint) > vec2.distance(p1, p2)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default pointCanProjectOnLine;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Calculates the area of an array of `Point2` points using the shoelace algorithm.\n *\n * The units of the area are in the same units as the points are in. E.g. if\n * the points are in canvas, then the result is in canvas pixels ^2; If they are\n * in mm, then the result is in mm^2; etc.\n */\nexport default function calculateAreaOfPoints(points: Types.Point2[]): number {\n  // Shoelace algorithm.\n  const n = points.length;\n  let area = 0.0;\n  let j = n - 1;\n\n  for (let i = 0; i < n; i++) {\n    area += (points[j][0] + points[i][0]) * (points[j][1] - points[i][1]);\n    j = i; // j is previous vertex to i\n  }\n\n  // Return absolute value of half the sum (half as summing up traingles).\n  return Math.abs(area / 2.0);\n}\n","import { Types } from '@cornerstonejs/core';\nimport { interpolatePoints } from './algorithms/bspline';\n\n/**\n * Returns a list of uniform distributed values. This list contains the max amount of values which has at least a minimum distance between two consecutive values.\n * minDistributionDistance means the min distance between two consecutive distributed values.\n * Closed interval contains the min/max values.\n *\n * Formula for reference\n * For given {x ∈ R | x ≥ 0} and {minDis ∈ R | minDis ≥ 0}, ∃ D(x) where D(x) ≥ a and D(x) ≤ b  =>\n *         |\n * D(x)  = |                  (b - a)\n *         |  round( ------------------------ * x  )   + a\n *         |                (b - a + 1)\n *         |        round( -----------  )\n *         |                 minDis\n */\nfunction getContinuousUniformDistributionValues(\n  minDistributionDistance: number,\n  closedInterval: [number, number]\n): number[] {\n  const result = [];\n  const [intervalIni, intervalEnd] = closedInterval;\n\n  const intervalSize = intervalEnd - intervalIni + 1;\n  const intensity = Math.floor(intervalSize / minDistributionDistance);\n\n  let x = 0;\n  let continuosDistributionValue =\n    Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n\n  while (continuosDistributionValue <= intervalEnd) {\n    result.push(continuosDistributionValue);\n    x++;\n    continuosDistributionValue =\n      Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n  }\n\n  return result;\n}\n\n/**\n * Interpolates a segment of points from iniIndex until endIndex.\n * The process of interpolation considers the param knotsRatioPercentage as being the percentage of points from Segment that are likely to be considered.\n * By default it uses b-spline algorithm.\n * The result total of points is equal to original points.\n */\nexport default function interpolateSegmentPoints(\n  points: (Types.Point2 | Types.Point3)[],\n  iniIndex: number,\n  endIndex: number,\n  knotsRatioPercentage: number\n): (Types.Point2 | Types.Point3)[] {\n  const segmentSize = endIndex - iniIndex + 1;\n\n  const amountOfKnots =\n    Math.floor((knotsRatioPercentage / 100) * segmentSize) ?? 1;\n  const minKnotDistance = Math.floor(segmentSize / amountOfKnots) ?? 1;\n\n  if (isNaN(segmentSize) || !segmentSize || !minKnotDistance) {\n    return points;\n  }\n\n  // segment should be at least the double of desired minKnot distance. This will ensure at there will enough knots to interpolate.\n  if (segmentSize / minKnotDistance < 2) {\n    return points;\n  }\n\n  const interpolationIniIndex = Math.max(0, iniIndex);\n  const interpolationEndIndex = Math.min(points.length - 1, endIndex);\n  const segmentPointsUnchangedBeg = points.slice(0, interpolationIniIndex);\n\n  const segmentPointsUnchangedEnd = points.slice(\n    interpolationEndIndex + 1,\n    points.length\n  );\n\n  const knotsIndexes = getContinuousUniformDistributionValues(minKnotDistance, [\n    interpolationIniIndex,\n    interpolationEndIndex,\n  ]);\n\n  const interpolatedPoints = interpolatePoints(points, knotsIndexes);\n\n  return [\n    ...segmentPointsUnchangedBeg,\n    ...interpolatedPoints,\n    ...segmentPointsUnchangedEnd,\n  ];\n}\n","import {\n  interpolateBasis as d3InterpolateBasis,\n  quantize as d3Quantize,\n} from 'd3-interpolate';\nimport { zip as d3Zip } from 'd3-array';\nimport { Types } from '@cornerstonejs/core';\n\nfunction isPoints3D(\n  points: (Types.Point2 | Types.Point3)[]\n): points is Types.Point3[] {\n  return (points as Types.Point3[])[0]?.length === 3;\n}\n\n/**\n * Returns an array of the originalPoints length containing the interpolated data.\n * It interpolates a set of points indexed by knotsIndexes.\n * That is, it DISCARDS all points except those in knotsIndexes. Then, a new set of points is created by using a b-spline on the remaining points, in order to re-create a new set of points.\n */\nexport function interpolatePoints(\n  originalPoints: (Types.Point2 | Types.Point3)[],\n  knotsIndexes: number[]\n): (Types.Point2 | Types.Point3)[] {\n  if (\n    !knotsIndexes ||\n    knotsIndexes.length === 0 ||\n    knotsIndexes.length === originalPoints.length\n  ) {\n    return originalPoints;\n  }\n\n  const n = knotsIndexes[knotsIndexes.length - 1] - knotsIndexes[0] + 1;\n  const xInterpolator = d3InterpolateBasis(\n    knotsIndexes.map((k) => originalPoints[k][0])\n  );\n  const yInterpolator = d3InterpolateBasis(\n    knotsIndexes.map((k) => originalPoints[k][1])\n  );\n\n  if (isPoints3D(originalPoints)) {\n    const zInterpolator = d3InterpolateBasis(\n      knotsIndexes.map((k) => originalPoints[k][2])\n    );\n    return <Types.Point3[]>(\n      d3Zip(\n        d3Quantize(xInterpolator, n),\n        d3Quantize(yInterpolator, n),\n        d3Quantize(zInterpolator, n)\n      )\n    );\n  } else {\n    return <Types.Point2[]>(\n      d3Zip(d3Quantize(xInterpolator, n), d3Quantize(yInterpolator, n))\n    );\n  }\n}\n","import { Types } from '@cornerstonejs/core';\nimport { point } from '../math';\nimport interpolateSegmentPoints from './interpolation/interpolateSegmentPoints';\n\nexport function shouldInterpolate(configuration: Record<any, any>): boolean {\n  return (\n    configuration?.interpolation?.interpolateOnAdd === true ||\n    configuration?.interpolation?.interpolateOnEdit === true\n  );\n}\n\n/**\n * Tells whether two points are equal by proximity or not as far as interpolation goes.\n */\nfunction isEqualByProximity(pointA, pointB) {\n  return point.distanceToPoint(pointA, pointB) < 0.001;\n}\n\n/**\n * Tells whether two points are strictly equal or not as far as interpolation goes.\n */\nfunction isEqual(pointA, pointB) {\n  return point.distanceToPoint(pointA, pointB) === 0;\n}\n\n/**\n * Finds the indexes of points list and otherPoints list that points are identical.\n */\nfunction findMatchIndexes(\n  points: Types.Point2[],\n  otherPoints: Types.Point2[]\n): [number, number] | undefined {\n  for (let i = 0; i < points.length; i++) {\n    for (let j = 0; j < otherPoints.length; j++) {\n      if (isEqual(points[i], otherPoints[j])) {\n        return [i, j];\n      }\n    }\n  }\n}\n/**\n * Returns the following index value (on circular basis) of index param on the given direction.\n */\nfunction followingIndex(\n  index: number,\n  size: number,\n  direction: number\n): number {\n  return (index + size + direction) % size;\n}\n/**\n * Array of params to be used on circular find next index.\n * The values respresent start index, indexDelimiter, list of points\n */\ntype ListParamsType = [number, number, Types.Point2[]];\n\n/**\n * Circular finding that returns the next index for two list where the criteria is met.\n *\n * It can compare two lists out of sync considering it does a circular iteration over them.\n *\n * @example\n *\n * ```\n * const pointsA = [[0, 1], [1, 3], [1, 5], [1,2]];\n * const pointsB = [[1, 2], [1, 5], [1, 3], [0,0]];\n * let firstParam = [0, 0, pointsA]\n * let secondParam = [1, 1, pointsB]\n * const criteria = (pointA, pointB) => areSamePosition(pointA, pointB)\n * const direction = 1;\n * let result = circularFindNextIndexBy(firstParam, secondParam, criteria,direction);\n * console.log(result);\n * // prints [1, 2]\n * // use this result and find again\n * firstParam = [result[0]+1, result[0], pointsA]\n * secondParam = [result[1]+1, result[1], pointsB]\n * result = circularFindNextIndexBy(firstParam, secondParam, criteria,direction);\n * * // prints [3, 0]\n *\n */\nfunction circularFindNextIndexBy(\n  listParams: ListParamsType,\n  otherListParams: ListParamsType,\n  criteria: (pointA: Types.Point2, pointB: Types.Point2) => boolean,\n  direction: number\n): [number | undefined, number | undefined] {\n  const [, indexDelimiter, points] = listParams;\n  const [, otherIndexDelimiter, otherPoints] = otherListParams;\n\n  const pointsLength = points.length;\n  const otherPointsLength = otherPoints.length;\n\n  let startIndex = listParams[0];\n  let otherStartIndex = otherListParams[0];\n\n  if (\n    !points[startIndex] ||\n    !otherPoints[otherStartIndex] ||\n    !points[indexDelimiter] ||\n    !otherPoints[otherIndexDelimiter]\n  ) {\n    return [undefined, undefined];\n  }\n\n  while (\n    startIndex !== indexDelimiter &&\n    otherStartIndex !== otherIndexDelimiter\n  ) {\n    if (criteria(otherPoints[otherStartIndex], points[startIndex])) {\n      return [startIndex, otherStartIndex];\n    }\n\n    startIndex = followingIndex(startIndex, pointsLength, direction);\n    otherStartIndex = followingIndex(\n      otherStartIndex,\n      otherPointsLength,\n      direction\n    );\n  }\n\n  return [undefined, undefined];\n}\n\n/**\n * Given two list it will find the first and last index of segment from points that diverges from previousPoints\n */\nfunction findChangedSegment(\n  points: Types.Point2[],\n  previousPoints: Types.Point2[]\n): [number, number] {\n  const [firstMatchIndex, previousFirstMatchIndex] =\n    findMatchIndexes(points, previousPoints) || [];\n\n  const toBeNotEqualCriteria = (pointA, pointB) =>\n    isEqualByProximity(pointA, pointB) === false;\n\n  const [lowDiffIndex, lowOtherDiffIndex] = circularFindNextIndexBy(\n    [\n      followingIndex(firstMatchIndex, points.length, 1),\n      firstMatchIndex,\n      points,\n    ],\n    [\n      followingIndex(previousFirstMatchIndex, previousPoints.length, 1),\n      previousFirstMatchIndex,\n      previousPoints,\n    ],\n    toBeNotEqualCriteria,\n    1\n  );\n\n  const [highIndex] = circularFindNextIndexBy(\n    [followingIndex(lowDiffIndex, points.length, -1), lowDiffIndex, points],\n    [\n      followingIndex(lowOtherDiffIndex, previousPoints.length, -1),\n      lowOtherDiffIndex,\n      previousPoints,\n    ],\n    toBeNotEqualCriteria,\n    -1\n  );\n\n  return [lowDiffIndex, highIndex];\n}\n\n/**\n * Interpolates the given list of points. In case there is a pointsOfReference the interpolation will occur only on segment disjoint of two list. I.e list of points from param points that are not on list of points from param pointsOfReference.\n */\nexport function getInterpolatedPoints(\n  configuration: Record<any, any>,\n  points: Types.Point2[],\n  pointsOfReference?: Types.Point2[]\n): Types.Point2[] {\n  const { interpolation } = configuration;\n\n  const result = points;\n\n  if (interpolation) {\n    const {\n      knotsRatioPercentageOnAdd,\n      knotsRatioPercentageOnEdit,\n      interpolateOnAdd = false,\n      interpolateOnEdit = false,\n    } = interpolation;\n\n    const knotsRatioPercentage = pointsOfReference\n      ? knotsRatioPercentageOnEdit\n      : knotsRatioPercentageOnAdd;\n    const isEnabled = pointsOfReference ? interpolateOnEdit : interpolateOnAdd;\n\n    if (isEnabled) {\n      // partial or total interpolation\n      const [changedIniIndex, changedEndIndex] = pointsOfReference\n        ? findChangedSegment(points, pointsOfReference)\n        : [0, points.length - 1];\n\n      // do not interpolate if there is no valid segment\n      if (!points[changedIniIndex] || !points[changedEndIndex]) {\n        return points;\n      }\n\n      return <Types.Point2[]>(\n        interpolateSegmentPoints(\n          points,\n          changedIniIndex,\n          changedEndIndex,\n          knotsRatioPercentage\n        )\n      );\n    }\n  }\n\n  return result;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport { vec2 } from 'gl-matrix';\n\n/**\n * Finds the length of the longest line from the midpoint of the line\n * that joins the start and end of the open contour, to the surface of the\n * open contour.\n */\nexport default function findOpenUShapedContourVectorToPeak(\n  canvasPoints: Types.Point2[],\n  viewport: Types.IStackViewport | Types.IVolumeViewport\n): Types.Point3[] {\n  // Find chord from first to last point.\n  const first = canvasPoints[0];\n  const last = canvasPoints[canvasPoints.length - 1];\n\n  const firstToLastUnitVector = vec2.create();\n\n  vec2.set(firstToLastUnitVector, last[0] - first[0], last[1] - first[1]);\n  vec2.normalize(firstToLastUnitVector, firstToLastUnitVector);\n\n  // Get the two possible normal vector to this vector\n  // Note: Use the identity that the perpendicular line must have a gradient of\n  // 1 / gradient of the line.\n\n  const normalVector1 = vec2.create();\n  const normalVector2 = vec2.create();\n\n  vec2.set(normalVector1, -firstToLastUnitVector[1], firstToLastUnitVector[0]);\n  vec2.set(normalVector2, firstToLastUnitVector[1], -firstToLastUnitVector[0]);\n\n  // Find the center of the chord.\n  const centerOfFirstToLast: Types.Point2 = [\n    (first[0] + last[0]) / 2,\n    (first[1] + last[1]) / 2,\n  ];\n\n  // Get furthest point.\n\n  const furthest = {\n    dist: 0,\n    index: null,\n  };\n\n  for (let i = 0; i < canvasPoints.length; i++) {\n    const canvasPoint = canvasPoints[i];\n\n    const distance = vec2.dist(canvasPoint, <vec2>centerOfFirstToLast);\n\n    if (distance > furthest.dist) {\n      furthest.dist = distance;\n      furthest.index = i;\n    }\n  }\n\n  const toFurthest: [Types.Point2, Types.Point2] = [\n    canvasPoints[furthest.index],\n    centerOfFirstToLast,\n  ];\n  const toFurthestWorld = toFurthest.map(viewport.canvasToWorld);\n\n  return toFurthestWorld;\n}\n\nexport function findOpenUShapedContourVectorToPeakOnRender(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation\n): Types.Point3[] {\n  const { viewport } = enabledElement;\n  const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n\n  return findOpenUShapedContourVectorToPeak(canvasPoints, viewport);\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../../cursors/elementCursor';\nimport { Events } from '../../../enums';\nimport { EventTypes } from '../../../types';\nimport { state } from '../../../store';\nimport { vec3 } from 'gl-matrix';\nimport {\n  shouldInterpolate,\n  getInterpolatedPoints,\n} from '../../../utilities/planarFreehandROITool/interpolatePoints';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport findOpenUShapedContourVectorToPeak from './findOpenUShapedContourVectorToPeak';\nimport { polyline } from '../../../utilities/math';\nimport { removeAnnotation } from '../../../stateManagement/annotation/annotationState';\n\nconst {\n  addCanvasPointsToArray,\n  pointsAreWithinCloseContourProximity,\n  getFirstIntersectionWithPolyline,\n  getSubPixelSpacingAndXYDirections,\n} = polyline;\n\n/**\n * Activates the contour drawing event loop.\n */\nfunction activateDraw(\n  evt: EventTypes.InteractionEventType,\n  annotation: PlanarFreehandROIAnnotation,\n  viewportIdsToRender: string[]\n): void {\n  this.isDrawing = true;\n\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  this.drawData = {\n    canvasPoints: [canvasPos],\n    polylineIndex: 0,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox: false,\n  };\n\n  state.isInteractingWithTool = true;\n\n  element.addEventListener(Events.MOUSE_UP, this.mouseUpDrawCallback);\n  element.addEventListener(Events.MOUSE_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.MOUSE_CLICK, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_END, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.TOUCH_TAP, this.mouseUpDrawCallback);\n\n  hideElementCursor(element);\n}\n/**\n * Dectivates and cleans up the contour drawing event loop.\n */\nfunction deactivateDraw(element: HTMLDivElement): void {\n  state.isInteractingWithTool = false;\n\n  element.removeEventListener(Events.MOUSE_UP, this.mouseUpDrawCallback);\n  element.removeEventListener(Events.MOUSE_DRAG, this.mouseDragDrawCallback);\n  element.removeEventListener(Events.MOUSE_CLICK, this.mouseUpDrawCallback);\n  element.removeEventListener(Events.TOUCH_END, this.mouseUpDrawCallback);\n  element.removeEventListener(Events.TOUCH_DRAG, this.mouseDragDrawCallback);\n  element.removeEventListener(Events.TOUCH_TAP, this.mouseUpDrawCallback);\n\n  resetElementCursor(element);\n}\n\n/**\n * Adds points to a set of preview canvas points of the contour being created.\n * Checks if crossing of lines means early completion and editing needs to be started.\n */\nfunction mouseDragDrawCallback(evt: EventTypes.InteractionEventType): void {\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const worldPos = currentPoints.world;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n\n  const {\n    annotation,\n    viewportIdsToRender,\n    xDir,\n    yDir,\n    spacing,\n    movingTextBox,\n  } = this.commonData;\n  const { polylineIndex, canvasPoints } = this.drawData;\n\n  const lastCanvasPoint = canvasPoints[canvasPoints.length - 1];\n  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  // Check that we have moved at least one voxel in each direction.\n  if (xDist <= spacing[0] && yDist <= spacing[1]) {\n    // Haven't changed world point enough, don't render\n    return;\n  }\n\n  if (movingTextBox) {\n    this.isDrawing = false;\n\n    // Drag mode - Move the text boxes world position\n    const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n    const worldPosDelta = deltaPoints.world;\n\n    const { textBox } = annotation.data.handles;\n    const { worldPosition } = textBox;\n\n    worldPosition[0] += worldPosDelta[0];\n    worldPosition[1] += worldPosDelta[1];\n    worldPosition[2] += worldPosDelta[2];\n\n    textBox.hasMoved = true;\n  } else {\n    const crossingIndex = this.findCrossingIndexDuringCreate(evt);\n\n    if (crossingIndex !== undefined) {\n      // If we have crossed our drawing line, create a closed contour and then\n      // start an edit.\n      this.applyCreateOnCross(evt, crossingIndex);\n    } else {\n      const numPointsAdded = addCanvasPointsToArray(\n        element,\n        canvasPoints,\n        canvasPos,\n        this.commonData\n      );\n\n      this.drawData.polylineIndex = polylineIndex + numPointsAdded;\n    }\n  }\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Completes the contour on mouse up. If the `allowOpenContours` configuration\n * option is `true`, checks if we should create an open or closed contour.\n * If the `allowOpenContours` configuration option is `false`, always creates a\n * closed contour.\n */\nfunction mouseUpDrawCallback(evt: EventTypes.InteractionEventType): void {\n  const { allowOpenContours } = this.configuration;\n  const { canvasPoints } = this.drawData;\n  const firstPoint = canvasPoints[0];\n  const lastPoint = canvasPoints[canvasPoints.length - 1];\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  if (\n    allowOpenContours &&\n    !pointsAreWithinCloseContourProximity(\n      firstPoint,\n      lastPoint,\n      this.configuration.closeContourProximity\n    )\n  ) {\n    this.completeDrawOpenContour(element);\n  } else {\n    this.completeDrawClosedContour(element);\n  }\n}\n\n/**\n * Completes the contour being drawn, creating a closed contour annotation. It will return true if contour is completed or false in case contour drawing is halted.\n */\nfunction completeDrawClosedContour(element: HTMLDivElement): boolean {\n  this.removeCrossedLinesOnCompleteDraw();\n  const { canvasPoints } = this.drawData;\n\n  // check and halt if necessary the drawing process, last chance to complete drawing and fire events.\n  if (this.haltDrawing(element, canvasPoints)) {\n    return false;\n  }\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  // Convert annotation to world coordinates\n  addCanvasPointsToArray(\n    element,\n    canvasPoints,\n    canvasPoints[0],\n    this.commonData\n  );\n  // Remove last point which will be a duplicate now.\n  canvasPoints.pop();\n\n  const updatedPoints = shouldInterpolate(this.configuration)\n    ? getInterpolatedPoints(this.configuration, canvasPoints)\n    : canvasPoints;\n\n  // Note: -> This is pretty expensive and may not scale well with hundreds of\n  // contours. A future optimisation if we use this for segmentation is to re-do\n  // this rendering with the GPU rather than SVG.\n  const worldPoints = updatedPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = false;\n  const { textBox } = annotation.data.handles;\n\n  if (!textBox.hasMoved) {\n    this.triggerAnnotationCompleted(annotation);\n  }\n\n  this.isDrawing = false;\n  this.drawData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateDraw(element);\n\n  return true;\n}\n\n/**\n * If lines are crossed during the draw loop, remove the points drawn over the\n * crossing.\n */\nfunction removeCrossedLinesOnCompleteDraw(): void {\n  const { canvasPoints } = this.drawData;\n  const numPoints = canvasPoints.length;\n\n  const endToStart = [canvasPoints[0], canvasPoints[numPoints - 1]];\n  const canvasPointsMinusEnds = canvasPoints.slice(0, -1).slice(1);\n\n  const lineSegment = getFirstIntersectionWithPolyline(\n    canvasPointsMinusEnds,\n    endToStart[0],\n    endToStart[1],\n    false\n  );\n\n  if (lineSegment) {\n    const indexToRemoveUpTo = lineSegment[1];\n\n    this.drawData.canvasPoints = canvasPoints.splice(0, indexToRemoveUpTo);\n  }\n}\n\n/**\n * Completes the contour being drawn, creating an open contour annotation. It will return true if contour is completed or false in case contour drawing is halted.\n */\nfunction completeDrawOpenContour(element: HTMLDivElement): boolean {\n  const { canvasPoints } = this.drawData;\n\n  // check and halt if necessary the drawing process, last chance to complete drawing and fire events.\n  if (this.haltDrawing(element, canvasPoints)) {\n    return false;\n  }\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const updatedPoints = shouldInterpolate(this.configuration)\n    ? getInterpolatedPoints(this.configuration, canvasPoints)\n    : canvasPoints;\n\n  // Note: -> This is pretty expensive and may not scale well with hundreds of\n  // contours. A future optimisation if we use this for segmentation is to re-do\n  // this rendering with the GPU rather than SVG.\n  const worldPoints = updatedPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = true;\n  const { textBox } = annotation.data.handles;\n\n  // Add the first and last points to the list of handles. These means they\n  // will render handles on mouse hover.\n  annotation.data.handles.points = [\n    worldPoints[0],\n    worldPoints[worldPoints.length - 1],\n  ];\n\n  // If the annotation is an open U-shaped annotation, find the annotation vector.\n  if (annotation.data.isOpenUShapeContour) {\n    annotation.data.openUShapeContourVectorToPeak =\n      findOpenUShapedContourVectorToPeak(canvasPoints, viewport);\n  }\n\n  if (!textBox.hasMoved) {\n    this.triggerAnnotationCompleted(annotation);\n  }\n\n  this.isDrawing = false;\n  this.drawData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateDraw(element);\n\n  return true;\n}\n\n/**\n * Searches for a crossing of the contour during create. If found, returns the\n * index of the point just before the lines cross.\n */\nfunction findCrossingIndexDuringCreate(\n  evt: EventTypes.InteractionEventType\n): number | undefined {\n  // Note as we super sample the added points, we need to check the whole last mouse move, not the points\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n\n  const { canvasPoints } = this.drawData;\n  const pointsLessLastOne = canvasPoints.slice(0, -1);\n\n  const lineSegment = getFirstIntersectionWithPolyline(\n    pointsLessLastOne,\n    canvasPos,\n    lastCanvasPoint,\n    false\n  );\n\n  if (lineSegment === undefined) {\n    return;\n  }\n\n  const crossingIndex = lineSegment[0];\n\n  return crossingIndex;\n}\n\n/**\n * On crossing of the draw line, create a closed contour, and then start an edit\n * since this occurs during a mouse drag.\n */\nfunction applyCreateOnCross(\n  evt: EventTypes.InteractionEventType,\n  crossingIndex: number\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const { canvasPoints } = this.drawData;\n  const { annotation, viewportIdsToRender } = this.commonData;\n\n  // Add points between the end point and crossing point\n  addCanvasPointsToArray(\n    element,\n    canvasPoints,\n    canvasPoints[crossingIndex],\n    this.commonData\n  );\n  // Remove last point which will be a duplicate now.\n  canvasPoints.pop();\n\n  // Remove points up to just before the crossing index\n  for (let i = 0; i < crossingIndex; i++) {\n    canvasPoints.shift();\n  }\n\n  if (this.completeDrawClosedContour(element)) {\n    // pos complete operation\n    this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);\n  }\n}\n\n/**\n * Completes the contour on a cancel method call during the draw loop.\n */\nfunction cancelDrawing(element: HTMLElement) {\n  const { allowOpenContours } = this.configuration;\n  const { canvasPoints } = this.drawData;\n  const firstPoint = canvasPoints[0];\n  const lastPoint = canvasPoints[canvasPoints.length - 1];\n\n  if (\n    allowOpenContours &&\n    !pointsAreWithinCloseContourProximity(\n      firstPoint,\n      lastPoint,\n      this.configuration.closeContourProximity\n    )\n  ) {\n    this.completeDrawOpenContour(element);\n  } else {\n    this.completeDrawClosedContour(element);\n  }\n}\n\n/**\n * Tell whether a drawing should be halted or not. It will be true when canvas points is less than the minimum required.\n */\nfunction shouldHaltDrawing(\n  canvasPoints: any,\n  subPixelResolution: number\n): boolean {\n  const minPoints = Math.max(\n    /**\n     * The number of points to span 3 voxels in length, this is a realistically\n     * smallest open contour one could reasonably define (2 voxels should probably be a line).\n     */\n    subPixelResolution * 3,\n    /**\n     * Minimum 3 points, there are other annotations for one point (probe)\n     * or 2 points (line), so this comes only from a mistake in practice.\n     */\n    3\n  );\n  return canvasPoints.length < minPoints;\n}\n\n/**\n * Check and halt a drawing for a given event. It returns true in case drawing is halted, otherswise false.\n */\nfunction haltDrawing(element: HTMLDivElement, canvasPoints: any): boolean {\n  const { subPixelResolution } = this.configuration;\n\n  if (shouldHaltDrawing(canvasPoints, subPixelResolution)) {\n    // Remove annotation instead of completing it.\n    const { annotation, viewportIdsToRender } = this.commonData;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    removeAnnotation(annotation.annotationUID);\n\n    this.isDrawing = false;\n    this.drawData = undefined;\n    this.commonData = undefined;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.deactivateDraw(element);\n\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Registers the contour drawing loop to the tool instance.\n */\nfunction registerDrawLoop(toolInstance): void {\n  toolInstance.activateDraw = activateDraw.bind(toolInstance);\n  toolInstance.deactivateDraw = deactivateDraw.bind(toolInstance);\n\n  toolInstance.applyCreateOnCross = applyCreateOnCross.bind(toolInstance);\n  toolInstance.findCrossingIndexDuringCreate =\n    findCrossingIndexDuringCreate.bind(toolInstance);\n  toolInstance.completeDrawOpenContour =\n    completeDrawOpenContour.bind(toolInstance);\n  toolInstance.removeCrossedLinesOnCompleteDraw =\n    removeCrossedLinesOnCompleteDraw.bind(toolInstance);\n  toolInstance.mouseDragDrawCallback = mouseDragDrawCallback.bind(toolInstance);\n  toolInstance.mouseUpDrawCallback = mouseUpDrawCallback.bind(toolInstance);\n  toolInstance.completeDrawClosedContour =\n    completeDrawClosedContour.bind(toolInstance);\n  toolInstance.cancelDrawing = cancelDrawing.bind(toolInstance);\n  toolInstance.haltDrawing = haltDrawing.bind(toolInstance);\n}\n\nexport default registerDrawLoop;\n","import { Types } from '@cornerstonejs/core';\nimport { vec2 } from 'gl-matrix';\nimport { polyline } from '../../../utilities/math';\nimport { EventTypes } from '../../../types';\n\nconst { addCanvasPointsToArray, getFirstIntersectionWithPolyline } = polyline;\n\n/**\n * Check if the `editCanvasPoints` have crossed the `prevCanvasPoints` during\n * an edit.\n *\n * @privateRemarks The following tricks are required to make the UX smooth and\n * the editing not very picky on exactly where you click:\n * - If we don't cross after 2 points, but projecting the line backwards the\n * proximity distance means we cross, extend the line back.\n * - If we travel the full proximity in canvas points but don't cross a line, we\n * are likely drawing along the line, which is intuitive to the user. At this point\n * snap the start of the edit to the closest place on the `prevCanvasPoints`,\n * so that the edit can be executed in-line.\n */\nfunction checkForFirstCrossing(\n  evt: EventTypes.InteractionEventType,\n  isClosedContour: boolean\n): void {\n  const eventDetail = evt.detail;\n  const { element, currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n  const { editCanvasPoints, prevCanvasPoints } = this.editData;\n\n  const crossedLineSegment = getFirstIntersectionWithPolyline(\n    prevCanvasPoints,\n    canvasPos,\n    lastCanvasPoint,\n    isClosedContour\n  );\n\n  if (crossedLineSegment) {\n    this.editData.startCrossingIndex = crossedLineSegment[0];\n\n    // On the first crossing, remove the first lines prior to the crossing\n    this.removePointsUpUntilFirstCrossing(isClosedContour);\n    // prevent continue if there are not the minimum of points for this op.\n  } else if (prevCanvasPoints.length >= 2) {\n    if (\n      editCanvasPoints.length >\n      this.configuration.checkCanvasEditFallbackProximity\n    ) {\n      // At this point, likely we are drawing along the line, we are past the proximity for grabbing.\n      // Search for nearest line segment to the start of the edit.\n      // Set the crossing index to the lower index of the segment.\n\n      const firstEditCanvasPoint = editCanvasPoints[0];\n\n      const distanceIndexPairs = [];\n\n      for (let i = 0; i < prevCanvasPoints.length; i++) {\n        const prevCanvasPoint = prevCanvasPoints[i];\n        const distance = vec2.distance(prevCanvasPoint, firstEditCanvasPoint);\n\n        distanceIndexPairs.push({ distance, index: i });\n      }\n\n      distanceIndexPairs.sort((a, b) => a.distance - b.distance);\n\n      const twoClosestDistanceIndexPairs = [\n        distanceIndexPairs[0],\n        distanceIndexPairs[1],\n      ];\n\n      const lowestIndex = Math.min(\n        twoClosestDistanceIndexPairs[0].index,\n        twoClosestDistanceIndexPairs[1].index\n      );\n\n      this.editData.startCrossingIndex = lowestIndex;\n    } else {\n      // Check if extending a line back 6 (Proximity) canvas pixels would cross a line.\n\n      // Extend point back 6 canvas pixels from first point.\n      const dir = vec2.create();\n\n      vec2.subtract(dir, editCanvasPoints[1], editCanvasPoints[0]);\n      vec2.normalize(dir, dir);\n\n      const proximity = 6;\n\n      const extendedPoint: Types.Point2 = [\n        editCanvasPoints[0][0] - dir[0] * proximity,\n        editCanvasPoints[0][1] - dir[1] * proximity,\n      ];\n\n      const crossedLineSegmentFromExtendedPoint =\n        getFirstIntersectionWithPolyline(\n          prevCanvasPoints,\n          extendedPoint,\n          editCanvasPoints[0],\n          isClosedContour\n        );\n\n      if (crossedLineSegmentFromExtendedPoint) {\n        // Add points.\n        const pointsToPrepend = [extendedPoint];\n\n        addCanvasPointsToArray(\n          element,\n          pointsToPrepend,\n          editCanvasPoints[0],\n          this.commonData\n        );\n\n        editCanvasPoints.unshift(...pointsToPrepend);\n\n        this.removePointsUpUntilFirstCrossing(isClosedContour);\n\n        this.editData.editIndex = editCanvasPoints.length - 1;\n        this.editData.startCrossingIndex =\n          crossedLineSegmentFromExtendedPoint[0];\n      }\n    }\n  }\n}\n\n/**\n * Removes the points from the `editCanvasPoints` up until the first crossing of\n * the `prevCanvasPoints`. This is so we can just insert this line segment\n * into the contour.\n */\nfunction removePointsUpUntilFirstCrossing(isClosedContour: boolean): void {\n  const { editCanvasPoints, prevCanvasPoints } = this.editData;\n  let numPointsToRemove = 0;\n\n  for (let i = 0; i < editCanvasPoints.length - 1; i++) {\n    const firstLine = [editCanvasPoints[i], editCanvasPoints[i + 1]];\n\n    const didCrossLine = !!getFirstIntersectionWithPolyline(\n      prevCanvasPoints,\n      firstLine[0],\n      firstLine[1],\n      isClosedContour\n    );\n\n    // Remove last element\n    numPointsToRemove++;\n\n    if (didCrossLine) {\n      break;\n    }\n  }\n\n  // Remove the points\n  editCanvasPoints.splice(0, numPointsToRemove);\n\n  this.editData.editIndex = editCanvasPoints.length - 1;\n}\n\n/**\n * Returns `true` if the `editCanvasPoints` crosses the `prevCanvasPoints` a\n * second time.\n */\nfunction checkForSecondCrossing(\n  evt: EventTypes.InteractionEventType,\n  isClosedContour: boolean\n): boolean {\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n  const { prevCanvasPoints } = this.editData;\n\n  // Note this method is looking for the first corssing found of\n  // *the lines given* to it. The parameters given to it are specified to search\n  // for the second crossing of the prevCanvasPoints, by checking if the last\n  // mouse drag crossed these. This class method is only called if the edit loop\n  // has already has a crossing earlier in the edit.\n  const crossedLineSegment = getFirstIntersectionWithPolyline(\n    prevCanvasPoints,\n    canvasPos,\n    lastCanvasPoint,\n    isClosedContour\n  );\n\n  if (!crossedLineSegment) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Removes the points from the `editCanvasPoints` after the second crossing of\n * the `prevCanvasPoints`. This is so we can just insert this line segment\n * into the contour.\n */\nfunction removePointsAfterSecondCrossing(isClosedContour: boolean): void {\n  const { prevCanvasPoints, editCanvasPoints } = this.editData;\n\n  // Remove points after the crossing\n  for (let i = editCanvasPoints.length - 1; i > 0; i--) {\n    const lastLine = [editCanvasPoints[i], editCanvasPoints[i - 1]];\n\n    const didCrossLine = !!getFirstIntersectionWithPolyline(\n      prevCanvasPoints,\n      lastLine[0],\n      lastLine[1],\n      isClosedContour\n    );\n\n    // Remove last element\n    editCanvasPoints.pop();\n\n    if (didCrossLine) {\n      break;\n    }\n  }\n}\n\n/**\n * During an edit, finds the index on the `prevCanvasPoints` that the\n * `editCanvasPoints` should snap to to create one continuous contour.\n *\n * Returns the index, but returns -1 if there is no index on the\n * `prevCanvasPoints` that can be snapped to with causing a crossing of the\n * `editCanvasPoints`.\n */\nfunction findSnapIndex(): number {\n  const { editCanvasPoints, prevCanvasPoints, startCrossingIndex } =\n    this.editData;\n\n  if (\n    startCrossingIndex === undefined // Haven't crossed line yet\n  ) {\n    return;\n  }\n\n  const lastEditCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n\n  const distanceIndexPairs = [];\n\n  for (let i = 0; i < prevCanvasPoints.length; i++) {\n    const prevCanvasPoint = prevCanvasPoints[i];\n    const distance = vec2.distance(prevCanvasPoint, lastEditCanvasPoint);\n\n    distanceIndexPairs.push({ distance, index: i });\n  }\n\n  distanceIndexPairs.sort((a, b) => a.distance - b.distance);\n\n  // Search through from shortest distance and check which snap line doesn't\n  // Cross the edit line, in most cases the snap index will just be the first one.\n  const editCanvasPointsLessLastOne = editCanvasPoints.slice(0, -1);\n\n  for (let i = 0; i < distanceIndexPairs.length; i++) {\n    const { index } = distanceIndexPairs[i];\n    const snapCanvasPosition = prevCanvasPoints[index];\n    const lastEditCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n\n    const crossedLineSegment = getFirstIntersectionWithPolyline(\n      editCanvasPointsLessLastOne,\n      snapCanvasPosition,\n      lastEditCanvasPoint,\n      false // The edit line is not a closed contour\n    );\n\n    if (!crossedLineSegment) {\n      return index;\n    }\n  }\n\n  // If all of the lines caused a crossing, this means we should start a new edit.\n  // Use -1 to signify this.\n  return -1;\n}\n\n/**\n * Checks if the `editCanvasPoints` cross themselves. If they do, remove the\n * region after the cross index, these removes isolated \"island\" loops that the\n * user can draw which make closed contours no longer simple polygons, or open\n * contours twisted.\n */\nfunction checkAndRemoveCrossesOnEditLine(\n  evt: EventTypes.InteractionEventType\n): number | undefined {\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n\n  const { editCanvasPoints } = this.editData;\n\n  const editCanvasPointsLessLastOne = editCanvasPoints.slice(0, -2);\n\n  const crossedLineSegment = getFirstIntersectionWithPolyline(\n    editCanvasPointsLessLastOne,\n    canvasPos,\n    lastCanvasPoint,\n    false\n  );\n\n  if (!crossedLineSegment) {\n    return;\n  }\n\n  // We have found a crossing, remove points after the crossing, cutting off\n  // the \"island\" loop drawn.\n\n  const editIndexCrossed = crossedLineSegment[0];\n  const numPointsToRemove = editCanvasPoints.length - editIndexCrossed;\n\n  for (let i = 0; i < numPointsToRemove; i++) {\n    editCanvasPoints.pop();\n  }\n}\n\n/**\n * Registers the contour drawing loop to the tool instance.\n */\nfunction registerEditLoopCommon(toolInstance) {\n  toolInstance.checkForFirstCrossing = checkForFirstCrossing.bind(toolInstance);\n  toolInstance.removePointsUpUntilFirstCrossing =\n    removePointsUpUntilFirstCrossing.bind(toolInstance);\n  toolInstance.checkForSecondCrossing =\n    checkForSecondCrossing.bind(toolInstance);\n  toolInstance.findSnapIndex = findSnapIndex.bind(toolInstance);\n  toolInstance.removePointsAfterSecondCrossing =\n    removePointsAfterSecondCrossing.bind(toolInstance);\n  toolInstance.checkAndRemoveCrossesOnEditLine =\n    checkAndRemoveCrossesOnEditLine.bind(toolInstance);\n}\n\nexport default registerEditLoopCommon;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { state } from '../../../store';\nimport { Events } from '../../../enums';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../../cursors/elementCursor';\nimport { EventTypes } from '../../../types';\nimport { polyline } from '../../../utilities/math';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport {\n  getInterpolatedPoints,\n  shouldInterpolate,\n} from '../../../utilities/planarFreehandROITool/interpolatePoints';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\n\nconst {\n  getSubPixelSpacingAndXYDirections,\n  addCanvasPointsToArray,\n  calculateAreaOfPoints,\n} = polyline;\n\n/**\n * Activates the closed contour edit event loop.\n */\nfunction activateClosedContourEdit(\n  evt: EventTypes.InteractionEventType,\n  annotation: PlanarFreehandROIAnnotation,\n  viewportIdsToRender: string[]\n): void {\n  this.isEditingClosed = true;\n\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const prevCanvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  this.editData = {\n    prevCanvasPoints,\n    editCanvasPoints: [canvasPos],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox: false,\n  };\n\n  state.isInteractingWithTool = true;\n\n  element.addEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  element.addEventListener(\n    Events.TOUCH_END,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  hideElementCursor(element);\n}\n\n/**\n * Dectivates and cleans up the closed contour edit event loop.\n */\nfunction deactivateClosedContourEdit(element: HTMLDivElement): void {\n  state.isInteractingWithTool = false;\n\n  element.removeEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  element.removeEventListener(\n    Events.TOUCH_END,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  resetElementCursor(element);\n}\n\n/**\n * Adds points to the edit line and calculates the preview of the edit to render.\n * Checks if an edit needs to be completed by crossing of lines, or by editing in\n * a way that requires a new edit to keep the contour a simple polygon.\n */\nfunction mouseDragClosedContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): Types.Point2[] {\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const worldPos = currentPoints.world;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n\n  const { viewportIdsToRender, xDir, yDir, spacing } = this.commonData;\n  const { editIndex, editCanvasPoints, startCrossingIndex } = this.editData;\n\n  const lastCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  // Check that we have moved at least one voxel in each direction.\n  if (xDist <= spacing[0] && yDist <= spacing[1]) {\n    // Haven't changed world point enough, don't render\n    return;\n  }\n\n  if (startCrossingIndex !== undefined) {\n    // Edge case: If the edit line itself crosses, remove part of that edit line so we don't\n    // Get isolated regions.\n    this.checkAndRemoveCrossesOnEditLine(evt);\n  }\n\n  const numPointsAdded = addCanvasPointsToArray(\n    element,\n    editCanvasPoints,\n    canvasPos,\n    this.commonData\n  );\n\n  const currentEditIndex = editIndex + numPointsAdded;\n\n  this.editData.editIndex = currentEditIndex;\n\n  if (startCrossingIndex === undefined && editCanvasPoints.length > 1) {\n    // If we haven't found the index of the first crossing yet,\n    // see if we can find it.\n    this.checkForFirstCrossing(evt, true);\n  }\n\n  this.editData.snapIndex = this.findSnapIndex();\n\n  if (this.editData.snapIndex === -1) {\n    // No point on the prevCanvasPoints for the editCanvasPoints line to\n    // snap to. Apply edit, and start a new edit as we've gone back on ourselves.\n    this.finishEditAndStartNewEdit(evt);\n    return;\n  }\n\n  this.editData.fusedCanvasPoints = this.fuseEditPointsWithClosedContour(evt);\n\n  if (\n    startCrossingIndex !== undefined &&\n    this.checkForSecondCrossing(evt, true)\n  ) {\n    // Crossed a second time, apply edit, and start a new edit from the crossing.\n    this.removePointsAfterSecondCrossing(true);\n    this.finishEditAndStartNewEdit(evt);\n  }\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Finish the current edit, and start a new one.\n */\nfunction finishEditAndStartNewEdit(evt: EventTypes.InteractionEventType): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, editCanvasPoints } = this.editData;\n\n  const worldPoints = fusedCanvasPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = false;\n\n  this.triggerAnnotationModified(annotation, enabledElement);\n\n  const lastEditCanvasPoint = editCanvasPoints.pop();\n\n  this.editData = {\n    prevCanvasPoints: fusedCanvasPoints,\n    editCanvasPoints: [lastEditCanvasPoint],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n    snapIndex: undefined,\n  };\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * This method combines the contour before editing (prevCanvasPoints) with\n * the current edit (editCanvasPoints), to produce a renderable preview of the\n * edit. Upon finishing the contour, the preview generated here is written back\n * into the contour state.\n *\n * @privateRemarks In this method we combine a few tricks to find the optimal\n * contour:\n * - As the contour is closed, our edit might stradle the boundary between the\n * last and 0th point of the contour, e.g. a small edit might go from e.g. index\n * 960 to index 4. We therefore calculate two possible contours, and find the\n * one with the biggest area, which will define the actual edit the user desired.\n * - As the contour and the edit can be drawn with different chiralities, we find if\n * the edit line aligns better with the intended cross points in its current order\n * or reversed. We do this by minimising the distance between its ends and the\n * intended crossing points.\n */\nfunction fuseEditPointsWithClosedContour(\n  evt: EventTypes.InteractionEventType\n): Types.Point2[] {\n  const { prevCanvasPoints, editCanvasPoints, startCrossingIndex, snapIndex } =\n    this.editData;\n\n  if (startCrossingIndex === undefined || snapIndex === undefined) {\n    return;\n  }\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Augment the editCanvasPoints array, between the end of edit and the snap index.\n  const augmentedEditCanvasPoints = [...editCanvasPoints];\n\n  addCanvasPointsToArray(\n    element,\n    augmentedEditCanvasPoints,\n    prevCanvasPoints[snapIndex],\n    this.commonData\n  );\n\n  if (augmentedEditCanvasPoints.length > editCanvasPoints.length) {\n    // If any points added, remove the last point, which will be a clone of the snapIndex\n    augmentedEditCanvasPoints.pop();\n  }\n\n  // Calculate the distances between the first and last edit points and the origin of the\n  // Contour with the snap point. These will be used to see which way around the edit array should be\n  // Placed within the preview.\n  let lowIndex;\n  let highIndex;\n\n  if (startCrossingIndex > snapIndex) {\n    lowIndex = snapIndex;\n    highIndex = startCrossingIndex;\n  } else {\n    lowIndex = startCrossingIndex;\n    highIndex = snapIndex;\n  }\n\n  const distanceBetweenLowAndFirstPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenLowAndLastPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  const distanceBetweenHighAndFirstPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenHighAndLastPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  // Generate two possible contours that could be intepreted from the edit:\n  //\n  // pointSet1 => 0 -> low -> edit -> high - max.\n  // pointSet2 => low -> high -> edit\n  //\n  // Depending on the placement of the edit and the origin, either of these could be the intended edit.\n  // We'll choose the one with the largest area, as edits are considered to be changes to the original area with\n  // A relative change of much less than unity.\n\n  // Point Set 1\n  const pointSet1 = [];\n\n  // Add points from the orignal contour origin up to the low index.\n  for (let i = 0; i < lowIndex; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  // Check which orientation of the edit line minimizes the distance between the\n  // origial contour low/high points and the start/end nodes of the edit line.\n\n  let inPlaceDistance =\n    distanceBetweenLowAndFirstPoint + distanceBetweenHighAndLastPoint;\n\n  let reverseDistance =\n    distanceBetweenLowAndLastPoint + distanceBetweenHighAndFirstPoint;\n\n  if (inPlaceDistance < reverseDistance) {\n    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  // Add points from the orignal contour's high index up to to its end point.\n  for (let i = highIndex; i < prevCanvasPoints.length; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  // Point Set 2\n  const pointSet2 = [];\n\n  for (let i = lowIndex; i < highIndex; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointSet2.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  inPlaceDistance =\n    distanceBetweenHighAndFirstPoint + distanceBetweenLowAndLastPoint;\n\n  reverseDistance =\n    distanceBetweenHighAndLastPoint + distanceBetweenLowAndFirstPoint;\n\n  if (inPlaceDistance < reverseDistance) {\n    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet2.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet2.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  const areaPointSet1 = calculateAreaOfPoints(pointSet1);\n  const areaPointSet2 = calculateAreaOfPoints(pointSet2);\n\n  const pointsToRender: Types.Point2[] =\n    areaPointSet1 > areaPointSet2 ? pointSet1 : pointSet2;\n\n  return pointsToRender;\n}\n\n/**\n * Completes the edit of the closed contour when the mouse button is released.\n */\nfunction mouseUpClosedContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  this.completeClosedContourEdit(element);\n}\n\n/**\n * Completes the edit of the closed contour when the mouse button is released.\n */\nfunction completeClosedContourEdit(element: HTMLDivElement) {\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, prevCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints) {\n    const updatedPoints = shouldInterpolate(this.configuration)\n      ? getInterpolatedPoints(\n          this.configuration,\n          fusedCanvasPoints,\n          prevCanvasPoints\n        )\n      : fusedCanvasPoints;\n\n    const worldPoints = updatedPoints.map((canvasPoint) =>\n      viewport.canvasToWorld(canvasPoint)\n    );\n    annotation.data.polyline = worldPoints;\n    annotation.data.isOpenContour = false;\n\n    annotation.invalidated = true;\n\n    this.triggerAnnotationModified(annotation, enabledElement);\n  }\n\n  this.isEditingClosed = false;\n  this.editData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateClosedContourEdit(element);\n}\n\n/**\n * Completes the edit on a cancel method call during the closed\n * contour edit loop.\n */\nfunction cancelClosedContourEdit(element: HTMLDivElement) {\n  this.completeClosedContourEdit(element);\n}\n\n/**\n * Registers the closed contour edit loop to the tool instance.\n */\nfunction registerClosedContourEditLoop(toolInstance): void {\n  toolInstance.activateClosedContourEdit =\n    activateClosedContourEdit.bind(toolInstance);\n  toolInstance.deactivateClosedContourEdit =\n    deactivateClosedContourEdit.bind(toolInstance);\n  toolInstance.mouseDragClosedContourEditCallback =\n    mouseDragClosedContourEditCallback.bind(toolInstance);\n  toolInstance.mouseUpClosedContourEditCallback =\n    mouseUpClosedContourEditCallback.bind(toolInstance);\n  toolInstance.finishEditAndStartNewEdit =\n    finishEditAndStartNewEdit.bind(toolInstance);\n  toolInstance.fuseEditPointsWithClosedContour =\n    fuseEditPointsWithClosedContour.bind(toolInstance);\n  toolInstance.cancelClosedContourEdit =\n    cancelClosedContourEdit.bind(toolInstance);\n  toolInstance.completeClosedContourEdit =\n    completeClosedContourEdit.bind(toolInstance);\n}\n\nexport default registerClosedContourEditLoop;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { state } from '../../../store';\nimport { Events } from '../../../enums';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../../cursors/elementCursor';\nimport type { EventTypes, Annotation } from '../../../types';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { polyline } from '../../../utilities/math';\nimport {\n  shouldInterpolate,\n  getInterpolatedPoints,\n} from '../../../utilities/planarFreehandROITool/interpolatePoints';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport findOpenUShapedContourVectorToPeak from './findOpenUShapedContourVectorToPeak';\n\nconst { addCanvasPointsToArray, getSubPixelSpacingAndXYDirections } = polyline;\n\n/**\n * Activates the open contour edit event loop.\n */\nfunction activateOpenContourEdit(\n  evt: EventTypes.InteractionEventType,\n  annotation: Annotation,\n  viewportIdsToRender: string[]\n): void {\n  this.isEditingOpen = true;\n\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const prevCanvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  this.editData = {\n    prevCanvasPoints,\n    editCanvasPoints: [canvasPos],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox: false,\n  };\n\n  state.isInteractingWithTool = true;\n\n  element.addEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpOpenContourEditCallback\n  );\n\n  element.addEventListener(\n    Events.TOUCH_END,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpOpenContourEditCallback\n  );\n  hideElementCursor(element);\n}\n\n/**\n * Deactivates and cleans up the closed contour edit event loop.\n */\nfunction deactivateOpenContourEdit(element: HTMLDivElement) {\n  state.isInteractingWithTool = false;\n\n  element.removeEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpOpenContourEditCallback\n  );\n\n  element.removeEventListener(\n    Events.TOUCH_END,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpOpenContourEditCallback\n  );\n  resetElementCursor(element);\n}\n\n/**\n * Adds points to the edit line and calculates the preview of the edit to render.\n * Checks if an edit needs to be completed by crossing of lines, or by dragging\n * the edit line past the end of the open contour.\n */\nfunction mouseDragOpenContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): boolean {\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const worldPos = currentPoints.world;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n\n  const { viewportIdsToRender, xDir, yDir, spacing } = this.commonData;\n  const { editIndex, editCanvasPoints, startCrossingIndex } = this.editData;\n\n  const lastCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  // Get pixel spacing in the direction.\n  // Check that we have moved at least one voxel in each direction.\n\n  if (xDist <= spacing[0] && yDist <= spacing[1]) {\n    // Haven't changed world point enough, don't render\n    return;\n  }\n\n  if (startCrossingIndex !== undefined) {\n    // Edge case: If the edit line itself crosses, remove part of that edit line so we don't\n    // Get isolated regions.\n    this.checkAndRemoveCrossesOnEditLine(evt);\n  }\n\n  const numPointsAdded = addCanvasPointsToArray(\n    element,\n    editCanvasPoints,\n    canvasPos,\n    this.commonData\n  );\n\n  const currentEditIndex = editIndex + numPointsAdded;\n\n  this.editData.editIndex = currentEditIndex;\n\n  if (startCrossingIndex === undefined && editCanvasPoints.length > 1) {\n    this.checkForFirstCrossing(evt, false);\n  }\n\n  this.editData.snapIndex = this.findSnapIndex();\n\n  this.editData.fusedCanvasPoints = this.fuseEditPointsWithOpenContour(evt);\n\n  if (\n    startCrossingIndex !== undefined &&\n    this.checkForSecondCrossing(evt, false)\n  ) {\n    this.removePointsAfterSecondCrossing(false);\n    this.finishEditOpenOnSecondCrossing(evt);\n  } else if (this.checkIfShouldOverwriteAnEnd(evt)) {\n    this.openContourEditOverwriteEnd(evt);\n  }\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Overwrite the end of the contour with the edit, and then switch to the\n * open contour end edit loop.\n */\nfunction openContourEditOverwriteEnd(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const fusedCanvasPoints = this.fuseEditPointsForOpenContourEndEdit();\n\n  const worldPoints = fusedCanvasPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = true;\n  // Note: Contours generate from fusedCanvasPoints will be in the direction\n  // with the last point being the current mouse position\n  annotation.data.handles.points = [\n    worldPoints[0],\n    worldPoints[worldPoints.length - 1],\n  ];\n  annotation.data.handles.activeHandleIndex = 1;\n\n  this.triggerAnnotationModified(annotation, enabledElement);\n\n  this.isEditingOpen = false;\n  this.editData = undefined;\n  this.commonData = undefined;\n\n  // Jump to a normal line edit now.\n  this.deactivateOpenContourEdit(element);\n  this.activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, null);\n}\n\n/**\n * Checks if we are moving the `editCanvasPoints` past the end of one of the\n * open contour's `prevCanvasPoint`s.\n */\nfunction checkIfShouldOverwriteAnEnd(\n  evt: EventTypes.InteractionEventType\n): boolean {\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPos = lastPoints.canvas;\n\n  const { snapIndex, prevCanvasPoints, startCrossingIndex } = this.editData;\n\n  if (startCrossingIndex === undefined || snapIndex === undefined) {\n    // Edit not started\n    return false;\n  }\n\n  // No snap index can be found, so contour is being edited away from line.\n  if (snapIndex === -1) {\n    return true;\n  }\n\n  if (snapIndex !== 0 && snapIndex !== prevCanvasPoints.length - 1) {\n    // Not snapping to final index\n    return false;\n  }\n\n  // Work out the angle between the last mouse move and\n  // And the current point to the snapped point.\n  const p1 = canvasPos;\n  const p2 = lastCanvasPos;\n  const p3 = prevCanvasPoints[snapIndex];\n\n  const a = vec2.create();\n  const b = vec2.create();\n\n  vec2.set(a, p1[0] - p2[0], p1[1] - p2[1]);\n  vec2.set(b, p1[0] - p3[0], p1[1] - p3[1]);\n\n  const aDotb = vec2.dot(a, b);\n  const magA = Math.sqrt(a[0] * a[0] + a[1] * a[1]);\n  const magB = Math.sqrt(b[0] * b[0] + b[1] * b[1]);\n\n  const theta = Math.acos(aDotb / (magA * magB));\n\n  if (theta < Math.PI / 2) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * This method combines the contour before editing (prevCanvasPoints) with\n * the current edit (editCanvasPoints), to produce a single contour ready for\n * end editing.\n *\n * @privateRemarks In this method we use the following trick to find the\n * optimal contour:\n * - As the contour and the edit can be drawn with different chiralities, we find if\n * the edit line aligns better with the intended cross points in its current order\n * or reversed. We do this by minimising the distance between its ends and the\n * intended crossing points.\n */\nfunction fuseEditPointsForOpenContourEndEdit(): Types.Point2[] {\n  const { snapIndex, prevCanvasPoints, editCanvasPoints, startCrossingIndex } =\n    this.editData;\n\n  const newCanvasPoints = [];\n\n  // Note: Generated contours will both be in the direction with the\n  // last point being the current mouse position\n\n  if (snapIndex === 0) {\n    // end -> crossingpoint -> edit\n    // Add points from the end of the previous contour, to the crossing point.\n    for (let i = prevCanvasPoints.length - 1; i >= startCrossingIndex; i--) {\n      const canvasPoint = prevCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    // start -> crossingpoint -> edit\n    // Add points from the orignal contour origin up to the low index.\n    for (let i = 0; i < startCrossingIndex; i++) {\n      const canvasPoint = prevCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  const distanceBetweenCrossingIndexAndFirstPoint = vec2.distance(\n    prevCanvasPoints[startCrossingIndex],\n    editCanvasPoints[0]\n  );\n\n  const distanceBetweenCrossingIndexAndLastPoint = vec2.distance(\n    prevCanvasPoints[startCrossingIndex],\n    editCanvasPoints[editCanvasPoints.length - 1]\n  );\n\n  if (\n    distanceBetweenCrossingIndexAndFirstPoint <\n    distanceBetweenCrossingIndexAndLastPoint\n  ) {\n    // In order\n    for (let i = 0; i < editCanvasPoints.length; i++) {\n      const canvasPoint = editCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    // reverse\n    for (let i = editCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = editCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  return newCanvasPoints;\n}\n\n/**\n * This method combines the contour before editing (prevCanvasPoints) with\n * the current edit (editCanvasPoints), to produce a renderable preview of the\n * edit. Upon finishing the contour, the preview generated here is written back\n * into the contour state.\n *\n * @privateRemarks In this method we use the following trick to find the\n * optimal contour:\n * - As the contour and the edit can be drawn with different chiralities, we find if\n * the edit line aligns better with the intended cross points in its current order\n * or reversed. We do this by minimising the distance between its ends and the\n * intended crossing points.\n */\nfunction fuseEditPointsWithOpenContour(\n  evt: EventTypes.InteractionEventType\n): Types.Point2[] {\n  const { prevCanvasPoints, editCanvasPoints, startCrossingIndex, snapIndex } =\n    this.editData;\n\n  if (startCrossingIndex === undefined || snapIndex === undefined) {\n    return undefined;\n  }\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Augment the editCanvasPoints array, between the end of edit and the snap index.\n  const augmentedEditCanvasPoints = [...editCanvasPoints];\n\n  addCanvasPointsToArray(\n    element,\n    augmentedEditCanvasPoints,\n    prevCanvasPoints[snapIndex],\n    this.commonData\n  );\n\n  if (augmentedEditCanvasPoints.length > editCanvasPoints.length) {\n    // If any points added, remove the last point, which will be a clone of the snapIndex\n    augmentedEditCanvasPoints.pop();\n  }\n\n  // Calculate the distances between the first and last edit points and the origin of the\n  // Contour with the snap point. These will be used to see which way around the edit array should be\n  // Placed within the preview.\n\n  let lowIndex;\n  let highIndex;\n\n  if (startCrossingIndex > snapIndex) {\n    lowIndex = snapIndex;\n    highIndex = startCrossingIndex;\n  } else {\n    lowIndex = startCrossingIndex;\n    highIndex = snapIndex;\n  }\n\n  const distanceBetweenLowAndFirstPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenLowAndLastPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  const distanceBetweenHighAndFirstPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenHighAndLastPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  const pointsToRender = [];\n\n  // Add points from the orignal contour origin up to the low index.\n  for (let i = 0; i < lowIndex; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  // Check which orientation of the edit line minimizes the distance between the\n  // origial contour low/high points and the start/end nodes of the edit line.\n\n  const inPlaceDistance =\n    distanceBetweenLowAndFirstPoint + distanceBetweenHighAndLastPoint;\n\n  const reverseDistance =\n    distanceBetweenLowAndLastPoint + distanceBetweenHighAndFirstPoint;\n\n  if (inPlaceDistance < reverseDistance) {\n    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  // Add points from the original contour's high index up to to its end point.\n  for (let i = highIndex; i < prevCanvasPoints.length; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  return pointsToRender;\n}\n\n/**\n * On a second crossing, apply edit, and start a new edit from the crossing.\n */\nfunction finishEditOpenOnSecondCrossing(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, editCanvasPoints } = this.editData;\n\n  const worldPoints = fusedCanvasPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = true;\n  annotation.data.handles.points = [\n    worldPoints[0],\n    worldPoints[worldPoints.length - 1],\n  ];\n\n  this.triggerAnnotationModified(annotation, enabledElement);\n\n  const lastEditCanvasPoint = editCanvasPoints.pop();\n\n  this.editData = {\n    prevCanvasPoints: fusedCanvasPoints,\n    editCanvasPoints: [lastEditCanvasPoint],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n  };\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Completes the edit of the open contour when the mouse button is released.\n */\nfunction mouseUpOpenContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  this.completeOpenContourEdit(element);\n}\n\n/**\n * Completes the edit of the open contour.\n */\nfunction completeOpenContourEdit(element: HTMLDivElement) {\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, prevCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints) {\n    const updatedPoints = shouldInterpolate(this.configuration)\n      ? getInterpolatedPoints(\n          this.configuration,\n          fusedCanvasPoints,\n          prevCanvasPoints\n        )\n      : fusedCanvasPoints;\n\n    const worldPoints = updatedPoints.map((canvasPoint) =>\n      viewport.canvasToWorld(canvasPoint)\n    );\n    annotation.data.polyline = worldPoints;\n    annotation.data.isOpenContour = true;\n    annotation.data.handles.points = [\n      worldPoints[0],\n      worldPoints[worldPoints.length - 1],\n    ];\n\n    // If the annotation is an open U-shaped annotation, find the annotation vector.\n    if (annotation.data.isOpenUShapeContour) {\n      annotation.data.openUShapeContourVectorToPeak =\n        findOpenUShapedContourVectorToPeak(fusedCanvasPoints, viewport);\n    }\n\n    annotation.invalidated = true;\n\n    this.triggerAnnotationModified(annotation, enabledElement);\n  }\n\n  this.isEditingOpen = false;\n  this.editData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateOpenContourEdit(element);\n}\n\n/**\n * Completes the edit on a cancel method call during the open\n * contour edit loop.\n */\nfunction cancelOpenContourEdit(element: HTMLDivElement) {\n  this.completeOpenContourEdit(element);\n}\n\n/**\n * Registers the open contour edit loop to the tool instance.\n */\nfunction registerOpenContourEditLoop(toolInstance) {\n  toolInstance.activateOpenContourEdit =\n    activateOpenContourEdit.bind(toolInstance);\n  toolInstance.deactivateOpenContourEdit =\n    deactivateOpenContourEdit.bind(toolInstance);\n  toolInstance.mouseDragOpenContourEditCallback =\n    mouseDragOpenContourEditCallback.bind(toolInstance);\n  toolInstance.mouseUpOpenContourEditCallback =\n    mouseUpOpenContourEditCallback.bind(toolInstance);\n  toolInstance.fuseEditPointsWithOpenContour =\n    fuseEditPointsWithOpenContour.bind(toolInstance);\n  toolInstance.finishEditOpenOnSecondCrossing =\n    finishEditOpenOnSecondCrossing.bind(toolInstance);\n  toolInstance.checkIfShouldOverwriteAnEnd =\n    checkIfShouldOverwriteAnEnd.bind(toolInstance);\n  toolInstance.fuseEditPointsForOpenContourEndEdit =\n    fuseEditPointsForOpenContourEndEdit.bind(toolInstance);\n  toolInstance.openContourEditOverwriteEnd =\n    openContourEditOverwriteEnd.bind(toolInstance);\n  toolInstance.cancelOpenContourEdit = cancelOpenContourEdit.bind(toolInstance);\n  toolInstance.completeOpenContourEdit =\n    completeOpenContourEdit.bind(toolInstance);\n}\n\nexport default registerOpenContourEditLoop;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { state } from '../../../store';\nimport { Events } from '../../../enums';\nimport { hideElementCursor } from '../../../cursors/elementCursor';\nimport type {\n  EventTypes,\n  Annotation,\n  ToolHandle,\n  TextBoxHandle,\n} from '../../../types';\nimport { polyline } from '../../../utilities/math';\n\nconst { getSubPixelSpacingAndXYDirections } = polyline;\n\n/**\n * Activates the open contour end edit. This actually just sets up the state so\n * that the tool thinks we are mid draw, and then jumps into the drawing loop.\n */\nfunction activateOpenContourEndEdit(\n  evt: EventTypes.InteractionEventType,\n  annotation: Annotation,\n  viewportIdsToRender: string[],\n  handle: ToolHandle | null\n): void {\n  this.isDrawing = true;\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n  const handleIndexGrabbed = annotation.data.handles.activeHandleIndex;\n\n  // If 0, invert point direction, if 1, keep point direction the same.\n  // This is so we can just jump as into the state as if the annotation was just being drawn.\n  if (handleIndexGrabbed === 0) {\n    canvasPoints.reverse();\n  }\n\n  let movingTextBox = false;\n  if ((handle as TextBoxHandle).worldPosition) {\n    movingTextBox = true;\n  }\n\n  this.drawData = {\n    canvasPoints: canvasPoints,\n    polylineIndex: canvasPoints.length - 1,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox,\n  };\n\n  state.isInteractingWithTool = true;\n\n  // Jump into drawing loop.\n  element.addEventListener(Events.MOUSE_UP, this.mouseUpDrawCallback);\n  element.addEventListener(Events.MOUSE_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.MOUSE_CLICK, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_END, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.TOUCH_TAP, this.mouseUpDrawCallback);\n\n  hideElementCursor(element);\n}\n\n/**\n * Registers the open contour end edit loop to the tool instance.\n */\nfunction registerOpenContourEndEditLoop(toolInstance): void {\n  toolInstance.activateOpenContourEndEdit =\n    activateOpenContourEndEdit.bind(toolInstance);\n}\n\nexport default registerOpenContourEndEditLoop;\n","import type { Types } from '@cornerstonejs/core';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawPolyline as drawPolylineSvg,\n} from '../../../drawingSvg';\nimport { polyline } from '../../../utilities/math';\nimport { findOpenUShapedContourVectorToPeakOnRender } from './findOpenUShapedContourVectorToPeak';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../../types/AnnotationStyle';\nimport { SVGDrawingHelper } from '../../../types';\n\nconst { pointsAreWithinCloseContourProximity } = polyline;\n\ntype PlanarFreehandROIRenderOptions = {\n  color?: string;\n  width?: number;\n  connectFirstToLast?: boolean;\n};\n\nfunction _getRenderingOptions(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation\n): PlanarFreehandROIRenderOptions {\n  const styleSpecifier: StyleSpecifier = {\n    toolGroupId: this.toolGroupId,\n    toolName: this.getToolName(),\n    viewportId: enabledElement.viewport.id,\n    annotationUID: annotation.annotationUID,\n  };\n\n  const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n  const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n  const color = this.getStyle('color', styleSpecifier, annotation);\n\n  const isOpenContour = annotation.data.isOpenContour;\n\n  const options = {\n    color: color === undefined ? undefined : <string>color,\n    width: lineWidth === undefined ? undefined : <number>lineWidth,\n    lineDash: lineDash === undefined ? undefined : <number[]>lineDash,\n    connectLastToFirst: !isOpenContour,\n  };\n\n  return options;\n}\n\n/**\n * Renders a `PlanarFreehandROIAnnotation` that is not currently being drawn or edited.\n */\nfunction renderContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  // prevent drawing or further calculation in case viewport data is not ready yet\n  if (!enabledElement?.viewport?.getImageData()) {\n    return;\n  }\n  // Check if the contour is an open contour\n  if (annotation.data.isOpenContour) {\n    // If its an open contour, check i its a U-shaped contour\n    if (annotation.data.isOpenUShapeContour) {\n      calculateUShapeContourVectorToPeakIfNotPresent(\n        enabledElement,\n        annotation\n      );\n\n      this.renderOpenUShapedContour(\n        enabledElement,\n        svgDrawingHelper,\n        annotation\n      );\n    } else {\n      // If not a U-shaped contour, render standard open contour.\n      this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n    }\n  } else {\n    this.renderClosedContour(enabledElement, svgDrawingHelper, annotation);\n  }\n}\n\n/**\n * If the open U-shaped contour does not have a peak.\n */\nfunction calculateUShapeContourVectorToPeakIfNotPresent(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  if (!annotation.data.openUShapeContourVectorToPeak) {\n    // Annotation just been set to be an open U-shaped contour.\n    // calculate its peak vector here.\n    annotation.data.openUShapeContourVectorToPeak =\n      findOpenUShapedContourVectorToPeakOnRender(enabledElement, annotation);\n  }\n}\n\n/**\n * Renders an closed `PlanarFreehandROIAnnotation` annotation.\n */\nfunction renderClosedContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { viewport } = enabledElement;\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  // Its unfortunate that we have to do this for each annotation,\n  // Even if its unchanged. In the future we could cache the canvas points per\n  // element on the tool? That feels very weird also as we'd need to manage\n  // it/clean them up. Its a pre-optimisation for now and we can tackle it if it\n  // becomes a problem.\n  const canvasPoints = annotation.data.polyline.map((worldPos) =>\n    viewport.worldToCanvas(worldPos)\n  );\n\n  const polylineUID = '1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUID,\n    canvasPoints,\n    options\n  );\n}\n\n/**\n * Renders an open `PlanarFreehandROIAnnotation` annotation.\n */\nfunction renderOpenContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { viewport } = enabledElement;\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const canvasPoints = annotation.data.polyline.map((worldPos) =>\n    viewport.worldToCanvas(worldPos)\n  );\n\n  const polylineUID = '1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUID,\n    canvasPoints,\n    options\n  );\n\n  const activeHandleIndex = annotation.data.handles.activeHandleIndex;\n\n  if (this.configuration.alwaysRenderOpenContourHandles?.enabled === true) {\n    const radius = this.configuration.alwaysRenderOpenContourHandles.radius;\n\n    // Draw highlighted points\n    const handleGroupUID = '0';\n\n    // We already mapped all the points, so don't do the mapping again.\n    // The activeHandleIndex can only be one of two points.\n    const handlePoints = [\n      canvasPoints[0],\n      canvasPoints[canvasPoints.length - 1],\n    ];\n\n    // Don't render a hovered handle, as this will be rendered larger in\n    // the next block.\n    if (activeHandleIndex === 0) {\n      handlePoints.shift();\n    } else if (activeHandleIndex === 1) {\n      handlePoints.pop();\n    }\n\n    drawHandlesSvg(\n      svgDrawingHelper,\n      annotation.annotationUID,\n      handleGroupUID,\n      handlePoints,\n      {\n        color: options.color,\n        handleRadius: radius,\n      }\n    );\n  }\n\n  if (activeHandleIndex !== null) {\n    // Draw highlighted points\n    const handleGroupUID = '1';\n\n    // We already mapped all the points, so don't do the mapping again.\n    // The activeHandleIndex can only be one of two points.\n    const indexOfCanvasPoints =\n      activeHandleIndex === 0 ? 0 : canvasPoints.length - 1;\n\n    const handlePoint = canvasPoints[indexOfCanvasPoints];\n\n    drawHandlesSvg(\n      svgDrawingHelper,\n      annotation.annotationUID,\n      handleGroupUID,\n      [handlePoint],\n      { color: options.color }\n    );\n  }\n}\n\nfunction renderOpenUShapedContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { viewport } = enabledElement;\n  const { polyline, openUShapeContourVectorToPeak } = annotation.data;\n\n  this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n\n  // prevent rendering u shape in case openUShapeContourVectorToPeak is not set yet\n  if (!openUShapeContourVectorToPeak) {\n    return;\n  }\n\n  const firstCanvasPoint = viewport.worldToCanvas(polyline[0]);\n  const lastCanvasPoint = viewport.worldToCanvas(polyline[polyline.length - 1]);\n\n  const openUShapeContourVectorToPeakCanvas = [\n    viewport.worldToCanvas(openUShapeContourVectorToPeak[0]),\n    viewport.worldToCanvas(openUShapeContourVectorToPeak[1]),\n  ];\n\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  // Join first and last points\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    'first-to-last',\n    [firstCanvasPoint, lastCanvasPoint],\n    {\n      color: options.color,\n      width: options.width,\n      connectLastToFirst: false,\n      lineDash: '2,2',\n    }\n  );\n\n  // Render midpoint to open contour surface line\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    'midpoint-to-open-contour',\n    [\n      openUShapeContourVectorToPeakCanvas[0],\n      openUShapeContourVectorToPeakCanvas[1],\n    ],\n    {\n      color: options.color,\n      width: options.width,\n      connectLastToFirst: false,\n      lineDash: '2,2',\n    }\n  );\n}\n\n/**\n * Renders a new `PlanarFreehandROIAnnotation` annotation during\n * creation/drawing.\n */\nfunction renderContourBeingDrawn(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const { allowOpenContours } = this.configuration;\n  const { canvasPoints } = this.drawData;\n\n  // Override rendering whilst drawing the contour, we don't know if its open\n  // or closed yet\n  options.connectLastToFirst = false;\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    '1',\n    canvasPoints,\n    options\n  );\n\n  if (allowOpenContours) {\n    const firstPoint = canvasPoints[0];\n    const lastPoint = canvasPoints[canvasPoints.length - 1];\n\n    // Check if start and end are within close proximity\n    if (\n      pointsAreWithinCloseContourProximity(\n        firstPoint,\n        lastPoint,\n        this.configuration.closeContourProximity\n      )\n    ) {\n      // Preview join last points\n      drawPolylineSvg(\n        svgDrawingHelper,\n        annotation.annotationUID,\n        '2',\n        [lastPoint, firstPoint],\n        options\n      );\n    } else {\n      // Draw start point\n      const handleGroupUID = '0';\n\n      drawHandlesSvg(\n        svgDrawingHelper,\n        annotation.annotationUID,\n        handleGroupUID,\n        [firstPoint],\n        { color: options.color, handleRadius: 2 }\n      );\n    }\n  }\n}\n\n/**\n * Renders a closed `PlanarFreehandROIAnnotation` being edited.\n */\nfunction renderClosedContourBeingEdited(\n  enabledElement,\n  svgDrawingHelper,\n  annotation\n): void {\n  const { fusedCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints === undefined) {\n    // No edit to render yet, render closed contour.\n    this.renderClosedContour(enabledElement, svgDrawingHelper, annotation);\n\n    return;\n  }\n\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const polylineUIDToRender = 'preview-1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUIDToRender,\n    fusedCanvasPoints,\n    options\n  );\n}\n\n/**\n * Renders an open `PlanarFreehandROIAnnotation` being edited.\n */\nfunction renderOpenContourBeingEdited(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { fusedCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints === undefined) {\n    // No edit to render yet, render closed contour.\n    this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n\n    return;\n  }\n\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const polylineUIDToRender = 'preview-1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUIDToRender,\n    fusedCanvasPoints,\n    options\n  );\n}\n\n/**\n * Registers the render methods of various contour states to the tool instance.\n */\nfunction registerRenderMethods(toolInstance) {\n  toolInstance.renderContour = renderContour.bind(toolInstance);\n  toolInstance.renderClosedContour = renderClosedContour.bind(toolInstance);\n  toolInstance.renderOpenContour = renderOpenContour.bind(toolInstance);\n  toolInstance.renderOpenUShapedContour =\n    renderOpenUShapedContour.bind(toolInstance);\n\n  toolInstance.renderContourBeingDrawn =\n    renderContourBeingDrawn.bind(toolInstance);\n\n  toolInstance.renderClosedContourBeingEdited =\n    renderClosedContourBeingEdited.bind(toolInstance);\n  toolInstance.renderOpenContourBeingEdited =\n    renderOpenContourBeingEdited.bind(toolInstance);\n  toolInstance._getRenderingOptions = _getRenderingOptions.bind(toolInstance);\n}\n\nexport default registerRenderMethods;\n","import {\n  CONSTANTS,\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  StackViewport,\n  VolumeViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\nimport {\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport { Events } from '../../enums';\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../../stateManagement/annotation/annotationState';\nimport { polyline } from '../../utilities/math';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport registerDrawLoop from './planarFreehandROITool/drawLoop';\nimport registerEditLoopCommon from './planarFreehandROITool/editLoopCommon';\nimport registerClosedContourEditLoop from './planarFreehandROITool/closedContourEditLoop';\nimport registerOpenContourEditLoop from './planarFreehandROITool/openContourEditLoop';\nimport registerOpenContourEndEditLoop from './planarFreehandROITool/openContourEndEditLoop';\nimport registerRenderMethods from './planarFreehandROITool/renderMethods';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\nimport {\n  EventTypes,\n  ToolHandle,\n  Annotation,\n  Annotations,\n  AnnotationStyle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { drawLine, drawCircle, drawLinkedTextBox } from '../../drawingSvg';\nimport { PlanarFreehandROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { PlanarFreehandROICommonData } from '../../utilities/math/polyline/planarFreehandROIInternalTypes';\nimport pointInPolyline from '../../utilities/math/polyline/pointInPolyline';\nimport { getIntersectionCoordinatesWithPolyline } from '../../utilities/math/polyline/getIntersectionWithPolyline';\nimport pointInShapeCallback from '../../utilities/pointInShapeCallback';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\n\nconst { pointCanProjectOnLine } = polyline;\nconst { EPSILON } = CONSTANTS;\n\nconst PARALLEL_THRESHOLD = 1 - EPSILON;\n/**\n * PlanarFreehandROITool lets you draw annotations that define an arbitrarily drawn region.\n * You can use the PlanarFreehandROITool in all perpendicular views (axial, sagittal, coronal),\n * support for oblique views is possible, but not yet supported, due to the implementation of\n * `getSubPixelSpacingAndXYDirections`.\n *\n * The resulting annotation's data and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * PlanarFreehandROITool annotation can be smoothed on drawing completion. This is a configured based approach.\n * The interpolation process uses b-spline algorithm and consider 4 configurations properties:\n * - interpolation.interpolateOnAdd: to tell whether it should be interpolated or not (for editing it is considered the property interpolateOnEdit) (default: false)\n * - interpolation.interpolateOnEdit: to tell whether it should be interpolated or not when editing (default: false)\n * - interpolation.knotsRatioPercentageOnAdd: percentage of points from Segment that are likely to be considered knots during interpolation (for editing it is considered the property knotsRatioPercentageOnEdit) ( default: 40)\n * - interpolation.knotsRatioPercentageOnEdit: same as knotsRatioPercentageOnAdd but applicable only when editing the tool (default: 40)\n *\n * So, with that said the interpolation might occur when:\n * - drawing is done (i.e mouse is released) and interpolation.interpolateOnAdd is true. Interpolation algorithm uses knotsRatioPercentageOnAdd\n * - edit drawing is done (i.e mouse is released) and interpolation.interpolateOnEdit is true. Interpolation algorithm uses knotsRatioPercentageOnEdit and its only applied to changed segment\n * Interpolation does not occur when:\n * - interpolation.interpolateOnAdd is false and drawing is completed\n * - interpolation.interpolateOnEdit is false and edit is completed\n * - drawing still happening (editing or not)\n *\n * The result of interpolation will be a smoother set of segments.\n * Changing tool configuration (see below) you can fine-tune the interpolation process by changing knotsRatioPercentageOnAdd and knotsRatioPercentageOnEdit value, which smaller values produces a more agressive interpolation.\n * A smaller value of knotsRatioPercentageOnAdd/knotsRatioPercentageOnEdit produces a more agressive interpolation.\n *\n * ```js\n * cornerstoneTools.addTool(PlanarFreehandROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(PlanarFreehandROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(PlanarFreehandROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n *\n * // set interpolation agressiveness while adding new annotation (ps: this does not change if interpolation is ON or OFF)\n * toolGroup.setToolConfiguration(PlanarFreehandROITool.toolName, {\n *   interpolation: { knotsRatioPercentageOnAdd: 30 },\n * });\n *\n * // set interpolation to be ON while editing only\n * toolGroup.setToolConfiguration(PlanarFreehandROITool.toolName, {\n *   interpolation: { interpolateOnAdd: false, interpolateOnEdit: true  },\n * });\n * ```\n *\n * Read more in the Docs section of the website.\n */\nclass PlanarFreehandROITool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  private commonData?: PlanarFreehandROICommonData;\n  isDrawing = false;\n  isEditingClosed = false;\n  isEditingOpen = false;\n\n  private activateDraw: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[]\n  ) => void;\n  private activateClosedContourEdit: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[]\n  ) => void;\n  private activateOpenContourEdit: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[]\n  ) => void;\n  private activateOpenContourEndEdit: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[],\n    handle: ToolHandle | null\n  ) => void;\n  private cancelDrawing: (element: HTMLDivElement) => void;\n  private cancelClosedContourEdit: (element: HTMLDivElement) => void;\n  private cancelOpenContourEdit: (element: HTMLDivElement) => void;\n\n  private renderContour: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n  private renderContourBeingDrawn: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n  private renderClosedContourBeingEdited: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n  private renderOpenContourBeingEdited: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        alwaysRenderOpenContourHandles: {\n          // When true, always render end points when you have an open contour, rather\n          // than just rendering a line.\n          enabled: false,\n          // When enabled, use this radius to draw the endpoints whilst not hovering.\n          radius: 2,\n        },\n        allowOpenContours: true,\n        // Proximity in canvas coordinates used to join contours.\n        closeContourProximity: 10,\n        // The proximity at which we fallback to the simplest grabbing logic for\n        // determining what index of the contour to start editing.\n        checkCanvasEditFallbackProximity: 6,\n        // The relative distance that points should be dropped along the polyline\n        // in units of the image pixel spacing. A value of 1 means that nodes must\n        // be placed no closed than the image spacing apart. A value of 4 means that 4\n        // nodes should be placed within the space of one image pixel size. A higher\n        // value gives more finese to the tool/smoother lines, but the value cannot\n        // be infinite as the lines become very computationally expensive to draw.\n        subPixelResolution: 4,\n        interpolation: {\n          interpolateOnAdd: false,\n          interpolateOnEdit: false, // used for edit only\n          knotsRatioPercentageOnAdd: 40,\n          knotsRatioPercentageOnEdit: 40,\n        },\n        calculateStats: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    // Register event loops and rendering logic, which are stored in different\n    // Files due to their complexity/size.\n    registerDrawLoop(this);\n    registerEditLoopCommon(this);\n    registerClosedContourEditLoop(this);\n    registerOpenContourEditLoop(this);\n    registerOpenContourEndEditLoop(this);\n    registerRenderMethods(this);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current image, creates\n   * a `PlanarFreehandROIAnnotation` and stores it in the annotationManager.\n   *\n   * @param evt - `EventTypes.NormalizedMouseEventType`\n   * @returns The `PlanarFreehandROIAnnotation` object.\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): PlanarFreehandROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation: PlanarFreehandROIAnnotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        toolName: this.getToolName(),\n      },\n      data: {\n        handles: {\n          points: [], // Handle points for open contours\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        polyline: [<Types.Point3>[...worldPos]], // Polyline coordinates\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    this.activateDraw(evt, annotation, viewportIdsToRender);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * Begins an edit of an open contour, when the mouse has selected a handle\n   * (end) of the open contour.\n   *\n   * @param evt - `EventTypes.MouseDownEventType`\n   * @param annotation - `PlanarFreehandROIAnnotation` annotation.\n   * @param handle - The handle index, 0 for the start and 1 for the end.\n   * @param interactionType - interaction type (mouse, touch)\n   */\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.activateOpenContourEndEdit(\n      evt,\n      annotation,\n      viewportIdsToRender,\n      handle\n    );\n  };\n\n  /**\n   * Edits the open or closed contour when the line is grabbed and dragged.\n   */\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    if (annotation.data.isOpenContour) {\n      this.activateOpenContourEdit(evt, annotation, viewportIdsToRender);\n    } else {\n      this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);\n    }\n  };\n\n  /**\n   * Returns if the canvas point is near the line of the given annotation in the\n   * provided element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - The `PlanarFreehandROIAnnotation`.\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: PlanarFreehandROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const points = annotation.data.polyline;\n\n    // NOTE: It is implemented this way so that we do not double calculate\n    // points when number crunching adjacent line segments.\n    let previousPoint = viewport.worldToCanvas(points[0]);\n\n    for (let i = 1; i < points.length; i++) {\n      const p1 = previousPoint;\n      const p2 = viewport.worldToCanvas(points[i]);\n\n      const distance = pointCanProjectOnLine(canvasCoords, p1, p2, proximity);\n\n      if (distance === true) {\n        return true;\n      }\n\n      previousPoint = p2;\n    }\n\n    if (annotation.data.isOpenContour) {\n      // Contour is open, don't check last point to first point.\n      return false;\n    }\n\n    // check last point to first point\n    const pStart = viewport.worldToCanvas(points[0]);\n    const pEnd = viewport.worldToCanvas(points[points.length - 1]);\n\n    const distance = pointCanProjectOnLine(\n      canvasCoords,\n      pStart,\n      pEnd,\n      proximity\n    );\n\n    if (distance === true) {\n      return true;\n    }\n\n    return false;\n  };\n\n  cancel = (element: HTMLDivElement): void => {\n    const isDrawing = this.isDrawing;\n    const isEditingOpen = this.isEditingOpen;\n    const isEditingClosed = this.isEditingClosed;\n\n    if (isDrawing) {\n      this.cancelDrawing(element);\n    } else if (isEditingOpen) {\n      this.cancelOpenContourEdit(element);\n    } else if (isEditingClosed) {\n      this.cancelClosedContourEdit(element);\n    }\n  };\n\n  /**\n   * Triggers an annotation modified event.\n   */\n  triggerAnnotationModified = (\n    annotation: PlanarFreehandROIAnnotation,\n    enabledElement: Types.IEnabledElement\n  ): void => {\n    const { viewportId, renderingEngineId } = enabledElement;\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n  };\n\n  /**\n   * Triggers an annotation completed event.\n   */\n  triggerAnnotationCompleted = (\n    annotation: PlanarFreehandROIAnnotation\n  ): void => {\n    const eventType = Events.ANNOTATION_COMPLETED;\n\n    const eventDetail: AnnotationCompletedEventDetail = {\n      annotation,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n  };\n\n  /**\n   * @override We need to override this method as the tool doesn't always have\n   * `handles`, which means `filterAnnotationsForDisplay` fails inside\n   * `filterAnnotationsWithinSlice`.\n   */\n  filterInteractableAnnotationsForElement(\n    element: HTMLDivElement,\n    annotations: Annotations\n  ): Annotations | undefined {\n    if (!annotations || !annotations.length) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    let annotationsToDisplay;\n\n    if (viewport instanceof StackViewport) {\n      // Use the default `filterAnnotationsForDisplay` utility, as the stack\n      // path doesn't require handles.\n      annotationsToDisplay = filterAnnotationsForDisplay(viewport, annotations);\n    } else if (viewport instanceof VolumeViewport) {\n      const camera = viewport.getCamera();\n\n      const { spacingInNormalDirection } =\n        csUtils.getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n\n      // Get data with same normal and within the same slice\n      annotationsToDisplay = this.filterAnnotationsWithinSlice(\n        annotations,\n        camera,\n        spacingInNormalDirection\n      );\n    } else {\n      throw new Error(`Viewport Type ${viewport.type} not supported`);\n    }\n\n    return annotationsToDisplay;\n  }\n\n  /**\n   * Altered version of the `utilities.planar.filterAnnotationsWithinSlice`,\n   * which uses the polyline position rather than the handle. As the polyline is\n   * always present.\n   */\n  private filterAnnotationsWithinSlice(\n    annotations: Annotations,\n    camera: Types.ICamera,\n    spacingInNormalDirection: number\n  ): Annotations {\n    const { viewPlaneNormal } = camera;\n\n    const annotationsWithParallelNormals = annotations.filter(\n      (td: Annotation) => {\n        const annotationViewPlaneNormal = td.metadata.viewPlaneNormal;\n\n        const isParallel =\n          Math.abs(vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >\n          PARALLEL_THRESHOLD;\n\n        return annotationViewPlaneNormal && isParallel;\n      }\n    );\n\n    // No in plane annotations.\n    if (!annotationsWithParallelNormals.length) {\n      return [];\n    }\n\n    // Annotation should be within the slice, which means that it should be between\n    // camera's focalPoint +/- spacingInNormalDirection.\n\n    const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n    const { focalPoint } = camera;\n\n    const annotationsWithinSlice = [];\n\n    for (const annotation of annotationsWithParallelNormals) {\n      const data = annotation.data;\n      const point = data.polyline[0];\n\n      if (!annotation.isVisible) {\n        continue;\n      }\n\n      // A = point\n      // B = focal point\n      // P = normal\n\n      // B-A dot P  => Distance in the view direction.\n      // this should be less than half the slice distance.\n\n      const dir = vec3.create();\n\n      vec3.sub(dir, focalPoint, point);\n\n      const dot = vec3.dot(dir, viewPlaneNormal);\n\n      if (Math.abs(dot) < halfSpacingInNormalDirection) {\n        annotationsWithinSlice.push(annotation);\n      }\n    }\n\n    return annotationsWithinSlice;\n  }\n\n  /**\n   * Draws the `PlanarFreehandROIAnnotation`s at each request animation frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, renderingEngine } = enabledElement;\n    const { element } = viewport;\n\n    const targetId = this.getTargetId(viewport);\n\n    let annotations = <PlanarFreehandROIAnnotation[]>(\n      getAnnotations(this.getToolName(), element)\n    );\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    ) as PlanarFreehandROIAnnotation[];\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const isDrawing = this.isDrawing;\n    const isEditingOpen = this.isEditingOpen;\n    const isEditingClosed = this.isEditingClosed;\n\n    if (!(isDrawing || isEditingOpen || isEditingClosed)) {\n      // No annotations are currently being modified, so we can just use the\n      // render contour method to render all of them\n      annotations.forEach((annotation) => {\n        this.renderContour(enabledElement, svgDrawingHelper, annotation);\n      });\n    } else {\n      // One of the annotations will need special rendering treatment, render all\n      // other annotations not being interacted with using the standard renderContour\n      // rendering path.\n      const activeAnnotationUID = this.commonData.annotation.annotationUID;\n\n      annotations.forEach((annotation) => {\n        if (annotation.annotationUID === activeAnnotationUID) {\n          if (isDrawing) {\n            this.renderContourBeingDrawn(\n              enabledElement,\n              svgDrawingHelper,\n              annotation\n            );\n          } else if (isEditingClosed) {\n            this.renderClosedContourBeingEdited(\n              enabledElement,\n              svgDrawingHelper,\n              annotation\n            );\n          } else if (isEditingOpen) {\n            this.renderOpenContourBeingEdited(\n              enabledElement,\n              svgDrawingHelper,\n              annotation\n            );\n          } else {\n            throw new Error(\n              `Unknown ${this.getToolName()} annotation rendering state`\n            );\n          }\n        } else {\n          this.renderContour(enabledElement, svgDrawingHelper, annotation);\n        }\n      });\n\n      // Todo: return boolean flag for each rendering route in the planar tool.\n      renderStatus = true;\n    }\n\n    if (!this.configuration.calculateStats) return;\n\n    annotations.forEach((annotation) => {\n      const activeAnnotationUID = this.commonData?.annotation.annotationUID;\n      if (\n        annotation.annotationUID === activeAnnotationUID &&\n        !this.commonData?.movingTextBox\n      )\n        return;\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      if (!this.commonData?.movingTextBox) {\n        const { data } = annotation;\n        if (\n          !data.cachedStats[targetId] ||\n          data.cachedStats[targetId].areaUnit === undefined\n        ) {\n          data.cachedStats[targetId] = {\n            Modality: null,\n            area: null,\n            max: null,\n            mean: null,\n            stdDev: null,\n            areaUnit: null,\n          };\n\n          this._calculateCachedStats(\n            annotation,\n            viewport,\n            renderingEngine,\n            enabledElement,\n            modalityUnitOptions\n          );\n        } else if (annotation.invalidated) {\n          this._throttledCalculateCachedStats(\n            annotation,\n            viewport,\n            renderingEngine,\n            enabledElement,\n            modalityUnitOptions\n          );\n        }\n      }\n\n      this._renderStats(annotation, viewport, enabledElement, svgDrawingHelper);\n    });\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats = (\n    annotation,\n    viewport,\n    renderingEngine,\n    enabledElement,\n    modalityUnitOptions: ModalityUnitOptions\n  ) => {\n    const data = annotation.data;\n    const { cachedStats, polyline: points } = data;\n\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData, metadata } = image;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n      const scale = getCalibratedScale(image);\n      const area =\n        polyline.calculateAreaOfPoints(canvasCoordinates) / scale / scale;\n\n      const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[0]);\n      worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n      worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n      worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n\n      let iMin = worldPosIndex[0];\n      let iMax = worldPosIndex[0];\n\n      let jMin = worldPosIndex[1];\n      let jMax = worldPosIndex[1];\n\n      let kMin = worldPosIndex[2];\n      let kMax = worldPosIndex[2];\n\n      for (let j = 1; j < points.length; j++) {\n        const worldPosIndex = csUtils.transformWorldToIndex(\n          imageData,\n          points[j]\n        );\n        worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n        worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n        worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n        iMin = Math.min(iMin, worldPosIndex[0]);\n        iMax = Math.max(iMax, worldPosIndex[0]);\n\n        jMin = Math.min(jMin, worldPosIndex[1]);\n        jMax = Math.max(jMax, worldPosIndex[1]);\n\n        kMin = Math.min(kMin, worldPosIndex[2]);\n        kMax = Math.max(kMax, worldPosIndex[2]);\n      }\n\n      // Expand bounding box\n      const iDelta = 0.01 * (iMax - iMin);\n      const jDelta = 0.01 * (jMax - jMin);\n      const kDelta = 0.01 * (kMax - kMin);\n\n      iMin = Math.floor(iMin - iDelta);\n      iMax = Math.ceil(iMax + iDelta);\n      jMin = Math.floor(jMin - jDelta);\n      jMax = Math.ceil(jMax + jDelta);\n      kMin = Math.floor(kMin - kDelta);\n      kMax = Math.ceil(kMax + kDelta);\n\n      const boundsIJK = [\n        [iMin, iMax],\n        [jMin, jMax],\n        [kMin, kMax],\n      ] as [Types.Point2, Types.Point2, Types.Point2];\n\n      const worldPosEnd = imageData.indexToWorld([iMax, jMax, kMax]);\n      const canvasPosEnd = viewport.worldToCanvas(worldPosEnd);\n\n      let count = 0;\n      let sum = 0;\n      let sumSquares = 0;\n      let max = -Infinity;\n\n      const statCalculator = ({ value: newValue }) => {\n        if (newValue > max) {\n          max = newValue;\n        }\n\n        sum += newValue;\n        sumSquares += newValue ** 2;\n        count += 1;\n      };\n\n      let curRow = 0;\n      let intersections = [];\n      let intersectionCounter = 0;\n      pointInShapeCallback(\n        imageData,\n        (pointLPS, pointIJK) => {\n          let result = true;\n          const point = viewport.worldToCanvas(pointLPS);\n          if (point[1] != curRow) {\n            intersectionCounter = 0;\n            curRow = point[1];\n            intersections = getIntersectionCoordinatesWithPolyline(\n              canvasCoordinates,\n              point,\n              [canvasPosEnd[0], point[1]]\n            );\n            intersections.sort(\n              (function (index) {\n                return function (a, b) {\n                  return a[index] === b[index]\n                    ? 0\n                    : a[index] < b[index]\n                    ? -1\n                    : 1;\n                };\n              })(0)\n            );\n          }\n          if (intersections.length && point[0] > intersections[0][0]) {\n            intersections.shift();\n            intersectionCounter++;\n          }\n          if (intersectionCounter % 2 === 0) {\n            result = false;\n          }\n          return result;\n        },\n        statCalculator,\n        boundsIJK\n      );\n\n      const mean = sum / count;\n\n      // https://www.strchr.com/standard_deviation_in_one_pass?allcomments=1\n      let stdDev = sumSquares / count - mean ** 2;\n      stdDev = Math.sqrt(stdDev);\n\n      const modalityUnit = getModalityUnit(\n        metadata.Modality,\n        annotation.metadata.referencedImageId,\n        modalityUnitOptions\n      );\n\n      cachedStats[targetId] = {\n        Modality: metadata.Modality,\n        area,\n        mean,\n        max,\n        stdDev,\n        areaUnit: getCalibratedAreaUnits(null, image),\n        modalityUnit,\n      };\n    }\n\n    this.triggerAnnotationModified(annotation, enabledElement);\n\n    annotation.invalidated = false;\n\n    return cachedStats;\n  };\n\n  _renderStats = (annotation, viewport, enabledElement, svgDrawingHelper) => {\n    const data = annotation.data;\n    const targetId = this.getTargetId(viewport);\n\n    const textLines = this._getTextLines(data, targetId);\n    if (!textLines || textLines.length === 0) return;\n\n    const canvasCoordinates = data.polyline.map((p) =>\n      viewport.worldToCanvas(p)\n    );\n    if (!data.handles.textBox.hasMoved) {\n      const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n      data.handles.textBox.worldPosition =\n        viewport.canvasToWorld(canvasTextBoxCoords);\n    }\n\n    const textBoxPosition = viewport.worldToCanvas(\n      data.handles.textBox.worldPosition\n    );\n\n    const styleSpecifier: AnnotationStyle.StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const textBoxUID = '1';\n    const boundingBox = drawLinkedTextBox(\n      svgDrawingHelper,\n      annotation.annotationUID ?? '',\n      textBoxUID,\n      textLines,\n      textBoxPosition,\n      canvasCoordinates,\n      {},\n      this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n    );\n\n    const { x: left, y: top, width, height } = boundingBox;\n\n    data.handles.textBox.worldBoundingBox = {\n      topLeft: viewport.canvasToWorld([left, top]),\n      topRight: viewport.canvasToWorld([left + width, top]),\n      bottomLeft: viewport.canvasToWorld([left, top + height]),\n      bottomRight: viewport.canvasToWorld([left + width, top + height]),\n    };\n  };\n\n  _getTextLines = (data, targetId: string): string[] => {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit } =\n      cachedVolumeStats;\n\n    const textLines: string[] = [];\n\n    if (area) {\n      const areaLine = isEmptyArea\n        ? `Area: Oblique not supported`\n        : `Area: ${roundNumber(area)} ${areaUnit}`;\n      textLines.push(areaLine);\n    }\n\n    if (mean) {\n      textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n    }\n\n    if (max) {\n      textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n    }\n\n    if (stdDev) {\n      textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n    }\n\n    return textLines;\n  };\n}\n\nPlanarFreehandROITool.toolName = 'PlanarFreehandROI';\nexport default PlanarFreehandROITool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawArrow as drawArrowSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { ArrowAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass ArrowAnnotateTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        getTextCallback,\n        changeTextCallback,\n        preventHandleOutsideImage: false,\n        arrowFirst: true,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): ArrowAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const { arrowFirst } = this.configuration;\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        text: '',\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          arrowFirst,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: ArrowAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: ArrowAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: ArrowAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewportId, renderingEngineId, renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    if (newAnnotation) {\n      this.configuration.getTextCallback((text) => {\n        if (!text) {\n          removeAnnotation(annotation.annotationUID);\n          triggerAnnotationRenderForViewportIds(\n            renderingEngine,\n            viewportIdsToRender\n          );\n          this.editData = null;\n          this.isDrawing = false;\n          return;\n        }\n        annotation.data.text = text;\n\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n\n        triggerAnnotationRenderForViewportIds(\n          renderingEngine,\n          viewportIdsToRender\n        );\n      });\n    } else {\n      const eventType = Events.ANNOTATION_MODIFIED;\n\n      const eventDetail: AnnotationModifiedEventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  touchTapCallback = (evt: EventTypes.TouchTapEventType) => {\n    if (evt.detail.taps == 2) {\n      this.doubleClickCallback(evt);\n    }\n  };\n\n  doubleClickCallback = (evt: EventTypes.TouchTapEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return;\n    }\n\n    const clickedAnnotation = annotations.find((annotation) =>\n      this.isPointNearTool(\n        element,\n        annotation as ArrowAnnotation,\n        eventDetail.currentPoints.canvas,\n        6 // Todo: get from configuration\n      )\n    );\n\n    if (!clickedAnnotation) {\n      return;\n    }\n\n    const annotation = clickedAnnotation as ArrowAnnotation;\n\n    this.configuration.changeTextCallback(\n      clickedAnnotation,\n      evt.detail,\n      this._doneChangingTextCallback.bind(this, element, annotation)\n    );\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    // This double click was handled and the dialogue was displayed.\n    // No need for any other listener to handle it too - stopImmediatePropagation\n    // helps ensure this primarily so that no other listeners on the target element\n    // get called.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  };\n\n  _doneChangingTextCallback(element, annotation, updatedText): void {\n    annotation.data.text = updatedText;\n\n    const { renderingEngine, viewportId, renderingEngineId } =\n      getEnabledElement(element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    triggerEvent(eventTarget, eventType, {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    });\n  }\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ArrowAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles, text } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineWidth,\n          }\n        );\n      }\n\n      const arrowUID = '1';\n      if (this.configuration.arrowFirst) {\n        drawArrowSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arrowUID,\n          canvasCoordinates[1],\n          canvasCoordinates[0],\n          {\n            color,\n            width: lineWidth,\n            lineDash: lineDash,\n          }\n        );\n      } else {\n        drawArrowSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arrowUID,\n          canvasCoordinates[0],\n          canvasCoordinates[1],\n          {\n            color,\n            width: lineWidth,\n            lineDash: lineDash,\n          }\n        );\n      }\n\n      renderStatus = true;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (!text) {\n        continue;\n      }\n\n      // Need to update to sync w/ annotation while unlinked/not moved\n      if (!data.handles.textBox.hasMoved) {\n        // linked to the point that doesn't have the arrowhead by default\n        const canvasTextBoxCoords = canvasCoordinates[1];\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        [text],\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _isInsideVolume(index1, index2, dimensions) {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  }\n}\n\nfunction getTextCallback(doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nArrowAnnotateTool.toolName = 'ArrowAnnotate';\nexport default ArrowAnnotateTool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport roundNumber from '../../utilities/roundNumber';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { AngleAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass AngleTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  angleStartedNotYetCompleted: boolean;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.InteractionEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): AngleAnnotation => {\n    if (this.angleStartedNotYetCompleted) {\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: AngleAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2, point3] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line1 = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line1.start.x, line1.start.y],\n      [line1.end.x, line1.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) return true;\n    if (!point3) return false;\n\n    const canvasPoint3 = viewport.worldToCanvas(point3);\n\n    const line2 = {\n      start: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n      end: {\n        x: canvasPoint3[0],\n        y: canvasPoint3[1],\n      },\n    };\n\n    const distanceToPoint2 = lineSegment.distanceToPoint(\n      [line2.start.x, line2.start.y],\n      [line2.end.x, line2.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint2 <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: AngleAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: AngleAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n\n    const { data } = annotation;\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    // If preventing new measurement means we are in the middle of an existing measurement\n    // we shouldn't deactivate modify or draw\n    if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {\n      // adds the last point to the measurement\n      this.editData.handleIndex = 2;\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      this.angleStartedNotYetCompleted = false;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as AngleAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n      if (!data.cachedStats[targetId]) {\n        data.cachedStats[targetId] = {\n          angle: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      let lineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      renderStatus = true;\n\n      // Don't add textBox until annotation has 3 anchor points (actually 4 because of the center point)\n      if (canvasCoordinates.length !== 3) {\n        return renderStatus;\n      }\n\n      lineUID = '2';\n\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[1],\n        canvasCoordinates[2],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      if (!data.cachedStats[targetId]?.angle) {\n        continue;\n      }\n\n      const textLines = this._getTextLines(data, targetId);\n\n      if (!data.handles.textBox.hasMoved) {\n        // linked to the vertex by default\n        const canvasTextBoxCoords = canvasCoordinates[1];\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  // text line for the current active angle annotation\n  _getTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n\n    if (angle === undefined) {\n      return;\n    }\n\n    const textLines = [`${roundNumber(angle)} ${String.fromCharCode(176)}`];\n\n    return textLines;\n  }\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    // Until we have all three anchors bail out\n    if (data.handles.points.length !== 3) {\n      return;\n    }\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const worldPos3 = data.handles.points[2];\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n      const angle = angleBetweenLines(\n        [worldPos1, worldPos2],\n        [worldPos2, worldPos3]\n      );\n\n      cachedStats[targetId] = {\n        angle,\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n}\n\nAngleTool.toolName = 'Angle';\nexport default AngleTool;\n","import { Types } from '@cornerstonejs/core';\n\n/**\n * Return the midpoint (think average) of all the provided points.\n */\nconst midPoint = (\n  ...args: (Types.Point2 | Types.Point3)[]\n): Types.Point2 | Types.Point3 => {\n  const ret =\n    args[0].length === 2 ? <Types.Point2>[0, 0] : <Types.Point3>[0, 0, 0];\n  const len = args.length;\n  for (const arg of args) {\n    ret[0] += arg[0] / len;\n    ret[1] += arg[1] / len;\n    if (ret.length === 3) ret[2] += arg[2] / len;\n  }\n  return ret;\n};\n\nconst midPoint2 = midPoint as (...args: Types.Point2[]) => Types.Point2;\n\nexport default midPoint;\n\nexport { midPoint2 };\n","import { vec3 } from 'gl-matrix';\nimport { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { midPoint2 } from '../../utilities/math/midPoint';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { AngleAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass CobbAngleTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  angleStartedNotYetCompleted: boolean;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.MouseDownActivateEventType\n  ): AngleAnnotation => {\n    if (this.angleStartedNotYetCompleted) {\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: AngleAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2, point3, point4] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n    const canvasPoint3 = viewport.worldToCanvas(point3);\n    const canvasPoint4 = viewport.worldToCanvas(point4);\n\n    const line1 = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const line2 = {\n      start: {\n        x: canvasPoint3[0],\n        y: canvasPoint3[1],\n      },\n      end: {\n        x: canvasPoint4[0],\n        y: canvasPoint4[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line1.start.x, line1.start.y],\n      [line1.end.x, line1.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    const distanceToPoint2 = lineSegment.distanceToPoint(\n      [line2.start.x, line2.start.y],\n      [line2.end.x, line2.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.MouseDownEventType,\n    annotation: AngleAnnotation,\n    interactionType: InteractionTypes\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.MouseDownEventType,\n    annotation: AngleAnnotation,\n    handle: ToolHandle,\n    interactionType = 'mouse'\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _mouseUpCallback = (\n    evt: EventTypes.MouseUpEventType | EventTypes.MouseClickEventType\n  ) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n\n    const { data } = annotation;\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    // If preventing new measurement means we are in the middle of an existing measurement\n    // we shouldn't deactivate modify or draw\n    if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {\n      resetElementCursor(element);\n\n      // adds the first point of the second line\n      this.editData.handleIndex = data.handles.points.length;\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  /**\n   * Handles the mouse down for all points that follow the very first mouse down.\n   * The very first mouse down is handled by addAnnotation.\n   * This method ensures that the state of the tool is correct for the drawing of the second line segment.\n   * In particular it ensures that the second segment can be created via a mouse down and drag.\n   */\n  _mouseDownCallback = (\n    evt: EventTypes.MouseUpEventType | EventTypes.MouseClickEventType\n  ) => {\n    const { annotation, handleIndex } = this.editData;\n    const eventDetail = evt.detail;\n    const { element, currentPoints } = eventDetail;\n    const worldPos = currentPoints.world;\n    const { data } = annotation;\n\n    if (handleIndex === 1) {\n      // This is the mouse down for the second point of the first segment.\n      // The mouse up takes care of adding the first point of the second segment.\n      data.handles.points[1] = worldPos;\n      this.editData.hasMoved =\n        data.handles.points[1][0] !== data.handles.points[0][0] ||\n        data.handles.points[1][1] !== data.handles.points[0][0];\n      return;\n    }\n\n    if (handleIndex === 3) {\n      // This is the mouse down for the second point of the second segment (i.e. the last point)\n      data.handles.points[3] = worldPos;\n      this.editData.hasMoved =\n        data.handles.points[3][0] !== data.handles.points[2][0] ||\n        data.handles.points[3][1] !== data.handles.points[2][0];\n\n      this.angleStartedNotYetCompleted = false;\n      return;\n    }\n\n    // This is the first mouse down of the first point of the second line segment.\n    // It is as if we have not moved yet because Cobb Angle has two, disjoint sections, each with its own move.\n    this.editData.hasMoved = false;\n    hideElementCursor(element);\n\n    // Add the last segment points for the subsequent drag/mouse move.\n    data.handles.points[2] = data.handles.points[3] = worldPos;\n    this.editData.handleIndex = data.handles.points.length - 1;\n  };\n\n  _mouseDragCallback = (\n    evt: EventTypes.MouseDragEventType | EventTypes.MouseMoveEventType\n  ) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      this.angleStartedNotYetCompleted = false;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n\n    // element.addEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n\n    // element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DOWN,\n      this._mouseDownCallback as EventListener\n    );\n\n    // element.addEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DOWN,\n      this._mouseDownCallback as EventListener\n    );\n\n    // element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as AngleAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n      if (!data.cachedStats[targetId]) {\n        data.cachedStats[targetId] = {\n          angle: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      let lineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      renderStatus = true;\n\n      // Don't add textBox until annotation has 4 anchor points\n      if (canvasCoordinates.length < 4) {\n        return renderStatus;\n      }\n\n      lineUID = '2';\n\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[2],\n        canvasCoordinates[3],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      lineUID = '3';\n      const mid1 = midPoint2(canvasCoordinates[0], canvasCoordinates[1]);\n      const mid2 = midPoint2(canvasCoordinates[2], canvasCoordinates[3]);\n      drawLineSvg(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {\n        color,\n        lineWidth: '1',\n        lineDash: '1,4',\n      });\n\n      if (!data.cachedStats[targetId]?.angle) {\n        continue;\n      }\n\n      const textLines = this._getTextLines(data, targetId);\n\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  // text line for the current active angle annotation\n  _getTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n\n    if (angle === undefined) {\n      return;\n    }\n\n    const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];\n\n    return textLines;\n  }\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    // Until we have all four anchors bail out\n    if (data.handles.points.length !== 4) {\n      return;\n    }\n\n    const seg1: [Types.Point3, Types.Point3] = [null, null];\n    const seg2: [Types.Point3, Types.Point3] = [null, null];\n    let minDist = Number.MAX_VALUE;\n\n    // Order the endpoints of each line segment such that seg1[1] and seg2[0]\n    // are the closest (Euclidean distance-wise) to each other. Thus\n    // the angle formed between the vectors seg1[1]->seg1[0] and seg2[0]->seg[1]\n    // is calculated.\n    // The assumption here is that the Cobb angle line segments are drawn\n    // such that the segments intersect nearest the segment endpoints\n    // that are closest AND those closest endpoints are the tails of the\n    // vectors used to calculate the angle between the vectors/line segments.\n    for (let i = 0; i < 2; i += 1) {\n      for (let j = 2; j < 4; j += 1) {\n        const dist = vec3.distance(\n          data.handles.points[i],\n          data.handles.points[j]\n        );\n        if (dist < minDist) {\n          minDist = dist;\n          seg1[1] = data.handles.points[i];\n          seg1[0] = data.handles.points[(i + 1) % 2];\n          seg2[0] = data.handles.points[j];\n          seg2[1] = data.handles.points[2 + ((j - 1) % 2)];\n        }\n      }\n    }\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n      const angle = angleBetweenLines(seg1, seg2);\n\n      cachedStats[targetId] = {\n        angle,\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n}\n\nCobbAngleTool.toolName = 'CobbAngle';\nexport default CobbAngleTool;\n","import {\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  utilities,\n  getEnabledElementByIds,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { drawLine } from '../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport {\n  EventTypes,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n  Annotation,\n  Annotations,\n} from '../types';\nimport { ReferenceCursor } from '../types/ToolSpecificAnnotationTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport { vec3 } from 'gl-matrix';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport {\n  hideElementCursor,\n  resetElementCursor,\n} from '../cursors/elementCursor';\nimport { getToolGroup } from '../store/ToolGroupManager';\n\n/**\n * ReferenceCursors is a tool that will show your cursors position in all other elements in the toolGroup if they have a matching FrameOfReference relative to its position in world space.\n * Also when positionSync is enabled, it will try to sync viewports so that the cursor can be displayed in the correct position in all viewports.\n *\n * Configuration:\n * - positionSync: boolean, if true, it will try to sync viewports so that the cursor can be displayed in the correct position in all viewports.\n * - disableCursor: boolean, if true, it will hide the cursor in all viewports. You need to disable and reactivate the tool for this to apply.\n * - displayThreshold: number, if the distance of the cursor in a viewport is bigger than this threshold the cursor will not be displayed.\n *\n * Only uses Active and Disabled state\n */\nclass ReferenceCursors extends AnnotationDisplayTool {\n  static toolName;\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  isDrawing = false;\n  isHandleOutsideImage = false;\n  _elementWithCursor: null | HTMLDivElement = null;\n  _currentCursorWorldPosition: null | Types.Point3 = null;\n  _currentCanvasPosition: null | Types.Point2 = null;\n  //need to keep track if this was enabled when tool was enabled because we need to know if we should reset cursors\n  _disableCursorEnabled = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        displayThreshold: 5,\n        positionSync: true,\n        disableCursor: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this._disableCursorEnabled = this.configuration.disableCursor;\n  }\n\n  /**\n   * Overwritten mouseMoveCallback since we want to keep track of the current mouse position and redraw on mouseMove\n   * @virtual Event handler for Cornerstone MOUSE_MOVE event.\n   *\n   *\n   * @param evt - The normalized mouse event\n   * @param filteredAnnotations - The annotations to check for hover interactions\n   * @returns True if the annotation needs to be re-drawn by the annotationRenderingEngine.\n   */\n  mouseMoveCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const { detail } = evt;\n    const { element, currentPoints } = detail;\n\n    //save current positions and current element the curser is hovering over\n    this._currentCursorWorldPosition = currentPoints.world;\n    this._currentCanvasPosition = currentPoints.canvas;\n    this._elementWithCursor = element;\n\n    const annotation = this.getActiveAnnotation(element);\n    if (annotation === null) {\n      this.createInitialAnnotation(currentPoints.world, element);\n      return false;\n    }\n    this.updateAnnotationPosition(element, annotation);\n    return false;\n  };\n\n  onSetToolActive(): void {\n    this._disableCursorEnabled = this.configuration.disableCursor;\n    if (!this._disableCursorEnabled) return;\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n    if (!viewportIds) return;\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n\n    enabledElements.forEach((element) => {\n      if (element) hideElementCursor(element.viewport.element);\n    });\n  }\n  onSetToolDisabled(): void {\n    if (!this._disableCursorEnabled) return;\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n    if (!viewportIds) return;\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n    enabledElements.forEach((element) => {\n      if (element) resetElementCursor(element.viewport.element);\n    });\n  }\n\n  createInitialAnnotation = (\n    worldPos: Types.Point3,\n    element: HTMLDivElement\n  ): void => {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) throw new Error('No enabled element found');\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    if (!viewPlaneNormal || !viewUp) throw new Error('Camera not found');\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          points: [[...worldPos]] as [Types.Point3],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n      },\n    };\n\n    const annotations = getAnnotations(this.getToolName(), element);\n\n    if (annotations.length > 0) return null;\n    const annotationId = addAnnotation(annotation, element);\n\n    if (annotationId === null) return;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  getActiveAnnotation(element: HTMLDivElement): null | Annotation {\n    const annotations = getAnnotations(this.getToolName(), element);\n    if (!annotations.length) {\n      return null;\n    }\n    const targetAnnotation = annotations[0];\n    return targetAnnotation;\n  }\n\n  /**\n   * updates the position of the annotation to match the currently set world position\n   */\n  updateAnnotationPosition(\n    element: HTMLDivElement,\n    annotation: Annotation\n  ): void {\n    const worldPos = this._currentCursorWorldPosition;\n    if (!worldPos) return;\n    if (!annotation.data?.handles?.points) return;\n    annotation.data.handles.points = [[...worldPos]];\n    annotation.invalidated = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) return;\n    const { renderingEngine } = enabledElement;\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  }\n\n  //checks if we need to update the annotation position due to camera changes\n  onCameraModified = (evt: any): void => {\n    const eventDetail = evt.detail;\n    const { element, previousCamera, camera } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const viewport = enabledElement.viewport as\n      | Types.IVolumeViewport\n      | Types.IStackViewport;\n\n    //only react to changes for element with cursor, otherwise would cause infinite loop\n    if (element !== this._elementWithCursor) return;\n    //check if camera moved along its normal\n    const oldFocalPoint = previousCamera.focalPoint;\n    const cameraNormal = camera.viewPlaneNormal;\n    const newFocalPoint = camera.focalPoint;\n\n    const deltaCameraFocalPoint: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);\n    //check if focal point changed\n    if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) return;\n    //if nomrmal is perpendicular to focal point change, then we are not moving along the normal\n    const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);\n    //dot product is 0 -> perpendicular\n    if (Math.abs(dotProduct) < 1e-2) return;\n\n    //need to update the position of the annotation since camera changed\n    if (!this._currentCanvasPosition) return;\n\n    const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);\n    this._currentCursorWorldPosition = newWorldPos;\n    this.updateAnnotationPosition(element, this.getActiveAnnotation(element));\n  };\n\n  //display annotation if current viewing plane has a max distance of \"displayThreshold\" from the annotation\n  filterInteractableAnnotationsForElement(\n    element: HTMLDivElement,\n    annotations: Annotations\n  ): Annotations {\n    //calculate distance of current viewport to annotation\n    if (!(annotations instanceof Array) || annotations.length === 0) return [];\n    const annotation = annotations[0];\n    const viewport = getEnabledElement(element)?.viewport;\n    if (!viewport) return [];\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, focalPoint } = camera;\n    if (!viewPlaneNormal || !focalPoint) return [];\n    const points = annotation.data?.handles?.points;\n    if (!(points instanceof Array) || points.length !== 1) return [];\n    const worldPos = points[0];\n    const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n    const distance = utilities.planar.planeDistanceToPoint(plane, worldPos);\n    return distance < this.configuration.displayThreshold ? [annotation] : [];\n  }\n\n  /**\n   * Draws the cursor representation on the enabledElement\n   * Checks if a stack change has happened and updates annotation in that case\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, FrameOfReferenceUID } = enabledElement;\n\n    const isElementWithCursor = this._elementWithCursor === viewport.element;\n\n    //update stack position if position sync is enabled\n    if (this.configuration.positionSync && !isElementWithCursor) {\n      this.updateViewportImage(viewport);\n    }\n\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    //the viewport change from updateStackPosition might not be applied yet, so sometimes the annotation might not be immediately visible\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    ) as Annotations;\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ReferenceCursor;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points } = handles;\n\n      if (!annotationUID) return renderStatus;\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidthBase = parseFloat(\n        this.getStyle('lineWidth', styleSpecifier, annotation) as string\n      );\n\n      const lineWidth =\n        typeof lineWidthBase === 'number' && isElementWithCursor\n          ? lineWidthBase\n          : lineWidthBase;\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      if (points[0].some((e) => isNaN(e))) return renderStatus;\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2];\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      const crosshairUIDs = {\n        upper: 'upper',\n        right: 'right',\n        lower: 'lower',\n        left: 'left',\n      };\n      const [x, y] = canvasCoordinates[0];\n      const centerSpace = isElementWithCursor ? 20 : 7;\n      const lineLength = isElementWithCursor ? 5 : 7;\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.upper,\n        [x, y - (centerSpace / 2 + lineLength)],\n        [x, y - centerSpace / 2],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.lower,\n        [x, y + (centerSpace / 2 + lineLength)],\n        [x, y + centerSpace / 2],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.right,\n        [x + (centerSpace / 2 + lineLength), y],\n        [x + centerSpace / 2, y],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.left,\n        [x - (centerSpace / 2 + lineLength), y],\n        [x - centerSpace / 2, y],\n        { color, lineDash, lineWidth }\n      );\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n\n  updateViewportImage(\n    viewport: Types.IStackViewport | Types.IVolumeViewport\n  ): void {\n    const currentMousePosition = this._currentCursorWorldPosition;\n\n    if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e)))\n      return;\n\n    if (viewport instanceof StackViewport) {\n      const closestIndex = utilities.getClosestStackImageIndexForPoint(\n        currentMousePosition,\n        viewport\n      );\n\n      if (closestIndex === null) return;\n      if (closestIndex !== viewport.getCurrentImageIdIndex())\n        viewport.setImageIdIndex(closestIndex);\n    } else if (viewport instanceof VolumeViewport) {\n      const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n      if (!focalPoint || !viewPlaneNormal) return;\n      const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n      const currentDistance = utilities.planar.planeDistanceToPoint(\n        plane,\n        currentMousePosition,\n        true\n      );\n\n      if (Math.abs(currentDistance) < 0.5) return;\n      const normalizedViewPlane = vec3.normalize(\n        vec3.create(),\n        vec3.fromValues(...viewPlaneNormal)\n      );\n      const scaledPlaneNormal = vec3.scale(\n        vec3.create(),\n        normalizedViewPlane,\n        currentDistance\n      );\n      const newFocalPoint = vec3.add(\n        vec3.create(),\n        vec3.fromValues(...focalPoint),\n        scaledPlaneNormal\n      ) as Types.Point3;\n      //TODO: make check if new focal point is within bounds of volume\n      const isInBounds = true;\n      if (isInBounds) {\n        viewport.setCamera({ focalPoint: newFocalPoint });\n        const renderingEngine = viewport.getRenderingEngine();\n        if (renderingEngine) renderingEngine.renderViewport(viewport.id);\n      }\n    }\n  }\n}\n\nReferenceCursors.toolName = 'ReferenceCursors';\nexport default ReferenceCursors;\n","import AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { vec3 } from 'gl-matrix';\nimport {\n  getEnabledElementByIds,\n  getRenderingEngines,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { ScaleOverlayAnnotation } from '../types/ToolSpecificAnnotationTypes';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport {\n  drawLine as drawLineSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../drawingSvg';\nimport {\n  EventTypes,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../types';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport { getToolGroup } from '../store/ToolGroupManager';\n\nconst SCALEOVERLAYTOOL_ID = 'scaleoverlay-viewport';\nconst viewportsWithAnnotations = [];\n\n/**\n * @public\n * @class ScaleOverlayTool\n * @memberof Tools\n *\n * @classdesc Tool for displaying a scale overlay on the image.\n * @extends Tools.Base.BaseTool\n */\nclass ScaleOverlayTool extends AnnotationDisplayTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    renderingEngine: any;\n    viewport: any;\n    annotation: ScaleOverlayAnnotation;\n  } | null = {} as any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {\n        viewportId: '',\n        scaleLocation: 'bottom',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  _init = (): void => {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n\n    if (!renderingEngine) {\n      return;\n    }\n\n    // get viewports with tool enabled\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    if (!viewportIds) return;\n\n    // get enabled elements\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n\n    let { viewport } = enabledElements[0];\n    const { FrameOfReferenceUID } = enabledElements[0];\n\n    // onCameraModified, configuration.viewportId is set to the active\n    // viewport Id, here we are setting the viewport variable to the\n    // viewport with the matching Id\n    if (this.configuration.viewportId) {\n      enabledElements.forEach((element) => {\n        if (element.viewport.id == this.configuration.viewportId) {\n          viewport = element.viewport;\n        }\n      });\n    }\n\n    if (!viewport) {\n      return;\n    }\n\n    const { viewUp, viewPlaneNormal } = viewport.getCamera();\n\n    const viewportCanvasCornersInWorld =\n      csUtils.getViewportImageCornersInWorld(viewport);\n\n    let annotation = this.editData.annotation;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n\n    // if annotations have been created, get the annotation for the\n    // current viewport Id\n    if (annotations.length) {\n      annotation = annotations.filter(\n        (thisAnnotation) => thisAnnotation.data.viewportId == viewport.id\n      )[0] as ScaleOverlayAnnotation;\n    }\n\n    // viewportsWithAnnotations stores which viewports have an annotation,\n    // if the viewport does not have an annotation, create a new one\n    if (!viewportsWithAnnotations.includes(viewport.id)) {\n      const newAnnotation: ScaleOverlayAnnotation = {\n        metadata: {\n          toolName: this.getToolName(),\n          viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n          viewUp: <Types.Point3>[...viewUp],\n          FrameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          handles: {\n            points: viewportCanvasCornersInWorld,\n          },\n          viewportId: viewport.id,\n        },\n      };\n\n      viewportsWithAnnotations.push(viewport.id);\n\n      addAnnotation(newAnnotation, viewport.element);\n      annotation = newAnnotation;\n    } else if (this.editData.annotation.data.viewportId == viewport.id) {\n      this.editData.annotation.data.handles.points =\n        viewportCanvasCornersInWorld;\n      this.editData.annotation.data.viewportId = viewport.id;\n    }\n\n    this.editData = {\n      viewport,\n      renderingEngine,\n      annotation,\n    };\n  };\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onCameraModified = (evt: Types.EventTypes.CameraModifiedEvent): void => {\n    // If the camera is modified, we need to update the viewport\n    // that the camera was modified on\n    this.configuration.viewportId = evt.detail.viewportId;\n    this._init();\n  };\n\n  /**\n   * Used to draw the scale annotation in each request animation\n   * frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   * @returns\n   */\n\n  renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ) {\n    if (!this.editData.viewport) {\n      return;\n    }\n    const location = this.configuration.scaleLocation;\n    const { viewport } = enabledElement;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n    const annotation = annotations.filter(\n      (thisAnnotation) => thisAnnotation.data.viewportId == viewport.id\n    )[0];\n    const canvas = enabledElement.viewport.canvas;\n\n    const renderStatus = false;\n\n    if (!viewport) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const canvasSize = {\n      width: canvas.width,\n      height: canvas.height,\n    };\n\n    const topLeft = annotation.data.handles.points[0];\n    const topRight = annotation.data.handles.points[1];\n    const bottomLeft = annotation.data.handles.points[2];\n    const bottomRight = annotation.data.handles.points[3];\n\n    const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n\n    const worldWidthViewport = vec3.distance(bottomLeft, bottomRight);\n    const worldHeightViewport = vec3.distance(topLeft, bottomLeft);\n\n    // hscaleBounds and vscaleBounds compute the max bound for scales on the image\n    const hscaleBounds = this.computeScaleBounds(\n      canvasSize,\n      0.05,\n      0.05,\n      location\n    );\n\n    const vscaleBounds = this.computeScaleBounds(\n      canvasSize,\n      0.05,\n      0.05,\n      location\n    );\n\n    // Computes which scale size to use, ex: 100mm, 50mm\n    const scaleSize = this.computeScaleSize(\n      worldWidthViewport,\n      worldHeightViewport,\n      location\n    );\n\n    // Applies the scale with the predetermined size to the image in\n    // world coordinates, then converts them to canvas coordinates\n    const canvasCoordinates = this.computeWorldScaleCoordinates(\n      scaleSize,\n      location,\n      pointSet1\n    ).map((world) => viewport.worldToCanvas(world));\n\n    // Uses the bounds and canvas size to center the scale\n    // based on the location\n    const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(\n      canvasSize,\n      canvasCoordinates,\n      vscaleBounds,\n      hscaleBounds,\n      location\n    );\n\n    // Computes the end scale ticks coordinates\n    const scaleTicks = this.computeEndScaleTicks(\n      scaleCanvasCoordinates,\n      location\n    );\n\n    const { annotationUID } = annotation;\n\n    styleSpecifier.annotationUID = annotationUID;\n    const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n    const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n    const color = this.getStyle('color', styleSpecifier, annotation);\n    const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n    const scaleId = `${annotationUID}-scaleline`;\n    const scaleLineUID = '1';\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      scaleLineUID,\n      scaleCanvasCoordinates[0],\n      scaleCanvasCoordinates[1],\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      scaleId\n    );\n    const leftTickId = `${annotationUID}-left`;\n    const leftTickUID = '2';\n\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      leftTickUID,\n      scaleTicks.endTick1[0] as Types.Point2,\n      scaleTicks.endTick1[1] as Types.Point2,\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      leftTickId\n    );\n    const rightTickId = `${annotationUID}-right`;\n    const rightTickUID = '3';\n\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      rightTickUID,\n      scaleTicks.endTick2[0] as Types.Point2,\n      scaleTicks.endTick2[1] as Types.Point2,\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      rightTickId\n    );\n\n    const locationTextOffest = {\n      bottom: [-10, -42],\n      top: [-12, -35],\n      left: [-40, -20],\n      right: [-50, -20],\n    };\n\n    const textCanvasCoordinates = [\n      scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],\n      scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],\n    ];\n    const textBoxLines = this._getTextLines(scaleSize);\n\n    const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(\n      scaleSize,\n      location,\n      annotationUID,\n      scaleTicks.endTick1,\n      scaleTicks.endTick2\n    );\n\n    // draws inner ticks for scale\n    for (let i = 0; i < tickUIDs.length; i++) {\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        tickUIDs[i],\n        tickCoordinates[i][0],\n        tickCoordinates[i][1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n          shadow,\n        },\n        tickIds[i]\n      );\n    }\n\n    const textUID = 'text0';\n    drawTextBoxSvg(\n      svgDrawingHelper,\n      annotationUID,\n      textUID,\n      textBoxLines,\n      [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n      {\n        fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n        fontSize: '14px',\n        lineDash: '2,3',\n        lineWidth: '1',\n        shadow: true,\n        color: color,\n      }\n    );\n\n    return renderStatus;\n  }\n\n  _getTextLines(scaleSize: number): string[] | undefined {\n    let scaleSizeDisplayValue;\n    let scaleSizeUnits;\n    if (scaleSize >= 50) {\n      scaleSizeDisplayValue = scaleSize / 10; //convert to cm\n      scaleSizeUnits = ' cm';\n    } else {\n      scaleSizeDisplayValue = scaleSize; //convert to cm\n      scaleSizeUnits = ' mm';\n    }\n\n    const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];\n\n    return textLines;\n  }\n\n  /**\n   *\n   * @param worldWidthViewport\n   * @returns currentScaleSize\n   */\n  computeScaleSize = (\n    worldWidthViewport: number,\n    worldHeightViewport: number,\n    location: any\n  ) => {\n    const scaleSizes = [\n      16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,\n    ];\n    let currentScaleSize;\n    if (location == 'top' || location == 'bottom') {\n      currentScaleSize = scaleSizes.filter(\n        (scaleSize) =>\n          scaleSize < worldWidthViewport * 0.6 &&\n          scaleSize > worldWidthViewport * 0.2\n      );\n    } else {\n      currentScaleSize = scaleSizes.filter(\n        (scaleSize) =>\n          scaleSize < worldHeightViewport * 0.6 &&\n          scaleSize > worldHeightViewport * 0.2\n      );\n    }\n\n    return currentScaleSize[0];\n  };\n\n  /**\n   *  calculates scale ticks for ends of the scale\n   * @param canvasCoordinates\n   * @returns leftTick, rightTick\n   */\n  computeEndScaleTicks = (canvasCoordinates, location) => {\n    const locationTickOffset = {\n      bottom: [\n        [0, -10],\n        [0, -10],\n      ],\n      top: [\n        [0, 10],\n        [0, 10],\n      ],\n      left: [\n        [0, 0],\n        [10, 0],\n      ],\n      right: [\n        [0, 0],\n        [-10, 0],\n      ],\n    };\n\n    const endTick1 = [\n      [\n        canvasCoordinates[1][0] + locationTickOffset[location][0][0],\n        canvasCoordinates[1][1] + locationTickOffset[location][0][0],\n      ],\n      [\n        canvasCoordinates[1][0] + locationTickOffset[location][1][0],\n        canvasCoordinates[1][1] + locationTickOffset[location][1][1],\n      ],\n    ];\n    const endTick2 = [\n      [\n        canvasCoordinates[0][0] + locationTickOffset[location][0][0],\n        canvasCoordinates[0][1] + locationTickOffset[location][0][0],\n      ],\n      [\n        canvasCoordinates[0][0] + locationTickOffset[location][1][0],\n        canvasCoordinates[0][1] + locationTickOffset[location][1][1],\n      ],\n    ];\n\n    return {\n      endTick1: endTick1,\n      endTick2: endTick2,\n    };\n  };\n\n  computeInnerScaleTicks = (\n    scaleSize: number,\n    location: string,\n    annotationUID: string,\n    leftTick: any[][],\n    rightTick: any[][]\n  ) => {\n    let canvasScaleSize;\n    if (location == 'bottom' || location == 'top') {\n      canvasScaleSize = rightTick[0][0] - leftTick[0][0];\n    } else if (location == 'left' || location == 'right') {\n      canvasScaleSize = rightTick[0][1] - leftTick[0][1];\n    }\n    const tickIds = [];\n    const tickUIDs = [];\n    const tickCoordinates = [];\n    let numberSmallTicks = scaleSize;\n\n    if (scaleSize >= 50) {\n      numberSmallTicks = scaleSize / 10;\n    }\n\n    const tickSpacing = canvasScaleSize / numberSmallTicks;\n\n    for (let i = 0; i < numberSmallTicks - 1; i++) {\n      const locationOffset = {\n        bottom: [\n          [tickSpacing * (i + 1), 0],\n          [tickSpacing * (i + 1), 5],\n        ],\n        top: [\n          [tickSpacing * (i + 1), 0],\n          [tickSpacing * (i + 1), -5],\n        ],\n        left: [\n          [0, tickSpacing * (i + 1)],\n          [-5, tickSpacing * (i + 1)],\n        ],\n        right: [\n          [0, tickSpacing * (i + 1)],\n          [5, tickSpacing * (i + 1)],\n        ],\n      };\n      tickIds.push(`${annotationUID}-tick${i}`);\n      tickUIDs.push(`tick${i}`);\n      if ((i + 1) % 5 == 0) {\n        tickCoordinates.push([\n          [\n            leftTick[0][0] + locationOffset[location][0][0],\n            leftTick[0][1] + locationOffset[location][0][1],\n          ],\n          [\n            leftTick[1][0] + locationOffset[location][0][0],\n            leftTick[1][1] + locationOffset[location][0][1],\n          ],\n        ]);\n      } else {\n        tickCoordinates.push([\n          [\n            leftTick[0][0] + locationOffset[location][0][0],\n            leftTick[0][1] + locationOffset[location][0][1],\n          ],\n          [\n            leftTick[1][0] + locationOffset[location][1][0],\n            leftTick[1][1] + locationOffset[location][1][1],\n          ],\n        ]);\n      }\n    }\n\n    return { tickIds, tickUIDs, tickCoordinates };\n  };\n\n  computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {\n    let worldCoordinates;\n    let topBottomVec = vec3.subtract(vec3.create(), pointSet[0], pointSet[1]);\n    topBottomVec = vec3.normalize(vec3.create(), topBottomVec) as Types.Point3;\n\n    let topRightVec = vec3.subtract(vec3.create(), pointSet[2], pointSet[0]);\n    topRightVec = vec3.normalize(vec3.create(), topRightVec);\n\n    const midpointLocation = {\n      bottom: [pointSet[1], pointSet[2]],\n      top: [pointSet[0], pointSet[3]],\n      right: [pointSet[2], pointSet[3]],\n      left: [pointSet[0], pointSet[1]],\n    };\n\n    const midpoint = vec3\n      .add(\n        vec3.create(),\n        midpointLocation[location][0],\n        midpointLocation[location][0]\n      )\n      .map((i) => i / 2) as Types.Point3;\n\n    const offset =\n      scaleSize /\n      2 /\n      Math.sqrt(\n        Math.pow(topBottomVec[0], 2) +\n          Math.pow(topBottomVec[1], 2) +\n          Math.pow(topBottomVec[2], 2)\n      );\n\n    if (location == 'top' || location == 'bottom') {\n      worldCoordinates = [\n        vec3.subtract(\n          vec3.create(),\n          midpoint,\n          topRightVec.map((i) => i * offset) as Types.Point3\n        ),\n        vec3.add(\n          vec3.create(),\n          midpoint,\n          topRightVec.map((i) => i * offset) as Types.Point3\n        ),\n      ];\n    } else if (location == 'left' || location == 'right') {\n      worldCoordinates = [\n        vec3.add(\n          vec3.create(),\n          midpoint,\n          topBottomVec.map((i) => i * offset) as Types.Point3\n        ),\n        vec3.subtract(\n          vec3.create(),\n          midpoint,\n          topBottomVec.map((i) => i * offset) as Types.Point3\n        ),\n      ];\n    }\n\n    return worldCoordinates;\n  };\n\n  /**\n   * Computes the centered canvas coordinates for scale\n   * @param canvasSize\n   * @param canvasCoordinates\n   * @param vscaleBounds\n   * @returns scaleCanvasCoordinates\n   */\n  computeCanvasScaleCoordinates = (\n    canvasSize,\n    canvasCoordinates,\n    vscaleBounds,\n    hscaleBounds,\n    location\n  ) => {\n    let scaleCanvasCoordinates;\n    if (location == 'top' || location == 'bottom') {\n      const worldDistanceOnCanvas =\n        canvasCoordinates[0][0] - canvasCoordinates[1][0];\n      scaleCanvasCoordinates = [\n        [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],\n        [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],\n      ];\n    } else if (location == 'left' || location == 'right') {\n      const worldDistanceOnCanvas =\n        canvasCoordinates[0][1] - canvasCoordinates[1][1];\n      scaleCanvasCoordinates = [\n        [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],\n        [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],\n      ];\n    }\n\n    return scaleCanvasCoordinates;\n  };\n\n  /**\n   * Computes the max bound for scales on the image\n   * @param  {{width: number, height: number}} canvasSize\n   * @param  {number} horizontalReduction\n   * @param  {number} verticalReduction\n   * @returns {Object.<string, { x:number, y:number }>}\n   */\n  computeScaleBounds = (\n    canvasSize,\n    horizontalReduction,\n    verticalReduction,\n    location\n  ) => {\n    const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);\n    const vReduction = verticalReduction * Math.min(1000, canvasSize.height);\n    const locationBounds = {\n      bottom: [-vReduction, -hReduction],\n      top: [vReduction, hReduction],\n      left: [vReduction, hReduction],\n      right: [-vReduction, -hReduction],\n    };\n    const canvasBounds = {\n      bottom: [canvasSize.height, canvasSize.width],\n      top: [0, canvasSize.width],\n      left: [canvasSize.height, 0],\n      right: [canvasSize.height, canvasSize.width],\n    };\n\n    return {\n      height: canvasBounds[location][0] + locationBounds[location][0],\n      width: canvasBounds[location][1] + locationBounds[location][1],\n    };\n  };\n}\n\nScaleOverlayTool.toolName = 'ScaleOverlay';\nexport default ScaleOverlayTool;\n","import { ImageVolume, utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { getBoundingBoxAroundShape } from '../../../utilities/boundingBox';\nimport { pointInShapeCallback } from '../../../utilities';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\n\nconst { transformWorldToIndex } = csUtils;\n\ntype OperationData = {\n  segmentationId: string;\n  points: [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n  volume: ImageVolume;\n  constraintFn: (x: [number, number, number]) => boolean;\n  segmentIndex: number;\n  segmentsLocked: number[];\n};\n\n/**\n * For each point in the bounding box around the rectangle, if the point is inside\n * the rectangle, set the scalar value to the segmentIndex\n * @param toolGroupId - string\n * @param operationData - OperationData\n * @param constraintFn - can be used to perform threshold segmentation\n * @param inside - boolean\n */\n// Todo: why we have another constraintFn? in addition to the one in the operationData?\nfunction fillRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData,\n  inside = true\n): void {\n  const {\n    volume: segmentation,\n    points,\n    segmentsLocked,\n    segmentIndex,\n    segmentationId,\n    constraintFn,\n  } = operationData;\n  const { imageData, dimensions } = segmentation;\n  const scalarData = segmentation.getScalarData();\n\n  let rectangleCornersIJK = points.map((world) => {\n    return transformWorldToIndex(imageData, world);\n  });\n\n  // math round\n  rectangleCornersIJK = rectangleCornersIJK.map((point) => {\n    return point.map((coord) => {\n      return Math.round(coord);\n    });\n  });\n\n  const boundsIJK = getBoundingBoxAroundShape(rectangleCornersIJK, dimensions);\n\n  if (boundsIJK.every(([min, max]) => min !== max)) {\n    throw new Error('Oblique segmentation tools are not supported yet');\n  }\n\n  // Since always all points inside the boundsIJK is inside the rectangle...\n  const pointInRectangle = () => true;\n\n  const callback = ({ value, index, pointIJK }) => {\n    if (segmentsLocked.includes(value)) {\n      return;\n    }\n\n    if (!constraintFn) {\n      scalarData[index] = segmentIndex;\n      return;\n    }\n\n    if (constraintFn(pointIJK)) {\n      scalarData[index] = segmentIndex;\n    }\n  };\n\n  pointInShapeCallback(imageData, pointInRectangle, callback, boundsIJK);\n\n  triggerSegmentationDataModified(segmentationId);\n}\n\n/**\n * Fill the inside of a rectangle\n * @param toolGroupId - The unique identifier of the tool group.\n * @param operationData - The data that will be used to create the\n * new rectangle.\n * @param constraintFn - can be used to perform threshold segmentation\n */\nexport function fillInsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillRectangle(enabledElement, operationData, true);\n}\n\n/**\n * Fill the area outside of a rectangle for the toolGroupId and segmentationRepresentationUID.\n * @param toolGroupId - The unique identifier of the tool group.\n * @param operationData - The data that will be used to create the\n * new rectangle.\n * @param constraintFn - can be used to perform threshold segmentation\n */\nexport function fillOutsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillRectangle(enabledElement, operationData, false);\n}\n","import { ImageVolume, utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { getBoundingBoxAroundShape } from '../../../utilities/boundingBox';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { pointInShapeCallback } from '../../../utilities';\n\nconst { transformWorldToIndex } = csUtils;\n\ntype EraseOperationData = {\n  segmentationId: string;\n  points: [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n  volume: ImageVolume;\n  constraintFn: (x: [number, number, number]) => boolean;\n  segmentsLocked: number[];\n};\n\nfunction eraseRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: EraseOperationData,\n  inside = true\n): void {\n  const {\n    volume: segmentation,\n    points,\n    segmentsLocked,\n    segmentationId,\n  } = operationData;\n  const { imageData, dimensions } = segmentation;\n  const scalarData = segmentation.getScalarData();\n\n  const rectangleCornersIJK = points.map((world) => {\n    return transformWorldToIndex(imageData, world);\n  });\n\n  const boundsIJK = getBoundingBoxAroundShape(rectangleCornersIJK, dimensions);\n\n  if (boundsIJK.every(([min, max]) => min !== max)) {\n    throw new Error('Oblique segmentation tools are not supported yet');\n  }\n\n  // Since always all points inside the boundsIJK is inside the rectangle...\n  const pointInShape = () => true;\n\n  const callback = ({ value, index }) => {\n    if (segmentsLocked.includes(value)) {\n      return;\n    }\n    scalarData[index] = 0;\n  };\n\n  pointInShapeCallback(imageData, pointInShape, callback, boundsIJK);\n\n  triggerSegmentationDataModified(segmentationId);\n}\n\n/**\n * Erase the rectangle region segment inside the segmentation defined by the operationData.\n * It erases the segmentation pixels inside the defined rectangle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function eraseInsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: EraseOperationData\n): void {\n  eraseRectangle(enabledElement, operationData, true);\n}\n\n/**\n * Erase the rectangle region segment inside the segmentation defined by the operationData.\n * It erases the segmentation pixels outside the defined rectangle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function eraseOutsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: EraseOperationData\n): void {\n  eraseRectangle(enabledElement, operationData, false);\n}\n","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\n\nimport { Events } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\n/**\n * Tool for manipulating segmentation data by drawing a rectangle. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex.\n */\nclass RectangleScissorsTool extends BaseTool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    segmentationId: string;\n    segmentation: any;\n    segmentIndex: number;\n    segmentsLocked: number[];\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideRectangle,\n          ERASE_INSIDE: eraseInsideRectangle,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId, type } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const { representationData } = getSegmentation(segmentationId);\n\n    // Todo: are we going to support contour editing with rectangle scissors?\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n\n    // Todo: Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        handles: {\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n      },\n    };\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      segmentation,\n      segmentIndex,\n      segmentsLocked,\n      segmentColor,\n      segmentationId,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    // Moving handle.\n    const { currentPoints } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n    const worldPos = currentPoints.world;\n\n    const { points } = data.handles;\n\n    // Move this handle.\n    points[handleIndex] = [...worldPos];\n\n    let bottomLeftCanvas;\n    let bottomRightCanvas;\n    let topLeftCanvas;\n    let topRightCanvas;\n\n    let bottomLeftWorld;\n    let bottomRightWorld;\n    let topLeftWorld;\n    let topRightWorld;\n\n    switch (handleIndex) {\n      case 0:\n      case 3:\n        // Moving bottomLeft or topRight\n\n        bottomLeftCanvas = worldToCanvas(points[0]);\n        topRightCanvas = worldToCanvas(points[3]);\n\n        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n\n        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n        topLeftWorld = canvasToWorld(topLeftCanvas);\n\n        points[1] = bottomRightWorld;\n        points[2] = topLeftWorld;\n\n        break;\n      case 1:\n      case 2:\n        // Moving bottomRight or topLeft\n        bottomRightCanvas = worldToCanvas(points[1]);\n        topLeftCanvas = worldToCanvas(points[2]);\n\n        bottomLeftCanvas = <Types.Point2>[\n          topLeftCanvas[0],\n          bottomRightCanvas[1],\n        ];\n        topRightCanvas = <Types.Point2>[bottomRightCanvas[0], topLeftCanvas[1]];\n\n        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n        topRightWorld = canvasToWorld(topRightCanvas);\n\n        points[0] = bottomLeftWorld;\n        points[3] = topRightWorld;\n\n        break;\n    }\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      newAnnotation,\n      hasMoved,\n      segmentation,\n      segmentationId,\n      segmentIndex,\n      segmentsLocked,\n    } = this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation,\n      segmentationId,\n      segmentIndex,\n      segmentsLocked,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n  };\n\n  /**\n   * it is used to draw the rectangleScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const rectangleUID = '0';\n    drawRectSvg(\n      svgDrawingHelper,\n      annotationUID,\n      rectangleUID,\n      canvasCoordinates[0],\n      canvasCoordinates[3],\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n}\n\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;\n","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\n\nimport { fillInsideCircle } from './strategies/fillCircle';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  segmentLocking,\n  activeSegmentation,\n  segmentIndex as segmentIndexController,\n  config as segmentationConfig,\n} from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\n/**\n * Tool for manipulating segmentation data by drawing a circle. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex.\n */\nclass CircleScissorsTool extends BaseTool {\n  static toolName;\n  editData: {\n    annotation: any;\n    segmentation: any;\n    segmentIndex: number;\n    segmentationId: string;\n    segmentsLocked: number[];\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    centerCanvas?: Array<number>;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideCircle,\n          // ERASE_INSIDE: eraseInsideCircle,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId, type } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const { representationData } = getSegmentation(segmentationId);\n\n    // Todo: are we going to support contour editing with rectangle scissors?\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n\n    // Todo: Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        handles: {\n          points: [[...worldPos], [...worldPos], [...worldPos], [...worldPos]],\n          activeHandleIndex: null,\n        },\n        isDrawing: true,\n        cachedStats: {},\n      },\n    };\n\n    const viewportIdsToRender = [viewport.id];\n\n    this.editData = {\n      annotation,\n      segmentation,\n      centerCanvas: canvasPos,\n      segmentIndex,\n      segmentationId,\n      segmentsLocked,\n      segmentColor,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n    const { data } = annotation;\n\n    // Center of circle in canvas Coordinates\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n    const radius = Math.sqrt(dX * dX + dY * dY);\n\n    const bottomCanvas: Types.Point2 = [\n      centerCanvas[0],\n      centerCanvas[1] + radius,\n    ];\n    const topCanvas: Types.Point2 = [centerCanvas[0], centerCanvas[1] - radius];\n    const leftCanvas: Types.Point2 = [\n      centerCanvas[0] - radius,\n      centerCanvas[1],\n    ];\n    const rightCanvas: Types.Point2 = [\n      centerCanvas[0] + radius,\n      centerCanvas[1],\n    ];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      newAnnotation,\n      hasMoved,\n      segmentation,\n      segmentIndex,\n      segmentsLocked,\n      segmentationId,\n    } = this.editData;\n    const { data } = annotation;\n    const { viewPlaneNormal, viewUp } = annotation.metadata;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation,\n      segmentIndex,\n      segmentsLocked,\n      viewPlaneNormal,\n      segmentationId,\n      viewUp,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the circleScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { viewportIdsToRender } = this.editData;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return renderStatus;\n    }\n\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n    return renderStatus;\n  };\n}\n\nCircleScissorsTool.toolName = 'CircleScissor';\nexport default CircleScissorsTool;\n","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\n\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\n/**\n * Tool for manipulating segmentation data by drawing a sphere in 3d space. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex. Todo: sphere scissor has some memory problem which\n * lead to ui blocking behavior that needs to be fixed.\n */\nclass SphereScissorsTool extends BaseTool {\n  static toolName;\n  editData: {\n    annotation: any;\n    segmentation: any;\n    segmentIndex: number;\n    segmentsLocked: number[];\n    segmentationId: string;\n    toolGroupId: string;\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    centerCanvas?: Array<number>;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideSphere,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): true => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId, type } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const { representationData } = getSegmentation(segmentationId);\n\n    // Todo: are we going to support contour editing with rectangle scissors?\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n\n    this.isDrawing = true;\n\n    // Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        invalidated: true,\n        handles: {\n          points: [[...worldPos], [...worldPos], [...worldPos], [...worldPos]],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n        highlighted: true,\n      },\n    };\n\n    const viewportIdsToRender = [viewport.id];\n\n    this.editData = {\n      annotation,\n      segmentation,\n      centerCanvas: canvasPos,\n      segmentIndex,\n      segmentsLocked,\n      segmentColor,\n      segmentationId,\n      toolGroupId,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n    const { data } = annotation;\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n    const radius = Math.sqrt(dX * dX + dY * dY);\n\n    const bottomCanvas: Types.Point2 = [\n      centerCanvas[0],\n      centerCanvas[1] + radius,\n    ];\n    const topCanvas: Types.Point2 = [centerCanvas[0], centerCanvas[1] - radius];\n    const leftCanvas: Types.Point2 = [\n      centerCanvas[0] - radius,\n      centerCanvas[1],\n    ];\n    const rightCanvas: Types.Point2 = [\n      centerCanvas[0] + radius,\n      centerCanvas[1],\n    ];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      newAnnotation,\n      hasMoved,\n      segmentation,\n      segmentIndex,\n      segmentsLocked,\n      segmentationId,\n    } = this.editData;\n    const { data } = annotation;\n    const { viewPlaneNormal, viewUp } = annotation.metadata;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation,\n      segmentIndex,\n      segmentsLocked,\n      segmentationId,\n      viewPlaneNormal,\n      viewUp,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the sphereScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { viewportIdsToRender } = this.editData;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return renderStatus;\n    }\n\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n}\n\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;\n","import {\n  getEnabledElement,\n  cache,\n  StackViewport,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { Events } from '../../enums';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIThresholdAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { AnnotationModifiedEventDetail } from '../../types/EventTypes';\nimport RectangleROITool from '../annotation/RectangleROITool';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\n/**\n * This tool is exactly the RectangleROITool but only draws a rectangle on the image,\n * and by using utility functions such as thresholdByRange and thresholdByROIStat it can be used to\n * create a segmentation. This tool, however, does not calculate the statistics\n * as RectangleROITool does.\n */\nclass RectangleROIThresholdTool extends RectangleROITool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement it creates\n   * the edit data for the tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const targetId = this.getTargetId(viewport);\n    let referencedImageId, volumeId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    } else {\n      volumeId = targetId.split('volumeId:')[1];\n      const imageVolume = cache.getVolume(volumeId);\n      referencedImageId = csUtils.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n    // Todo: how not to store enabledElement on the annotation, segmentationModule needs the element to\n    // decide on the active segmentIndex, active segmentationIndex etc.\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        enabledElement,\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        toolName: this.getToolName(),\n        volumeId,\n      },\n      data: {\n        label: '',\n        handles: {\n          // No need a textBox\n          textBox: {\n            hasMoved: false,\n            worldPosition: null,\n            worldBoundingBox: null,\n          },\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n        segmentationId: null,\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * it is used to draw the RectangleROI Threshold annotation in each\n   * request animation frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, renderingEngineId } = enabledElement;\n    const { element } = viewport;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as RectangleROIThresholdAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      // Todo: This is not correct way to add the event trigger,\n      // this will trigger on all mouse hover too. Problem is that we don't\n      // have a cached stats mechanism for this tool yet?\n      const eventType = Events.ANNOTATION_MODIFIED;\n\n      const eventDetail: AnnotationModifiedEventDetail = {\n        annotation,\n        viewportId: viewport.id,\n        renderingEngineId,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n        }\n      );\n\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n}\n\nRectangleROIThresholdTool.toolName = 'RectangleROIThreshold';\nexport default RectangleROIThresholdTool;\n","import {\n  getEnabledElement,\n  cache,\n  StackViewport,\n  metaData,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { vec3 } from 'gl-matrix';\nimport { Events } from '../../enums';\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport throttle from '../../utilities/throttle';\nimport { AnnotationModifiedEventDetail } from '../../types/EventTypes';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIStartEndThresholdAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport RectangleROITool from '../annotation/RectangleROITool';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * This tool is similar to the RectangleROIThresholdTool which\n * only draws a rectangle on the image, and by using utility functions\n * such as thresholdByRange and thresholdByROIStat it can be used to\n * create a segmentation. The only difference is that it only acts on the\n * acquisition plane and not the 3D volume, and accepts a start and end\n * slice, and renders a dashed rectangle on the image between the start and end\n * but a solid rectangle on start and end slice. Utility functions should be used\n * to modify the start and end slice.\n * // Todo: right now only the first slice has grabbable handles, need to make\n * // it so that the handles are grabbable on all slices.\n */\nclass RectangleROIStartEndThresholdTool extends RectangleROITool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {\n        numSlicesToPropagate: 10,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStatsTool,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement it creates\n   * the edit data for the tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    let referencedImageId, imageVolume, volumeId;\n    if (viewport instanceof StackViewport) {\n      throw new Error('Stack Viewport Not implemented');\n    } else {\n      const targetId = this.getTargetId(viewport);\n      volumeId = targetId.split('volumeId:')[1];\n      imageVolume = cache.getVolume(volumeId);\n      referencedImageId = csUtils.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    if (!referencedImageId) {\n      throw new Error('This tool does not work on non-acquisition planes');\n    }\n\n    const startIndex = viewport.getCurrentImageIdIndex();\n    const spacingInNormal = csUtils.getSpacingInNormalDirection(\n      imageVolume,\n      viewPlaneNormal\n    );\n\n    // We cannot simply add numSlicesToPropagate to startIndex because\n    // the order of imageIds can be from top to bottom or bottom to top and\n    // we want to make sure it is always propagated in the direction of the\n    // view and also to make sure we don't go out of bounds.\n    const endIndex = this._getEndSliceIndex(\n      imageVolume,\n      worldPos,\n      spacingInNormal,\n      viewPlaneNormal\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        enabledElement,\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        toolName: this.getToolName(),\n        volumeId,\n        spacingInNormal,\n      },\n      data: {\n        label: '',\n        startSlice: startIndex,\n        endSlice: endIndex,\n        cachedStats: {\n          projectionPoints: [],\n          projectionPointsImageIds: [referencedImageId],\n        },\n        handles: {\n          // No need a textBox\n          textBox: {\n            hasMoved: false,\n            worldPosition: null,\n            worldBoundingBox: null,\n          },\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n        labelmapUID: null,\n      },\n    };\n\n    // update the projection points in 3D space, since we are projecting\n    // the points to the slice plane, we need to make sure the points are\n    // computed for later export\n    this._computeProjectionPoints(annotation, imageVolume);\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  // Todo: make it work for planes other than acquisition planes\n  _computeProjectionPoints(\n    annotation: RectangleROIStartEndThresholdAnnotation,\n    imageVolume: Types.IImageVolume\n  ): void {\n    const { data, metadata } = annotation;\n    const { viewPlaneNormal, spacingInNormal } = metadata;\n    const { imageData } = imageVolume;\n    const { startSlice, endSlice } = data;\n    const { points } = data.handles;\n\n    const startIJK = transformWorldToIndex(imageData, points[0]);\n\n    if (startIJK[2] !== startSlice) {\n      throw new Error('Start slice does not match');\n    }\n\n    // substitute the end slice index 2 with startIJK index 2\n    const endIJK = vec3.fromValues(startIJK[0], startIJK[1], endSlice);\n\n    const startWorld = vec3.create();\n    imageData.indexToWorldVec3(startIJK, startWorld);\n\n    const endWorld = vec3.create();\n    imageData.indexToWorldVec3(endIJK, endWorld);\n\n    // distance between start and end slice in the world coordinate\n    const distance = vec3.distance(startWorld, endWorld);\n\n    // for each point inside points, navigate in the direction of the viewPlaneNormal\n    // with amount of spacingInNormal, and calculate the next slice until we reach the distance\n    const newProjectionPoints = [];\n    for (let dist = 0; dist < distance; dist += spacingInNormal) {\n      newProjectionPoints.push(\n        points.map((point) => {\n          const newPoint = vec3.create();\n          vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);\n          return Array.from(newPoint);\n        })\n      );\n    }\n\n    data.cachedStats.projectionPoints = newProjectionPoints;\n\n    // Find the imageIds for the projection points\n    const projectionPointsImageIds = [];\n    for (const RectanglePoints of newProjectionPoints) {\n      const imageId = csUtils.getClosestImageId(\n        imageVolume,\n        RectanglePoints[0],\n        viewPlaneNormal\n      );\n      projectionPointsImageIds.push(imageId);\n    }\n\n    data.cachedStats.projectionPointsImageIds = projectionPointsImageIds;\n  }\n\n  _calculateCachedStatsTool(annotation, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId, viewport } = enabledElement;\n\n    const { cachedStats } = data;\n    const volumeId = this.getTargetId(viewport);\n    const imageVolume = cache.getVolume(volumeId.split('volumeId:')[1]);\n\n    // Todo: this shouldn't be here, this is a performance issue\n    // Since we are extending the RectangleROI class, we need to\n    // bring the logic for handle to some cachedStats calculation\n    this._computeProjectionPoints(annotation, imageVolume);\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n\n  /**\n   * it is used to draw the rectangleROIStartEnd annotation in each\n   * request animation frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const sliceIndex = viewport.getCurrentImageIdIndex();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[\n        i\n      ] as RectangleROIStartEndThresholdAnnotation;\n      const { annotationUID, data } = annotation;\n      const { startSlice, endSlice } = data;\n      const { points, activeHandleIndex } = data.handles;\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      // range of slices to render based on the start and end slice, like\n      // np.arange\n\n      // if indexIJK is outside the start/end slice, we don't render\n      if (\n        sliceIndex < Math.min(startSlice, endSlice) ||\n        sliceIndex > Math.max(startSlice, endSlice)\n      ) {\n        continue;\n      }\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n\n      if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(annotation, enabledElement);\n      }\n\n      // if it is inside the start/end slice, but not exactly the first or\n      // last slice, we render the line in dash, but not the handles\n      let firstOrLastSlice = false;\n      if (sliceIndex === startSlice || sliceIndex === endSlice) {\n        firstOrLastSlice = true;\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null &&\n        firstOrLastSlice\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      let lineDashToUse = lineDash;\n\n      if (!firstOrLastSlice) {\n        lineDashToUse = 2;\n      }\n\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash: lineDashToUse,\n          lineWidth,\n        }\n      );\n\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n\n  _getEndSliceIndex(\n    imageVolume: Types.IImageVolume,\n    worldPos: Types.Point3,\n    spacingInNormal: number,\n    viewPlaneNormal: Types.Point3\n  ): number | undefined {\n    const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n\n    // get end position by moving from worldPos in the direction of viewplaneNormal\n    // with amount of numSlicesToPropagate * spacingInNormal\n    const endPos = vec3.create();\n    vec3.scaleAndAdd(\n      endPos,\n      worldPos,\n      viewPlaneNormal,\n      numSlicesToPropagate * spacingInNormal\n    );\n\n    const halfSpacingInNormalDirection = spacingInNormal / 2;\n    // Loop through imageIds of the imageVolume and find the one that is closest to endPos\n    const { imageIds } = imageVolume;\n    let imageIdIndex;\n    for (let i = 0; i < imageIds.length; i++) {\n      const imageId = imageIds[i];\n\n      const { imagePositionPatient } = metaData.get(\n        'imagePlaneModule',\n        imageId\n      );\n\n      const dir = vec3.create();\n      vec3.sub(dir, endPos, imagePositionPatient);\n\n      const dot = vec3.dot(dir, viewPlaneNormal);\n\n      if (Math.abs(dot) < halfSpacingInNormalDirection) {\n        imageIdIndex = i;\n      }\n    }\n\n    return imageIdIndex;\n  }\n}\n\nRectangleROIStartEndThresholdTool.toolName = 'RectangleROIStartEndThreshold';\nexport default RectangleROIStartEndThresholdTool;\n","import type {\n  FloodFillResult,\n  FloodFillGetter,\n  FloodFillOptions,\n} from '../../types';\nimport { Types } from '@cornerstonejs/core';\n\n/**\n * floodFill.js - Taken from MIT OSS lib - https://github.com/tuzz/n-dimensional-flood-fill\n * Refactored to ES6.\n *\n * @param {function} getter The getter to the elements of your data structure,\n *                          e.g. getter(x,y) for a 2D interprettation of your structure.\n * @param {number[]} seed The seed for your fill. The dimensionality is infered\n *                        by the number of dimensions of the seed.\n * @param {function} [options.onFlood] An optional callback to execute when each pixel is flooded.\n *                             e.g. onFlood(x,y).\n * @param {function} [options.onBoundary] An optional callback to execute whenever a boundary is reached.\n *                                a boundary could be another segmentIndex, or the edge of your\n *                                data structure (i.e. when your getter returns undefined).\n * @param {function} [options.equals] An optional equality method for your datastructure.\n *                            Default is simply value1 = value2.\n * @param {boolean} [options.diagonals] Whether you allow flooding through diagonals. Defaults to false.\n *\n * @returns {Object}\n */\nfunction floodFill(\n  getter: FloodFillGetter,\n  seed: Types.Point2 | Types.Point3,\n  options: FloodFillOptions = {}\n): FloodFillResult {\n  const onFlood = options.onFlood;\n  const onBoundary = options.onBoundary;\n  const equals = options.equals || defaultEquals;\n  const diagonals = options.diagonals || false;\n  const startNode = get(seed);\n  const permutations = prunedPermutations();\n  const stack = [];\n  const flooded = [];\n  const visits = {};\n  const bounds = {};\n\n  stack.push({ currentArgs: seed });\n\n  while (stack.length > 0) {\n    flood(stack.pop());\n  }\n\n  return {\n    flooded,\n    boundaries: boundaries(),\n  };\n\n  function flood(job) {\n    const getArgs = job.currentArgs;\n    const prevArgs = job.previousArgs;\n\n    if (visited(getArgs)) {\n      return;\n    }\n    markAsVisited(getArgs);\n\n    if (member(getArgs)) {\n      markAsFlooded(getArgs);\n      pushAdjacent(getArgs);\n    } else {\n      markAsBoundary(prevArgs);\n    }\n  }\n\n  function visited(key) {\n    return visits[key] === true;\n  }\n\n  function markAsVisited(key) {\n    visits[key] = true;\n  }\n\n  function member(getArgs) {\n    const node = safely(get, [getArgs]);\n\n    return safely(equals, [node, startNode]);\n  }\n\n  function markAsFlooded(getArgs) {\n    flooded.push(getArgs);\n    if (onFlood) {\n      //@ts-ignore\n      onFlood(...getArgs);\n    }\n  }\n\n  function markAsBoundary(prevArgs) {\n    bounds[prevArgs] = prevArgs;\n    if (onBoundary) {\n      //@ts-ignore\n      onBoundary(...prevArgs);\n    }\n  }\n\n  function pushAdjacent(getArgs) {\n    for (let i = 0; i < permutations.length; i += 1) {\n      const perm = permutations[i];\n      const nextArgs = getArgs.slice(0);\n\n      for (let j = 0; j < getArgs.length; j += 1) {\n        nextArgs[j] += perm[j];\n      }\n\n      stack.push({\n        currentArgs: nextArgs,\n        previousArgs: getArgs,\n      });\n    }\n  }\n\n  function get(getArgs) {\n    //@ts-ignore\n    return getter(...getArgs);\n  }\n\n  function safely(f, args) {\n    try {\n      return f(...args);\n    } catch (error) {\n      return;\n    }\n  }\n\n  function prunedPermutations() {\n    const permutations = permute(seed.length);\n\n    return permutations.filter(function (perm) {\n      const count = countNonZeroes(perm);\n\n      return count !== 0 && (count === 1 || diagonals);\n    });\n  }\n\n  function permute(length) {\n    const perms = [];\n\n    const permutation = function (string) {\n      return string.split('').map(function (c) {\n        return parseInt(c, 10) - 1;\n      });\n    };\n\n    for (let i = 0; i < Math.pow(3, length); i += 1) {\n      const string = lpad(i.toString(3), '0', length);\n\n      perms.push(permutation(string));\n    }\n\n    return perms;\n  }\n\n  function boundaries() {\n    const array = [];\n\n    for (const key in bounds) {\n      if (bounds[key] !== undefined) {\n        array.unshift(bounds[key]);\n      }\n    }\n\n    return array;\n  }\n}\n\nfunction defaultEquals(a, b) {\n  return a === b;\n}\n\nfunction countNonZeroes(array) {\n  let count = 0;\n\n  for (let i = 0; i < array.length; i += 1) {\n    if (array[i] !== 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n}\n\nfunction lpad(string, character, length) {\n  const array = new Array(length + 1);\n  const pad = array.join(character);\n\n  return (pad + string).slice(-length);\n}\n\nexport default floodFill;\n","import {\n  cache,\n  getEnabledElement,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport { PublicToolProps, ToolProps, EventTypes } from '../../types';\n\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport {\n  segmentLocking,\n  activeSegmentation,\n  segmentIndex as segmentIndexController,\n} from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { FloodFillResult, FloodFillGetter } from '../../types';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\nconst { transformWorldToIndex, isEqual } = csUtils;\n\ntype PaintFillToolHelpers = {\n  getScalarDataPositionFromPlane: (x: number, y: number) => number;\n  getLabelValue: (x: number, y: number, z: number) => number;\n  floodFillGetter: FloodFillGetter;\n  inPlaneSeedPoint: Types.Point2;\n  fixedDimensionValue: number;\n};\n\n/**\n * Tool for manipulating segmentation data by filling in regions. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will fill a given labelled\n * or empty region with the the activeSegmentIndex label. You can use the\n * SegmentationModule to set the active segmentation and segmentIndex.\n */\nclass PaintFillTool extends BaseTool {\n  static toolName;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationId, type } = activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked: number[] =\n      segmentLocking.getLockedSegments(segmentationId);\n    const { representationData } = getSegmentation(segmentationId);\n\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n    const { dimensions, direction } = segmentation;\n    const scalarData = segmentation.getScalarData();\n\n    const index = transformWorldToIndex(segmentation.imageData, worldPos);\n\n    const fixedDimension = this.getFixedDimension(viewPlaneNormal, direction);\n\n    if (fixedDimension === undefined) {\n      console.warn('Oblique paint fill not yet supported');\n      return;\n    }\n\n    const {\n      floodFillGetter,\n      getLabelValue,\n      getScalarDataPositionFromPlane,\n      inPlaneSeedPoint,\n      fixedDimensionValue,\n    } = this.generateHelpers(scalarData, dimensions, index, fixedDimension);\n\n    // Check if within volume\n    if (\n      index[0] < 0 ||\n      index[0] >= dimensions[0] ||\n      index[1] < 0 ||\n      index[1] >= dimensions[1] ||\n      index[2] < 0 ||\n      index[2] >= dimensions[2]\n    ) {\n      // Clicked outside segmentation volume, no good way to fill.\n      return;\n    }\n    //@ts-ignore // todo type\n    const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n\n    if (segmentsLocked.includes(clickedLabelValue)) {\n      // Label is locked, cannot fill.\n      return;\n    }\n\n    const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n\n    const { flooded } = floodFillResult;\n\n    flooded.forEach((index) => {\n      const scalarDataPosition = getScalarDataPositionFromPlane(\n        index[0],\n        index[1]\n      );\n\n      scalarData[scalarDataPosition] = segmentIndex;\n    });\n\n    const framesModified = this.getFramesModified(\n      fixedDimension,\n      fixedDimensionValue,\n      floodFillResult\n    );\n\n    triggerSegmentationDataModified(segmentationId, framesModified);\n\n    return true;\n  };\n\n  private getFramesModified = (\n    fixedDimension: number,\n    fixedDimensionValue: number,\n    floodFillResult: FloodFillResult\n  ): number[] => {\n    const { boundaries } = floodFillResult;\n\n    if (fixedDimension === 2) {\n      return [fixedDimensionValue];\n    }\n\n    // For both the fixedDimensions being 0 and 1, the Z (stack) direction is j,\n    // so we don't need to find min/max i.\n\n    let minJ = Infinity;\n    let maxJ = -Infinity;\n\n    for (let b = 0; b < boundaries.length; b++) {\n      const j = boundaries[b][1];\n\n      if (j < minJ) minJ = j;\n      if (j > maxJ) maxJ = j;\n    }\n\n    const framesModified = [];\n\n    for (let frame = minJ; frame <= maxJ; frame++) {\n      framesModified.push(frame);\n    }\n\n    return framesModified;\n  };\n\n  private generateHelpers = (\n    scalarData: Float32Array | Uint8Array | Uint16Array | Int16Array,\n    dimensions: Types.Point3,\n    seedIndex3D: Types.Point3,\n    fixedDimension = 2\n  ): PaintFillToolHelpers => {\n    let fixedDimensionValue: number;\n    let inPlaneSeedPoint: Types.Point2;\n\n    switch (fixedDimension) {\n      case 0:\n        fixedDimensionValue = seedIndex3D[0]; // X\n        inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]]; // Y,Z\n        break;\n      case 1:\n        fixedDimensionValue = seedIndex3D[1]; // Y\n        inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]]; // X,Z\n        break;\n      case 2:\n        fixedDimensionValue = seedIndex3D[2]; // Z\n        inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]]; // X, Y\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    const getScalarDataPosition = (x: number, y: number, z: number): number => {\n      return z * dimensions[1] * dimensions[0] + y * dimensions[0] + x;\n    };\n\n    const getLabelValue = (x: number, y: number, z: number): number => {\n      return scalarData[getScalarDataPosition(x, y, z)];\n    };\n\n    const floodFillGetter = this.generateFloodFillGetter(\n      dimensions,\n      fixedDimension,\n      fixedDimensionValue,\n      getLabelValue\n    );\n\n    const getScalarDataPositionFromPlane =\n      this.generateGetScalarDataPositionFromPlane(\n        getScalarDataPosition,\n        fixedDimension,\n        fixedDimensionValue\n      );\n\n    return {\n      getScalarDataPositionFromPlane,\n      getLabelValue,\n      floodFillGetter,\n      inPlaneSeedPoint,\n      fixedDimensionValue,\n    };\n  };\n\n  private getFixedDimension(\n    viewPlaneNormal: Types.Point3,\n    direction: number[]\n  ): number | undefined {\n    const xDirection = direction.slice(0, 3);\n    const yDirection = direction.slice(3, 6);\n    const zDirection = direction.slice(6, 9);\n\n    const absoluteOfViewPlaneNormal = [\n      Math.abs(viewPlaneNormal[0]),\n      Math.abs(viewPlaneNormal[1]),\n      Math.abs(viewPlaneNormal[2]),\n    ];\n\n    const absoluteOfXDirection = [\n      Math.abs(xDirection[0]),\n      Math.abs(xDirection[1]),\n      Math.abs(xDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n      return 0;\n    }\n\n    const absoluteOfYDirection = [\n      Math.abs(yDirection[0]),\n      Math.abs(yDirection[1]),\n      Math.abs(yDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n      return 1;\n    }\n\n    const absoluteOfZDirection = [\n      Math.abs(zDirection[0]),\n      Math.abs(zDirection[1]),\n      Math.abs(zDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n      return 2;\n    }\n  }\n\n  // Define a getter for the fill routine to access the working label map.\n  private generateFloodFillGetter = (\n    dimensions: Types.Point3,\n    fixedDimension: number,\n    fixedDimensionValue: number,\n    getLabelValue: PaintFillToolHelpers['getLabelValue']\n  ): FloodFillGetter => {\n    let floodFillGetter;\n\n    // In each helper we first check if out of bounds, as the flood filler\n    // doesn't know about the dimensions of the data structure that sits on top\n    // of the scalarData. E.g. if cols is 10, (0,1) and (10, 0) would point to\n    // the same position in these getters.\n\n    switch (fixedDimension) {\n      case 0:\n        floodFillGetter = (y, z) => {\n          if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n            return;\n          }\n\n          return getLabelValue(fixedDimensionValue, y, z);\n        };\n        break;\n\n      case 1:\n        floodFillGetter = (x, z) => {\n          if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n            return;\n          }\n\n          return getLabelValue(x, fixedDimensionValue, z);\n        };\n        break;\n\n      case 2:\n        floodFillGetter = (x, y) => {\n          if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n            return;\n          }\n\n          return getLabelValue(x, y, fixedDimensionValue);\n        };\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    return floodFillGetter;\n  };\n\n  private generateGetScalarDataPositionFromPlane = (\n    getScalarDataPosition: (x: number, y: number, z: number) => number,\n    fixedDimension: number,\n    fixedDimensionValue: number\n  ): PaintFillToolHelpers['getScalarDataPositionFromPlane'] => {\n    let getScalarDataPositionFromPlane;\n\n    switch (fixedDimension) {\n      case 0:\n        getScalarDataPositionFromPlane = (y, z) => {\n          return getScalarDataPosition(fixedDimensionValue, y, z);\n        };\n        break;\n      case 1:\n        getScalarDataPositionFromPlane = (x, z) => {\n          return getScalarDataPosition(x, fixedDimensionValue, z);\n        };\n        break;\n      case 2:\n        getScalarDataPositionFromPlane = (x, y) => {\n          return getScalarDataPosition(x, y, fixedDimensionValue);\n        };\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    return getScalarDataPositionFromPlane;\n  };\n}\n\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport getBoundingBoxAroundShape from '../boundingBox/getBoundingBoxAroundShape';\nimport extend2DBoundingBoxInViewAxis from '../boundingBox/extend2DBoundingBoxInViewAxis';\n\ntype Options = {\n  numSlicesToProject?: number;\n};\n\nfunction getBoundsIJKFromRectangleAnnotations(\n  annotations,\n  referenceVolume,\n  options = {} as Options\n) {\n  const AllBoundsIJK = [];\n  annotations.forEach((annotation) => {\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const { imageData, dimensions } = referenceVolume;\n\n    let pointsToUse = points;\n    // If the tool is a 2D tool but has projection points, use them\n    if (data.cachedStats?.projectionPoints) {\n      const { projectionPoints } = data.cachedStats;\n      pointsToUse = [].concat(...projectionPoints); // cannot use flat() because of typescript compiler right now\n    }\n\n    const rectangleCornersIJK = pointsToUse.map(\n      (world) => csUtils.transformWorldToIndex(imageData, world) as Types.Point3\n    );\n    let boundsIJK = getBoundingBoxAroundShape(rectangleCornersIJK, dimensions);\n\n    // If the tool is 2D but it is configured to project to X amount of slices\n    // Don't project the slices if projectionPoints have been used to define the extents\n    if (options.numSlicesToProject && !data.cachedStats?.projectionPoints) {\n      boundsIJK = extend2DBoundingBoxInViewAxis(\n        boundsIJK,\n        options.numSlicesToProject\n      );\n    }\n\n    AllBoundsIJK.push(boundsIJK);\n  });\n\n  if (AllBoundsIJK.length === 1) {\n    return AllBoundsIJK[0];\n  }\n\n  // Get the intersection of all the bounding boxes\n  // This is the bounding box that contains all the ROIs\n  const boundsIJK = AllBoundsIJK.reduce(\n    (accumulator, currentValue) => {\n      return {\n        iMin: Math.min(accumulator.iMin, currentValue.iMin),\n        jMin: Math.min(accumulator.jMin, currentValue.jMin),\n        kMin: Math.min(accumulator.kMin, currentValue.kMin),\n        iMax: Math.max(accumulator.iMax, currentValue.iMax),\n        jMax: Math.max(accumulator.jMax, currentValue.jMax),\n        kMax: Math.max(accumulator.kMax, currentValue.kMax),\n      };\n    },\n    {\n      iMin: Infinity,\n      jMin: Infinity,\n      kMin: Infinity,\n      iMax: -Infinity,\n      jMax: -Infinity,\n      kMax: -Infinity,\n    }\n  );\n\n  return boundsIJK;\n}\n\nexport default getBoundsIJKFromRectangleAnnotations;\n","import type { Types } from '@cornerstonejs/core';\nimport { state } from '../../stateManagement/annotation';\nimport {\n  RectangleROIStartEndThresholdTool,\n  RectangleROIThresholdTool,\n} from '../../tools';\n\nimport thresholdVolumeByRange from './thresholdVolumeByRange';\nimport getBoundsIJKFromRectangleAnnotations from '../rectangleROITool/getBoundsIJKFromRectangleAnnotations';\nimport { ThresholdInformation } from './utilities';\n\nexport type ThresholdOptions = {\n  numSlicesToProject?: number; // number of slices to project before and after current slice\n  overwrite: boolean;\n  overlapType?: number; // type of the voxel overlap\n};\n\nexport type AnnotationForThresholding = {\n  data: {\n    handles: {\n      points: Types.Point3[];\n    };\n    cachedStats?: {\n      projectionPoints?: Types.Point3[][];\n    };\n  };\n};\n\n/**\n * It uses the provided rectangleROI annotations (either RectangleROIThreshold, or\n * RectangleROIStartEndThreshold) to compute an ROI that is the intersection of\n * all the annotations. Then it uses the rectangleROIThreshold utility to threshold\n * the volume.\n * @param annotationUIDs - rectangleROI annotationsUIDs to use for ROI\n * @param segmentationVolume - the segmentation volume\n * @param thresholdVolumeInformation - object array containing the volume data and range threshold values\n * @param options - options for thresholding\n * @returns\n */\nfunction rectangleROIThresholdVolumeByRange(\n  annotationUIDs: string[],\n  segmentationVolume: Types.IImageVolume,\n  thresholdVolumeInformation: ThresholdInformation[],\n  options: ThresholdOptions\n): Types.IImageVolume {\n  const annotations = annotationUIDs.map((annotationUID) => {\n    return state.getAnnotation(annotationUID);\n  });\n\n  _validateAnnotations(annotations);\n\n  let boundsIJK;\n  for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n    // make sure that the boundsIJK are generated by the correct volume\n    const volumeSize =\n      thresholdVolumeInformation[i].volume.getScalarData().length;\n    if (volumeSize === segmentationVolume.getScalarData().length || i === 0) {\n      boundsIJK = getBoundsIJKFromRectangleAnnotations(\n        annotations,\n        thresholdVolumeInformation[i].volume,\n        options\n      );\n    }\n  }\n\n  const outputSegmentationVolume = thresholdVolumeByRange(\n    segmentationVolume,\n    thresholdVolumeInformation,\n    { ...options, boundsIJK }\n  );\n\n  return outputSegmentationVolume;\n}\n\nfunction _validateAnnotations(annotations) {\n  const validToolNames = [\n    RectangleROIThresholdTool.toolName,\n    RectangleROIStartEndThresholdTool.toolName,\n  ];\n\n  for (const annotation of annotations) {\n    const name = annotation.metadata.toolName;\n    if (!validToolNames.includes(name)) {\n      throw new Error(\n        'rectangleROIThresholdVolumeByRange only supports RectangleROIThreshold and RectangleROIStartEndThreshold annotations'\n      );\n    }\n  }\n}\n\nexport default rectangleROIThresholdVolumeByRange;\n","import { Types } from '@cornerstonejs/core';\nimport { volumeLoader, utilities as csUtils } from '@cornerstonejs/core';\n\n/**\n * Given a list of labelmaps (with the possibility of overlapping regions), and\n * a segmentIndex it creates a new labelmap with the same dimensions as the input labelmaps,\n * but merges them into a single labelmap for the segmentIndex. It wipes out\n * all other segment Indices. This is useful for calculating statistics regarding\n * a specific segment when there are overlapping regions between labelmap (e.g. TMTV)\n *\n * @param labelmaps - Array of labelmaps\n * @param segmentIndex - The segment index to merge\n * @returns Merged labelmap\n */\nfunction createMergedLabelmapForIndex(\n  labelmaps: Array<Types.IImageVolume>,\n  segmentIndex = 1,\n  volumeId = 'mergedLabelmap'\n): Types.IImageVolume {\n  labelmaps.forEach(({ direction, dimensions, origin, spacing }) => {\n    if (\n      !csUtils.isEqual(dimensions, labelmaps[0].dimensions) ||\n      !csUtils.isEqual(direction, labelmaps[0].direction) ||\n      !csUtils.isEqual(spacing, labelmaps[0].spacing) ||\n      !csUtils.isEqual(origin, labelmaps[0].origin)\n    ) {\n      throw new Error('labelmaps must have the same size and shape');\n    }\n  });\n\n  const labelmap = labelmaps[0];\n\n  const arrayType = (labelmap.getScalarData() as any).constructor;\n  const outputData = new arrayType(labelmap.getScalarData().length);\n\n  labelmaps.forEach((labelmap) => {\n    const scalarData = labelmap.getScalarData();\n    for (let i = 0; i < scalarData.length; i++) {\n      if (scalarData[i] === segmentIndex) {\n        outputData[i] = segmentIndex;\n      }\n    }\n  });\n\n  const options = {\n    scalarData: outputData,\n    metadata: labelmap.metadata,\n    spacing: labelmap.spacing,\n    origin: labelmap.origin,\n    direction: labelmap.direction,\n    dimensions: labelmap.dimensions,\n  };\n\n  const preventCache = true;\n  // Todo: following should be async\n  const mergedVolume = volumeLoader.createLocalVolume(\n    options,\n    volumeId,\n    preventCache\n  );\n\n  return mergedVolume;\n}\n\nexport default createMergedLabelmapForIndex;\n","import { isValidLabelmapConfig } from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport SegmentationRepresentation from '../../enums/SegmentationRepresentations';\nimport { RepresentationConfig } from '../../types/SegmentationStateTypes';\n\n/**\n * Given a representation type and a configuration, return true if the\n * configuration is valid for that representation type\n * @param representationType - The type of segmentation representation\n * @param config - RepresentationConfig\n * @returns A boolean value.\n */\nexport default function isValidRepresentationConfig(\n  representationType: string,\n  config: RepresentationConfig\n): boolean {\n  switch (representationType) {\n    case SegmentationRepresentation.Labelmap:\n      return isValidLabelmapConfig(config);\n    default:\n      throw new Error(`Unknown representation type: ${representationType}`);\n  }\n}\n","import getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport SegmentationRepresentation from '../../enums/SegmentationRepresentations';\nimport { Segmentation } from '../../types/SegmentationStateTypes';\n\n/**\n * It returns a configuration object for the given representation type.\n * @param representationType - The type of segmentation representation\n * @returns A representation configuration object.\n */\nexport default function getDefaultRepresentationConfig(\n  segmentation: Segmentation\n) {\n  const { type: representationType } = segmentation;\n  switch (representationType) {\n    case SegmentationRepresentation.Labelmap:\n      return getDefaultLabelmapConfig();\n    default:\n      throw new Error(`Unknown representation type: ${representationType}`);\n  }\n}\n","import { _cloneDeep } from 'lodash.clonedeep';\nimport {\n  getEnabledElementByIds,\n  volumeLoader,\n  VolumeViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Create a new 3D segmentation volume from the default imageData presented in\n * the first actor of the viewport. It looks at the metadata of the imageData\n * to determine the volume dimensions and spacing if particular options are not provided.\n *\n * @param viewportId - The Id of the viewport from which to derive the volume from.\n * @param renderingEngineId - The Id of the rendering engine the viewport belongs to.\n * @param [segmentationId] - The Id to name the generated segmentation. Autogenerated if not given.\n * @param [options] - LabelmapOptions\n * @returns A promise that resolves to the Id of the new labelmap volume.\n */\nexport default async function createLabelmapVolumeForViewport(input: {\n  viewportId: string;\n  renderingEngineId: string;\n  segmentationId?: string;\n  options?: {\n    volumeId?: string;\n    scalarData?: Float32Array | Uint8Array | Uint16Array | Int16Array;\n    targetBuffer?: {\n      type: 'Float32Array' | 'Uint8Array' | 'Uint16Array' | 'Int8Array';\n    };\n    metadata?: any;\n    dimensions?: Types.Point3;\n    spacing?: Types.Point3;\n    origin?: Types.Point3;\n    direction?: Float32Array;\n  };\n}): Promise<string> {\n  const { viewportId, renderingEngineId, options } = input;\n  let { segmentationId } = input;\n  const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n\n  if (!enabledElement) {\n    throw new Error('element disabled');\n  }\n\n  const { viewport } = enabledElement;\n  if (!(viewport instanceof VolumeViewport)) {\n    throw new Error('Segmentation only supports VolumeViewport');\n  }\n\n  const { uid } = viewport.getDefaultActor();\n\n  if (segmentationId === undefined) {\n    // Name the segmentation volume with the viewport Id\n    segmentationId = `${uid}-based-segmentation-${\n      options?.volumeId ?? csUtils.uuidv4().slice(0, 8)\n    }`;\n  }\n\n  if (options) {\n    // create a new labelmap with its own properties\n    // This allows creation of a higher resolution labelmap vs reference volume\n    const properties = _cloneDeep(options);\n    await volumeLoader.createLocalVolume(properties, segmentationId);\n  } else {\n    // create a labelmap from a reference volume\n    const { uid: volumeId } = viewport.getDefaultActor();\n    await volumeLoader.createAndCacheDerivedVolume(volumeId, {\n      volumeId: segmentationId,\n    });\n  }\n\n  return segmentationId;\n}\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport getBrushToolInstances from './utilities';\n\nexport function setBrushSizeForToolGroup(\n  toolGroupId: string,\n  brushSize: number\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n\n  brushBasedToolInstances.forEach((tool: BrushTool) => {\n    tool.configuration.brushSize = brushSize;\n\n    // Invalidate the brush being rendered so it can update.\n    tool.invalidateBrushCursor();\n  });\n\n  // Trigger an annotation render for any viewports on the toolgroup\n  const viewportsInfo = toolGroup.getViewportsInfo();\n\n  const viewportsInfoArray = Object.keys(viewportsInfo).map(\n    (key) => viewportsInfo[key]\n  );\n\n  if (!viewportsInfoArray.length) {\n    return;\n  }\n\n  const { renderingEngineId } = viewportsInfoArray[0];\n\n  // Use helper to get array of viewportIds, or we just end up doing this mapping\n  // ourselves here.\n  const viewportIds = toolGroup.getViewportIds();\n\n  const renderingEngine = getRenderingEngine(renderingEngineId);\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIds);\n}\n\nexport function getBrushSizeForToolGroup(toolGroupId: string): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const toolInstances = toolGroup._toolInstances;\n\n  if (!Object.keys(toolInstances).length) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n\n  // one is enough as they share the same brush size\n  const brushToolInstance = brushBasedToolInstances[0];\n\n  if (!brushToolInstance) {\n    return;\n  }\n\n  // TODO -> Assumes the brush sizes are the same and set via these helpers.\n  return brushToolInstance.configuration.brushSize;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport getBrushToolInstances from './utilities';\n\nexport function setBrushThresholdForToolGroup(\n  toolGroupId: string,\n  threshold: Types.Point2\n) {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n\n  brushBasedToolInstances.forEach((tool) => {\n    tool.configuration.strategySpecificConfiguration.THRESHOLD_INSIDE_CIRCLE.threshold =\n      threshold;\n  });\n\n  // Trigger an annotation render for any viewports on the toolgroup\n  const viewportsInfo = toolGroup.getViewportsInfo();\n\n  if (!viewportsInfo.length) {\n    return;\n  }\n\n  const { renderingEngineId } = viewportsInfo[0];\n\n  // Use helper to get array of viewportIds, or we just end up doing this mapping\n  // ourselves here.\n  const viewportIds = toolGroup.getViewportIds();\n\n  const renderingEngine = getRenderingEngine(renderingEngineId);\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIds);\n}\n\nexport function getBrushThresholdForToolGroup(toolGroupId: string) {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const toolInstances = toolGroup._toolInstances;\n\n  if (!Object.keys(toolInstances).length) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n  const brushToolInstance = brushBasedToolInstances[0];\n\n  if (!brushToolInstance) {\n    return;\n  }\n\n  // TODO -> Assumes the\n  return brushToolInstance.configuration.strategySpecificConfiguration\n    .THRESHOLD_INSIDE_CIRCLE.threshold;\n}\n","import { Types } from '@cornerstonejs/core';\nimport { pointInShapeCallback } from '../../utilities';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport {\n  getVoxelOverlap,\n  processVolumes,\n  ThresholdInformation,\n} from './utilities';\n\n/**\n * It thresholds a segmentation volume based on a set of threshold values with\n * respect to a list of volumes and respective threshold ranges.\n * @param segmentationVolume - the segmentation volume to be modified\n * @param segmentationIndex - the index of the segmentation to modify\n * @param thresholdVolumeInformation - array of objects containing volume data\n * and a range (lower and upper values) to threshold\n * @param overlapType - indicates if the user requires all voxels pass\n * (overlapType = 1) or any voxel pass (overlapType = 0)\n * @returns\n */\nfunction thresholdSegmentationByRange(\n  segmentationVolume: Types.IImageVolume,\n  segmentationIndex: number,\n  thresholdVolumeInformation: ThresholdInformation[],\n  overlapType: number\n): Types.IImageVolume {\n  const scalarData = segmentationVolume.getScalarData();\n\n  // prepare a list of volume information objects for callback functions\n  const { baseVolumeIdx, volumeInfoList } = processVolumes(\n    segmentationVolume,\n    thresholdVolumeInformation\n  );\n\n  /**\n   * This function will test all overlaps between a voxel in base volume\n   * (the reference for segmentation volume creation) and voxels in other\n   * volumes.\n   * If the segmentation volume and the image volume are the same size,\n   * checks if the scalar data at each point is within the threshold values.\n   * If the segmentation volume and the image volume are different sizes,\n   * checks the voxel overlap\n   */\n  volumeInfoList.forEach((volumeInfo) => {\n    const { volumeSize } = volumeInfo;\n\n    if (volumeSize === scalarData.length) {\n      _handleSameSizeVolume(scalarData, segmentationIndex, volumeInfo);\n    } else {\n      _handleDifferentSizeVolume(\n        scalarData,\n        segmentationIndex,\n        volumeInfo,\n        volumeInfoList,\n        baseVolumeIdx,\n        overlapType\n      );\n    }\n  });\n\n  triggerSegmentationDataModified(segmentationVolume.volumeId);\n\n  return segmentationVolume;\n}\n\nfunction _handleDifferentSizeVolume(\n  scalarData: Types.VolumeScalarData,\n  segmentationIndex: number,\n  volumeInfo: any,\n  volumeInfoList: any,\n  baseVolumeIdx: number,\n  overlapType: number\n) {\n  const { imageData, lower, upper, dimensions } = volumeInfo;\n\n  let total, overlaps, range;\n\n  for (let i = 0; i < scalarData.length; i++) {\n    if (scalarData[i] === segmentationIndex) {\n      const overlapBounds = getVoxelOverlap(\n        imageData,\n        dimensions,\n        volumeInfoList[baseVolumeIdx].spacing,\n        volumeInfoList[baseVolumeIdx].imageData.getPoint(i)\n      );\n\n      const callbackOverlap = ({ value }) => {\n        total = total + 1;\n        if (value >= range.lower && value <= range.upper) {\n          overlaps = overlaps + 1;\n        }\n      };\n\n      total = 0;\n      overlaps = 0;\n      range = { lower, upper };\n      let overlapTest = false;\n\n      // check all voxel overlaps\n      pointInShapeCallback(\n        imageData,\n        () => true,\n        callbackOverlap,\n        overlapBounds\n      );\n\n      overlapTest = overlapType === 0 ? overlaps > 0 : overlaps === total;\n      scalarData[i] = overlapTest ? segmentationIndex : 0;\n    }\n  }\n  return { total, range, overlaps };\n}\n\nfunction _handleSameSizeVolume(\n  scalarData: Types.VolumeScalarData,\n  segmentationIndex: number,\n  volumeInfo: any\n) {\n  const { referenceValues, lower, upper } = volumeInfo;\n\n  for (let i = 0; i < scalarData.length; i++) {\n    if (scalarData[i] === segmentationIndex) {\n      const value = referenceValues[i];\n      scalarData[i] = value >= lower && value <= upper ? segmentationIndex : 0;\n    }\n  }\n}\n\nexport default thresholdSegmentationByRange;\n","import { Types } from '@cornerstonejs/core';\n\n/**\n * Returns the orientation of the vector in the patient coordinate system.\n * @public\n *\n * @param vector - Input array\n * @returns The orientation in the patient coordinate system.\n */\nexport default function getOrientationStringLPS(vector: Types.Point3): string {\n  // Thanks to David Clunie\n  // https://sites.google.com/site/dicomnotes/\n\n  let orientation = '';\n  const orientationX = vector[0] < 0 ? 'R' : 'L';\n  const orientationY = vector[1] < 0 ? 'A' : 'P';\n  const orientationZ = vector[2] < 0 ? 'F' : 'H';\n\n  // Should probably make this a function vector3.abs\n  const abs = [Math.abs(vector[0]), Math.abs(vector[1]), Math.abs(vector[2])];\n\n  const MIN = 0.0001;\n\n  for (let i = 0; i < 3; i++) {\n    if (abs[0] > MIN && abs[0] > abs[1] && abs[0] > abs[2]) {\n      orientation += orientationX;\n      abs[0] = 0;\n    } else if (abs[1] > MIN && abs[1] > abs[0] && abs[1] > abs[2]) {\n      orientation += orientationY;\n      abs[1] = 0;\n    } else if (abs[2] > MIN && abs[2] > abs[0] && abs[2] > abs[1]) {\n      orientation += orientationZ;\n      abs[2] = 0;\n    } else if (abs[0] > MIN && abs[1] > MIN && abs[0] === abs[1]) {\n      orientation += orientationX + orientationY;\n      abs[0] = 0;\n      abs[1] = 0;\n    } else if (abs[0] > MIN && abs[2] > MIN && abs[0] === abs[2]) {\n      orientation += orientationX + orientationZ;\n      abs[0] = 0;\n      abs[2] = 0;\n    } else if (abs[1] > MIN && abs[2] > MIN && abs[1] === abs[2]) {\n      orientation += orientationY + orientationZ;\n      abs[1] = 0;\n      abs[2] = 0;\n    } else {\n      break;\n    }\n  }\n\n  return orientation;\n}\n","/**\n * Inverts an orientation string.\n * @public\n *\n * @param orientationString - The orientation.\n * @returns The inverted orientationString.\n */\nexport default function invertOrientationStringLPS(\n  orientationString: string\n): string {\n  let inverted = orientationString.replace('H', 'f');\n\n  inverted = inverted.replace('F', 'h');\n  inverted = inverted.replace('R', 'l');\n  inverted = inverted.replace('L', 'r');\n  inverted = inverted.replace('A', 'p');\n  inverted = inverted.replace('P', 'a');\n  inverted = inverted.toUpperCase();\n\n  return inverted;\n}\n","/**\n * CINE Tool Events\n */\nenum Events {\n  CLIP_STOPPED = 'CORNERSTONE_CINE_TOOL_STOPPED',\n  CLIP_STARTED = 'CORNERSTONE_CINE_TOOL_STARTED',\n}\n\nexport default Events;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { CINETypes } from '../../types';\n\nconst state: Record<string, CINETypes.ToolData> = {};\n\nfunction addToolState(element: HTMLDivElement, data: CINETypes.ToolData): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  state[viewportId] = data;\n}\n\nfunction getToolState(element: HTMLDivElement): CINETypes.ToolData | undefined {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  return state[viewportId];\n}\n\nexport { addToolState, getToolState };\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport {\n  utilities as csUtils,\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  cache,\n  BaseVolumeViewport,\n} from '@cornerstonejs/core';\n\nimport { Types } from '@cornerstonejs/core';\nimport CINE_EVENTS from './events';\nimport { addToolState, getToolState } from './state';\nimport { CINETypes } from '../../types';\nimport scroll from '../scroll';\n\nconst { triggerEvent } = csUtils;\n\nconst debounced = true;\nconst loop = true;\nconst dynamicVolumesPlayingMap = new Map();\n\n/**\n * Starts playing a clip or adjusts the frame rate of an already playing clip.  framesPerSecond is\n * optional and defaults to 30 if not specified.  A negative framesPerSecond will play the clip in reverse.\n * The element must be a stack of images\n * @param element - HTML Element\n * @param framesPerSecond - Number of frames per second\n */\nfunction playClip(\n  element: HTMLDivElement,\n  playClipOptions: CINETypes.PlayClipOptions\n): void {\n  let playClipTimeouts;\n  let playClipIsTimeVarying;\n\n  if (element === undefined) {\n    throw new Error('playClip: element must not be undefined');\n  }\n\n  const enabledElement = getEnabledElement(element);\n\n  if (!enabledElement) {\n    throw new Error(\n      'playClip: element must be a valid Cornerstone enabled element'\n    );\n  }\n\n  // 4D Cine is enabled by default\n  playClipOptions.dynamicCineEnabled =\n    playClipOptions.dynamicCineEnabled ?? true;\n\n  const { viewport } = enabledElement;\n  const volume = _getVolumeFromViewport(viewport);\n  const playClipContext = _createCinePlayContext(viewport, playClipOptions);\n  let playClipData = getToolState(element);\n\n  const isDynamicCinePlaying =\n    playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume();\n\n  // If user is trying to play CINE for a 4D volume it first needs\n  // to stop CINE that has may be playing for any other viewport.\n  if (isDynamicCinePlaying) {\n    _stopDynamicVolumeCine(element);\n  }\n\n  if (!playClipData) {\n    playClipData = {\n      intervalId: undefined,\n      framesPerSecond: 30,\n      lastFrameTimeStamp: undefined,\n      ignoreFrameTimeVector: false,\n      usingFrameTimeVector: false,\n      frameTimeVector: playClipOptions.frameTimeVector ?? undefined,\n      speed: playClipOptions.frameTimeVectorSpeedMultiplier ?? 1,\n      reverse: playClipOptions.reverse ?? false,\n      loop: playClipOptions.loop ?? true,\n    };\n    addToolState(element, playClipData);\n  } else {\n    // Make sure the specified clip is not running before any property update.\n    // If a 3D CINE was playing it passes isDynamicCinePlaying as FALSE to\n    // prevent stopping a 4D CINE in case it is playing on another viewport.\n    _stopClip(element, isDynamicCinePlaying);\n  }\n\n  playClipData.dynamicCineEnabled = playClipOptions.dynamicCineEnabled;\n\n  // If a framesPerSecond is specified and is valid, update the playClipData now\n  if (\n    playClipOptions.framesPerSecond < 0 ||\n    playClipOptions.framesPerSecond > 0\n  ) {\n    playClipData.framesPerSecond = Number(playClipOptions.framesPerSecond);\n    playClipData.reverse = playClipData.framesPerSecond < 0;\n    // If framesPerSecond is given, frameTimeVector will be ignored...\n    playClipData.ignoreFrameTimeVector = true;\n  }\n\n  // Determine if frame time vector should be used instead of a fixed frame rate...\n  if (\n    playClipData.ignoreFrameTimeVector !== true &&\n    playClipData.frameTimeVector &&\n    playClipData.frameTimeVector.length === playClipContext.numScrollSteps &&\n    playClipContext.frameTimeVectorEnabled\n  ) {\n    const { timeouts, isTimeVarying } = _getPlayClipTimeouts(\n      playClipData.frameTimeVector,\n      playClipData.speed\n    );\n\n    playClipTimeouts = timeouts;\n    playClipIsTimeVarying = isTimeVarying;\n  }\n\n  // This function encapsulates the frame rendering logic...\n  const playClipAction = () => {\n    const { numScrollSteps, currentStepIndex } = playClipContext;\n    let newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n    const newStepIndexOutOfRange =\n      newStepIndex < 0 || newStepIndex >= numScrollSteps;\n\n    if (!loop && newStepIndexOutOfRange) {\n      // If a 3D CINE was playing it passes isDynamicCinePlaying as FALSE to\n      // prevent stopping a 4D CINE in case it is playing on another viewport.\n      _stopClip(element, isDynamicCinePlaying);\n\n      const eventDetail = { element };\n\n      triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, eventDetail);\n      return;\n    }\n\n    // Loop around if newStepIndex is out of range\n    if (newStepIndex >= numScrollSteps) {\n      newStepIndex = 0;\n    } else if (newStepIndex < 0) {\n      newStepIndex = numScrollSteps - 1;\n    }\n\n    const delta = newStepIndex - currentStepIndex;\n\n    if (delta) {\n      playClipContext.scroll(delta);\n    }\n  };\n\n  if (isDynamicCinePlaying) {\n    dynamicVolumesPlayingMap.set(volume.volumeId, element);\n  }\n\n  // If playClipTimeouts array is available, not empty and its elements are NOT uniform ...\n  // ... (at least one timeout is different from the others), use alternate setTimeout implementation\n  if (\n    playClipTimeouts &&\n    playClipTimeouts.length > 0 &&\n    playClipIsTimeVarying\n  ) {\n    playClipData.usingFrameTimeVector = true;\n    playClipData.intervalId = window.setTimeout(\n      function playClipTimeoutHandler() {\n        playClipData.intervalId = window.setTimeout(\n          playClipTimeoutHandler,\n          playClipTimeouts[playClipContext.currentStepIndex]\n        );\n        playClipAction();\n      },\n      0\n    );\n  } else {\n    // ... otherwise user setInterval implementation which is much more efficient.\n    playClipData.usingFrameTimeVector = false;\n    playClipData.intervalId = window.setInterval(\n      playClipAction,\n      1000 / Math.abs(playClipData.framesPerSecond)\n    );\n  }\n\n  const eventDetail = {\n    element,\n  };\n\n  triggerEvent(element, CINE_EVENTS.CLIP_STARTED, eventDetail);\n}\n\n/**\n * Stops an already playing clip.\n * @param element - HTML Element\n */\nfunction stopClip(element: HTMLDivElement): void {\n  _stopClip(element, true);\n}\n\nfunction _stopClip(element: HTMLDivElement, stopDynamicCine: boolean): void {\n  const enabledElement = getEnabledElement(element);\n  if (!enabledElement) return;\n  const { viewport } = enabledElement;\n  const cineToolData = getToolState(viewport.element);\n\n  if (cineToolData) {\n    _stopClipWithData(cineToolData);\n  }\n\n  if (stopDynamicCine && viewport instanceof BaseVolumeViewport) {\n    _stopDynamicVolumeCine(element);\n  }\n}\n\n/**\n * [private] Stops any CINE playing for the dynamic volume loaded on this viewport\n * @param element - HTML Element\n */\nfunction _stopDynamicVolumeCine(element) {\n  const { viewport } = getEnabledElement(element);\n  const volume = _getVolumeFromViewport(viewport);\n\n  // If the current viewport has a 4D volume loaded it may be playing\n  // if it is also loaded on another viewport and user has started CINE\n  // for that one. This guarantees the other viewport will also be stopped.\n  if (volume?.isDynamicVolume()) {\n    const dynamicCineElement = dynamicVolumesPlayingMap.get(volume.volumeId);\n\n    dynamicVolumesPlayingMap.delete(volume.volumeId);\n\n    if (dynamicCineElement && dynamicCineElement !== element) {\n      stopClip(<HTMLDivElement>dynamicCineElement);\n    }\n  }\n}\n\n/**\n * [private] Turns a Frame Time Vector (0018,1065) array into a normalized array of timeouts. Each element\n * ... of the resulting array represents the amount of time each frame will remain on the screen.\n * @param vector - A Frame Time Vector (0018,1065) as specified in section C.7.6.5.1.2 of DICOM standard.\n * @param speed - A speed factor which will be applied to each element of the resulting array.\n * @returns An array with timeouts for each animation frame.\n */\nfunction _getPlayClipTimeouts(vector: number[], speed: number) {\n  let i;\n  let sample;\n  let delay;\n  let sum = 0;\n  const limit = vector.length;\n  const timeouts = [];\n\n  // Initialize time varying to false\n  let isTimeVarying = false;\n\n  if (typeof speed !== 'number' || speed <= 0) {\n    speed = 1;\n  }\n\n  // First element of a frame time vector must be discarded\n  for (i = 1; i < limit; i++) {\n    // eslint-disable-next-line no-bitwise\n    delay = (Number(vector[i]) / speed) | 0; // Integral part only\n    timeouts.push(delay);\n    if (i === 1) {\n      // Use first item as a sample for comparison\n      sample = delay;\n    } else if (delay !== sample) {\n      isTimeVarying = true;\n    }\n\n    sum += delay;\n  }\n\n  if (timeouts.length > 0) {\n    if (isTimeVarying) {\n      // If it's a time varying vector, make the last item an average...\n      // eslint-disable-next-line no-bitwise\n      delay = (sum / timeouts.length) | 0;\n    } else {\n      delay = timeouts[0];\n    }\n\n    timeouts.push(delay);\n  }\n\n  return { timeouts, isTimeVarying };\n}\n\n/**\n * [private] Performs the heavy lifting of stopping an ongoing animation.\n * @param element - HTML Element\n * @param playClipData - The data from playClip that needs to be stopped.\n */\nfunction _stopClipWithData(playClipData) {\n  const id = playClipData.intervalId;\n\n  if (typeof id !== 'undefined') {\n    playClipData.intervalId = undefined;\n    if (playClipData.usingFrameTimeVector) {\n      clearTimeout(id);\n    } else {\n      clearInterval(id);\n    }\n  }\n}\n\nfunction _getVolumesFromViewport(viewport): Types.IImageVolume[] {\n  return viewport\n    .getActors()\n    .map((actor) => cache.getVolume(actor.uid))\n    .filter((volume) => !!volume);\n}\n\nfunction _getVolumeFromViewport(viewport): Types.IImageVolume {\n  const volumes = _getVolumesFromViewport(viewport);\n  const dynamicVolume = volumes.find((volume) => volume.isDynamicVolume());\n\n  return dynamicVolume ?? volumes[0];\n}\n\nfunction _createStackViewportCinePlayContext(\n  viewport: StackViewport\n): CINETypes.CinePlayContext {\n  const imageIds = viewport.getImageIds();\n\n  return {\n    get numScrollSteps(): number {\n      return imageIds.length;\n    },\n    get currentStepIndex(): number {\n      return viewport.getTargetImageIdIndex();\n    },\n    get frameTimeVectorEnabled(): boolean {\n      // It is always in acquired orientation\n      return true;\n    },\n    scroll(delta: number): void {\n      scroll(viewport, { delta, debounceLoading: debounced });\n    },\n  };\n}\n\nfunction _createVolumeViewportCinePlayContext(\n  viewport: VolumeViewport,\n  volume: Types.IImageVolume\n): CINETypes.CinePlayContext {\n  const { volumeId } = volume;\n  const cachedScrollInfo = {\n    viewPlaneNormal: vec3.create(),\n    scrollInfo: null,\n  };\n\n  const getScrollInfo = () => {\n    const camera = viewport.getCamera();\n    const updateCache =\n      !cachedScrollInfo.scrollInfo ||\n      !vec3.equals(camera.viewPlaneNormal, cachedScrollInfo.viewPlaneNormal);\n\n    // Number of steps would change only after rotating the volume so it\n    // caches the result and recomputes only when necessary. Until it is\n    // rotated the current frame is updated locally\n    if (updateCache) {\n      const scrollInfo = csUtils.getVolumeViewportScrollInfo(\n        viewport,\n        volumeId\n      );\n\n      cachedScrollInfo.viewPlaneNormal = camera.viewPlaneNormal;\n      cachedScrollInfo.scrollInfo = scrollInfo;\n    }\n\n    return cachedScrollInfo.scrollInfo;\n  };\n\n  return {\n    get numScrollSteps(): number {\n      return getScrollInfo().numScrollSteps;\n    },\n    get currentStepIndex(): number {\n      return getScrollInfo().currentStepIndex;\n    },\n    get frameTimeVectorEnabled(): boolean {\n      const camera = viewport.getCamera();\n      const volumeViewPlaneNormal = volume.direction\n        .slice(6, 9)\n        .map((x) => -x) as Types.Point3;\n      const dot = vec3.dot(volumeViewPlaneNormal, camera.viewPlaneNormal);\n\n      // Check if the volume is in acquired orientation\n      // it may be flipped or rotated in plane\n      return glMatrix.equals(dot, 1);\n    },\n    scroll(delta: number): void {\n      getScrollInfo().currentStepIndex += delta;\n      scroll(viewport, { delta });\n    },\n  };\n}\n\nfunction _createDynamicVolumeViewportCinePlayContext(\n  volume: Types.IDynamicImageVolume\n): CINETypes.CinePlayContext {\n  return {\n    get numScrollSteps(): number {\n      return volume.numTimePoints;\n    },\n    get currentStepIndex(): number {\n      return volume.timePointIndex;\n    },\n    get frameTimeVectorEnabled(): boolean {\n      // Looping throught time does not uses frameTimeVector\n      return false;\n    },\n    scroll(delta: number): void {\n      // Updating this property (setter) makes it move to the desired time point\n      volume.timePointIndex += delta;\n    },\n  };\n}\n\nfunction _createCinePlayContext(\n  viewport,\n  playClipOptions: CINETypes.PlayClipOptions\n): CINETypes.CinePlayContext {\n  if (viewport instanceof StackViewport) {\n    return _createStackViewportCinePlayContext(viewport);\n  }\n\n  if (viewport instanceof VolumeViewport) {\n    const volume = _getVolumeFromViewport(viewport);\n\n    if (playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume()) {\n      return _createDynamicVolumeViewportCinePlayContext(\n        <Types.IDynamicImageVolume>volume\n      );\n    }\n\n    return _createVolumeViewportCinePlayContext(viewport, volume);\n  }\n\n  throw new Error('Unknown viewport type');\n}\n\nexport { playClip, stopClip };\n","import { Types } from '@cornerstonejs/core';\nimport { PlanarFreehandROITool } from '../../tools';\nimport { ToolGroupManager } from '../../store';\nimport { PlanarFreehandROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport interpolateSegmentPoints from './interpolation/interpolateSegmentPoints';\n\nfunction shouldPreventInterpolation(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation,\n  knotsRatioPercentage: number\n): boolean {\n  if (!annotation?.data?.polyline || knotsRatioPercentage <= 0) {\n    return true;\n  }\n\n  if (!enabledElement.viewport) {\n    return true;\n  }\n\n  const { renderingEngineId, viewportId, FrameOfReferenceUID } = enabledElement;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (annotation.metadata.FrameOfReferenceUID !== FrameOfReferenceUID) {\n    return true;\n  }\n\n  if (!toolGroup) {\n    return true;\n  }\n\n  const toolInstance = toolGroup.getToolInstance(annotation.metadata.toolName);\n\n  // strategy to prevent non PlanarFreehandTool\n  if (!(toolInstance instanceof PlanarFreehandROITool)) {\n    return true;\n  }\n\n  return (\n    toolInstance.isDrawing ||\n    toolInstance.isEditingOpen ||\n    toolInstance.isEditingClosed\n  );\n}\n/**\n * Interpolates a given annotation from a given enabledElement.\n * It mutates annotation param.\n * The param knotsRatioPercentage defines the percentage of points to be considered as knots on the interpolation process.\n * Interpolation will be skipped in case: annotation is not present in enabledElement (or there is no toolGroup associated with it), related tool is being modified.\n */\nexport default function interpolateAnnotation(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation,\n  knotsRatioPercentage: number\n): boolean {\n  // prevent running while there is any tool annotation being modified\n  if (\n    shouldPreventInterpolation(enabledElement, annotation, knotsRatioPercentage)\n  ) {\n    return false;\n  }\n\n  const { viewport } = enabledElement;\n  // use only 2 dimensions on interpolation (what visually matters),\n  // otherwise a 3d interpolation might have a totally different output as it consider one more dimension.\n  const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n  const interpolatedCanvasPoints = <Types.Point2[]>(\n    interpolateSegmentPoints(\n      canvasPoints,\n      0,\n      canvasPoints.length,\n      knotsRatioPercentage\n    )\n  );\n\n  if (interpolatedCanvasPoints === canvasPoints) {\n    return false;\n  }\n\n  annotation.data.polyline = interpolatedCanvasPoints.map(\n    viewport.canvasToWorld\n  );\n\n  return true;\n}\n","import interpolateAnnotation from './interpolateAnnotation';\n\nexport default {\n  interpolateAnnotation,\n};\n\nexport { interpolateAnnotation };\n","import { getEnabledElement } from '@cornerstonejs/core';\n\nconst state: Record<number, any> = {};\n\nfunction addToolState(element: HTMLDivElement, data): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  state[viewportId] = data;\n}\n\nfunction getToolState(element: HTMLDivElement): any {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  return state[viewportId];\n}\n\nexport { addToolState, getToolState };\n","import {\n  getEnabledElement,\n  StackViewport,\n  imageLoader,\n  Enums,\n  eventTarget,\n  imageLoadPoolManager,\n  cache,\n  getConfiguration as getCoreConfiguration,\n} from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\n\nconst requestType = Enums.RequestType.Prefetch;\nconst priority = 0;\nconst addToBeginning = true;\n\nlet configuration = {\n  maxImagesToPrefetch: Infinity,\n  preserveExistingPool: false,\n};\n\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 10;\n\nfunction range(lowEnd, highEnd) {\n  // Javascript version of Python's range function\n  // http://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-an-array-based-on-suppl\n  lowEnd = Math.round(lowEnd) || 0;\n  highEnd = Math.round(highEnd) || 0;\n\n  const arr = [];\n  let c = highEnd - lowEnd + 1;\n\n  if (c <= 0) {\n    return arr;\n  }\n\n  while (c--) {\n    arr[c] = highEnd--;\n  }\n\n  return arr;\n}\n\nfunction nearestIndex(arr, x) {\n  // Return index of nearest values in array\n  // http://stackoverflow.com/questions/25854212/return-index-of-nearest-values-in-an-array\n  let low = 0;\n  let high = arr.length - 1;\n\n  arr.forEach((v, idx) => {\n    if (v < x) {\n      low = Math.max(idx, low);\n    } else if (v > x) {\n      high = Math.min(idx, high);\n    }\n  });\n\n  return { low, high };\n}\n\nfunction getStackData(element) {\n  const enabledElement = getEnabledElement(element);\n\n  if (!enabledElement) {\n    throw new Error(\n      'stackPrefetch: element must be a valid Cornerstone enabled element'\n    );\n  }\n\n  const { viewport } = enabledElement;\n\n  if (!(viewport instanceof StackViewport)) {\n    throw new Error(\n      'stackPrefetch: element must be a StackViewport, VolumeViewport stackPrefetch not yet implemented'\n    );\n  }\n\n  return {\n    currentImageIdIndex: viewport.getCurrentImageIdIndex(),\n    imageIds: viewport.getImageIds(),\n  };\n}\n\nfunction prefetch(element) {\n  // Get the stackPrefetch tool data\n  const stackPrefetchData = getToolState(element);\n\n  if (!stackPrefetchData) {\n    return;\n  }\n\n  const stackPrefetch = stackPrefetchData || {};\n  const stack = getStackData(element);\n\n  if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n    console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n    return;\n  }\n\n  // If all the requests are complete, disable the stackPrefetch tool\n  if (\n    !stackPrefetch.indicesToRequest ||\n    !stackPrefetch.indicesToRequest.length\n  ) {\n    stackPrefetch.enabled = false;\n  }\n\n  // Make sure the tool is still enabled\n  if (stackPrefetch.enabled === false) {\n    return;\n  }\n\n  // Remove an imageIdIndex from the list of indices to request\n  // This fires when the individual image loading deferred is resolved\n  function removeFromList(imageIdIndex) {\n    const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n\n    if (index > -1) {\n      // Don't remove last element if imageIdIndex not found\n      stackPrefetch.indicesToRequest.splice(index, 1);\n    }\n  }\n\n  // Remove all already cached images from the\n  // IndicesToRequest array\n  stackPrefetchData.indicesToRequest.sort((a, b) => a - b);\n  const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n\n  indicesToRequestCopy.forEach(function (imageIdIndex) {\n    const imageId = stack.imageIds[imageIdIndex];\n\n    if (!imageId) {\n      return;\n    }\n\n    const imageLoadObject = cache.getImageLoadObject(imageId);\n\n    if (imageLoadObject) {\n      removeFromList(imageIdIndex);\n    }\n  });\n\n  // Stop here if there are no images left to request\n  // After those in the cache have been removed\n  if (!stackPrefetch.indicesToRequest.length) {\n    return;\n  }\n\n  // Clear the requestPool of prefetch requests, if needed.\n  if (!configuration.preserveExistingPool) {\n    imageLoadPoolManager.clearRequestStack(requestType);\n  }\n\n  // Identify the nearest imageIdIndex to the currentImageIdIndex\n  const nearest = nearestIndex(\n    stackPrefetch.indicesToRequest,\n    stack.currentImageIdIndex\n  );\n\n  let imageId;\n  let nextImageIdIndex;\n  const preventCache = false;\n\n  function doneCallback(image) {\n    console.log('prefetch done: %s', image.imageId);\n    const imageIdIndex = stack.imageIds.indexOf(image.imageId);\n\n    removeFromList(imageIdIndex);\n\n    // triggerEvent(element, EVENTS.STACK_PREFETCH_IMAGE_LOADED, {\n    //   element,\n    //   imageId: image.imageId,\n    //   imageIndex: imageIdIndex,\n    //   stackPrefetch,\n    //   stack,\n    // });\n\n    // If there are no more images to fetch\n    // if (\n    //   !(\n    //     stackPrefetch.indicesToRequest &&\n    //     stackPrefetch.indicesToRequest.length > 0\n    //   )\n    // ) {\n    //   triggerEvent(element, EVENTS.STACK_PREFETCH_DONE, {\n    //     element,\n    //     stackPrefetch,\n    //     stack,\n    //   });\n    // }\n  }\n\n  // Retrieve the errorLoadingHandler if one exists\n  // const errorLoadingHandler =\n  //   loadHandlerManager.getErrorLoadingHandler(element);\n\n  // function failCallback(error) {\n  //   logger.log('prefetch errored: %o', error);\n  //   if (errorLoadingHandler) {\n  //     errorLoadingHandler(element, imageId, error, 'stackPrefetch');\n  //   }\n  // }\n\n  // Prefetch images around the current image (before and after)\n  let lowerIndex = nearest.low;\n  let higherIndex = nearest.high;\n  const imageIdsToPrefetch = [];\n\n  while (\n    lowerIndex >= 0 ||\n    higherIndex < stackPrefetch.indicesToRequest.length\n  ) {\n    const currentIndex = stack.currentImageIdIndex;\n    const shouldSkipLower =\n      currentIndex - stackPrefetch.indicesToRequest[lowerIndex] >\n      configuration.maxImagesToPrefetch;\n    const shouldSkipHigher =\n      stackPrefetch.indicesToRequest[higherIndex] - currentIndex >\n      configuration.maxImagesToPrefetch;\n\n    const shouldLoadLower = !shouldSkipLower && lowerIndex >= 0;\n    const shouldLoadHigher =\n      !shouldSkipHigher && higherIndex < stackPrefetch.indicesToRequest.length;\n\n    if (!shouldLoadHigher && !shouldLoadLower) {\n      break;\n    }\n\n    if (shouldLoadLower) {\n      nextImageIdIndex = stackPrefetch.indicesToRequest[lowerIndex--];\n      imageId = stack.imageIds[nextImageIdIndex];\n      imageIdsToPrefetch.push(imageId);\n    }\n\n    if (shouldLoadHigher) {\n      nextImageIdIndex = stackPrefetch.indicesToRequest[higherIndex++];\n      imageId = stack.imageIds[nextImageIdIndex];\n      imageIdsToPrefetch.push(imageId);\n    }\n  }\n\n  const requestFn = (imageId, options) =>\n    imageLoader.loadAndCacheImage(imageId, options);\n\n  const { useNorm16Texture } = getCoreConfiguration().rendering;\n\n  imageIdsToPrefetch.forEach((imageId) => {\n    // IMPORTANT: Request type should be passed if not the 'interaction'\n    // highest priority will be used for the request type in the imageRetrievalPool\n    const options = {\n      targetBuffer: {\n        type: useNorm16Texture ? undefined : 'Float32Array',\n      },\n      preScale: {\n        enabled: true,\n      },\n      requestType,\n    };\n\n    imageLoadPoolManager.addRequest(\n      requestFn.bind(null, imageId, options),\n      requestType,\n      // Additional details\n      {\n        imageId,\n      },\n      priority\n      // addToBeginning\n    );\n  });\n}\n\nfunction getPromiseRemovedHandler(element) {\n  return function (e) {\n    const eventData = e.detail;\n\n    // When an imagePromise has been pushed out of the cache, re-add its index\n    // It to the indicesToRequest list so that it will be retrieved later if the\n    // CurrentImageIdIndex is changed to an image nearby\n    let stackData;\n\n    try {\n      // It will throw an exception in some cases (eg: thumbnails)\n      stackData = getStackData(element);\n    } catch (error) {\n      return;\n    }\n\n    if (!stackData || !stackData.imageIds || stackData.imageIds.length === 0) {\n      return;\n    }\n\n    const stack = stackData;\n    const imageIdIndex = stack.imageIds.indexOf(eventData.imageId);\n\n    // Make sure the image that was removed is actually in this stack\n    // Before adding it to the indicesToRequest array\n    if (imageIdIndex < 0) {\n      return;\n    }\n\n    const stackPrefetchData = getToolState(element);\n\n    if (\n      !stackPrefetchData ||\n      !stackPrefetchData.data ||\n      !stackPrefetchData.data.length\n    ) {\n      return;\n    }\n\n    stackPrefetchData.indicesToRequest.push(imageIdIndex);\n  };\n}\n\nfunction onImageUpdated(e) {\n  // Start prefetching again (after a delay)\n  // When the user has scrolled to a new image\n  clearTimeout(resetPrefetchTimeout);\n  resetPrefetchTimeout = setTimeout(function () {\n    const element = e.target;\n\n    // If playClip is enabled and the user loads a different series in the viewport\n    // An exception will be thrown because the element will not be enabled anymore\n    try {\n      prefetch(element);\n    } catch (error) {\n      return;\n    }\n  }, resetPrefetchDelay);\n}\n\nfunction enable(element) {\n  const stack = getStackData(element);\n\n  if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n    console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n    return;\n  }\n\n  // Use the currentImageIdIndex from the stack as the initialImageIdIndex\n  const stackPrefetchData = {\n    indicesToRequest: range(0, stack.imageIds.length - 1),\n    enabled: true,\n    direction: 1,\n  };\n\n  // Remove the currentImageIdIndex from the list to request\n  const indexOfCurrentImage = stackPrefetchData.indicesToRequest.indexOf(\n    stack.currentImageIdIndex\n  );\n\n  stackPrefetchData.indicesToRequest.splice(indexOfCurrentImage, 1);\n\n  addToolState(element, stackPrefetchData);\n\n  prefetch(element);\n\n  element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n  element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n\n  const promiseRemovedHandler = getPromiseRemovedHandler(element);\n\n  eventTarget.removeEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n  eventTarget.addEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n}\n\nfunction disable(element) {\n  clearTimeout(resetPrefetchTimeout);\n  element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n\n  const promiseRemovedHandler = getPromiseRemovedHandler(element);\n\n  eventTarget.removeEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n\n  const stackPrefetchData = getToolState(element);\n  // If there is actually something to disable, disable it\n\n  if (stackPrefetchData && stackPrefetchData.data.length) {\n    stackPrefetchData.enabled = false;\n\n    // Clear current prefetch requests from the requestPool\n    imageLoadPoolManager.clearRequestStack(requestType);\n  }\n}\n\nfunction getConfiguration() {\n  return configuration;\n}\n\nfunction setConfiguration(config) {\n  configuration = config;\n}\n\nexport { enable, disable, getConfiguration, setConfiguration };\n","import { utilities, cache, Types } from '@cornerstonejs/core';\n\n/**\n * Gets the scalar data for a series of time points for either a single\n * coordinate or a segmentation mask, it will return the an array of scalar\n * data for a single coordinate or an array of arrays for a segmentation.\n *\n * @param dynamicVolume: 4D volume to compute time point data from\n * @param options: frameNumbers: which frames to use as timepoints, if left\n * blank, gets data timepoints over all frames\n * maskVolumeId: segmentationId to get timepoint data of\n * imageCoordinate: world coordinate to get timepoint data of\n * @returns\n */\nfunction getDataInTime(\n  dynamicVolume: Types.IDynamicImageVolume,\n  options: {\n    frameNumbers?;\n    maskVolumeId?;\n    imageCoordinate?;\n  }\n): number[] | number[][] {\n  let dataInTime;\n\n  // if frameNumbers is not provided, all frames are selected\n  const frames = options.frameNumbers || [\n    ...Array(dynamicVolume.numTimePoints).keys(),\n  ];\n\n  // You only need to provide either maskVolumeId OR imageCoordinate.\n  // Throws error if neither maskVolumeId or imageCoordinate is given,\n  // throws error if BOTH maskVolumeId and imageCoordinate is given\n  if (!options.maskVolumeId && !options.imageCoordinate) {\n    throw new Error('No ROI provided');\n  }\n\n  if (options.maskVolumeId && options.imageCoordinate) {\n    throw new Error('Please provide only one ROI');\n  }\n\n  if (options.maskVolumeId) {\n    const segmentationVolume = cache.getVolume(options.maskVolumeId);\n\n    // Get the index of every non-zero voxel in mask by mapping indexes to\n    // new array, then using the array to filter\n    const indexArray = segmentationVolume\n      .getScalarData()\n      .map((_, i) => i)\n      .filter((i) => segmentationVolume.getScalarData()[i] !== 0);\n    const dataInTime = _getTimePointDataMask(frames, indexArray, dynamicVolume);\n\n    return dataInTime;\n  }\n\n  if (options.imageCoordinate) {\n    const dataInTime = _getTimePointDataCoordinate(\n      frames,\n      options.imageCoordinate,\n      dynamicVolume\n    );\n\n    return dataInTime;\n  }\n\n  return dataInTime;\n}\n\nfunction _getTimePointDataCoordinate(frames, coordinate, volume) {\n  const { dimensions, imageData } = volume;\n  const index = imageData.worldToIndex(coordinate);\n\n  index[0] = Math.floor(index[0]);\n  index[1] = Math.floor(index[1]);\n  index[2] = Math.floor(index[2]);\n\n  if (!utilities.indexWithinDimensions(index, dimensions)) {\n    throw new Error('outside bounds');\n  }\n\n  // calculate offset for index\n  const yMultiple = dimensions[0];\n  const zMultiple = dimensions[0] * dimensions[1];\n  const allScalarData = volume.getScalarDataArrays();\n  const value = [];\n\n  frames.forEach((frame) => {\n    const activeScalarData = allScalarData[frame];\n    const scalarIndex = index[2] * zMultiple + index[1] * yMultiple + index[0];\n    value.push(activeScalarData[scalarIndex]);\n  });\n\n  return value;\n}\n\nfunction _getTimePointDataMask(frames, indexArray, volume) {\n  const allScalarData = volume.getScalarDataArrays();\n  const value = [];\n\n  for (let i = 0; i < indexArray.length; i++) {\n    const indexValues = [];\n    frames.forEach((frame) => {\n      const activeScalarData = allScalarData[frame];\n      indexValues.push(activeScalarData[indexArray[i]]);\n    });\n    value.push(indexValues);\n  }\n  return value;\n}\n\nexport default getDataInTime;\n","import { Enums, Types } from '@cornerstonejs/core';\n\n/**\n * Gets the scalar data for a series of time frames from a 4D volume, returns an\n * array of scalar data after performing AVERAGE, SUM or SUBTRACT to be used to\n * create a 3D volume\n *\n * @param dynamicVolume4D: volume to compute time frame data from\n * @param operation: operation to perform on time frame data, operations include\n * SUM, AVERAGE, and SUBTRACT (can only be used with 2 time frames provided)\n * @param frameNumbers: an array of frame indexs to perform the operation on, if\n * left empty, all frames will be used\n * @returns\n */\nfunction generateImageFromTimeData(\n  dynamicVolume: Types.IDynamicImageVolume,\n  operation: string,\n  frameNumbers?: number[]\n) {\n  // If no time frames provided, use all time frames\n  const frames = frameNumbers || [...Array(dynamicVolume.numTimePoints).keys()];\n  const numFrames = frames.length;\n\n  if (frames.length <= 1) {\n    throw new Error('Please provide two or more time points');\n  }\n\n  // Gets scalar data for all time frames\n  const typedArrays = dynamicVolume.getScalarDataArrays();\n\n  const arrayLength = typedArrays[0].length;\n  const finalArray = new Float32Array(arrayLength);\n\n  if (operation === Enums.DynamicOperatorType.SUM) {\n    for (let i = 0; i < numFrames; i++) {\n      const currentArray = typedArrays[frames[i]];\n      for (let j = 0; j < arrayLength; j++) {\n        finalArray[j] += currentArray[j];\n      }\n    }\n    return finalArray;\n  }\n\n  if (operation === Enums.DynamicOperatorType.SUBTRACT) {\n    if (frames.length > 2) {\n      throw new Error('Please provide only 2 time points for subtraction.');\n    }\n    for (let j = 0; j < arrayLength; j++) {\n      finalArray[j] += typedArrays[frames[0]][j] - typedArrays[frames[1]][j];\n    }\n    return finalArray;\n  }\n\n  if (operation === Enums.DynamicOperatorType.AVERAGE) {\n    for (let i = 0; i < numFrames; i++) {\n      const currentArray = typedArrays[frames[i]];\n      for (let j = 0; j < arrayLength; j++) {\n        finalArray[j] += currentArray[j];\n      }\n    }\n    for (let k = 0; k < arrayLength; k++) {\n      finalArray[k] = finalArray[k] / numFrames;\n    }\n    return finalArray;\n  }\n}\n\nexport default generateImageFromTimeData;\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\n\n/**\n * When an annotation is deselected, trigger an annotation render for all viewports.\n * The reason for this is that, drawing an annotation in a different viewport\n * should deselect all other annotations in other viewports. In order to achieve\n * this, we need to trigger an annotation render for all viewports.\n * Todo: Although this is inefficient, but since annotations are only rendered if necessary,\n * it's probably not going to have a noticeable impact on performance.\n * @param evt - The event object.\n */\nfunction annotationSelectionListener(evt): void {\n  const deselectedAnnotation = evt.detail.removed;\n\n  if (!deselectedAnnotation.length) {\n    return;\n  }\n\n  const renderingEngines = getRenderingEngines();\n\n  renderingEngines.forEach((renderingEngine) => {\n    const viewports = renderingEngine.getViewports();\n    const viewportIds = viewports.map((vp) => vp.id);\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIds);\n  });\n}\n\nexport default annotationSelectionListener;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\n/**\n * This is a callback function that is called when an annotation is modified.\n * Since we are throttling the cachedStats calculation for annotation tools,\n * we need to trigger a final render for the annotation. so that the annotation\n * textBox is updated.\n * Todo: This will trigger all the annotation tools to re-render, although DOM\n * will update those that have changed, but more efficient would be to only\n * update the changed annotation.\n * Todo: A better way is to extract the textBox render logic from the renderAnnotation\n * of all tools and just trigger a render for that (instead of the entire annotation., even if\n * no svg update happens since the attributes for handles are the same)\n */\nfunction annotationModifiedListener(evt): void {\n  const { viewportId, renderingEngineId } = evt.detail;\n  const renderingEngine = getRenderingEngine(renderingEngineId);\n  triggerAnnotationRenderForViewportIds(renderingEngine, [viewportId]);\n}\n\nexport default annotationModifiedListener;\n","import { Enums, Types } from '@cornerstonejs/core';\nimport triggerAnnotationRender from '../utilities/triggerAnnotationRender';\n\n/**\n *  When the image is rendered, check what tools can be rendered for this element.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `renderAnnotation` method, then we render them.\n * - Note that these tools don't necessarily have to be instances of  `AnnotationTool`,\n *   Any tool may register a `renderAnnotation` method (e.g. a tool that displays an overlay).\n *\n * @param evt - The normalized IMAGE_RENDERED event.\n */\nconst onImageRendered = function (evt: Types.EventTypes.ImageRenderedEvent) {\n  // TODO: should we do this on camera modified instead of image rendered?\n  // e.g. no need to re-render annotations if only the VOI has changed\n  triggerAnnotationRender(evt.detail.element);\n};\n\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(\n    Enums.Events.IMAGE_RENDERED,\n    onImageRendered as EventListener\n  );\n};\n\nconst disable = function (element: HTMLDivElement): void {\n  element.removeEventListener(\n    Enums.Events.IMAGE_RENDERED,\n    onImageRendered as EventListener\n  );\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import { state, ToolGroupManager } from '../../store';\nimport ToolModes from '../../enums/ToolModes';\n\nconst { Active } = ToolModes;\n\n/**\n * @function customCallbackHandler This is used as a generic event handler for tool events\n * on viewports. It:\n *\n * - Finds an \"active\" tool with:\n *    - A matching `handlerType`\n *    - A matching `customFunction` on its tool instance\n *\n * Then calls that custom function with raised event.\n *\n * @param handlerType - 'Mouse' | 'Touch' | 'MouseWheel'\n * @param customFunction - Function name that's expected to live on implementing\n *   (and event handling) active tool ex. 'doubleClickCallback'\n * @param evt\n */\nexport default function customCallbackHandler(\n  handlerType: string,\n  customFunction: string,\n  evt\n) {\n  if (state.isInteractingWithTool) {\n    return false;\n  }\n\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return false;\n  }\n\n  // TODO: Filter tools by interaction type?\n  /**\n   * Iterate tool group tools until we find a tool that is:\n   * - active\n   * - has the custom callback function\n   *\n   */\n  let activeTool;\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.toolOptions[toolName];\n    // TODO: Should be getter\n    const toolInstance = toolGroup.getToolInstance(toolName);\n\n    if (\n      // TODO: Should be enum?\n      tool.mode === Active &&\n      // TODO: Should be implements interface?\n      // Weird that we need concrete instance. Other options to filter / get callback?\n      typeof toolInstance[customFunction] === 'function'\n    ) {\n      activeTool = toolGroup.getToolInstance(toolName);\n      break;\n    }\n  }\n\n  if (!activeTool) {\n    return;\n  }\n\n  activeTool[customFunction](evt);\n}\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * mouseClick - Event handler for mouse click events. Uses `customCallbackHandler` to fire\n * the `mouseClickCallback` function on active tools.\n */\nconst mouseClick = customCallbackHandler.bind(\n  null,\n  'Mouse',\n  'mouseClickCallback'\n);\n\nexport default mouseClick;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * @function mouseDoubleClick - Event handler for mouse double click events. Uses `customCallbackHandler` to fire\n * the `doubleClickCallback` function on active tools.\n */\nconst mouseDoubleClick = customCallbackHandler.bind(\n  null,\n  'Mouse',\n  'doubleClickCallback'\n);\n\nexport default mouseDoubleClick;\n","import type { Types } from '@cornerstonejs/core';\n\nimport {\n  ToolAnnotationsPair,\n  ToolsWithMoveableHandles,\n} from '../types/InternalToolTypes';\n\n/**\n * Filters an array of tools, returning only tools with moveable handles at the mouse location that are not locked\n *\n * @param element - The element\n * @param ToolAndAnnotations - The input tool array.\n * @param canvasCoords - The coordinates of the mouse position.\n * @param interactionType - The type of interaction (e.g. 'mouse' or 'touch')\n * @returns The filtered array.\n */\nexport default function filterToolsWithMoveableHandles(\n  element: HTMLDivElement,\n  ToolAndAnnotations: ToolAnnotationsPair[],\n  canvasCoords: Types.Point2,\n  interactionType = 'mouse'\n): ToolsWithMoveableHandles[] {\n  const proximity = interactionType === 'touch' ? 36 : 6;\n  const toolsWithMoveableHandles = [];\n\n  ToolAndAnnotations.forEach(({ tool, annotations }) => {\n    for (const annotation of annotations) {\n      if (annotation.isLocked || !annotation.isVisible) {\n        continue;\n      }\n\n      const handle = tool.getHandleNearImagePoint(\n        element,\n        annotation,\n        canvasCoords,\n        proximity\n      );\n\n      if (handle) {\n        toolsWithMoveableHandles.push({\n          tool,\n          annotation,\n          handle,\n        });\n        break;\n      }\n    }\n  });\n\n  return toolsWithMoveableHandles;\n}\n","import { getAnnotations } from '../stateManagement/annotation/annotationState';\nimport { ToolAnnotationsPair } from '../types/InternalToolTypes';\nimport type AnnotationTool from '../tools/base/AnnotationTool';\nimport BaseTool from '../tools/base/BaseTool';\nimport { getEnabledElement } from '@cornerstonejs/core';\n\n/**\n * Filters an array of tools, returning only tools which have annotation.\n *\n * @param element - The cornerstone3D enabled element.\n * @param tools - The array of tools to check.\n *\n * @returns The array of tools with their found annotations.\n */\nexport default function filterToolsWithAnnotationsForElement(\n  element: HTMLDivElement,\n  tools: AnnotationTool[]\n): ToolAnnotationsPair[] {\n  const result = [];\n  for (let i = 0; i < tools.length; i++) {\n    const tool = tools[i];\n\n    if (!tool) {\n      console.warn('undefined tool in filterToolsWithAnnotationsForElement');\n      continue;\n    }\n\n    let annotations = getAnnotations(\n      (tool.constructor as typeof BaseTool).toolName,\n      element\n    );\n\n    if (!annotations?.length) {\n      continue;\n    }\n\n    if (typeof tool.filterInteractableAnnotationsForElement === 'function') {\n      // If the tool has a annotations filter (e.g. with in-plane-annotations-only filtering), use it.\n      annotations = tool.filterInteractableAnnotationsForElement(\n        element,\n        annotations\n      );\n    }\n\n    if (annotations.length > 0) {\n      result.push({ tool, annotations });\n    }\n  }\n\n  return result;\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport {\n  ToolAnnotationPair,\n  ToolAnnotationsPair,\n} from '../types/InternalToolTypes';\n\n/**\n * Filters an array of tools with annotations, returning the first annotation\n * for each tool that is moveable and at the mouse location. It results in\n * one annotation per tool.\n *\n *\n * @param element - The HTML element\n * @param ToolAndAnnotations - The input tool array.\n * @param canvasCoords - The coordinates of the mouse position.\n * @param interactionType - The type of interaction that is taking place.\n * @returns The filtered array containing ToolAndAnnotation\n */\nexport default function filterMoveableAnnotationTools(\n  element: HTMLDivElement,\n  ToolAndAnnotations: ToolAnnotationsPair[],\n  canvasCoords: Types.Point2,\n  interactionType = 'mouse'\n): ToolAnnotationPair[] {\n  const proximity = interactionType === 'touch' ? 36 : 6;\n\n  // TODO - This could get pretty expensive pretty quickly. We don't want to fetch the camera\n  // And do world to canvas on each coord.\n\n  // We want to produce a matrix from canvas to world for the viewport and just do a matrix operation on each handle.\n  // This could still be expensive for ROIs, but we probably shouldn't have \"handles\" for them anyway.\n\n  const moveableAnnotationTools = [];\n\n  ToolAndAnnotations.forEach(({ tool, annotations }) => {\n    for (const annotation of annotations) {\n      if (annotation.isLocked || !annotation.isVisible) {\n        continue;\n      }\n\n      const near = tool.isPointNearTool(\n        element,\n        annotation,\n        canvasCoords,\n        proximity,\n        interactionType\n      );\n\n      if (near) {\n        moveableAnnotationTools.push({\n          tool,\n          annotation,\n        });\n        break;\n      }\n    }\n  });\n\n  return moveableAnnotationTools;\n}\n","import { KeyboardBindings as kb } from '../../enums';\n\n/**\n * Gets the mouse modifier key from a mouse event.\n * Supports Shift, Ctrl, Alt, in singly and in combinations of 2\n * Supports Meta singly.\n */\nconst getMouseModifierKey = (evt) => {\n  // The logic is a hard coded key mapping\n  if (evt.shiftKey) {\n    if (evt.ctrlKey) return kb.ShiftCtrl;\n    if (evt.altKey) return kb.ShiftAlt;\n    if (evt.metaKey) return kb.ShiftMeta;\n    return kb.Shift;\n  }\n  if (evt.ctrlKey) {\n    if (evt.altKey) return kb.CtrlAlt;\n    if (evt.metaKey) return kb.CtrlMeta;\n    return kb.Ctrl;\n  }\n  if (evt.altKey) {\n    return (evt.metaKey && kb.AltMeta) || kb.Alt;\n  }\n  if (evt.metaKey) {\n    return kb.Meta;\n  }\n  return undefined;\n};\n\nexport default getMouseModifierKey;\n","import { ToolGroupManager } from '../../store';\nimport { MouseBindings, ToolModes } from '../../enums';\nimport { keyEventListener } from '../../eventListeners';\nimport { EventTypes } from '../../types';\nimport getMouseModifier from './getMouseModifier';\n\nconst { Active } = ToolModes;\n\n/**\n * Iterate tool group tools until we find a tool that has a \"ToolBinding\"\n * that matches our MouseEvent's `buttons`. It's possible there will be no match\n * (no active tool for that mouse button combination).\n *\n * @param evt - The event dispatcher mouse event.\n *\n * @returns tool\n */\nexport default function getActiveToolForMouseEvent(\n  evt: EventTypes.NormalizedMouseEventType\n) {\n  // Todo: we should refactor this to use getToolsWithModesForMouseEvent instead\n  const { renderingEngineId, viewportId } = evt.detail;\n  const mouseEvent = evt.detail.event;\n\n  // If any keyboard modifier key is also pressed - get the mouse version\n  // first since it handles combinations, while the key event handles non-modifier\n  // keys.\n  const modifierKey =\n    getMouseModifier(mouseEvent) || keyEventListener.getModifierKey();\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    // tool has binding that matches the mouse button, if mouseEvent is undefined\n    // it uses the primary button\n    const correctBinding =\n      toolOptions.bindings.length &&\n      toolOptions.bindings.some((binding) => {\n        return (\n          binding.mouseButton ===\n            (mouseEvent ? mouseEvent.buttons : defaultMousePrimary) &&\n          binding.modifierKey === modifierKey\n        );\n      });\n\n    if (toolOptions.mode === Active && correctBinding) {\n      return toolGroup.getToolInstance(toolName);\n    }\n  }\n}\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\n\ntype ModesFilter = Array<ToolModes>;\n\n/**\n * Given the normalized mouse event and a filter of modes,\n * find all the tools on the element that are in one of the specified modes.\n * If the evtButton is specified, only tools with a matching binding will be returned.\n * @param evt - The normalized mouseDown event.\n * @param modesFilter - An array of entries from the `ToolModes` enum.\n */\nexport default function getToolsWithModesForMouseEvent(\n  evt: EventTypes.MouseMoveEventType,\n  modesFilter: ModesFilter,\n  evtButton?: any\n) {\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return [];\n  }\n\n  const enabledTools = [];\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.toolOptions[toolName];\n\n    // tool has binding that matches the mouse button - we match those with\n    // any modifier keys too since they can be passively interacted with\n    const correctBinding =\n      evtButton != null && // not null or undefined\n      tool.bindings.length &&\n      tool.bindings.some((binding) => binding.mouseButton === evtButton);\n\n    if (\n      modesFilter.includes(tool.mode) &&\n      // Should not filter by event's button\n      // or should, and the tool binding includes the event's button\n      (!evtButton || correctBinding)\n    ) {\n      const toolInstance = toolGroup.getToolInstance(toolName);\n      enabledTools.push(toolInstance);\n    }\n  }\n\n  return enabledTools;\n}\n","import { state } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\nimport {\n  ToolAnnotationPair,\n  ToolsWithMoveableHandles,\n} from '../../types/InternalToolTypes';\n\nimport {\n  setAnnotationSelected,\n  isAnnotationSelected,\n} from '../../stateManagement/annotation/annotationSelection';\n\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\n\n// Util\nimport filterToolsWithMoveableHandles from '../../store/filterToolsWithMoveableHandles';\nimport filterToolsWithAnnotationsForElement from '../../store/filterToolsWithAnnotationsForElement';\nimport filterMoveableAnnotationTools from '../../store/filterMoveableAnnotationTools';\nimport getActiveToolForMouseEvent from '../shared/getActiveToolForMouseEvent';\nimport getToolsWithModesForMouseEvent from '../shared/getToolsWithModesForMouseEvent';\n\nconst { Active, Passive } = ToolModes;\n\n/**\n * When the mouse is depressed we check which entities can process these events in the following manner:\n *\n * - First we get the `activeTool` for the mouse button pressed.\n * - If the `activeTool` has a `preMouseDownCallback`, this is called. If the callback returns `true`,\n *   the event does not propagate further.\n * - Next we get all tools which are active or passive (`activeAndPassiveTools`), as annotation. for these tools could\n *   possibly catch and handle these events. We then filter the `activeAndPassiveTools` using `filterToolsWithAnnotationsForElement`, which filters tools with annotations\n *   for this frame of reference. Optionally a tool can employ a further filtering (via a\n *   `filterInteractableAnnotationsForElement` callback) for tools interactable within the current camera view\n *   (e.g. tools that only render when viewed from a certain direction).\n * - Next we check if any handles are interactable for each tool (`filterToolsWithMoveableHandles`). If interactable\n *   handles are found, the first tool/handle found consumes the event and the event does not propagate further.\n * - Next we check any tools are interactable (e.g. moving an entire length annotation rather than one of its handles:\n *   `filterMoveableAnnotationTools`). If interactable tools are found, the first tool found consumes the event and the\n *   event does not propagate further.\n * - Finally, if the `activeTool` has `postMouseDownCallback`, this is called.  If the callback returns `true`,\n *   the event does not propagate further.\n *\n * If the event is not consumed the event will bubble to the `mouseDownActivate` handler.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseDown(evt: EventTypes.MouseDownEventType) {\n  // If a tool has locked the current state it is dealing with an interaction within its own eventLoop.\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForMouseEvent(evt);\n\n  // Check for preMouseDownCallbacks,\n  // If the tool claims it consumed the event, prevent further checks.\n  if (activeTool && typeof activeTool.preMouseDownCallback === 'function') {\n    const consumedEvent = activeTool.preMouseDownCallback(evt);\n\n    if (consumedEvent) {\n      return;\n    }\n  }\n\n  // Find all tools that might respond to this mouse down\n  const isPrimaryClick = evt.detail.event.buttons === 1;\n  const activeToolsWithEventBinding = getToolsWithModesForMouseEvent(\n    evt,\n    [Active],\n    evt.detail.event.buttons\n  );\n  const passiveToolsIfEventWasPrimaryMouseButton = isPrimaryClick\n    ? getToolsWithModesForMouseEvent(evt, [Passive])\n    : undefined;\n  const applicableTools = [\n    ...(activeToolsWithEventBinding || []),\n    ...(passiveToolsIfEventWasPrimaryMouseButton || []),\n  ];\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Filter tools with annotations for this element\n  const annotationToolsWithAnnotations = filterToolsWithAnnotationsForElement(\n    element,\n    applicableTools\n  );\n\n  const canvasCoords = eventDetail.currentPoints.canvas;\n\n  // For the canvas coordinates, find all tools that might respond to this mouse down\n  // on their handles. This filter will call getHandleNearImagePoint for each tool\n  // instance (each annotation)\n  const annotationToolsWithMoveableHandles = filterToolsWithMoveableHandles(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'mouse'\n  );\n\n  // Preserve existing selections when shift key is pressed\n  const isMultiSelect = !!evt.detail.event.shiftKey;\n\n  // If there are annotation tools whose handle is near the mouse, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (annotationToolsWithMoveableHandles.length > 0) {\n    const { tool, annotation, handle } = getAnnotationForSelection(\n      annotationToolsWithMoveableHandles\n    ) as ToolsWithMoveableHandles;\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.handleSelectedCallback(evt, annotation, handle, 'Mouse');\n\n    return;\n  }\n\n  // If there were no annotation tools whose handle was near the mouse, try to check\n  // if any of the annotation tools are interactable (e.g. moving an entire length annotation)\n  const moveableAnnotationTools = filterMoveableAnnotationTools(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'mouse'\n  );\n\n  // If there are annotation tools that are interactable, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (moveableAnnotationTools.length > 0) {\n    const { tool, annotation } = getAnnotationForSelection(\n      moveableAnnotationTools\n    );\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.toolSelectedCallback(evt, annotation, 'Mouse');\n\n    return;\n  }\n\n  // Run the postMouseDownCallback for the active tool if it exists\n  if (activeTool && typeof activeTool.postMouseDownCallback === 'function') {\n    const consumedEvent = activeTool.postMouseDownCallback(evt);\n\n    if (consumedEvent) {\n      // If the tool claims it consumed the event, prevent further checks.\n      return;\n    }\n  }\n\n  // Don't stop propagation so that mouseDownActivate can handle the event\n}\n\n/**\n * If there are multiple annotation tools, return the first one that isn't locked neither hidden.\n * If there's only one annotation tool, return it\n * @param annotationTools - An array of tools and annotation.\n * @returns The candidate for selection\n */\nfunction getAnnotationForSelection(\n  toolsWithMovableHandles: ToolAnnotationPair[]\n): ToolAnnotationPair {\n  return (\n    (toolsWithMovableHandles.length > 1 &&\n      toolsWithMovableHandles.find(\n        (item) =>\n          !isAnnotationLocked(item.annotation) &&\n          isAnnotationVisible(item.annotation.annotationUID)\n      )) ||\n    toolsWithMovableHandles[0]\n  );\n}\n\n/**\n * If the annotation is selected, deselect it. If it's not selected, select it\n * @param annotationUID - The AnnotationUID that we\n * want to toggle the selection of.\n * @param isMultiSelect - If true, the annotation. will be deselected if it is\n * already selected, or deselected if it is selected.\n */\nfunction toggleAnnotationSelection(\n  annotationUID: string,\n  isMultiSelect = false\n): void {\n  if (isMultiSelect) {\n    if (isAnnotationSelected(annotationUID)) {\n      setAnnotationSelected(annotationUID, false);\n    } else {\n      const preserveSelected = true;\n      setAnnotationSelected(annotationUID, true, preserveSelected);\n    }\n  } else {\n    const preserveSelected = false;\n    setAnnotationSelected(annotationUID, true, preserveSelected);\n  }\n}\n","import { state } from '../../store';\nimport getActiveToolForMouseEvent from '../shared/getActiveToolForMouseEvent';\nimport { setAnnotationSelected } from '../../stateManagement/annotation/annotationSelection';\nimport { EventTypes } from '../../types';\n\n/**\n * If the `mouseDown` handler does not consume an event,\n * activate the creation loop of the active tool, if one is found for the\n * mouse button pressed.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseDownActivate(\n  evt: EventTypes.MouseDownActivateEventType\n) {\n  // If a tool has locked the current state it is dealing with an interaction within its own eventLoop.\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForMouseEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  if (state.isMultiPartToolActive) {\n    return;\n  }\n\n  if (activeTool.addNewAnnotation) {\n    const annotation = activeTool.addNewAnnotation(evt, 'mouse');\n    setAnnotationSelected(annotation.annotationUID);\n  }\n}\n","import getActiveToolForMouseEvent from '../shared/getActiveToolForMouseEvent';\nimport { state } from '../../store';\nimport { MouseDragEventType } from '../../types/EventTypes';\n\n/**\n * mouseDrag - Event handler for mouse drag events. Fires the `mouseDragCallback`\n * function on active tools.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseDrag(evt: MouseDragEventType) {\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForMouseEvent(evt);\n\n  const noFoundToolOrDoesNotHaveMouseDragCallback =\n    !activeTool || typeof activeTool.mouseDragCallback !== 'function';\n  if (noFoundToolOrDoesNotHaveMouseDragCallback) {\n    return;\n  }\n\n  activeTool.mouseDragCallback(evt);\n}\n","// // State\nimport { state } from '../../store';\nimport { ToolModes } from '../../enums';\n\n// // Util\nimport filterToolsWithAnnotationsForElement from '../../store/filterToolsWithAnnotationsForElement';\nimport getToolsWithModesForMouseEvent from '../shared/getToolsWithModesForMouseEvent';\nimport triggerAnnotationRender from '../../utilities/triggerAnnotationRender';\nimport { MouseMoveEventType } from '../../types/EventTypes';\n\nconst { Active, Passive } = ToolModes;\n\n/**\n * mouseMove - On mouse move when not dragging, fire tools `mouseMoveCallback`s.\n * This is mostly used to update the [un]hover state\n * of a tool.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseMove(evt: MouseMoveEventType) {\n  // Tool interactions when mouse moved are handled inside each tool.\n  // This function is mostly used to update the [un]hover state\n  if (state.isInteractingWithTool || state.isMultiPartToolActive) {\n    return;\n  }\n\n  const activeAndPassiveTools = getToolsWithModesForMouseEvent(evt, [\n    Active,\n    Passive,\n  ]);\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Annotation tool specific\n  const toolsWithAnnotations = filterToolsWithAnnotationsForElement(\n    element,\n    activeAndPassiveTools\n  );\n\n  const toolsWithoutAnnotations = activeAndPassiveTools.filter((tool) => {\n    const doesNotHaveAnnotations = !toolsWithAnnotations.some(\n      (toolAndAnnotation) =>\n        toolAndAnnotation.tool.getToolName() === tool.getToolName()\n    );\n\n    return doesNotHaveAnnotations;\n  });\n\n  let annotationsNeedToBeRedrawn = false;\n\n  for (const { tool, annotations } of toolsWithAnnotations) {\n    if (typeof tool.mouseMoveCallback === 'function') {\n      annotationsNeedToBeRedrawn =\n        tool.mouseMoveCallback(evt, annotations) || annotationsNeedToBeRedrawn;\n    }\n  }\n\n  // Run mouse move handlers for non-annotation tools\n  toolsWithoutAnnotations.forEach((tool) => {\n    if (typeof tool.mouseMoveCallback === 'function') {\n      tool.mouseMoveCallback(evt);\n    }\n  });\n\n  // Annotation activation status changed, redraw the annotations\n  if (annotationsNeedToBeRedrawn === true) {\n    triggerAnnotationRender(element);\n  }\n}\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * mouseClick - Event handler for mouse up events. Uses `customCallbackHandler` to fire\n * the `mouseUpCallback` function on active tools.\n */\nconst mouseUp = customCallbackHandler.bind(null, 'Mouse', 'mouseUpCallback');\n\nexport default mouseUp;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * Event handler for mouse wheel events. Uses `customCallbackHandler` to fire\n * the `mouseWheelCallback` function on active tools.\n */\nconst mouseWheel = customCallbackHandler.bind(\n  null,\n  'MouseWheel',\n  'mouseWheelCallback'\n);\n\nexport default mouseWheel;\n","import Events from '../enums/Events';\n\nimport {\n  mouseClick,\n  mouseDown,\n  mouseDownActivate,\n  mouseDoubleClick,\n  mouseDrag,\n  mouseMove,\n  mouseUp,\n  mouseWheel,\n} from './mouseEventHandlers';\n\n/**\n * Enable these listeners are emitted in order, and can be cancelled/prevented from bubbling\n * by any previous event.\n *\n * @param element - The element to add the event listeners to.\n */\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(Events.MOUSE_CLICK, mouseClick as EventListener);\n  element.addEventListener(Events.MOUSE_DOWN, mouseDown as EventListener);\n  element.addEventListener(\n    Events.MOUSE_DOWN_ACTIVATE,\n    mouseDownActivate as EventListener\n  );\n  element.addEventListener(\n    Events.MOUSE_DOUBLE_CLICK,\n    mouseDoubleClick as EventListener\n  );\n  element.addEventListener(Events.MOUSE_DRAG, mouseDrag as EventListener);\n  element.addEventListener(Events.MOUSE_MOVE, mouseMove as EventListener);\n  element.addEventListener(Events.MOUSE_UP, mouseUp as EventListener);\n  element.addEventListener(Events.MOUSE_WHEEL, mouseWheel as EventListener);\n};\n\n/**\n * Disable and Remove the MouseToolEventDispatcher handlers from the element.\n *\n * @param element - HTMLDivElement\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.MOUSE_CLICK, mouseClick as EventListener);\n  element.removeEventListener(Events.MOUSE_DOWN, mouseDown as EventListener);\n  element.removeEventListener(\n    Events.MOUSE_DOWN_ACTIVATE,\n    mouseDownActivate as EventListener\n  );\n  element.removeEventListener(\n    Events.MOUSE_DOUBLE_CLICK,\n    mouseDoubleClick as EventListener\n  );\n  element.removeEventListener(Events.MOUSE_DRAG, mouseDrag as EventListener);\n  element.removeEventListener(Events.MOUSE_MOVE, mouseMove as EventListener);\n  element.removeEventListener(Events.MOUSE_UP, mouseUp as EventListener);\n  element.removeEventListener(Events.MOUSE_WHEEL, mouseWheel as EventListener);\n};\n\nconst mouseToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default mouseToolEventDispatcher;\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes, MouseBindings } from '../../enums';\nimport { keyEventListener } from '../../eventListeners';\nimport { EventTypes } from '../../types';\nimport { getMouseButton } from '../../eventListeners/mouse/mouseDownListener';\n\nconst { Active } = ToolModes;\n\n/**\n * Iterate tool group tools until we find a tool that has a \"ToolBinding\"\n * that matches our Keyboard pressed keys. It's possible there will be no match\n * (no active tool for that mouse button combination).\n *\n * @param evt - The normalized keyboard event.\n *\n * @returns tool\n */\nexport default function getActiveToolForKeyboardEvent(\n  evt: EventTypes.KeyDownEventType\n) {\n  const { renderingEngineId, viewportId } = evt.detail;\n\n  // Get the current mouse button clicked\n  const mouseButton = getMouseButton();\n\n  // If any keyboard modifier key is also pressed\n  const modifierKey = keyEventListener.getModifierKey();\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    // tool has binding that matches the mouse button, if mouseEvent is undefined\n    // it uses the primary button\n    const correctBinding =\n      toolOptions.bindings.length &&\n      toolOptions.bindings.some(\n        (binding) =>\n          binding.mouseButton === (mouseButton ?? defaultMousePrimary) &&\n          binding.modifierKey === modifierKey\n      );\n\n    if (toolOptions.mode === Active && correctBinding) {\n      return toolGroup.getToolInstance(toolName);\n    }\n  }\n}\n","import { ToolGroupManager } from '../../store';\nimport getActiveToolForKeyboardEvent from '../shared/getActiveToolForKeyboardEvent';\nimport { KeyDownEventType } from '../../types/EventTypes';\n\n/**\n * KeyDown event listener to handle viewport cursor icon changes\n *\n * @param evt - The KeyboardEvent\n */\nexport default function keyDown(evt: KeyDownEventType): void {\n  // get the active tool given the key and mouse button\n  const activeTool = getActiveToolForKeyboardEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  const { renderingEngineId, viewportId } = evt.detail;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  const toolName = activeTool.getToolName();\n  if (Object.keys(toolGroup.toolOptions).includes(toolName)) {\n    toolGroup.setViewportsCursorByToolName(toolName);\n  }\n}\n","import { resetModifierKey } from '../../eventListeners/keyboard/keyDownListener';\nimport { ToolGroupManager } from '../../store';\nimport getActiveToolForKeyboardEvent from '../shared/getActiveToolForKeyboardEvent';\nimport { KeyDownEventType } from '../../types/EventTypes';\n\n/**\n * KeyDown event listener to handle viewport cursor icon changes\n *\n * @param evt - The KeyboardEvent\n */\nexport default function keyUp(evt: KeyDownEventType): void {\n  // get the active tool for the primary mouse button\n  const activeTool = getActiveToolForKeyboardEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  const { renderingEngineId, viewportId } = evt.detail;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  // Reset the modifier key\n  resetModifierKey();\n\n  const toolName = activeTool.getToolName();\n  if (Object.keys(toolGroup.toolOptions).includes(toolName)) {\n    toolGroup.setViewportsCursorByToolName(toolName);\n  }\n}\n","import Events from '../enums/Events';\nimport { keyDown, keyUp } from './keyboardEventHandlers';\n\n/**\n * Enable Key down and key up listeners\n *\n * @param element - The HTML element to attach the event listeners to.\n */\nconst enable = function (element: HTMLDivElement) {\n  element.addEventListener(Events.KEY_DOWN, keyDown as EventListener);\n  element.addEventListener(Events.KEY_UP, keyUp as EventListener);\n};\n\n/**\n * Disable Key down and key up listeners\n * @param element - The HTML element to attach the event listeners to.\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.KEY_DOWN, keyDown as EventListener);\n  element.removeEventListener(Events.KEY_UP, keyUp as EventListener);\n};\n\nconst keyboardToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default keyboardToolEventDispatcher;\n","import { Enums, Types } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\n\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * When the camera is modified, check what tools need to react to this.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `onCameraModified` method, we call it.\n *\n * @param evt - The normalized camera modified event.\n */\nconst onCameraModified = function (evt: Types.EventTypes.CameraModifiedEvent) {\n  // @ts-ignore\n  const enabledTools = getToolsWithModesForMouseEvent(evt, [\n    Active,\n    Passive,\n    Enabled,\n  ]);\n\n  enabledTools.forEach((tool) => {\n    if (tool.onCameraModified) {\n      tool.onCameraModified(evt);\n    }\n  });\n};\n\nconst enable = function (element) {\n  element.addEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\n\nconst disable = function (element) {\n  element.removeEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import { Enums, Types } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\n\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * When image spacing is calibrated modify the annotations for all of its tools\n * to consider the new calibration info.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `onImageSpacingCalibrated` method, we call it.\n *\n * @param evt - The normalized image calibration event.\n */\nconst onImageSpacingCalibrated = function (\n  evt: Types.EventTypes.ImageSpacingCalibratedEvent\n) {\n  // @ts-ignore\n  const enabledTools = getToolsWithModesForMouseEvent(evt, [\n    Active,\n    Passive,\n    Enabled,\n  ]);\n\n  enabledTools.forEach((tool) => {\n    if (tool.onImageSpacingCalibrated) {\n      tool.onImageSpacingCalibrated(evt);\n    }\n  });\n};\n\nconst enable = function (element: HTMLDivElement) {\n  element.addEventListener(\n    Enums.Events.IMAGE_SPACING_CALIBRATED,\n    onImageSpacingCalibrated as EventListener\n  );\n};\n\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(\n    Enums.Events.IMAGE_SPACING_CALIBRATED,\n    onImageSpacingCalibrated as EventListener\n  );\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import { ToolGroupManager } from '../../store';\nimport { MouseBindings, ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\nimport getMouseModifier from './getMouseModifier';\nimport { keyEventListener } from '../../eventListeners';\n\nconst { Active } = ToolModes;\n\n/**\n * Iterate tool group tools until we find a tool that has a \"ToolBinding\"\n * that matches our TouchEvent's `buttons`. It's possible there will be no match\n * (no active tool for that touch button combination).\n *\n * @param evt - The event dispatcher touch event.\n *\n * @returns tool\n */\nexport default function getActiveToolForTouchEvent(\n  evt: EventTypes.NormalizedTouchEventType\n) {\n  // Todo: we should refactor this to use getToolsWithModesForTouchEvent instead\n  const { renderingEngineId, viewportId } = evt.detail;\n  const touchEvent = evt.detail.event;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  const numTouchPoints = Object.keys(touchEvent.touches).length;\n\n  // If any keyboard modifier key is also pressed\n  const modifierKey =\n    getMouseModifier(touchEvent) || keyEventListener.getModifierKey();\n  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    const correctBinding =\n      toolOptions.bindings.length &&\n      /**\n       * TODO: setActiveTool treats MouseBindings.Primary in a special way\n       * which is analgous to numTouchPoints === 1 as the primary interaction\n       * for touch based applications. The ToolGroup set active and get active\n       * logic should be updated to account for numTouchPoints === 1\n       */\n      toolOptions.bindings.some(\n        (binding) =>\n          (binding.numTouchPoints === numTouchPoints ||\n            (numTouchPoints === 1 &&\n              binding.mouseButton === defaultMousePrimary)) &&\n          binding.modifierKey === modifierKey\n      );\n\n    if (toolOptions.mode === Active && correctBinding) {\n      return toolGroup.getToolInstance(toolName);\n    }\n  }\n}\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\n\ntype ModesFilter = Array<ToolModes>;\n\n/**\n * Given the normalized touch event and a filter of modes,\n * find all the tools on the element that are in one of the specified modes.\n * If the evtButton is specified, only tools with a matching binding will be returned.\n * @param evt - The normalized touchStart event.\n * @param modesFilter - An array of entries from the `ToolModes` enum.\n */\nexport default function getToolsWithModesForTouchEvent(\n  evt: EventTypes.NormalizedTouchEventType,\n  modesFilter: ModesFilter,\n  numTouchPoints?: number\n) {\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return [];\n  }\n\n  const enabledTools = [];\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.toolOptions[toolName];\n\n    const correctBinding =\n      numTouchPoints != null &&\n      tool.bindings.length &&\n      tool.bindings.some(\n        (binding) => binding.numTouchPoints === numTouchPoints\n      );\n\n    if (\n      modesFilter.includes(tool.mode) &&\n      (!numTouchPoints || correctBinding)\n    ) {\n      const toolInstance = toolGroup.getToolInstance(toolName);\n      enabledTools.push(toolInstance);\n    }\n  }\n\n  return enabledTools;\n}\n","import { state } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\nimport {\n  ToolAnnotationPair,\n  ToolsWithMoveableHandles,\n} from '../../types/InternalToolTypes';\n\nimport {\n  setAnnotationSelected,\n  isAnnotationSelected,\n} from '../../stateManagement/annotation/annotationSelection';\n\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\n\n// Util\nimport filterToolsWithMoveableHandles from '../../store/filterToolsWithMoveableHandles';\nimport filterToolsWithAnnotationsForElement from '../../store/filterToolsWithAnnotationsForElement';\nimport filterMoveableAnnotationTools from '../../store/filterMoveableAnnotationTools';\nimport getActiveToolForTouchEvent from '../shared/getActiveToolForTouchEvent';\nimport getToolsWithModesForTouchEvent from '../shared/getToolsWithModesForTouchEvent';\n\nconst { Active, Passive } = ToolModes;\n\n/**\n * touchStart - Event handler for touchStart events. Uses `customCallbackHandler` to fire\n * the `touchStartCallback` function on active tools.\n */\nexport default function touchStart(evt: EventTypes.TouchStartEventType) {\n  if (state.isInteractingWithTool) {\n    return;\n  }\n  const activeTool = getActiveToolForTouchEvent(evt);\n\n  // Check for preTouchStartCallbacks,\n  // If the tool claims it consumed the event, prevent further checks.\n  if (activeTool && typeof activeTool.preTouchStartCallback === 'function') {\n    const consumedEvent = activeTool.preTouchStartCallback(evt);\n\n    if (consumedEvent) {\n      return;\n    }\n  }\n\n  const isPrimaryClick = Object.keys(evt.detail.event.touches).length === 1;\n  const activeToolsWithEventBinding = getToolsWithModesForTouchEvent(\n    evt,\n    [Active],\n    Object.keys(evt.detail.event.touches).length\n  );\n  const passiveToolsIfEventWasPrimaryTouchButton = isPrimaryClick\n    ? getToolsWithModesForTouchEvent(evt, [Passive])\n    : undefined;\n  const applicableTools = [\n    ...(activeToolsWithEventBinding || []),\n    ...(passiveToolsIfEventWasPrimaryTouchButton || []),\n    activeTool,\n  ];\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Filter tools with annotations for this element\n  const annotationToolsWithAnnotations = filterToolsWithAnnotationsForElement(\n    element,\n    applicableTools\n  );\n\n  const canvasCoords = eventDetail.currentPoints.canvas;\n\n  // For the canvas coordinates, find all tools that might respond to this touch start\n  // on their handles. This filter will call getHandleNearImagePoint for each tool\n  // instance (each annotation)\n  const annotationToolsWithMoveableHandles = filterToolsWithMoveableHandles(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'touch'\n  );\n\n  const isMultiSelect = false;\n\n  // If there are annotation tools whose handle is near the touch, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (annotationToolsWithMoveableHandles.length > 0) {\n    const { tool, annotation, handle } = getAnnotationForSelection(\n      annotationToolsWithMoveableHandles\n    ) as ToolsWithMoveableHandles;\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.handleSelectedCallback(evt, annotation, handle, 'Touch');\n\n    return;\n  }\n\n  // If there were no annotation tools whose handle was near the touch, try to check\n  // if any of the annotation tools are interactable (e.g. moving an entire length annotation)\n  const moveableAnnotationTools = filterMoveableAnnotationTools(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'touch'\n  );\n\n  // If there are annotation tools that are interactable, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (moveableAnnotationTools.length > 0) {\n    const { tool, annotation } = getAnnotationForSelection(\n      moveableAnnotationTools\n    );\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.toolSelectedCallback(evt, annotation, 'Touch');\n\n    return;\n  }\n\n  // Run the postTouchStartCallback for the active tool if it exists\n  if (activeTool && typeof activeTool.postTouchStartCallback === 'function') {\n    const consumedEvent = activeTool.postTouchStartCallback(evt);\n\n    if (consumedEvent) {\n      // If the tool claims it consumed the event, prevent further checks.\n      return;\n    }\n  }\n\n  // Don't stop propagation so that touchStartActivate can handle the event\n}\n\n/**\n * If there are multiple annotation tools, return the first one that isn't locked neither hidden.\n * If there's only one annotation tool, return it\n * @param annotationTools - An array of tools and annotation.\n * @returns The candidate for selection\n */\nfunction getAnnotationForSelection(\n  toolsWithMovableHandles: ToolAnnotationPair[]\n): ToolAnnotationPair {\n  return (\n    (toolsWithMovableHandles.length > 1 &&\n      toolsWithMovableHandles.find(\n        (item) =>\n          !isAnnotationLocked(item.annotation) &&\n          isAnnotationVisible(item.annotation.annotationUID)\n      )) ||\n    toolsWithMovableHandles[0]\n  );\n}\n\n/**\n * If the annotation is selected, deselect it. If it's not selected, select it\n * @param annotationUID - The AnnotationUID that we\n * want to toggle the selection of.\n * @param isMultiSelect - If true, the annotation. will be deselected if it is\n * already selected, or deselected if it is selected.\n */\nfunction toggleAnnotationSelection(\n  annotationUID: string,\n  isMultiSelect = false\n): void {\n  if (isMultiSelect) {\n    if (isAnnotationSelected(annotationUID)) {\n      setAnnotationSelected(annotationUID, false);\n    } else {\n      const preserveSelected = true;\n      setAnnotationSelected(annotationUID, true, preserveSelected);\n    }\n  } else {\n    const preserveSelected = false;\n    setAnnotationSelected(annotationUID, true, preserveSelected);\n  }\n}\n","import { state } from '../../store';\nimport { EventTypes } from '../../types';\nimport { setAnnotationSelected } from '../../stateManagement/annotation/annotationSelection';\n\nimport getActiveToolForTouchEvent from '../shared/getActiveToolForTouchEvent';\n\n/**\n * If the `touchStart` handler does not consume an event,\n * activate the creation loop of the active tool, if one is found for the\n * touch button pressed.\n *\n * @param evt - The normalized touchStart event.\n */\nexport default function touchStartActivate(\n  evt: EventTypes.TouchStartActivateEventType\n) {\n  // If a tool has locked the current state it is dealing with an interaction within its own eventLoop.\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForTouchEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  if (state.isMultiPartToolActive) {\n    return;\n  }\n\n  if (activeTool.addNewAnnotation) {\n    const annotation = activeTool.addNewAnnotation(evt, 'touch');\n    setAnnotationSelected(annotation.annotationUID);\n  }\n}\n","import getActiveToolForTouchEvent from '../shared/getActiveToolForTouchEvent';\nimport { state } from '../../store';\nimport { TouchDragEventType } from '../../types/EventTypes';\n\n/**\n * touchDrag - Event handler for touchDrag events. Uses `customCallbackHandler` to fire\n * the `touchDragCallback` function on active tools.\n */\nexport default function touchDrag(evt: TouchDragEventType) {\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForTouchEvent(evt);\n\n  const noFoundToolOrDoesNotHaveTouchDragCallback =\n    !activeTool || typeof activeTool.touchDragCallback !== 'function';\n  if (noFoundToolOrDoesNotHaveTouchDragCallback) {\n    return;\n  }\n\n  activeTool.touchDragCallback(evt);\n}\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * touchEnd - Event handler for touchEnd events. Uses `customCallbackHandler` to fire\n * the `touchEndCallback` function on active tools.\n */\nconst touchEnd = customCallbackHandler.bind(null, 'Touch', 'touchEndCallback');\n\nexport default touchEnd;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * touchTap - Event handler for touch tap events. Uses `customCallbackHandler` to fire\n * the `touchTapCallback` function on active tools.\n */\nconst touchTap = customCallbackHandler.bind(null, 'Touch', 'touchTapCallback');\n\nexport default touchTap;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * touchPress - Event handler for touch press events. Uses `customCallbackHandler` to fire\n * the `touchPressCallback` function on active tools.\n */\nconst touchPress = customCallbackHandler.bind(\n  null,\n  'Touch',\n  'touchPressCallback'\n);\n\nexport default touchPress;\n","import Events from '../enums/Events';\n\nimport {\n  touchStart,\n  touchStartActivate,\n  touchDrag,\n  touchEnd,\n  touchTap,\n  touchPress,\n} from './touchEventHandlers';\n\n/**\n * Enable these listeners are emitted in order, and can be cancelled/prevented from bubbling\n * by any previous event.\n *\n * @param element - The element to add the event listeners to.\n */\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(Events.TOUCH_START, touchStart as EventListener);\n  element.addEventListener(\n    Events.TOUCH_START_ACTIVATE,\n    touchStartActivate as EventListener\n  );\n  element.addEventListener(Events.TOUCH_DRAG, touchDrag as EventListener);\n  element.addEventListener(Events.TOUCH_END, touchEnd as EventListener);\n  element.addEventListener(Events.TOUCH_TAP, touchTap as EventListener);\n  element.addEventListener(Events.TOUCH_PRESS, touchPress as EventListener);\n};\n\n/**\n * Disable and Remove the MouseToolEventDispatcher handlers from the element.\n *\n * @param element - HTMLDivElement\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.TOUCH_START, touchStart as EventListener);\n  element.removeEventListener(\n    Events.TOUCH_START_ACTIVATE,\n    touchStartActivate as EventListener\n  );\n  element.removeEventListener(Events.TOUCH_DRAG, touchDrag as EventListener);\n  element.removeEventListener(Events.TOUCH_END, touchEnd as EventListener);\n  element.removeEventListener(Events.TOUCH_PRESS, touchPress as EventListener);\n};\n\nconst touchToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default touchToolEventDispatcher;\n","import { Types } from '@cornerstonejs/core';\nimport {\n  mouseEventListeners,\n  wheelEventListener,\n  touchEventListeners,\n  keyEventListener,\n} from '../eventListeners';\nimport {\n  imageRenderedEventDispatcher,\n  cameraModifiedEventDispatcher,\n  mouseToolEventDispatcher,\n  touchToolEventDispatcher,\n  keyboardToolEventDispatcher,\n  imageSpacingCalibratedEventDispatcher,\n} from '../eventDispatchers';\nimport { state } from './state';\n\nimport { annotationRenderingEngine } from '../utilities/triggerAnnotationRender';\n\n/**\n * When an element is \"enabled\", add event listeners and dispatchers to it\n * so we can use interactions to affect tool behaviors\n *\n * @param evt - The ELEMENT_ENABLED event\n */\nexport default function addEnabledElement(\n  evt: Types.EventTypes.ElementEnabledEvent\n): void {\n  const { element, viewportId } = evt.detail;\n  const svgLayer = _createSvgAnnotationLayer(viewportId);\n\n  // Reset/Create svgNodeCache for element\n  _setSvgNodeCache(element);\n  _appendChild(svgLayer, element);\n\n  // Add this element to the annotation rendering engine\n  annotationRenderingEngine.addViewportElement(viewportId, element);\n\n  // Listeners\n  mouseEventListeners.enable(element);\n  wheelEventListener.enable(element);\n  touchEventListeners.enable(element);\n  keyEventListener.enable(element);\n\n  // Dispatchers: renderer\n  imageRenderedEventDispatcher.enable(element);\n  cameraModifiedEventDispatcher.enable(element);\n  imageSpacingCalibratedEventDispatcher.enable(element);\n  // Dispatchers: interaction\n  mouseToolEventDispatcher.enable(element);\n  keyboardToolEventDispatcher.enable(element);\n  touchToolEventDispatcher.enable(element);\n\n  // labelmap\n  // State\n  state.enabledElements.push(element);\n}\n\n/**\n *\n */\nfunction _createSvgAnnotationLayer(viewportId: string): SVGElement {\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgLayer = document.createElementNS(svgns, 'svg');\n\n  const svgLayerId = `svg-layer-${viewportId}`;\n  svgLayer.classList.add('svg-layer');\n  svgLayer.setAttribute('id', svgLayerId);\n  svgLayer.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n  svgLayer.style.width = '100%';\n  svgLayer.style.height = '100%';\n  svgLayer.style.pointerEvents = 'none';\n  svgLayer.style.position = 'absolute';\n  // TODO: we should test this on high-res monitors\n  //svgLayer.style.textRendering = 'optimizeSpeed'\n\n  // Single dropshadow config for now\n  const defs = document.createElementNS(svgns, 'defs');\n  const filter = document.createElementNS(svgns, 'filter');\n  const feOffset = document.createElementNS(svgns, 'feOffset');\n  const feColorMatrix = document.createElementNS(svgns, 'feColorMatrix');\n  const feBlend = document.createElementNS(svgns, 'feBlend');\n\n  //\n  filter.setAttribute('id', `shadow-${svgLayerId}`);\n  filter.setAttribute('filterUnits', 'userSpaceOnUse');\n\n  //\n  feOffset.setAttribute('result', 'offOut');\n  feOffset.setAttribute('in', 'SourceGraphic');\n  feOffset.setAttribute('dx', '0.5');\n  feOffset.setAttribute('dy', '0.5');\n\n  //\n  feColorMatrix.setAttribute('result', 'matrixOut');\n  feColorMatrix.setAttribute('in', 'offOut');\n  feColorMatrix.setAttribute('in2', 'matrix');\n  feColorMatrix.setAttribute(\n    'values',\n    '0.2 0 0 0 0 0 0.2 0 0 0 0 0 0.2 0 0 0 0 0 1 0'\n  );\n\n  //\n  feBlend.setAttribute('in', 'SourceGraphic');\n  feBlend.setAttribute('in2', 'matrixOut');\n  feBlend.setAttribute('mode', 'normal');\n\n  filter.appendChild(feOffset);\n  filter.appendChild(feColorMatrix);\n  filter.appendChild(feBlend);\n  defs.appendChild(filter);\n  svgLayer.appendChild(defs);\n\n  return svgLayer;\n}\n\nfunction _setSvgNodeCache(element) {\n  const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } =\n    element.dataset;\n  const elementHash = `${viewportId}:${renderingEngineId}`;\n\n  // Create or reset\n  // TODO: If... Reset, we should blow out any nodes in DOM\n  state.svgNodeCache[elementHash] = {};\n}\n\n/**\n *\n * @param newNode\n * @param referenceNode\n */\nfunction _appendChild(\n  newNode: SVGElement,\n  referenceNode: HTMLDivElement\n): void {\n  referenceNode.querySelector('div.viewport-element').appendChild(newNode);\n}\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * It returns all synchronizers that are not disabled and have a source viewport\n * with the given rendering engine Id and viewport Id\n * @param renderingEngineId - The Id of the rendering engine\n * @param viewportId - The Id of the viewport\n * @returns An array of synchronizers\n */\nfunction getSynchronizersForViewport(\n  viewportId: string,\n  renderingEngineId: string\n): Array<Synchronizer> {\n  const synchronizersFilteredByIds = [];\n\n  if (!renderingEngineId && !viewportId) {\n    throw new Error(\n      'At least one of renderingEngineId or viewportId should be given'\n    );\n  }\n\n  for (let i = 0; i < state.synchronizers.length; i++) {\n    const synchronizer = state.synchronizers[i];\n    const notDisabled = !synchronizer.isDisabled();\n    const hasSourceViewport = synchronizer.hasSourceViewport(\n      renderingEngineId,\n      viewportId\n    );\n\n    const hasTargetViewport = synchronizer.hasTargetViewport(\n      renderingEngineId,\n      viewportId\n    );\n\n    if (notDisabled && (hasSourceViewport || hasTargetViewport)) {\n      synchronizersFilteredByIds.push(synchronizer);\n    }\n  }\n\n  return synchronizersFilteredByIds;\n}\n\nexport default getSynchronizersForViewport;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\n\n/**\n * Given a rendering engine Id and a viewport Id, return the tool group that\n * contains that rendering engine and viewport. Note: A viewport can only be\n * associated with a single tool group. You cannot have a viewport that belongs\n * to multiple tool groups. To achieve so, create a new viewport and a new toolGroup\n * for it. This will not impact memory usage much as the volume textures are\n * shared across all viewports rendering the same image.\n *\n * @param viewportId - The Id of the viewport that the tool is being\n * added to.\n * @param renderingEngineId - The Id of the rendering engine that the\n * tool group is associated with.\n * @returns A tool group.\n */\nfunction getToolGroupForViewport(\n  viewportId: string,\n  renderingEngineId: string\n): IToolGroup | undefined {\n  const toolGroupFilteredByIds = state.toolGroups.filter((tg) =>\n    tg.viewportsInfo.some(\n      (vp) =>\n        vp.renderingEngineId === renderingEngineId &&\n        (!vp.viewportId || vp.viewportId === viewportId)\n    )\n  );\n\n  if (!toolGroupFilteredByIds.length) {\n    return;\n  }\n\n  if (toolGroupFilteredByIds.length > 1) {\n    throw new Error(\n      `Multiple tool groups found for renderingEngineId: ${renderingEngineId} and viewportId: ${viewportId}. You should only\n      have one tool group per viewport in a renderingEngine.`\n    );\n  }\n\n  return toolGroupFilteredByIds[0];\n}\n\nexport default getToolGroupForViewport;\n","import { getEnabledElement, Types } from '@cornerstonejs/core';\nimport {\n  mouseEventListeners,\n  wheelEventListener,\n  touchEventListeners,\n  keyEventListener,\n} from '../eventListeners';\nimport {\n  imageRenderedEventDispatcher,\n  cameraModifiedEventDispatcher,\n  mouseToolEventDispatcher,\n  keyboardToolEventDispatcher,\n  imageSpacingCalibratedEventDispatcher,\n  touchToolEventDispatcher,\n} from '../eventDispatchers';\n// ~~\n\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\nimport { state } from './state';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport { ToolModes } from '../enums';\nimport { removeAnnotation } from '../stateManagement';\nimport getSynchronizersForViewport from './SynchronizerManager/getSynchronizersForViewport';\nimport getToolGroupForViewport from './ToolGroupManager/getToolGroupForViewport';\nimport { annotationRenderingEngine } from '../utilities/triggerAnnotationRender';\n\nconst VIEWPORT_ELEMENT = 'viewport-element';\n\nfunction removeEnabledElement(\n  elementDisabledEvt: Types.EventTypes.ElementDisabledEvent\n): void {\n  // Is DOM element\n  const { element, viewportId } = elementDisabledEvt.detail;\n\n  _resetSvgNodeCache(element);\n  _removeSvgNode(element);\n\n  // Remove this element from the annotation rendering engine\n  annotationRenderingEngine.removeViewportElement(viewportId, element);\n\n  // Listeners\n  mouseEventListeners.disable(element);\n  wheelEventListener.disable(element);\n  touchEventListeners.disable(element);\n  keyEventListener.disable(element);\n  // labelmap\n\n  // Dispatchers: renderer\n  imageRenderedEventDispatcher.disable(element);\n  cameraModifiedEventDispatcher.disable(element);\n  imageSpacingCalibratedEventDispatcher.disable(element);\n  // Dispatchers: interaction\n  mouseToolEventDispatcher.disable(element);\n  keyboardToolEventDispatcher.disable(element);\n  touchToolEventDispatcher.disable(element);\n\n  // State\n  // @TODO: We used to \"disable\" the tool before removal. Should we preserve the hook that would call on tools?\n  _removeViewportFromSynchronizers(element);\n  _removeViewportFromToolGroup(element);\n\n  // _removeAllToolsForElement(canvas)\n  _removeEnabledElement(element);\n}\n\nconst _removeViewportFromSynchronizers = (element: HTMLDivElement) => {\n  const enabledElement = getEnabledElement(element);\n\n  const synchronizers = getSynchronizersForViewport(\n    enabledElement.viewportId,\n    enabledElement.renderingEngineId\n  );\n  synchronizers.forEach((sync) => {\n    sync.remove(enabledElement);\n  });\n};\n\nconst _removeViewportFromToolGroup = (element: HTMLDivElement) => {\n  const { renderingEngineId, viewportId } = getEnabledElement(element);\n\n  const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n\n  if (toolGroup) {\n    toolGroup.removeViewports(renderingEngineId, viewportId);\n  }\n};\n\nconst _removeAllToolsForElement = function (element) {\n  const tools = getToolsWithModesForElement(element, [\n    ToolModes.Active,\n    ToolModes.Passive,\n  ]);\n\n  const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n  toolsWithData.forEach(({ annotations }) => {\n    annotations.forEach((annotation) => {\n      removeAnnotation(annotation.annotationUID);\n    });\n  });\n};\n\nfunction _resetSvgNodeCache(element: HTMLDivElement) {\n  const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } =\n    element.dataset;\n  const elementHash = `${viewportId}:${renderingEngineId}`;\n\n  delete state.svgNodeCache[elementHash];\n}\n\nfunction _removeSvgNode(element: HTMLDivElement) {\n  const internalViewportNode = element.querySelector(`div.${VIEWPORT_ELEMENT}`);\n  const svgLayer = internalViewportNode.querySelector('svg');\n  if (svgLayer) {\n    internalViewportNode.removeChild(svgLayer);\n  }\n}\n\n/**\n * @private\n * @param enabledElement\n */\nconst _removeEnabledElement = function (element: HTMLDivElement) {\n  const foundElementIndex = state.enabledElements.findIndex(\n    (el) => el === element\n  );\n\n  if (foundElementIndex > -1) {\n    state.enabledElements.splice(foundElementIndex, 1);\n  }\n};\n\nexport default removeEnabledElement;\n","import { ToolModes } from '../enums';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\n\n/**\n * Cancel the current active manipulation that is being performed on the provided\n * element. It filters all the active and passive tools for the enabledElement\n * and calls cancel() method for all of them, and returns the tool that has executed its\n * cancellation (returned its annotationUID), since tools that are not being manipulated will\n * short circuit early. Note: not all tools currently implement a cancel method.\n *\n * @param element - canvas element\n * @returns annotationUID that is cancelled\n */\nexport default function cancelActiveManipulations(\n  element: HTMLDivElement\n): string | undefined {\n  const tools = getToolsWithModesForElement(element, [\n    ToolModes.Active,\n    ToolModes.Passive,\n  ]);\n\n  const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n  for (const { tool } of toolsWithData) {\n    const annotationUID = tool.cancel(element);\n    if (annotationUID) {\n      return annotationUID;\n    }\n  }\n}\n","import {\n  getRenderingEngine,\n  getEnabledElement,\n  Enums,\n  Types,\n} from '@cornerstonejs/core';\n\nimport { ISynchronizerEventHandler } from '../../types';\n\n/**\n * Synchronizer is a class that listens to a specific event on a specific source\n * targets and fires a specific event on a specific target elements. Use cases\n * include: synchronizing a camera between two viewports, synchronizing a\n * windowLevel between various viewports.\n */\nclass Synchronizer {\n  //\n  private _enabled: boolean;\n  private _eventName: string;\n  private _eventHandler: ISynchronizerEventHandler;\n  private _ignoreFiredEvents: boolean;\n  private _sourceViewports: Array<Types.IViewportId>;\n  private _targetViewports: Array<Types.IViewportId>;\n  private _viewportOptions: Record<string, Record<string, unknown>> = {};\n  public id: string;\n\n  constructor(\n    synchronizerId: string,\n    eventName: string,\n    eventHandler: ISynchronizerEventHandler\n  ) {\n    this._enabled = true;\n    this._eventName = eventName;\n    this._eventHandler = eventHandler;\n    this._ignoreFiredEvents = false;\n    this._sourceViewports = [];\n    this._targetViewports = [];\n\n    //\n    this.id = synchronizerId;\n  }\n\n  /**\n   * \"Returns true if the synchronizer is disabled.\"\n   * @returns A boolean value.\n   */\n  public isDisabled(): boolean {\n    return !this._enabled || !this._hasSourceElements();\n  }\n\n  /**\n   * Sets the options for the viewport id.  This can be used to\n   * provide configuration on a viewport basis for things like offsets\n   * to the general synchronization, or turn on/off synchronization of certain\n   * attributes.\n   */\n  public setOptions(\n    viewportId: string,\n    options: Record<string, unknown> = {}\n  ): void {\n    this._viewportOptions[viewportId] = options;\n  }\n\n  /** Gets the options for the given viewport id */\n  public getOptions(viewportId: string): Record<string, unknown> | undefined {\n    return this._viewportOptions[viewportId];\n  }\n\n  /**\n   * Add a viewport to the list of targets and sources both.\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public add(viewportInfo: Types.IViewportId): void {\n    this.addTarget(viewportInfo);\n    this.addSource(viewportInfo);\n  }\n\n  /**\n   * Add a viewport to the list of sources (source ONLY)\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public addSource(viewportInfo: Types.IViewportId): void {\n    if (_containsViewport(this._sourceViewports, viewportInfo)) {\n      return;\n    }\n\n    const { renderingEngineId, viewportId } = viewportInfo;\n\n    const { element } =\n      getRenderingEngine(renderingEngineId).getViewport(viewportId);\n\n    // @ts-ignore\n    element.addEventListener(this._eventName, this._onEvent.bind(this));\n    this._updateDisableHandlers();\n\n    this._sourceViewports.push(viewportInfo);\n  }\n\n  /**\n   * Add a viewport to the list of viewports that will get the eventHandler\n   * executed when the event is fired on the source viewport.\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public addTarget(viewportInfo: Types.IViewportId): void {\n    if (_containsViewport(this._targetViewports, viewportInfo)) {\n      return;\n    }\n\n    this._targetViewports.push(viewportInfo);\n    this._updateDisableHandlers();\n  }\n\n  /**\n   * Get the list of source viewports (as {viewportId, renderingEngineId} objects)\n   * @returns An array of {viewportId, renderingEngineId} objects.\n   */\n  public getSourceViewports(): Array<Types.IViewportId> {\n    return this._sourceViewports;\n  }\n\n  /**\n   * Get the list of target viewports (as {viewportId, renderingEngineId} objects)\n   * @returns An array of {viewportId, renderingEngineId} objects.\n   */\n  public getTargetViewports(): Array<Types.IViewportId> {\n    return this._targetViewports;\n  }\n\n  public destroy(): void {\n    this._sourceViewports.forEach((s) => this.removeSource(s));\n    this._targetViewports.forEach((t) => this.removeTarget(t));\n  }\n\n  /**\n   * Remove the viewport from the list of targets and sources\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   */\n  public remove(viewportInfo: Types.IViewportId): void {\n    this.removeTarget(viewportInfo);\n    this.removeSource(viewportInfo);\n  }\n\n  /**\n   * Remove the viewport from the list of source viewports\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   */\n  public removeSource(viewportInfo: Types.IViewportId): void {\n    const index = _getViewportIndex(this._sourceViewports, viewportInfo);\n\n    if (index === -1) {\n      return;\n    }\n\n    const element = _getViewportElement(viewportInfo);\n\n    this._sourceViewports.splice(index, 1);\n    // @ts-ignore\n    element.removeEventListener(this._eventName, this._eventHandler);\n    this._updateDisableHandlers();\n  }\n\n  /**\n   * Remove the viewport from the list of viewports that are currently targeted by\n   * this handler\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   *\n   */\n  public removeTarget(viewportInfo: Types.IViewportId): void {\n    const index = _getViewportIndex(this._targetViewports, viewportInfo);\n\n    if (index === -1) {\n      return;\n    }\n\n    this._targetViewports.splice(index, 1);\n    this._updateDisableHandlers();\n  }\n\n  public hasSourceViewport(\n    renderingEngineId: string,\n    viewportId: string\n  ): boolean {\n    return _containsViewport(this._sourceViewports, {\n      renderingEngineId,\n      viewportId,\n    });\n  }\n\n  public hasTargetViewport(\n    renderingEngineId: string,\n    viewportId: string\n  ): boolean {\n    return _containsViewport(this._targetViewports, {\n      renderingEngineId,\n      viewportId,\n    });\n  }\n\n  private fireEvent(sourceViewport: Types.IViewportId, sourceEvent: any): void {\n    if (this.isDisabled() || this._ignoreFiredEvents) {\n      return;\n    }\n\n    this._ignoreFiredEvents = true;\n    try {\n      for (let i = 0; i < this._targetViewports.length; i++) {\n        const targetViewport = this._targetViewports[i];\n        const targetIsSource =\n          sourceViewport.viewportId === targetViewport.viewportId;\n\n        if (targetIsSource) {\n          continue;\n        }\n\n        this._eventHandler(this, sourceViewport, targetViewport, sourceEvent);\n      }\n    } catch (ex) {\n      console.warn(`Synchronizer, for: ${this._eventName}`, ex);\n    } finally {\n      this._ignoreFiredEvents = false;\n    }\n  }\n\n  private _onEvent = (evt: any): void => {\n    if (this._ignoreFiredEvents === true) {\n      return;\n    }\n\n    // If no target viewports, then return immediately, this is useful\n    // when switching between layouts, when previous layout has disabled\n    // its viewports, and the new layout has not yet enabled them.\n    // Right now we don't \"delete\" the synchronizer if all source and targets\n    // are removed, but we may want to do that in the future.\n    if (!this._targetViewports.length) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(evt.currentTarget);\n\n    if (!enabledElement) {\n      return;\n    }\n\n    const { renderingEngineId, viewportId } = enabledElement;\n\n    // If the viewport has been removed from the synchronizer before the event is\n    // fired, then return immediately.\n    if (!this._sourceViewports.find((s) => s.viewportId === viewportId)) {\n      return;\n    }\n\n    this.fireEvent(\n      {\n        renderingEngineId,\n        viewportId,\n      },\n      evt\n    );\n  };\n\n  private _hasSourceElements(): boolean {\n    return this._sourceViewports.length !== 0;\n  }\n\n  private _updateDisableHandlers(): void {\n    const viewports = _getUniqueViewports(\n      this._sourceViewports,\n      this._targetViewports\n    );\n    const _remove = this.remove;\n    const disableHandler = (elementDisabledEvent) => {\n      _remove(elementDisabledEvent.detail.element);\n    };\n\n    viewports.forEach(function (vUid) {\n      const renderingEngine = getRenderingEngine(\n        vUid.renderingEngineId\n      ).getViewport(vUid.viewportId);\n\n      if (!renderingEngine) {\n        return;\n      }\n\n      const { element } = renderingEngine;\n\n      element.removeEventListener(\n        Enums.Events.ELEMENT_DISABLED,\n        disableHandler\n      );\n      element.addEventListener(Enums.Events.ELEMENT_DISABLED, disableHandler);\n    });\n  }\n}\n\nfunction _getUniqueViewports(\n  vp1: Array<Types.IViewportId>,\n  vp2: Array<Types.IViewportId>\n): Array<Types.IViewportId> {\n  const unique = [];\n\n  const vps = vp1.concat(vp2);\n\n  for (let i = 0; i < vps.length; i++) {\n    const vp = vps[i];\n    if (\n      !unique.some(\n        (u) =>\n          vp.renderingEngineId === u.renderingEngineId &&\n          vp.viewportId === u.viewportId\n      )\n    ) {\n      unique.push(vp);\n    }\n  }\n\n  return unique;\n}\n\nfunction _getViewportIndex(\n  arr: Array<Types.IViewportId>,\n  vp: Types.IViewportId\n): number {\n  return arr.findIndex(\n    (ar) =>\n      vp.renderingEngineId === ar.renderingEngineId &&\n      vp.viewportId === ar.viewportId\n  );\n}\n\nfunction _containsViewport(\n  arr: Array<Types.IViewportId>,\n  vp: Types.IViewportId\n) {\n  return arr.some(\n    (ar) =>\n      ar.renderingEngineId === vp.renderingEngineId &&\n      ar.viewportId === vp.viewportId\n  );\n}\n\nfunction _getViewportElement(vp: Types.IViewportId): HTMLDivElement {\n  const renderingEngine = getRenderingEngine(vp.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(`No RenderingEngine for Id: ${vp.renderingEngineId}`);\n  }\n\n  return renderingEngine.getViewport(vp.viewportId).element;\n}\n\nexport default Synchronizer;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\nimport { ISynchronizerEventHandler } from '../../types';\n\n/**\n * Create a new synchronizer instance from Synchronizer class\n * @param synchronizerId - The id of the synchronizer.\n * @param eventName - The name of the event that will be emitted by the\n * synchronizer.\n * @param eventHandler - The event handler that will be\n * called when the event is emitted.\n * @returns A reference to the synchronizer.\n */\nfunction createSynchronizer(\n  synchronizerId: string,\n  eventName: string,\n  eventHandler: ISynchronizerEventHandler\n): Synchronizer {\n  const synchronizerWithSameIdExists = state.synchronizers.some(\n    (sync) => sync.id === synchronizerId\n  );\n\n  if (synchronizerWithSameIdExists) {\n    throw new Error(`Synchronizer with id '${synchronizerId}' already exists.`);\n  }\n\n  // Create\n  const synchronizer = new Synchronizer(\n    synchronizerId,\n    eventName,\n    eventHandler\n  );\n\n  // Update state\n  state.synchronizers.push(synchronizer);\n\n  // Return reference\n  return synchronizer;\n}\n\nexport default createSynchronizer;\n","import { state } from '../index';\n\n/**\n * \"Destroy all synchronizers.\"\n */\nfunction destroy(): void {\n  while (state.synchronizers.length > 0) {\n    const synchronizer = state.synchronizers.pop();\n\n    synchronizer.destroy();\n  }\n}\n\nexport default destroy;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * Get the synchronizer with the given id from the state.\n * @param synchronizerId - The id of the synchronizer to be retrieved.\n * @returns A synchronizer object.\n */\nfunction getSynchronizer(synchronizerId: string): Synchronizer | void {\n  return state.synchronizers.find((s) => s.id === synchronizerId);\n}\n\nexport default getSynchronizer;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * Return the array of synchronizers\n * @returns An array of synchronizers.\n */\nfunction getAllSynchronizers(): Array<Synchronizer> {\n  return state.synchronizers;\n}\n\nexport default getAllSynchronizers;\n","import { state } from '../index';\n\n// Synchronizers are a bit more tenacious. We need to make sure we remove\n// any attached events\n// We should probably just have a destroySynchronizer call\n// then use getByX to allow versatility in how we can call destroy\n\n/**\n * Destroy a synchronizer by its ID.\n * @param synchronizerId - The id of the synchronizer to destroy.\n */\nfunction destroySynchronizer(synchronizerId: string): void {\n  const synchronizerIndex = state.synchronizers.findIndex(\n    (sync) => sync.id === synchronizerId\n  );\n\n  if (synchronizerIndex > -1) {\n    const synchronizer = state.synchronizers[synchronizerIndex];\n\n    synchronizer.destroy();\n    state.synchronizers.splice(synchronizerIndex, 1);\n  }\n}\n\nexport default destroySynchronizer;\n","import { MouseBindings, ToolModes } from '../../enums';\nimport cloneDeep from 'lodash.clonedeep';\nimport get from 'lodash.get';\nimport {\n  getRenderingEngine,\n  getRenderingEngines,\n  getEnabledElementByIds,\n  Settings,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { state } from '../index';\nimport {\n  IToolBinding,\n  IToolClassReference,\n  IToolGroup,\n  SetToolBindingsType,\n  ToolOptionsType,\n} from '../../types';\n\nimport { MouseCursor, SVGMouseCursor } from '../../cursors';\nimport { initElementCursor } from '../../cursors/elementCursor';\n\nconst { Active, Passive, Enabled, Disabled } = ToolModes;\n\n/**\n * ToolGroup class which is a container for tools and their modes and states.\n * In Cornerstone3DTools, you need to create a tool group in order to use the\n * tools. ToolGroup is a way to share tool configuration, state (enabled, disabled, etc.)\n * across a set of viewports. Tools can set to be activated, enabled or disabled\n * in a toolGroup. You should not directly instantiate a ToolGroup. You need to use\n * ToolGroupManager helpers to create a new toolGroup or get a reference to an existing toolGroup.\n *\n * ```js\n * const toolGroup = csTools.ToolGroupManager.createToolGroup('toolGroupId')\n * ```\n */\nexport default class ToolGroup implements IToolGroup {\n  id: string;\n  viewportsInfo = [];\n  toolOptions = {};\n  _toolInstances = {};\n\n  constructor(id: string) {\n    this.id = id;\n  }\n\n  /**\n   * Get the viewport IDs of all the viewports in the current viewport\n   * @returns An array of viewport IDs.\n   */\n  getViewportIds(): string[] {\n    return this.viewportsInfo.map(({ viewportId }) => viewportId);\n  }\n\n  /**\n   * Returns the toolGroup viewports info which is an array of {viewportId, renderingEngineId}\n   */\n  getViewportsInfo(): Array<Types.IViewportId> {\n    return this.viewportsInfo.slice();\n  }\n\n  /**\n   * Get the tool instance for a given tool name in the toolGroup\n   * @param toolName - The name of the tool.\n   * @returns A tool instance.\n   */\n  public getToolInstance(toolInstanceName: string) {\n    const toolInstance = this._toolInstances[toolInstanceName];\n    if (!toolInstance) {\n      console.warn(\n        `'${toolInstanceName}' is not registered with this toolGroup.`\n      );\n      return;\n    }\n\n    return toolInstance;\n  }\n  /**\n   * Add a tool to the tool group with the given tool name and tool configuration.\n   * Note that adding a tool to a tool group will not automatically set the tool\n   * to be active. You must call setToolActive or setToolPassive and other methods\n   * to set the tool to be active or passive or in other states.\n   *\n   * @param toolName - string\n   * @param configuration - Tool configuration objects\n   */\n  addTool(toolName: string, configuration = {}): void {\n    const toolDefinition = state.tools[toolName];\n    const hasToolName = typeof toolName !== 'undefined' && toolName !== '';\n    const localToolInstance = this.toolOptions[toolName];\n\n    if (!hasToolName) {\n      console.warn(\n        'Tool with configuration did not produce a toolName: ',\n        configuration\n      );\n      return;\n    }\n\n    if (!toolDefinition) {\n      console.warn(\n        `'${toolName}' is not registered with the library. You need to use cornerstoneTools.addTool to register it.`\n      );\n      return;\n    }\n\n    if (localToolInstance) {\n      console.warn(\n        `'${toolName}' is already registered for ToolGroup ${this.id}.`\n      );\n      return;\n    }\n\n    // Should these be renamed higher up, so we don't have to alias?\n    // Wrap in try-catch so 3rd party tools don't explode?\n    const { toolClass: ToolClass } = toolDefinition;\n\n    const toolProps = {\n      name: toolName,\n      toolGroupId: this.id,\n      configuration,\n    };\n\n    const instantiatedTool = new ToolClass(toolProps);\n\n    // API instead of directly exposing schema?\n    // Maybe not here, but feels like a \"must\" for any method outside of the ToolGroup itself\n    this._toolInstances[toolName] = instantiatedTool;\n  }\n\n  public addToolInstance(\n    toolName: string,\n    parentClassName: string,\n    configuration = {}\n  ): void {\n    let ToolClassToUse = state.tools[toolName]\n      ?.toolClass as IToolClassReference;\n\n    if (!ToolClassToUse) {\n      // get parent class constructor\n      const ParentClass = state.tools[parentClassName]\n        .toolClass as IToolClassReference;\n\n      // Todo: could not find a way to make this work with typescript\n      // @ts-ignore\n      class ToolInstance extends ParentClass {}\n      // @ts-ignore\n      ToolInstance.toolName = toolName;\n      // @ts-ignore\n      ToolClassToUse = ToolInstance;\n\n      state.tools[toolName] = {\n        toolClass: ToolInstance as IToolClassReference,\n      };\n    }\n\n    // add the tool to the toolGroup\n    // @ts-ignore\n    this.addTool(ToolClassToUse.toolName, configuration);\n  }\n\n  //   class InstanceTool extends parentClass;\n  // InstanceTool.constructor.toolName = name;\n  // addTool(InstanceTool,configuration)\n  /**\n   * Add a viewport to the ToolGroup. It accepts viewportId and optional\n   * renderingEngineId parameter. If renderingEngineId is not provided,\n   * it checks if cornerstone-core has more than one renderingEngine; If so,\n   * it will throw an error. If cornerstone-core has only one renderingEngine,\n   * it will use that renderingEngine.\n   *\n   * @param viewportId - The unique identifier for the viewport.\n   * @param renderingEngineId - The rendering engine to use.\n   */\n  public addViewport(viewportId: string, renderingEngineId?: string): void {\n    const renderingEngines = getRenderingEngines();\n\n    if (!renderingEngineId && renderingEngines.length > 1) {\n      throw new Error(\n        'You must specify a renderingEngineId when there are multiple rendering engines.'\n      );\n    }\n\n    const renderingEngineUIDToUse = renderingEngineId || renderingEngines[0].id;\n\n    // Don't overwrite if it already exists\n    if (\n      !this.viewportsInfo.some(({ viewportId: vpId }) => vpId === viewportId)\n    ) {\n      this.viewportsInfo.push({\n        viewportId,\n        renderingEngineId: renderingEngineUIDToUse,\n      });\n    }\n\n    // Handle the newly added viewport's mouse cursor\n    const toolName = this.getActivePrimaryMouseButtonTool();\n\n    const runtimeSettings = Settings.getRuntimeSettings();\n    if (runtimeSettings.get('useCursors')) {\n      this.setViewportsCursorByToolName(toolName);\n    }\n  }\n\n  /**\n   * Removes viewport from the toolGroup. If only renderingEngineId is defined\n   * it removes all the viewports with the same renderingEngineId, if viewportId\n   * is also provided, it will remove that specific viewport from the ToolGroup.\n   *\n   * @param renderingEngineId - renderingEngine id\n   * @param viewportId - viewport id\n   */\n  public removeViewports(renderingEngineId: string, viewportId?: string): void {\n    const indices = [];\n\n    this.viewportsInfo.forEach((vpInfo, index) => {\n      let match = false;\n      if (vpInfo.renderingEngineId === renderingEngineId) {\n        match = true;\n\n        if (viewportId && vpInfo.viewportId !== viewportId) {\n          match = false;\n        }\n      }\n      if (match) {\n        indices.push(index);\n      }\n    });\n\n    if (indices.length) {\n      // Note: Traverse the array backwards, such that when we remove items we\n      // do not immediately mess up our loop indicies.\n      for (let i = indices.length - 1; i >= 0; i--) {\n        this.viewportsInfo.splice(indices[i], 1);\n      }\n    }\n  }\n\n  public setActiveStrategy(toolName: string, strategyName: string) {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool configuration.`\n      );\n\n      return;\n    }\n\n    toolInstance.setActiveStrategy(strategyName);\n  }\n\n  setToolMode(\n    toolName: string,\n    mode: ToolModes,\n    options = {} as SetToolBindingsType\n  ): void {\n    if (!toolName) {\n      console.warn('setToolMode: toolName must be defined');\n      return;\n    }\n\n    if (mode === ToolModes.Active) {\n      this.setToolActive(toolName, options);\n      return;\n    }\n\n    if (mode === ToolModes.Passive) {\n      this.setToolPassive(toolName);\n      return;\n    }\n\n    if (mode === ToolModes.Enabled) {\n      this.setToolEnabled(toolName);\n      return;\n    }\n\n    if (mode === ToolModes.Disabled) {\n      this.setToolDisabled(toolName);\n      return;\n    }\n\n    console.warn('setToolMode: mode must be defined');\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Active. This means the tool\n   * can be actively used by the defined bindings (e.g., Mouse primary click)\n   *\n   * - Can be actively used by mouse/touch events mapped to its `ToolBinding`s.\n   * - Can add data if an annotation tool.\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   *\n   * @param toolName - tool name\n   * @param toolBindingsOptions - tool bindings\n   */\n  public setToolActive(\n    toolName: string,\n    toolBindingsOptions = {} as SetToolBindingsType\n  ): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    if (!toolInstance) {\n      console.warn(\n        `'${toolName}' instance ${toolInstance} is not registered with this toolGroup, can't set tool mode.`\n      );\n      return;\n    }\n\n    const prevBindings: IToolBinding[] = this.toolOptions[toolName]\n      ? this.toolOptions[toolName].bindings\n      : [];\n\n    const newBindings = toolBindingsOptions.bindings\n      ? toolBindingsOptions.bindings\n      : [];\n\n    // combine the new bindings with the previous bindings to avoid duplicates\n    // it allows duplicated mouse buttons as long as they don't have same\n    // modifier keys.\n    const bindingsToUse = [...prevBindings, ...newBindings].reduce(\n      (unique, binding) => {\n        const TouchBinding = binding.numTouchPoints !== undefined;\n        const MouseBinding = binding.mouseButton !== undefined;\n\n        if (\n          !unique.some((obj) => hasSameBinding(obj, binding)) &&\n          (TouchBinding || MouseBinding)\n        ) {\n          unique.push(binding);\n        }\n        return unique;\n      },\n      []\n    );\n\n    // We should not override the bindings if they are already set\n    const toolOptions: ToolOptionsType = {\n      bindings: bindingsToUse,\n      mode: Active,\n    };\n\n    this.toolOptions[toolName] = toolOptions;\n    this._toolInstances[toolName].mode = Active;\n\n    // reset the mouse cursor if tool has left click binding\n    const runtimeSettings = Settings.getRuntimeSettings();\n    const useCursor = runtimeSettings.get('useCursors');\n\n    if (this._hasMousePrimaryButtonBinding(toolBindingsOptions) && useCursor) {\n      this.setViewportsCursorByToolName(toolName);\n    } else {\n      // reset to default cursor only if there is no other tool with primary binding\n      const activeToolIdentifier = this.getActivePrimaryMouseButtonTool();\n      if (!activeToolIdentifier && useCursor) {\n        const cursor = MouseCursor.getDefinedCursor('default');\n        this._setCursorForViewports(cursor);\n      }\n    }\n\n    if (typeof toolInstance.onSetToolActive === 'function') {\n      toolInstance.onSetToolActive();\n    }\n    this._renderViewports();\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Passive.\n   *\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   *\n   * @param toolName - tool name\n   */\n  public setToolPassive(toolName: string): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    // We should only remove the primary button bindings and keep\n    // the other ones (Zoom on right click)\n    const prevToolOptions = this.getToolOptions(toolName);\n    const toolOptions = Object.assign(\n      {\n        bindings: prevToolOptions ? prevToolOptions.bindings : [],\n      },\n      prevToolOptions,\n      {\n        mode: Passive,\n      }\n    );\n\n    const defaultMousePrimary = this.getDefaultMousePrimary();\n\n    // Remove the primary button bindings without modifiers, if they exist\n    toolOptions.bindings = toolOptions.bindings.filter(\n      (binding) =>\n        binding.mouseButton !== defaultMousePrimary || binding.modifierKey\n    );\n    // If there are other bindings, set the tool to be active\n    let mode = Passive;\n    if (toolOptions.bindings.length !== 0) {\n      mode = Active;\n      toolOptions.mode = mode;\n    }\n\n    this.toolOptions[toolName] = toolOptions;\n    toolInstance.mode = mode;\n\n    if (typeof toolInstance.onSetToolPassive === 'function') {\n      toolInstance.onSetToolPassive();\n    }\n    this._renderViewports();\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Enabled.\n   *\n   * - Renders data if the tool has a `renderAnnotation` method..\n   *\n   * @param toolName - tool name\n   */\n  public setToolEnabled(toolName: string): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    const toolOptions = {\n      bindings: [],\n      mode: Enabled,\n    };\n\n    this.toolOptions[toolName] = toolOptions;\n    toolInstance.mode = Enabled;\n\n    if (typeof toolInstance.onSetToolEnabled === 'function') {\n      toolInstance.onSetToolEnabled();\n    }\n\n    this._renderViewports();\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Disabled.\n   *\n   * - Annotation does not render.\n   *\n   * @param toolName - tool name\n   */\n  public setToolDisabled(toolName: string): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    const toolOptions = {\n      bindings: [],\n      mode: Disabled,\n    };\n\n    this.toolOptions[toolName] = toolOptions;\n    toolInstance.mode = Disabled;\n\n    if (typeof toolInstance.onSetToolDisabled === 'function') {\n      toolInstance.onSetToolDisabled();\n    }\n    this._renderViewports();\n  }\n\n  /**\n   * Get the options for a given tool\n   * @param toolName - The name of the tool.\n   * @returns the tool options\n   */\n  public getToolOptions(toolName: string): ToolOptionsType {\n    const toolOptionsForTool = this.toolOptions[toolName];\n\n    if (toolOptionsForTool === undefined) {\n      return;\n    }\n\n    return toolOptionsForTool;\n  }\n\n  /**\n   * Find the name of the tool that is Active and has a primary button binding\n   * (Mouse primary click)\n   *\n   * @returns The name of the tool\n   */\n  public getActivePrimaryMouseButtonTool(): string {\n    return Object.keys(this.toolOptions).find((toolName) => {\n      const toolOptions = this.toolOptions[toolName];\n      return (\n        toolOptions.mode === Active &&\n        this._hasMousePrimaryButtonBinding(toolOptions)\n      );\n    });\n  }\n\n  public setViewportsCursorByToolName(\n    toolName: string,\n    strategyName?: string\n  ): void {\n    const cursor = this._getCursor(toolName, strategyName);\n\n    this._setCursorForViewports(cursor);\n  }\n\n  private _getCursor(toolName: string, strategyName?: string): MouseCursor {\n    let cursorName;\n    let cursor;\n\n    if (strategyName) {\n      // Try combinations with strategyName first:\n      // Try with toolName and toolInstanceName first.\n      cursorName = `${toolName}.${strategyName}`;\n\n      cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n\n      if (cursor) {\n        return cursor;\n      }\n    }\n\n    // Try with toolName and toolInstanceName first.\n    cursorName = `${toolName}`;\n\n    cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n\n    if (cursor) {\n      return cursor;\n    }\n\n    // Try with just toolName.\n    cursorName = toolName;\n\n    cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n\n    if (cursor) {\n      return cursor;\n    }\n\n    return MouseCursor.getDefinedCursor('default');\n  }\n\n  _setCursorForViewports(cursor: MouseCursor): void {\n    this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n      initElementCursor(viewport.element, cursor);\n    });\n  }\n\n  /**\n   * Set a configuration of a tool by the given toolName.\n   * Use overwrite as true in case you want to overwrite any existing configuration (be careful, depending on config change it might break the annotation flow).\n   */\n  public setToolConfiguration(\n    toolName: string,\n    configuration: Record<any, any>,\n    overwrite?: boolean\n  ): boolean {\n    if (this._toolInstances[toolName] === undefined) {\n      console.warn(\n        `Tool ${toolName} not present, can't set tool configuration.`\n      );\n      return false;\n    }\n\n    let _configuration;\n\n    if (overwrite) {\n      _configuration = configuration;\n    } else {\n      _configuration = csUtils.deepMerge(\n        this._toolInstances[toolName].configuration,\n        configuration\n      );\n    }\n\n    this._toolInstances[toolName].configuration = _configuration;\n\n    this._renderViewports();\n\n    return true;\n  }\n\n  /**\n   * Returns the default mouse primary button.\n   *\n   */\n  public getDefaultMousePrimary(): MouseBindings {\n    return MouseBindings.Primary;\n  }\n\n  /**\n   * Get the configuration of tool. It returns only the config for the given path (in case exists).\n   * ConfigurationPath is the the path of the property to get separated by '.'.\n   *\n   * @example\n   * getToolConfiguration('LengthTool', 'firstLevel.secondLevel')\n   * // get from LengthTool instance the configuration value as being LengthToolInstance[configuration][firstLevel][secondLevel]\n   */\n  getToolConfiguration(toolName: string, configurationPath: string): any {\n    if (this._toolInstances[toolName] === undefined) {\n      console.warn(\n        `Tool ${toolName} not present, can't set tool configuration.`\n      );\n      return;\n    }\n\n    const _configuration = get(\n      this._toolInstances[toolName].configuration,\n      configurationPath\n    );\n\n    return cloneDeep(_configuration);\n  }\n\n  /**\n   * Check if the tool binding is set to be primary mouse button.\n   * @param toolOptions - The options for the tool mode.\n   * @returns A boolean value.\n   */\n  private _hasMousePrimaryButtonBinding(toolOptions) {\n    const defaultMousePrimary = this.getDefaultMousePrimary();\n\n    return toolOptions?.bindings?.some(\n      (binding) =>\n        binding.mouseButton === defaultMousePrimary &&\n        binding.modifierKey === undefined\n    );\n  }\n\n  /**\n   * It re-renders the viewports in the toolGroup\n   */\n  private _renderViewports(): void {\n    this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n      getRenderingEngine(renderingEngineId).renderViewport(viewportId);\n    });\n  }\n}\n\nfunction hasSameBinding(\n  binding1: IToolBinding,\n  binding2: IToolBinding\n): boolean {\n  if (binding1.mouseButton !== binding2.mouseButton) {\n    return false;\n  }\n\n  return binding1.modifierKey === binding2.modifierKey;\n}\n","import { state } from '../index';\nimport ToolGroup from './ToolGroup';\nimport { IToolGroup } from '../../types';\n\n/**\n * Create a new tool group with the given name. ToolGroups are the new way\n * in Cornerstone3DTools to share tool configuration, state (enabled, disabled, etc.)\n * across a set of viewports.\n *\n * @param toolGroupId - The unique ID of the tool group.\n * @returns A reference to the tool group that was created.\n */\nfunction createToolGroup(toolGroupId: string): IToolGroup | undefined {\n  // Exit early if ID conflict\n  const toolGroupWithIdExists = state.toolGroups.some(\n    (tg) => tg.id === toolGroupId\n  );\n\n  if (toolGroupWithIdExists) {\n    console.warn(`'${toolGroupId}' already exists.`);\n    return;\n  }\n\n  const toolGroup = new ToolGroup(toolGroupId);\n\n  // Update state\n  state.toolGroups.push(toolGroup);\n\n  // Return reference\n  return toolGroup;\n}\n\nexport default createToolGroup;\n","import { state } from '../index';\nimport { removeSegmentationsFromToolGroup } from '../../stateManagement/segmentation';\nimport { segmentationRenderingEngine } from '../../utilities/segmentation/triggerSegmentationRender';\n// ToolGroups function entirely by their \"state\" being queried and leveraged\n// removing a ToolGroup from state is equivalent to killing it\n\n/**\n * Given a tool group Id, destroy the toolGroup. It will also cleanup all segmentations\n * associated with that tool group too\n *\n * @param toolGroupId - The Id of the tool group to be destroyed.\n */\nfunction destroyToolGroup(toolGroupId: string): void {\n  const toolGroupIndex = state.toolGroups.findIndex(\n    (tg) => tg.id === toolGroupId\n  );\n\n  if (toolGroupIndex > -1) {\n    segmentationRenderingEngine.removeToolGroup(toolGroupId);\n    // Todo: this should not happen here)\n    removeSegmentationsFromToolGroup(toolGroupId);\n    state.toolGroups.splice(toolGroupIndex, 1);\n  }\n}\n\nexport default destroyToolGroup;\n","// `BaseManager` or IManager interface for duplicate API between ToolGroup/Synchronizer?\nimport { state as csToolsState } from '../index';\nimport destroyToolGroup from './destroyToolGroup';\n\n// ToolGroups function entirely by their \"state\" being queried and leveraged\n// removing a ToolGroup from state is equivalent to killing it. Calling\n// destroyToolGroup() to make sure the SegmentationDisplayTools\n// have been removed from the toolGroup Viewports. //Todo: this makes more sense\n// to be based on events, but we don't have any toolGroup created/removed events\n\n/**\n * Destroy all tool groups\n */\nfunction destroy(): void {\n  const toolGroups = [...csToolsState.toolGroups];\n\n  for (const toolGroup of toolGroups) {\n    destroyToolGroup(toolGroup.id);\n  }\n\n  csToolsState.toolGroups = [];\n}\n\nexport default destroy;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\n\n/**\n * Given a tool group Id, return the tool group\n * @param toolGroupId - The Id of the tool group to be retrieved.\n * @returns The tool group that has the same id as the tool group id that was\n * passed in.\n */\nfunction getToolGroup(toolGroupId: string): IToolGroup | undefined {\n  return state.toolGroups.find((s) => s.id === toolGroupId);\n}\n\nexport default getToolGroup;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\n\n/**\n * Return the array of tool groups\n * @returns An array of tool groups.\n */\nfunction getAllToolGroups(): Array<IToolGroup> {\n  return state.toolGroups;\n}\n\nexport default getAllToolGroups;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\nimport { ToolModes } from '../../enums';\n\nconst MODES = [ToolModes.Active, ToolModes.Passive, ToolModes.Enabled];\n\n/**\n * Returns the toolGroups that has the given toolName as active, passive\n * or enabled.\n * @param toolName - The name of the tool\n * @returns An array of tool groups.\n */\nfunction getToolGroupsWithToolName(toolName: string): IToolGroup[] | [] {\n  return state.toolGroups.filter(({ toolOptions }) => {\n    const toolGroupToolNames = Object.keys(toolOptions);\n\n    for (let i = 0; i < toolGroupToolNames.length; i++) {\n      if (toolName !== toolGroupToolNames[i]) continue;\n\n      /* filter out tools that don't have options */\n      if (!toolOptions[toolName]) {\n        continue;\n      }\n\n      if (MODES.includes(toolOptions[toolName].mode)) {\n        return true;\n      }\n    }\n    return false;\n  });\n}\n\nexport default getToolGroupsWithToolName;\n","import {\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { defaultFrameOfReferenceSpecificAnnotationManager } from './FrameOfReferenceSpecificAnnotationManager';\nimport { Annotations, Annotation } from '../../types/AnnotationTypes';\nimport { AnnotationRemovedEventDetail } from '../../types/EventTypes';\nimport { AnnotationGroupSelector } from '../../types';\nimport {\n  triggerAnnotationAddedForElement,\n  triggerAnnotationAddedForFOR,\n} from './helpers/state';\n\n// our default annotation manager\nlet defaultManager = defaultFrameOfReferenceSpecificAnnotationManager;\n\n/**\n * It returns the default annotations manager.\n * @returns the singleton default annotations manager.\n */\nfunction getAnnotationManager() {\n  return defaultManager;\n}\n\n/**\n * Set the annotation manager to be used for rendering, adding, removing, etc.\n * @param annotationManager - The annotation manager to be used\n */\nfunction setAnnotationManager(annotationManager) {\n  defaultManager = annotationManager;\n}\n\n// set back to default frameOfReferenceSpecificAnnotationManager\nfunction resetAnnotationManager() {\n  defaultManager = defaultFrameOfReferenceSpecificAnnotationManager;\n}\n\n/**\n * Returns the annotations for a given tool with the provided options that is\n * used to filter annotations based on the annotation manager.\n *\n * In our default implementation, the options are the element and/or the FrameOfReferenceUID.\n * Hence, the getAnnotations function will return the annotations for the given tool\n * that are associated with the FrameOfReferenceUID.\n *\n * @param toolName - The name of the tool.\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n * @returns The annotations corresponding to the Frame of Reference and the toolName.\n */\nfunction getAnnotations(\n  toolName: string,\n  annotationGroupSelector: AnnotationGroupSelector\n): Annotations {\n  const manager = getAnnotationManager();\n  const groupKey = manager.getGroupKey(annotationGroupSelector);\n  return manager.getAnnotations(groupKey, toolName) as Annotations;\n}\n\n/**\n * Add the annotation to the annotation manager along with the options that is\n * used to filter the annotation manager and the annotation group that\n * the annotation belongs to.\n *\n * As a result, our default implementation will add the annotation to the\n * default manager using the FrameOfReferenceUID as the group key.\n *\n * @param annotation - The annotation that is being added to the annotations manager.\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n */\nfunction addAnnotation(\n  annotation: Annotation,\n  annotationGroupSelector: AnnotationGroupSelector\n): string {\n  if (annotation.annotationUID === undefined) {\n    annotation.annotationUID = csUtils.uuidv4() as string;\n  }\n\n  const manager = getAnnotationManager();\n  const groupKey = manager.getGroupKey(annotationGroupSelector);\n\n  manager.addAnnotation(annotation, groupKey);\n\n  // if the annotation manager selector is an element, trigger the\n  // annotation added event for that element.\n  if (annotationGroupSelector instanceof HTMLDivElement) {\n    triggerAnnotationAddedForElement(annotation, annotationGroupSelector);\n  } else {\n    // if no element is provided, render all viewports that have the\n    // same frame of reference.\n    // Todo: we should do something else here for other types of annotation managers.\n    triggerAnnotationAddedForFOR(annotation);\n  }\n\n  return annotation.annotationUID;\n}\n\n/**\n * Get the number of annotations for a given tool with the provided options that is\n * used to filter annotations based on the annotation manager.\n *\n * In our default implementation, the options are the element and/or the FrameOfReferenceUID.\n * Hence, the getNumberOfAnnotations function will return the number of annotations for the given tool\n * that are associated with the FrameOfReferenceUID.\n *\n * @param toolName - The name of the tool\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n *\n */\nfunction getNumberOfAnnotations(\n  toolName: string,\n  annotationGroupSelector: AnnotationGroupSelector\n): number {\n  const manager = getAnnotationManager();\n  const groupKey = manager.getGroupKey(annotationGroupSelector);\n\n  return manager.getNumberOfAnnotations(groupKey, toolName);\n}\n\n/**\n * Remove the annotation by UID of the annotation.\n * @param annotationUID - The unique identifier for the annotation.\n */\nfunction removeAnnotation(annotationUID: string): void {\n  const manager = getAnnotationManager();\n  const annotation = manager.getAnnotation(annotationUID);\n\n  // no need to continue in case there is no annotation.\n  if (!annotation) {\n    return;\n  }\n\n  manager.removeAnnotation(annotationUID);\n\n  // trigger annotation removed\n  const eventType = Events.ANNOTATION_REMOVED;\n\n  const eventDetail: AnnotationRemovedEventDetail = {\n    annotation,\n    annotationManagerUID: manager.uid,\n  };\n\n  triggerEvent(eventTarget, eventType, eventDetail);\n}\n\n/**\n * Get the Annotation object by its UID\n * @param annotationUID - The unique identifier of the annotation.\n */\nfunction getAnnotation(annotationUID: string): Annotation {\n  const manager = getAnnotationManager();\n  const annotation = manager.getAnnotation(annotationUID);\n\n  return annotation;\n}\n\n/**\n * It removes all annotations from the default annotation manager\n */\nfunction removeAllAnnotations(): void {\n  const manager = getAnnotationManager();\n  manager.removeAllAnnotations();\n}\n\nexport {\n  getAnnotations,\n  getNumberOfAnnotations,\n  addAnnotation,\n  getAnnotation,\n  removeAnnotation,\n  removeAllAnnotations,\n  // annotation manager\n  setAnnotationManager,\n  getAnnotationManager,\n  resetAnnotationManager,\n};\n","import {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  getEnabledElementByIds,\n} from '@cornerstonejs/core';\nimport { Events } from '../../../enums';\nimport { Annotation } from '../../../types/AnnotationTypes';\nimport { getToolGroupsWithToolName } from '../../../store/ToolGroupManager';\nimport { AnnotationAddedEventDetail } from '../../../types/EventTypes';\n\n/**\n * It triggers an event for the element when an annotation is added\n * @param annotation - Annotation - The annotation that was added.\n * @param element - The element that the annotation was added to.\n */\nfunction triggerAnnotationAddedForElement(\n  annotation: Annotation,\n  element: HTMLDivElement\n) {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewportId } = enabledElement;\n\n  const eventType = Events.ANNOTATION_ADDED;\n\n  const eventDetail: AnnotationAddedEventDetail = {\n    annotation,\n    viewportId,\n    renderingEngineId: renderingEngine.id,\n  };\n\n  triggerEvent(eventTarget, eventType, eventDetail);\n}\n\n/**\n * If the annotation has a FrameOfReferenceUID, it triggers the ANNOTATION_ADDED\n * event for all the viewports that has the same FrameOfReferenceUID.\n * @param annotation -  Annotation - The annotation that was added\n */\nfunction triggerAnnotationAddedForFOR(annotation: Annotation) {\n  const { toolName } = annotation.metadata;\n\n  const toolGroups = getToolGroupsWithToolName(toolName);\n\n  if (!toolGroups.length) {\n    return;\n  }\n\n  // Find the viewports in the toolGroups who has the same FrameOfReferenceUID\n  const viewportsToRender = [];\n\n  toolGroups.forEach((toolGroup) => {\n    toolGroup.viewportsInfo.forEach((viewportInfo) => {\n      const { renderingEngineId, viewportId } = viewportInfo;\n      const { FrameOfReferenceUID } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (annotation.metadata.FrameOfReferenceUID === FrameOfReferenceUID) {\n        viewportsToRender.push(viewportInfo);\n      }\n    });\n  });\n\n  if (!viewportsToRender.length) {\n    return;\n  }\n\n  const eventType = Events.ANNOTATION_ADDED;\n\n  viewportsToRender.forEach(({ renderingEngineId, viewportId }) => {\n    const eventDetail: AnnotationAddedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n  });\n}\n\nexport { triggerAnnotationAddedForElement, triggerAnnotationAddedForFOR };\n","import { eventTarget, Enums } from '@cornerstonejs/core';\nimport { getAnnotationManager } from './stateManagement/annotation/annotationState';\nimport { getDefaultSegmentationStateManager } from './stateManagement/segmentation/segmentationState';\nimport { Events as TOOLS_EVENTS } from './enums';\nimport { addEnabledElement, removeEnabledElement } from './store';\nimport { resetCornerstoneToolsState } from './store/state';\nimport {\n  annotationSelectionListener,\n  segmentationDataModifiedEventListener,\n  segmentationRepresentationModifiedEventListener,\n  segmentationRepresentationRemovedEventListener,\n  segmentationModifiedListener,\n  annotationModifiedListener,\n} from './eventListeners';\n\nimport * as ToolGroupManager from './store/ToolGroupManager';\n\nlet csToolsInitialized = false;\n\n/**\n * Initialize the cornerstoneTools package. It will add event listeners for mouse\n * and keyboard events.\n * @param defaultConfiguration - A configuration object that will be used to\n * initialize the tool.\n */\nexport function init(defaultConfiguration = {}): void {\n  if (csToolsInitialized) {\n    return;\n  }\n\n  _addCornerstoneEventListeners();\n  _addCornerstoneToolsEventListeners();\n\n  csToolsInitialized = true;\n}\n\n/**\n * It destroys and cleanup state for cornerstone3DTools. It removes all the tools\n * that were added to the tool groups and restore states. It also removes all\n * event listeners.\n */\nexport function destroy(): void {\n  _removeCornerstoneEventListeners();\n  _removeCornerstoneToolsEventListeners();\n\n  // Important: destroy ToolGroups first, in order for cleanup to work correctly for the\n  // added tools.\n  ToolGroupManager.destroy();\n\n  // Remove all tools\n  resetCornerstoneToolsState();\n\n  // remove all annotation.\n  const annotationManager = getAnnotationManager();\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  annotationManager.restoreAnnotations({});\n  segmentationStateManager.resetState();\n  csToolsInitialized = false;\n}\n\n/**\n * Wires up event listeners for the Cornerstone#ElementDisabled and\n * Cornerstone#ElementEnabled events.\n *\n * @internal\n */\nfunction _addCornerstoneEventListeners(): void {\n  // Clear any listeners that may already be set\n  _removeCornerstoneEventListeners();\n\n  const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n  const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n\n  eventTarget.addEventListener(elementEnabledEvent, addEnabledElement);\n  eventTarget.addEventListener(elementDisabledEvent, removeEnabledElement);\n}\n\n/**\n * Removes event listeners for the Cornerstone#ElementDisabled and\n * Cornerstone#ElementEnabled events.\n *\n */\nfunction _removeCornerstoneEventListeners(): void {\n  const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n  const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n\n  eventTarget.removeEventListener(elementEnabledEvent, addEnabledElement);\n  eventTarget.removeEventListener(elementDisabledEvent, removeEnabledElement);\n}\n\n/**\n * It adds an event listener to the event target (the cornerstoneTools object) for\n * the annotation selected and annotation modified events.\n */\nfunction _addCornerstoneToolsEventListeners() {\n  // Clear any listeners that may already be set\n  _removeCornerstoneToolsEventListeners();\n\n  /**\n   * Annotation\n   */\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_MODIFIED,\n    annotationModifiedListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  /**\n   * Segmentation\n   */\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_MODIFIED,\n    segmentationModifiedListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED,\n    segmentationDataModifiedEventListener\n  );\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED,\n    segmentationRepresentationModifiedEventListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_REMOVED,\n    segmentationRepresentationRemovedEventListener\n  );\n}\n\n/**\n * Remove the event listener for the the annotation selected and annotation modified events.\n */\nfunction _removeCornerstoneToolsEventListeners() {\n  /**\n   * Annotation\n   */\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_MODIFIED,\n    annotationModifiedListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  /**\n   * Segmentation\n   */\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_MODIFIED,\n    segmentationModifiedListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED,\n    segmentationDataModifiedEventListener\n  );\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED,\n    segmentationRepresentationModifiedEventListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_REMOVED,\n    segmentationRepresentationRemovedEventListener\n  );\n}\n\nexport default init;\n","import { getRenderingEngine, Types } from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\n\n/**\n * Synchronizer callback to synchronize the camera by updating all camera\n * values.  See also zoomPanSyncCallback\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, never\n *   the same as sourceViewport.\n * @param cameraModifiedEvent - The CAMERA_MODIFIED event.\n */\nexport default function cameraSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId,\n  cameraModifiedEvent: CustomEvent\n): void {\n  const { camera } = cameraModifiedEvent.detail;\n\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n\n  tViewport.setCamera(camera);\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport cameraSyncCallback from '../callbacks/cameraSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { CAMERA_MODIFIED } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `CAMERA_MODIFIED`\n * rendering event and calls the `cameraSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createCameraPositionSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const cameraPositionSynchronizer = createSynchronizer(\n    synchronizerName,\n    CAMERA_MODIFIED,\n    cameraSyncCallback\n  );\n\n  return cameraPositionSynchronizer;\n}\n","import {\n  BaseVolumeViewport,\n  getRenderingEngine,\n  StackViewport,\n  Types,\n} from '@cornerstonejs/core';\n\n/**\n * Synchronizer callback to synchronize the voi of volumeActors of identical volumes\n * in different viewports.\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport.\n * @param voiModifiedEvent - The VOI_MODIFIED event.\n */\nexport default function voiSyncCallback(\n  synchronizerInstance,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId,\n  voiModifiedEvent: Types.EventTypes.VoiModifiedEvent\n): void {\n  const eventDetail = voiModifiedEvent.detail;\n  const { volumeId, range, invertStateChanged, invert } = eventDetail;\n\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `Rendering Engine does not exist: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n  const tProperties:\n    | Types.VolumeViewportProperties\n    | Types.StackViewportProperties = {\n    voiRange: range,\n  };\n\n  if (invertStateChanged) {\n    tProperties.invert = invert;\n  }\n\n  if (tViewport instanceof BaseVolumeViewport) {\n    tViewport.setProperties(tProperties, volumeId);\n  } else if (tViewport instanceof StackViewport) {\n    tViewport.setProperties(tProperties);\n  } else {\n    throw new Error('Viewport type not supported.');\n  }\n\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport voiSyncCallback from '../callbacks/voiSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\n/**\n * A helper that creates a new `Synchronizer`\n * which listens to the `VOI_MODIFIED` rendering event and calls the `voiSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n *\n * @returns A new `Synchronizer` instance.\n */\nexport default function createVOISynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const VOISynchronizer = createSynchronizer(\n    synchronizerName,\n    Enums.Events.VOI_MODIFIED,\n    voiSyncCallback\n  );\n\n  return VOISynchronizer;\n}\n","import { getRenderingEngine, Types } from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\n\n/**\n * Synchronizer callback to synchronize the camera. Synchronization\n *\n * targetViewport.options.syncZoom set to false to not sync the zoom\n * targetViewport.options.syncPan set to false to not sync the pan\n\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, different\n *   from sourceViewport\n */\nexport default function zoomPanSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId\n): void {\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const options = synchronizerInstance.getOptions(targetViewport.viewportId);\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n  const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n\n  if (options?.syncZoom !== false) {\n    const srcZoom = sViewport.getZoom();\n    // Do the zoom first, as the pan is relative to the zoom level\n    tViewport.setZoom(srcZoom);\n  }\n  if (options?.syncPan !== false) {\n    const srcPan = sViewport.getPan();\n    tViewport.setPan(srcPan);\n  }\n\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport zoomPanSyncCallback from '../callbacks/zoomPanSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { CAMERA_MODIFIED } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `CAMERA_MODIFIED`\n * rendering event and calls the `cameraSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createZoomPanSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const zoomPanSynchronizer = createSynchronizer(\n    synchronizerName,\n    CAMERA_MODIFIED,\n    zoomPanSyncCallback\n  );\n\n  return zoomPanSynchronizer;\n}\n","import { vec3 } from 'gl-matrix';\nimport {\n  getRenderingEngine,\n  Types,\n  metaData,\n  utilities,\n} from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\nimport { jumpToSlice } from '../../utilities';\nimport areViewportsCoplanar from './areViewportsCoplanar ';\n/**\n * Synchronizer callback to synchronize the source viewport image to the\n * target viewports closest image in its stack. There are two scenarios\n *\n * 1) viewports are in the same frameOfReferenceUID then we can use the\n * absolute imagePositionPatient for the source viewport's current image\n * and set the target viewport's image to the closest image in its stack\n * (which might have different slice thickness so cannot use slice number)\n *\n * 2) viewports have different frameOfReferenceUIDs then we look inside the\n * registrationMetadataProvider to check if there is a corresponding matrix\n * for mapping between the source and target viewport if so it is used to\n * and is applied to the imagePositionPatient of the source viewport's to\n * get the imagePositionPatient of the target viewport's closest image in\n * its stack.\n * Note for 2) The consuming apps using Cornerstone3D (OHIF, etc) are responsible\n * to provide such data in the registrationMetadataProvider. This can be done\n * by various methods 1) Using spatialRegistrationModule inside dicom 2) assuming\n * the user has actually manually scrolled the target viewport to the correct\n * slice before initiating the synchronization 3) using some other method\n * But overall, the consuming app is responsible for providing the data.\n *\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, never\n *   the same as sourceViewport.\n * @param cameraModifiedEvent - The CAMERA_MODIFIED event.\n */\nexport default async function stackImageSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId\n): Promise<void> {\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const sViewport = renderingEngine.getViewport(\n    sourceViewport.viewportId\n  ) as Types.IStackViewport;\n\n  const tViewport = renderingEngine.getViewport(\n    targetViewport.viewportId\n  ) as Types.IStackViewport;\n\n  const frameOfReferenceUID1 = sViewport.getFrameOfReferenceUID();\n  const frameOfReferenceUID2 = tViewport.getFrameOfReferenceUID();\n\n  const imageId1 = sViewport.getCurrentImageId();\n  const imagePlaneModule1 = metaData.get('imagePlaneModule', imageId1);\n  const sourceImagePositionPatient = imagePlaneModule1.imagePositionPatient;\n\n  const targetImageIds = tViewport.getImageIds();\n\n  if (!areViewportsCoplanar(sViewport, tViewport)) {\n    return;\n  }\n\n  if (frameOfReferenceUID1 === frameOfReferenceUID2) {\n    // if frames of references are the same we can use the absolute\n    // imagePositionPatient to find the closest image in the target viewport's stack\n    const closestImageIdIndex = _getClosestImageIdIndex(\n      sourceImagePositionPatient,\n      targetImageIds\n    );\n\n    if (\n      closestImageIdIndex.index !== -1 &&\n      tViewport.getCurrentImageIdIndex() !== closestImageIdIndex.index\n    ) {\n      // await tViewport.setImageIdIndex(closestImageIdIndex.index);\n      await jumpToSlice(tViewport.element, {\n        imageIndex: closestImageIdIndex.index,\n      });\n\n      return;\n    }\n  } else {\n    // if the frame of reference is different we need to use the registrationMetadataProvider\n    // and add that to the imagePositionPatient of the source viewport to get the\n    // imagePositionPatient of the target viewport's closest image in its stack\n    const registrationMatrixMat4 =\n      utilities.spatialRegistrationMetadataProvider.get(\n        'spatialRegistrationModule',\n        [targetViewport.viewportId, sourceViewport.viewportId]\n      );\n\n    if (!registrationMatrixMat4) {\n      throw new Error(\n        `No registration matrix found for sourceViewport: ${sourceViewport.viewportId} and targetViewport: ${targetViewport.viewportId}, viewports with different frameOfReferenceUIDs must have a registration matrix in the registrationMetadataProvider. Use calculateViewportsRegistrationMatrix to calculate the matrix.`\n      );\n    }\n\n    // apply the registration matrix to the source viewport's imagePositionPatient\n    // to get the target viewport's imagePositionPatient\n    const targetImagePositionPatientWithRegistrationMatrix = vec3.transformMat4(\n      vec3.create(),\n      sourceImagePositionPatient,\n      registrationMatrixMat4\n    );\n\n    // find the closest image in the target viewport's stack to the\n    // targetImagePositionPatientWithRegistrationMatrix\n    const closestImageIdIndex2 = _getClosestImageIdIndex(\n      targetImagePositionPatientWithRegistrationMatrix,\n      targetImageIds\n    );\n\n    if (\n      closestImageIdIndex2.index !== -1 &&\n      tViewport.getCurrentImageIdIndex() !== closestImageIdIndex2.index\n    ) {\n      await jumpToSlice(tViewport.element, {\n        imageIndex: closestImageIdIndex2.index,\n      });\n    }\n  }\n}\n\nfunction _getClosestImageIdIndex(targetPoint, imageIds) {\n  // todo: this does not assume orientation yet, but that can be added later\n  return imageIds.reduce(\n    (closestImageIdIndex, imageId, index) => {\n      const { imagePositionPatient } = metaData.get(\n        'imagePlaneModule',\n        imageId\n      );\n      const distance = vec3.distance(imagePositionPatient, targetPoint);\n\n      if (distance < closestImageIdIndex.distance) {\n        return {\n          distance,\n          index,\n        };\n      }\n      return closestImageIdIndex;\n    },\n    {\n      distance: Infinity,\n      index: -1,\n    }\n  );\n}\n","import { vec3 } from 'gl-matrix';\nimport { Types } from '@cornerstonejs/core';\n\nexport default function areViewportsCoplanar(\n  viewport1: Types.IStackViewport,\n  viewport2: Types.IStackViewport\n): boolean {\n  const { viewPlaneNormal: viewPlaneNormal1 } = viewport1.getCamera();\n  const { viewPlaneNormal: viewPlaneNormal2 } = viewport2.getCamera();\n  const dotProducts = vec3.dot(viewPlaneNormal1, viewPlaneNormal2);\n  return Math.abs(dotProducts) > 0.9;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport stackImageSyncCallback from '../callbacks/stackImageSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { STACK_NEW_IMAGE } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `STACK_NEW_IMAGE`\n * rendering event and calls the `stackImageSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createStackImageSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const stackImageSynchronizer = createSynchronizer(\n    synchronizerName,\n    STACK_NEW_IMAGE,\n    stackImageSyncCallback\n  );\n\n  return stackImageSynchronizer;\n}\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n"],"names":["MouseBindings","KeyboardBindings","ToolModes","AnnotationStyleStates","Events","SegmentationRepresentations","Swipe","globalLockedAnnotationsSet","Set","setAnnotationLocked","annotation","locked","detail","makeEventDetail","lockedAnnotationsSet","has","add","added","push","lock","unlock","publish","unlockAllAnnotations","forEach","clearLockedAnnotationsSet","getAnnotationsLocked","Array","from","isAnnotationLocked","getAnnotationsLockedCount","size","checkAndDefineIsLockedProperty","isLocked","descriptor","Object","getOwnPropertyDescriptor","configurable","set","setIsLocked","get","getIsLocked","isExtensible","shouldDefineIsLockedProperty","defineProperty","enumerable","freeze","removed","delete","length","item","triggerEvent","eventTarget","ANNOTATION_LOCK_CHANGE","this","selectedAnnotationUIDs","setAnnotationSelected","annotationUID","selected","preserveSelected","clearSelectionSet","selectAnnotation","deselectAnnotation","getAnnotationsSelected","getAnnotationsSelectedByToolName","toolName","filter","getAnnotation","metadata","isAnnotationSelected","getAnnotationsSelectedCount","selection","selectionSet","value","ANNOTATION_SELECTION_CHANGE","globalHiddenAnnotationUIDsSet","setAnnotationVisibility","visible","show","annotationUIDsSet","lastHidden","hide","showAllAnnotations","isAnnotationVisible","checkAndDefineIsVisibleProperty","isVisible","setIsVisible","getIsVisible","shouldDefineIsVisibleProperty","lastVisible","hidden","ANNOTATION_VISIBILITY_CHANGE","FrameOfReferenceSpecificAnnotationManager","constructor","uid","getGroupKey","annotationGroupSelector","element","enabledElement","getEnabledElement","Error","FrameOfReferenceUID","_imageVolumeModifiedHandler","evt","eventDetail","frameOfReferenceSpecificAnnotations","annotations","keys","undefined","invalidated","getFramesOfReference","getAnnotations","groupKey","frameOfReferenceUID","frameOfReferenceAnnotations","toolSpecificAnnotations","getNumberOfAnnotations","total","addAnnotation","removeAnnotation","groupAnnotations","toolAnnotations","index","findIndex","splice","removeAnnotations","saveAnnotations","restoreAnnotations","state","getNumberOfAllAnnotations","count","removeAllAnnotations","utilities","addEventListener","Enums","IMAGE_VOLUME_MODIFIED","defaultFrameOfReferenceSpecificAnnotationManager","svgNodeCache","defaultState","isInteractingWithTool","isMultiPartToolActive","tools","toolGroups","synchronizers","enabledElements","handleRadius","resetCornerstoneToolsState","addTool","ToolClass","toolAlreadyAdded","name","toolClass","removeTool","getMouseEventPoints","elementToUse","currentTarget","viewport","clientPoint","clientX","clientY","_clientToPoint","pagePoint","pageX","pageY","_pageToPoint","canvasPoint","rect","getBoundingClientRect","left","window","pageXOffset","top","pageYOffset","_pagePointsToCanvasPoints","page","client","canvas","world","canvasToWorld","viewportId","renderingEngineId","startPoints","event","eventName","MOUSE_DOUBLE_CLICK","camera","lastPoints","currentPoints","deltaPoints","stopImmediatePropagation","preventDefault","MOUSE_MOVE","MOUSE_DOWN","MOUSE_DOWN_ACTIVATE","MOUSE_CLICK","MOUSE_UP","MOUSE_DRAG","DOUBLE_CLICK_DRAG_TOLERANCE","mouseButton","isClickEvent","clickDelay","preventClickTimeout","doubleClickState","doubleClickTimeout","mouseDownEvent","mouseUpEvent","ignoreDoubleClick","_onMouseDrag","_updateMouseEventsLastPoints","_getDeltaPoints","_isDragPastDoubleClickTolerance","_doStateMouseDownAndUp","_copyPoints","_onMouseUp","clearTimeout","_cleanUp","_onMouseMove","document","removeEventListener","delta","Math","abs","_preventClickHandler","_clearDoubleClickTimeoutAndEvents","_doMouseDown","JSON","parse","stringify","points","_subtractPoints2D","point0","point1","mouseDoubleClickIgnoreListener","buttons","setTimeout","disable","capture","enable","pointerType","mouse","touch","lastInteractionType","lastInteractionTime","handleTap","type","e","now","Date","stopPropagation","handleTapMouse","bind","handleTapTouch","attachEvents","eventList","interactionType","tapHandler","passive","removeEvents","mouseEvents","touchEvents","getTouchEventPoints","touches","changedTouches","map","i","identifier","radiusX","radiusY","force","rotationAngle","getDeltaPoints","curr","getMeanPoints","last","getDeltaDistance","_getDistance2D","_getDistance3D","getDeltaRotation","getDeltaDistanceBetweenIPoints","currentDistance","_getMeanDistanceBetweenAllIPoints","lastDistance","copyPointsList","copyPoints","reduce","prev","getMeanTouchPoints","pairedDistance","j","sqrt","pow","runtimeSettings","Settings","getRuntimeSettings","TOUCH_START","TOUCH_START_ACTIVATE","TOUCH_PRESS","TOUCH_DRAG","TOUCH_END","TOUCH_TAP","TOUCH_SWIPE","zeroIPoint","zeroIDistance","startPointsList","lastPointsList","isTouchStart","startTime","pressTimeout","pressDelay","pressMaxDistance","accumulatedDistance","swipeDistanceThreshold","swiped","swipeToleranceMs","defaultTapState","taps","tapTimeout","tapMaxDistance","tapToleranceMs","tapState","triggerEventCallback","ele","console","debug","_onTouchDrag","currentPointsList","_updateTouchEventsLastPoints","deltaDistance","totalDistance","currentTime","getTime","x","y","swipe","RIGHT","LEFT","DOWN","UP","_checkTouchSwipe","_onTouchEnd","distanceFromStart","_checkTouchTap","lp","_onTouchPress","_onTouchStart","preventGhostClick","PIXEL_STEP","LINE_HEIGHT","PAGE_HEIGHT","deltaY","spinX","spinY","pixelX","pixelY","wheelDelta","wheelDeltaY","wheelDeltaX","deltaX","deltaMode","normalizeWheel","direction","MOUSE_WHEEL","wheel","key","keyCode","keyListener","KEY_DOWN","_onKeyUp","KEY_UP","keyDownListener","getModifierKey","defaultContourConfig","renderOutline","outlineWidthActive","outlineWidthInactive","outlineOpacity","outlineOpacityInactive","renderFill","fillAlpha","fillAlphaInactive","defaultLabelmapConfig","renderFillInactive","initialDefaultState","colorLUT","segmentations","globalConfig","renderInactiveSegmentations","representations","Labelmap","Contour","defaultSegmentationStateManager","getState","getToolGroups","getColorLUT","lutIndex","resetState","getSegmentation","segmentationId","find","segmentation","addSegmentation","_initDefaultColorLUTIfNecessary","getSegmentationRepresentations","toolGroupId","toolGroupSegRepresentationsWithConfig","segmentationRepresentations","addSegmentationRepresentation","segmentationRepresentation","config","_handleActiveSegmentation","getGlobalConfig","setGlobalConfig","getSegmentationRepresentationByUID","segmentationRepresentationUID","representation","removeSegmentation","removeSegmentationRepresentation","toolGroupSegmentationRepresentations","segData","warn","removedSegmentationRepresentation","setActiveSegmentationRepresentation","toolGroupSegmentations","segmentationData","active","getToolGroupSpecificConfig","toolGroupStateWithConfig","getSegmentationRepresentationSpecificConfig","segmentationRepresentationSpecificConfig","setSegmentationRepresentationSpecificConfig","getSegmentSpecificConfig","segmentIndex","segmentSpecificConfig","setSegmentSpecificConfig","setSegmentationRepresentationConfig","addColorLUT","log","removeColorLUT","colorLUTIndex","recentlyAddedOrRemovedSegmentationRepresentation","triggerSegmentationRemoved","SEGMENTATION_REMOVED","triggerSegmentationRepresentationRemoved","SEGMENTATION_REPRESENTATION_REMOVED","triggerSegmentationRepresentationModified","SEGMENTATION_REPRESENTATION_MODIFIED","triggerSegmentationModified","segmentationIds","getSegmentations","SEGMENTATION_MODIFIED","triggerSegmentationDataModified","modifiedSlicesToUse","SEGMENTATION_DATA_MODIFIED","segmentationInput","cachedStats","segmentLabels","label","segmentsLocked","activeSegmentIndex","representationData","data","getDefaultSegmentationStateManager","suppressEvents","segmentationStateManager","getToolGroupIdsWithSegmentation","toolGroupIds","foundToolGroupIds","setToolGroupSpecificConfig","getSegmentSpecificRepresentationConfig","setSegmentSpecificRepresentationConfig","segmentationConfig","getGlobalRepresentationConfig","representationType","setGlobalRepresentationConfig","segmentationRepresentationConfig","async","volumeId","renderingEngine","id","volumeInputs","actorUID","visibility","blendMode","MAXIMUM_INTENSITY_BLEND","addVolumesToViewports","removeFromCache","removeVolumeActors","MAX_NUMBER_COLORS","labelMapConfigCache","Map","_getLabelmapConfig","toolGroupLabelmapConfig","segmentationRepresentationLabelmapConfig","isActiveLabelmap","segmentsLabelmapConfig","configToUse","outlineWidth","_needsTransferFunctionUpdate","segmentColor","segmentsHidden","cacheUID","oldConfig","forceOpacityUpdate","forceColorUpdate","oldFillAlpha","oldRenderFill","oldRenderOutline","oldOutlineWidth","oldSegmentColor","oldSegmentsHidden","slice","render","toolGroupConfig","renderingConfig","labelmapData","labelmapUID","cache","getVolume","referencedVolumeId","defaultActor","getDefaultActor","defaultActorUID","volume","referencedVolume","isSameFrameOfReference","actorEntry","getActor","_addLabelmapToViewport","cfun","ofun","numColors","min","volumeActor","actor","segmentSpecificLabelmapConfig","addRGBPoint","segmentOpacity","removePoint","addPointLong","getProperty","setRGBTransferFunction","setClamping","setScalarOpacity","setInterpolationTypeToNearest","setUseLabelOutline","setLabelOutlineOpacity","setLabelOutlineThickness","setVisibility","_setLabelmapColorAndOpacity","representationInput","toolGroupSpecificConfig","addPoint","toolGroupSpecificRepresentation","currentToolGroupConfig","mergedConfig","renderImmediate","toolGroup","viewportsInfo","viewportInfo","getEnabledElementByIds","_removeLabelmapFromToolGroupViewports","getViewportsInfo","vtkErrorMacro","appendCellData","dest","src","ptOffset","cellOffset","offset","currentIdx","DEFAULT_VALUES","outputPointsPrecision","DEFAULT","extend","publicAPI","model","initialValues","arguments","assign","classHierarchy","requestData","inData","outData","numberOfInputs","getNumberOfInputPorts","output","numPts","pointType","ttype","firstType","numVerts","numLines","numStrips","numPolys","hasPtNormals","hasPtTCoords","hasPtScalars","ds","dsNumPts","getPoints","getNumberOfPoints","getVerts","getNumberOfValues","getLines","getStrips","getPolys","getDataType","ptD","getPointData","getNormals","getTCoords","getScalars","SINGLE","FLOAT","DOUBLE","dataType","setNumberOfPoints","pointData","getData","vertData","Uint32Array","lineData","stripData","polyData","newPtNormals","newPtTCoords","newPtScalars","lds","dsNormals","numberOfComponents","numberOfTuples","getName","dsTCoords","dsScalars","getNumberOfComponents","_i","_ds","dsPD","ptNorms","ptTCoords","ptScalars","setPoints","setData","setNormals","setTCoords","setScalars","vtkAppendPolyData","vtkAppendPolyData$1","newInstance","contourRepresentation","segmentId","CONTOUR","configCachePerSegmentationRepresentationUID","getConfigCache","setConfigCache","addContourSetsToElement","geometryIds","contourRepresentationConfig","contourActorUID","appendPolyData","scalarToColorMap","segmentSpecificMap","geometryId","geometry","getGeometry","getSegmentIndex","validateGeometry","contourSet","pointArray","lines","pointIndex","getContours","contour","pointList","flatPoints","getFlatPointsArray","getType","pointIndexes","_","pointListIndex","CLOSED_PLANAR","linePoints","Float32Array","insertNextCell","polygon","setLines","getPolyData","color","getColor","scalars","setTuple","setInputData","addInputData","polyDataOutput","getOutputData","mapper","setMapper","setLineWidth","setForceOpaque","addActor","resetCamera","updateContourSets","newContourConfig","cachedConfig","contourSetsActor","newOutlineWithActive","getMapper","lut","getLookupTable","segmentsToSetToInvisible","segmentsToSetToVisible","mergedInvisibleSegments","includes","concat","contourSets","segmentSpecificConfigs","acc","affectedSegments","hasCustomSegmentSpecificConfig","values","some","polyDataModified","getInputData","appendScalarsData","getTotalNumberOfPoints","segmentConfig","modified","setLookupTable","actorUIDsToRemove","getActors","Boolean","removeActors","representationConfig","contourData","addOrUpdateContourSets","_removeContourFromToolGroupViewports","deleteConfigCache","segmentationRepresentationUIDs","immediate","toolGroupSegRepresentations","toolGroupSegRepresentationUIDs","segRepresentationUIDsToRemove","invalidSegRepresentationUIDs","segRepresentationUID","segmentationDataUID","labelmapDisplay","contourDisplay","_removeSegmentation","segmentationInputArray","segInput","representationInputArray","toolGroupSpecificRepresentationConfig","promises","_addSegmentationRepresentation","Promise","all","getActiveSegmentationRepresentation","isSegmentIndexLocked","setSegmentIndexLocked","getLockedSegments","unshift","setColorLUT","segRepresentation","getColorForSegmentIndex","setColorForSegmentIndex","colorReference","setSegmentationVisibility","indices","scalarData","getScalarData","keySet","it","parseInt","getSegmentationIndices","clear","getSegmentationVisibility","setSegmentsVisibility","segmentIndices","setSegmentVisibility","setActiveSegmentIndex","getActiveSegmentIndex","BaseTool","toolProps","defaultToolProps","initialProps","configuration","supportedInteractionTypes","strategies","defaultStrategy","activeStrategy","strategyOptions","mode","Disabled","getToolName","applyActiveStrategy","operationData","call","setConfiguration","newConfiguration","setActiveStrategy","strategyName","getTargetVolumeId","actorEntries","getClassName","getTargetIdImage","targetId","startsWith","imageId","split","imageURI","viewports","getCurrentImageId","getImageData","getTargetId","StackViewport","BaseVolumeViewport","VIEWPORT_ELEMENT","getSvgNode","canvasHash","cacheKey","domRef","appendNode","svgLayerElement","svgNode","touched","appendChild","setNodeTouched","clearUntouched","cacheEntry","removeChild","viewportElement","internalDivElement","querySelector","_getSvgLayer","svgNodeCacheForCanvas","fn","svgDrawingHelper","drawingElementType","nodeUID","attributes","currentValue","getAttribute","newValue","removeAttribute","setAttribute","circleUID","center","radius","options","dataId","fill","width","lineWidth","lineDash","strokeWidth","svgNodeHash","existingCircleElement","cx","cy","r","stroke","newCircleElement","createElementNS","ellipseUID","corner1","corner2","existingEllipse","w","h","rx","ry","svgEllipseElement","handleGroupUID","handlePoints","opacity","handle","svgns","side","parseFloat","height","existingHandleElement","newHandleElement","drawLine","lineUID","start","end","isNaN","shadow","existingLine","dropShadowStyle","x1","y1","x2","y2","style","newLine","drawPolyline","polylineUID","connectLastToFirst","existingPolyLine","pointsAttribute","point","firstPoint","newPolyLine","_createTextSpan","text","textSpanElement","textContent","_drawTextBackground","group","getBBox","insertBefore","firstChild","bBox","textUID","textLines","position","padding","fontFamily","fontSize","background","textGroupBoundingBox","existingTextGroup","textElement","textSpans","children","textSpan","textGroupAttributes","transform","textGroup","noSelectStyle","combinedStyle","_createTextElement","_drawTextGroup","centerX","centerY","findClosestPoint","sourcePoints","targetPoint","minPoint","minDistance","Number","MAX_SAFE_INTEGER","sourcePoint","distance","p1","p2","_distanceBetween","linkUID","annotationAnchorPoints","refPoint","boundingBox","boundingBoxPoints","halfWidth","halfHeight","_boundingBoxPoints","textBoxUID","textBoxPosition","textBox","mergedOptions","centering","canvasBoundingBox","drawRect","rectangleUID","_width","existingRect","tlhc","svgRectElement","drawArrow","arrowUID","angle","atan2","firstLine","cos","PI","sin","secondLine","modesFilter","enabledTools","toolGroupToolNames","toolOptions","toolInstance","getToolInstance","Active","Passive","Enabled","annotationRenderingEngine","_needsRender","_animationFrameSet","_animationFrameHandle","_renderFlaggedViewports","_throwIfDestroyed","elements","_viewportElements","_triggerRender","addViewportElement","removeViewportElement","_reset","renderViewport","_setViewportsToBeRenderedNextFrame","hasBeenDestroyed","_setAllViewportsToBeRenderedNextFrame","elementsEnabled","indexOf","_render","requestAnimationFrame","getRenderingEngine","anyRendered","tool","renderAnnotation","rendered","ANNOTATION_RENDERED","cancelAnimationFrame","EPSILON","CONSTANTS","PARALLEL_THRESHOLD","filterAnnotationsWithinSlice","spacingInNormalDirection","viewPlaneNormal","annotationsWithParallelNormals","td","annotationViewPlaneNormal","referencedImageId","imageOrientationPatient","metaData","rowCosineVec","colCosineVec","isParallel","halfSpacingInNormalDirection","focalPoint","annotationsWithinSlice","handles","dir","dot","filterAnnotationsForDisplay","colonIndex","substring","VolumeViewport","getCamera","_initializeConfig","colorHighlighted","colorSelected","colorLocked","textBoxFontFamily","textBoxFontSize","textBoxColor","textBoxColorHighlighted","textBoxColorSelected","textBoxColorLocked","textBoxBackground","textBoxLinkLineWidth","textBoxLinkLineDash","textBoxShadow","getAnnotationToolStyles","getViewportToolStyles","getToolGroupToolStyles","getDefaultToolStyles","default","setAnnotationStyles","styles","annotationSpecificStyles","setViewportToolStyles","viewportSpecificStyles","setToolGroupToolStyles","toolGroupSpecificStyles","setDefaultToolStyles","getStyleProperty","toolStyle","specifications","_getToolStyle","property","global","globalStyles","toolStyles","styleSpecifier","alternatives","list","getHierarchalPropertyStyles","highlighted","Highlighted","Selected","Locked","Default","AnnotationDisplayTool","onImageSpacingCalibrated","annotationManager","getAnnotationManager","frameOfReference","filterInteractableAnnotationsForElement","getReferencedImageId","worldPos","viewUp","imageVolume","getStyle","AnnotationTool","mouseMoveCallback","filteredAnnotations","canvasCoords","annotationsNeedToBeRedrawn","activateHandleIndex","activeHandleIndex","near","_imagePointNearToolOrHandle","nearToolAndNotMarkedActive","notNearToolAndMarkedActive","getHandleNearImagePoint","proximity","worldBoundingBox","topLeft","worldToCanvas","topRight","bottomLeft","bottomRight","annotationCanvasCoordinate","getLinkedTextBoxStyle","isSuvScaled","scaling","PT","scalingModule","suvbw","isPointNearTool","SegmentationDisplayTool","super","renderSegmentation","toolGroupViewports","segmentationRenderList","_getMergedRepresentationsConfig","viewportsRenderList","allSettled","then","onSetToolEnabled","onSetToolDisabled","segmentationRenderingEngine","_renderFlaggedToolGroups","removeToolGroup","renderToolGroupSegmentations","_setToolGroupSegmentationToBeRenderedNextFrame","getViewport","segmentationDisplayToolInstance","onSegmentationRender","IMAGE_RENDERED","SEGMENTATION_RENDERED","triggerSegmentationRender","segmentationVolume","imageData","vtkOpenGLTexture","slicesToUpdate","isArray","numSlices","getDimensions","setUpdatedFrame","getAnnotationNearPoint","getAnnotationNearPointOnEnabledElement","_toolInstances","found","findAnnotationNearPointByTool","currentId","func","wait","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","useRAF","TypeError","invokeFunc","time","args","thisArg","apply","startTimer","pendingFunc","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeSinceLastInvoke","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","max","cancel","cancelTimer","flush","pending","clip","val","low","high","calibratedPixelSpacingMetadataProvider","calibrateImageSpacing","calibrationOrScale","USER","scale","getStackViewports","getImageIds","calibrateSpacing","viewportIdsToRender","viewportType","scroll","debounceLoading","loop","numScrollSteps","currentStepIndex","sliceRangeInfo","sliceRange","newFocalPoint","newPosition","setCamera","desiredStepIndex","VolumeScrollEventDetail","currentImageId","EVENTS","VOLUME_SCROLL_OUT_OF_BOUNDS","scrollVolume","imageIndex","currentImageIndex","numberOfSlices","getTargetImageIdIndex","getCurrentImageIdIndex","_getImageSliceData","imageIndexToJump","lastSliceIndex","_getImageIndexToJump","pointInShapeCallback","pointInShapeFn","callback","boundsIJK","iMin","iMax","jMin","jMax","kMin","kMax","dimensions","getDirection","rowCosines","columnCosines","scanAxisNormal","spacing","getSpacing","rowSpacing","columnSpacing","scanAxisSpacing","worldPosStart","indexToWorld","rowStep","columnStep","scanAxisStep","yMultiple","zMultiple","k","pointIJK","dI","dJ","dK","startWorld","pointLPS","numSlicesToProject","sliceNormalIndex","xMin","Infinity","xMax","yMin","yMax","zMin","zMax","p","floor","depth","transformWorldToIndex","pointInSurroundingSphereCallback","circlePoints","centerWorld","radiusWorld","bottom","centerIJK","spacings","minSpacing","maxRadiusIJK","ceil","viewRight","topLeftWorld","bottomRightWorld","sphereCornersIJK","_computeBoundsIJKWithCamera","_getBounds","sphereObj","sphere","pointInSphere","precision","fixedPrecision","toFixed","fillSphere","_inside","scalarIndex","minSlice","maxSlice","v","fillInsideSphere","eraseInsideSphere","pointInEllipse","ellipse","circleCenterWorld","xRadius","yRadius","zRadius","z","x0","y0","z0","inside","getCanvasEllipseCorners","ellipseCanvasPoints","right","fillCircle","threshold","strategySpecificConfiguration","canvasCoordinates","topLeftCanvas","bottomRightCanvas","ellipsoidCornersIJK","every","ellipseObj","THRESHOLD_INSIDE_CIRCLE","voxelValue","isWithinThreshold","fillInsideCircle","thresholdInsideCircle","eraseInsideCircle","DEFINED_CURSORS","Symbol","STANDARD_CURSORS","MouseCursor","fallback","addFallbackStyleProperty","getDefinedCursor","definedCursors","getDefinedCursors","mouseCursor","setDefinedCursor","cursor","context","symbol","standardCursorNames","ImageMouseCursor","url","getUniqueInstanceName","prefix","BASE","iconContent","iconSize","viewBox","mousePoint","mousePointerGroupString","SEGMENTATION_CURSOR_BOUNDARIES","MINUS_RECT","PLUS_RECT","SCISSOR_ICON","RECTANGLE_ICON","CIRCLE_ICON","CursorSVG","Angle","ArrowAnnotate","Bidirectional","CobbAngle","CircleROI","EllipticalROI","FreehandROI","FreehandROISculptor","Length","Probe","RectangleROI","TextMarker","Crosshairs","Eraser","Magnify","Pan","Rotate","StackScroll","WindowLevelRegion","WindowLevel","Zoom","SegmentationFreeHandEraseInside","SegmentationFreeHandFillInside","SegmentationFreeHandEraseOutside","SegmentationFreeHandFillOutside","SegmentationRectangleEraseInside","RectangleScissor","CircleScissor","base","create","registerCursor","svgCursorNames","STATE","MODE","SVGMouseCursor","pointer","urn","getCursorURN","prototype","hasOwnProperty","getDefinedSVGCursorDescriptor","URL","createObjectURL","svgString","createSVGIconWithPointer","createSVGIcon","Blob","createSVGIconBlob","createSVGIconUrl","createSVGMouseCursor","format","template","dictionary","dict","defined","replace","match","svgSize","cursorName","CursorNames","ELEMENT_CURSORS_MAP","initElementCursor","_getElementCursors","_setElementCursor","cursors","resetElementCursor","hideElementCursor","WeakMap","BrushTool","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","brushSize","onSetToolPassive","disableCursor","preMouseDownCallback","eventData","activeSegmentationRepresentation","firstVolumeActorUID","_editData","_activateDraw","updateCursor","_dragCallback","brushCursor","_hoverData","_endCallback","_deactivateDraw","centerCanvas","getFrameOfReferenceUID","_calculateCursor","bottomCanvas","topCanvas","leftCanvas","rightCanvas","invalidateBrushCursor","toolMetadata","brushCursorUID","getBrushToolInstances","toolInstances","equalsCheck","a","b","getVoxelOverlap","voxelSpacing","voxelCenter","voxelCornersWorld","voxelCornersIJK","processVolumes","thresholdVolumeInformation","segmentationSpacing","segmentationImageData","volumeInfoList","baseVolumeIdx","volumeSize","referenceValues","lower","upper","overwrite","overlapType","overlaps","range","testOverlapRange","volumeInfo","overlapBounds","overlapTest","testRange","computeOffsetIndex","insert","PanTool","touchDragCallback","mouseDragCallback","deltaPointsWorld","updatedPosition","updatedFocalPoint","TrackballRotateTool","rotateIncrementDegrees","rotateCamera","axis","vtkCamera","getVtkActiveCamera","getViewUp","getFocalPoint","getPosition","newViewUp","currentPointsCanvas","lastPointsCanvas","clientWidth","clientHeight","normalizedPosition","normalizedPreviousPosition","radsq","op","oe","opsq","oesq","lop","loe","nop","noe","angleX","acos","sign","upVec","atV","rightV","forwardV","angleY","WindowLevelTool","_getImageDynamicRangeFromMiddleSlice","middleSliceIndex","frameLength","bytesPerVoxel","TypedArrayConstructor","Uint8Array","Uint16Array","Int16Array","frame","buffer","_getMinMax","modality","newRange","viewportsContainingVolumeUID","isPreScaled","properties","getProperties","voiRange","Modality","preScale","scaled","scalingParameters","getPTScaledNewRange","deltaPointsCanvas","getNewRange","setProperties","vp","multiplier","_getMultiplierFromDynamicRange","wwDelta","wcDelta","windowWidth","windowCenter","imageDynamicRange","calculatedDynamicRange","BitsStored","metadataDynamicRange","_getImageDynamicRangeFromViewport","ratio","round","getRange","voxel","StackScrollTool","invert","debounceIfNotLoaded","deltaPointY","pixelsPerImage","_getPixelPerImage","imageIdIndexOffset","_getNumberOfSlices","offsetHeight","angleBetweenLines","line1","line2","p3","p4","v1","v2","PlanarRotateTool","currentPointWorld","startPointWorld","cross","rotAngle","rotMat","rotatedViewUp","rotation","StackScrollMouseWheelTool","mouseWheelCallback","ZoomTool","zoomToCenter","minZoomScale","maxZoomScale","pinchToZoom","pan","initialMousePosWorld","dirVec","preTouchStartCallback","_dragParallelProjection","pinch","parallelScale","parallelScaleToSet","focalPointToSet","positionToSet","distanceToCanvasCenter","t","cappedParallelScale","thresholdExceeded","_dragPerspectiveProjection","zoomScale","directionOfProjection","tmp","_pinchCallback","parallelProjection","_panCallback","DIRECTIONS","VolumeRotateMouseWheelTool","cz","ax","ay","az","getWorldWidthAndHeightFromCorners","pos1","pos2","diagonal","diagonalLength","worldWidth","worldHeight","cosTheta","getPointInLineOfSightWithCriteria","targetVolumeId","criteriaFunction","stepSize","cameraPosition","step","bounds","getBounds","vector","pickedPoint","pointT","_inBounds","pointToPick","getIntensityFromWorld","jumpToWorld","jumpWorld","normal","dotProd","projectedDelta","_applyShift","MIPJumpToClickTool","targetViewportIds","mouseClickCallback","maxIntensity","brightestPoint","intensity","getViewports","foundToolGroup","filterViewportsWithFrameOfReferenceUID","numViewports","viewportsWithFrameOfReferenceUID","filterViewportsWithToolEnabled","viewportsWithToolEnabled","_toolGroupHasActiveEnabledOrPassiveTool","toolMode","EPS","vpCamera","getViewportIdsWithToolToRender","requireParallelNormals","INSIDE","OUTSIDE","clipT","num","denom","c","tE","tL","box","da","db","dx","dy","dist2","distanceToPointSquared","lineStart","lineEnd","d2","NaN","intersectLine","line1Start","line1End","line2Start","line2End","x3","y3","x4","y4","a1","b1","c1","r3","r4","a2","b2","c2","r1","r2","RENDERING_DEFAULTS","defaultReferenceLineColor","defaultReferenceLineControllable","defaultReferenceLineDraggableRotatable","defaultReferenceLineSlabThicknessControlsOn","OPERATION","CrosshairsTool","viewportIndicators","autoPan","enabled","panSize","referenceLinesCenterGapRadius","filterActorUIDsToSetSlabThickness","slabThicknessBlendMode","mobile","toolCenter","initializeViewport","_getAnnotations","cameraFocalPoint","rotationPoints","slabThicknessPoints","activeOperation","activeViewportIds","_getViewportsInfo","computeToolCenter","firstViewport","secondViewport","thirdViewport","normal1","normal2","point2","normal3","point3","firstPlane","secondPlane","thirdPlane","addNewAnnotation","_jump","viewportIdArray","otherViewport","viewportControllable","_getReferenceLineControllable","viewportDraggableRotatable","_getReferenceLineDraggableRotatable","_activateModify","handleSelectedCallback","_pointNearTool","toolSelectedCallback","onCameraModified","viewportAnnotation","currentCamera","oldCameraPosition","deltaCameraPosition","oldCameraFocalPoint","deltaCameraFocalPoint","isRotation","cameraModifiedInPlane","getViewportIds","_autoPanViewportIfNecessary","filteredToolAnnotations","imageNeedsUpdate","previousActiveOperation","previousActiveViewportIds","_areViewportIdArraysEqual","renderStatus","canvasDiagonalLength","canvasMinDimensionLength","crosshairCenterCanvas","otherViewportAnnotations","_filterAnnotationsByUniqueViewportOrientations","referenceLines","canvasBox","otherCamera","otherViewportControllable","otherViewportDraggableRotatable","otherViewportSlabThicknessControlsOn","_getReferenceLineSlabThicknessControlsOn","otherCanvasDiagonalLength","otherCanvasCenter","otherViewportCenterWorld","pointWorld0","pointWorld1","pointCanvas0","otherViewportCenterCanvas","canvasUnitVectorFromCenter","canvasVectorFromCenterLong","canvasVectorFromCenterMid","canvasVectorFromCenterShort","canvasVectorFromCenterStart","centerGap","refLinePointOne","refLinePointTwo","refLinePointThree","refLinePointFour","refLinesCenter","rotHandleOne","rotHandleTwo","stHandlesCenterCanvas","stHandlesCenterWorld","worldUnitVectorFromCenter","matrix","buildFromDegree","rotate","worldUnitOrthoVectorFromCenter","slabThicknessValue","getSlabThickness","worldOrthoVectorFromCenter","worldVerticalRefPoint","canvasVerticalRefPoint","canvasOrthoVectorFromCenter","stLinePointOne","stLinePointTwo","stLinePointThree","stLinePointFour","stHandleOne","stHandleTwo","stHandleThree","stHandleFour","newRtpoints","newStpoints","viewportColor","_getReferenceLineColor","line","lineIndex","viewportSlabThicknessControlsOn","selectedViewportId","lineActive","rotHandlesActive","rotationHandles","rotHandleWorldOne","rotHandleWorldTwo","slabThicknessHandlesActive","slabThicknessHandles","slabThicknessHandleWorldOne","slabThicknessHandleWorldTwo","slabThicknessHandleWorldThree","slabThicknessHandleWorldFour","handleUID","_onNewVolume","viewportIdArrayOne","viewportIdArrayTwo","itemFound","_getAnnotationsForViewportsWithDifferentCameras","viewportsWithDifferentCameras","cameraOfTarget","_filterViewportWithSameOrientation","referenceAnnotation","linkedViewportAnnotations","otherViewPlaneNormal","otherLinkedViewportAnnotationsFromSameScene","otherViewportsAnnotationsWithUniqueCameras","cameraFound","jj","cameraOfStocked","otherNonLinkedViewportAnnotationsFromSameScene","_checkIfViewportsRenderingSameScene","actors","otherViewportActors","sameScene","viewportsAnnotationsToUpdate","_applyDeltaShiftToSelectedViewportCameras","_deactivateModify","editData","dir1","dir2","finalPointCanvas","originalPointCanvas","_isClockWise","rotationAxis","buildFromRadian","translate","otherViewportsIds","renderViewports","referenceAnnotations","viewportsIds","mod","currentPoint","currentCenter","otherViewportRotationPoints","dotProdDirection","projectedDirection","normalizedProjectedDirection","normalizedProjectedDelta","MINIMUM_SLAB_THICKNESS","_pointNearReferenceLine","setSlabThickness","lineViewport","lineSegment1","distanceToPoint1","lineSegment2","distanceToPoint2","getReferenceLineColor","getReferenceLineControllable","getReferenceLineDraggableRotatable","getReferenceLineSlabThicknessControlsOn","onSetToolActive","_unsubscribeToViewportNewVolumeSet","_subscribeToViewportNewVolumeSet","_getRotationHandleNearImagePoint","_getSlabThicknessHandleNearImagePoint","VOLUME_VIEWPORT_NEW_VOLUME","toolCenterCanvas","visiblePointCanvas","visiblePointWorld","slabThickness","actorUIDs","blendModeToUse","COMPOSITE","setBlendMode","_applyDeltaShiftToViewportCamera","stPointLineCanvas1","stPointLineCanvas2","stPointLineCanvas1Start","stPointLineCanvas2Start","MAGNIFY_VIEWPORT_ID","MagnifyTool","magnifySize","magnifyWidth","magnifyHeight","_getReferencedImageId","_createMagnificationViewport","canvasPos","magnifyToolElement","magnifyElement","createElement","classList","display","viewportInput","STACK","enableElement","magnifyViewport","setStack","_dragEndCallback","disableElement","ReferenceLines","sourceViewportId","_init","getRenderingEngines","sourceViewport","sourceViewportCanvasCornersInWorld","newAnnotation","targetViewport","sourceViewPlaneNormal","targetViewportPlane","pointSet1","pointSet2","pointSetToUse","topBottomVec","topRightVec","newNormal","isPerpendicular","lineStartWorld","lineEndWorld","vec1","vec2","CalibrationTypes","PIXEL_UNITS","getCalibratedLengthUnits","image","calibration","hasPixelSpacing","units","UNCALIBRATED","SequenceOfUltrasoundRegions","getCalibratedAreaUnits","getCalibratedScale","getCalibratedAspect","aspect","getTextBoxCoordsCanvas","annotationCanvasPoints","corners","canvasPoints","handlesLeftToRight","sort","_compareX","handlesTopToBottom","_compareY","_determineCorners","BidirectionalTool","preventHandleOutsideImage","canvasPoint1","canvasPoint2","distanceToPoint","movingTextBox","handleIndex","worldPosition","hasMoved","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","isHandleOutsideImage","eventType","ANNOTATION_COMPLETED","isDrawing","_dragDrawCallback","canvasCoordPoints","shortAxisDistFromCenter","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","_dragModifyCallback","worldPosDelta","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","unit","_throttledCalculateCachedStats","_calculateCachedStats","activeHandleCanvasCoords","dataId1","dataId2","_getTextLines","canvasTextBoxCoords","vectorInSecondLineDirection","extendedSecondLineSegment","worldPos1","worldPos2","worldPos3","worldPos4","targetIds","dist1","_calculateLength","index1","index2","index3","index4","_isInsideVolume","ANNOTATION_MODIFIED","vector1","vector2","dz","LengthTool","cachedVolumeStats","getModalityUnit","petSeriesModule","_handlePTModality","isViewportPreScaled","ProbeTool","eventDispatchDetail","modalityUnitOptions","referencedImageURI","hasImageURI","currentImageURI","textCanvasCoordinates","modalityUnit","DragProbeTool","postMouseDownCallback","postTouchStartCallback","lineSegments","rectToLineSegments","segment","RectangleROITool","_getRectangleImageCoordinates","bottomLeftCanvas","topRightCanvas","bottomLeftWorld","topRightWorld","areaUnit","area","mean","stdDev","worldPos1Index","worldPos2Index","valueMinusMean","getWorldWidthAndHeightFromTwoPoints","EllipticalROITool","centerPointRadius","initialRotation","getRotation","canvasCorners","minorEllipse","majorEllipse","pointInMinorEllipse","_pointInEllipseCanvas","canvasWidth","canvasHeight","originalHandleCanvas","pointsCanvas","currentCanvasPoints","dX","dY","_dragHandle","dYCanvas","canvasBottom","canvasTop","newHalfCanvasWidth","canvasLeft","canvasRight","dXCanvas","newHalfCanvasHeight","centerPoint","_getCanvasEllipseCenter","isEmptyArea","areaLine","location","normalized","getCanvasCircleRadius","circleCanvasPoints","getCanvasCircleCorners","CircleROITool","radiusPoint","canvasCenter","canvasEnd","radiusUnit","perimeter","radiusLine","getIntersectionCoordinatesWithPolyline","q1","closed","polylineIndexes","initialI","intersections","doesIntersect","getAllIntersectionsWithPolyline","intersection","getIntersection","getFirstIntersectionWithPolyline","getClosestIntersectionWithPolyline","q2","distances","intersectionPoints","midpoint","orient","orientation","onSegment","q","orientationValue","denominator","numerator1","numerator2","subPixelResolution","xDir","yDir","volumeSpacing","iVector","jVector","kVector","absViewRightDotI","absViewRightDotJ","absViewRightDotK","xSpacing","absViewUpDotI","absViewUpDotJ","absViewUpDotK","ySpacing","closeContourProximity","newCanvasPoint","commonData","lastWorldPos","newWorldPos","worldPosDiff","xDist","yDist","numPointsToAdd","lastCanvasPoint","canvasDist","canvasDir","distPerPoint","p1p","p1p2","p1p2Mag","projectionVectorMag","p1p2UnitVector","projectionVector","projectionPoint","calculateAreaOfPoints","n","interpolateSegmentPoints","iniIndex","endIndex","knotsRatioPercentage","segmentSize","amountOfKnots","minKnotDistance","interpolationIniIndex","interpolationEndIndex","segmentPointsUnchangedBeg","segmentPointsUnchangedEnd","interpolatedPoints","originalPoints","knotsIndexes","xInterpolator","yInterpolator","zInterpolator","interpolatePoints","minDistributionDistance","closedInterval","intervalIni","intervalEnd","intervalSize","continuosDistributionValue","getContinuousUniformDistributionValues","shouldInterpolate","interpolation","interpolateOnAdd","interpolateOnEdit","followingIndex","circularFindNextIndexBy","listParams","otherListParams","criteria","indexDelimiter","otherIndexDelimiter","otherPoints","pointsLength","otherPointsLength","startIndex","otherStartIndex","findChangedSegment","previousPoints","firstMatchIndex","previousFirstMatchIndex","pointA","pointB","findMatchIndexes","toBeNotEqualCriteria","isEqualByProximity","lowDiffIndex","lowOtherDiffIndex","highIndex","getInterpolatedPoints","pointsOfReference","knotsRatioPercentageOnAdd","knotsRatioPercentageOnEdit","changedIniIndex","changedEndIndex","findOpenUShapedContourVectorToPeak","first","firstToLastUnitVector","normalVector1","normalVector2","centerOfFirstToLast","furthest","dist","addCanvasPointsToArray","pointsAreWithinCloseContourProximity","getSubPixelSpacingAndXYDirections","activateDraw","drawData","polylineIndex","mouseUpDrawCallback","mouseDragDrawCallback","deactivateDraw","lastWorldPoint","crossingIndex","findCrossingIndexDuringCreate","applyCreateOnCross","numPointsAdded","allowOpenContours","lastPoint","completeDrawOpenContour","completeDrawClosedContour","removeCrossedLinesOnCompleteDraw","haltDrawing","pop","worldPoints","polyline","isOpenContour","triggerAnnotationCompleted","numPoints","endToStart","canvasPointsMinusEnds","lineSegment","indexToRemoveUpTo","isOpenUShapeContour","openUShapeContourVectorToPeak","pointsLessLastOne","shift","activateClosedContourEdit","cancelDrawing","minPoints","shouldHaltDrawing","checkForFirstCrossing","isClosedContour","editCanvasPoints","prevCanvasPoints","crossedLineSegment","startCrossingIndex","removePointsUpUntilFirstCrossing","checkCanvasEditFallbackProximity","firstEditCanvasPoint","distanceIndexPairs","prevCanvasPoint","twoClosestDistanceIndexPairs","lowestIndex","extendedPoint","crossedLineSegmentFromExtendedPoint","pointsToPrepend","editIndex","numPointsToRemove","checkForSecondCrossing","removePointsAfterSecondCrossing","lastLine","didCrossLine","findSnapIndex","lastEditCanvasPoint","editCanvasPointsLessLastOne","snapCanvasPosition","checkAndRemoveCrossesOnEditLine","editIndexCrossed","isEditingClosed","mouseUpClosedContourEditCallback","mouseDragClosedContourEditCallback","deactivateClosedContourEdit","currentEditIndex","snapIndex","fusedCanvasPoints","fuseEditPointsWithClosedContour","finishEditAndStartNewEdit","triggerAnnotationModified","augmentedEditCanvasPoints","lowIndex","distanceBetweenLowAndFirstPoint","distanceBetweenLowAndLastPoint","distanceBetweenHighAndFirstPoint","distanceBetweenHighAndLastPoint","inPlaceDistance","reverseDistance","completeClosedContourEdit","cancelClosedContourEdit","activateOpenContourEdit","isEditingOpen","mouseUpOpenContourEditCallback","mouseDragOpenContourEditCallback","deactivateOpenContourEdit","fuseEditPointsWithOpenContour","finishEditOpenOnSecondCrossing","checkIfShouldOverwriteAnEnd","openContourEditOverwriteEnd","fuseEditPointsForOpenContourEndEdit","activateOpenContourEndEdit","lastCanvasPos","aDotb","magA","magB","newCanvasPoints","pointsToRender","completeOpenContourEdit","cancelOpenContourEdit","reverse","_getRenderingOptions","renderContour","findOpenUShapedContourVectorToPeakOnRender","calculateUShapeContourVectorToPeakIfNotPresent","renderOpenUShapedContour","renderOpenContour","renderClosedContour","alwaysRenderOpenContourHandles","handlePoint","firstCanvasPoint","openUShapeContourVectorToPeakCanvas","renderContourBeingDrawn","renderClosedContourBeingEdited","renderOpenContourBeingEdited","pointCanProjectOnLine","PlanarFreehandROITool","calculateStats","previousPoint","pStart","pEnd","activeAnnotationUID","_renderStats","worldPosIndex","iDelta","jDelta","kDelta","worldPosEnd","canvasPosEnd","sum","sumSquares","curRow","intersectionCounter","annotationsToDisplay","ArrowAnnotateTool","getTextCallback","changeTextCallback","arrowFirst","touchTapCallback","doubleClickCallback","clickedAnnotation","_doneChangingTextCallback","updatedText","doneChangingTextCallback","prompt","AngleTool","angleStartedNotYetCompleted","canvasPoint3","String","fromCharCode","midPoint","ret","len","arg","midPoint2","CobbAngleTool","point4","canvasPoint4","_mouseUpCallback","_mouseDownCallback","_mouseDragCallback","seg1","seg2","minDist","MAX_VALUE","ReferenceCursors","displayThreshold","positionSync","_elementWithCursor","_currentCursorWorldPosition","_currentCanvasPosition","_disableCursorEnabled","getActiveAnnotation","createInitialAnnotation","updateAnnotationPosition","previousCamera","oldFocalPoint","cameraNormal","dotProduct","isElementWithCursor","updateViewportImage","lineWidthBase","crosshairUIDs","centerSpace","lineLength","viewportIds","plane","currentMousePosition","closestIndex","setImageIdIndex","normalizedViewPlane","scaledPlaneNormal","viewportsWithAnnotations","ScaleOverlayTool","scaleLocation","viewportCanvasCornersInWorld","thisAnnotation","computeScaleSize","worldWidthViewport","worldHeightViewport","scaleSizes","currentScaleSize","scaleSize","computeEndScaleTicks","locationTickOffset","endTick1","endTick2","computeInnerScaleTicks","leftTick","rightTick","canvasScaleSize","tickIds","tickUIDs","tickCoordinates","numberSmallTicks","tickSpacing","locationOffset","computeWorldScaleCoordinates","pointSet","worldCoordinates","midpointLocation","computeCanvasScaleCoordinates","canvasSize","vscaleBounds","hscaleBounds","scaleCanvasCoordinates","worldDistanceOnCanvas","computeScaleBounds","horizontalReduction","verticalReduction","hReduction","vReduction","locationBounds","canvasBounds","scaleTicks","scaleId","leftTickId","rightTickId","locationTextOffest","textBoxLines","scaleSizeDisplayValue","scaleSizeUnits","toString","fillRectangle","constraintFn","rectangleCornersIJK","coord","fillInsideRectangle","eraseRectangle","eraseInsideRectangle","RectangleScissorsTool","FILL_INSIDE","ERASE_INSIDE","CircleScissorsTool","SphereScissorsTool","RectangleROIThresholdTool","RectangleROIStartEndThresholdTool","numSlicesToPropagate","spacingInNormal","_getEndSliceIndex","startSlice","endSlice","projectionPoints","projectionPointsImageIds","_computeProjectionPoints","sliceIndex","firstOrLastSlice","lineDashToUse","_calculateCachedStatsTool","startIJK","endIJK","indexToWorldVec3","endWorld","newProjectionPoints","newPoint","RectanglePoints","endPos","imageIds","imageIdIndex","imagePositionPatient","defaultEquals","lpad","string","character","join","getter","seed","onFlood","onBoundary","equals","diagonals","startNode","permutations","perms","permutation","permute","perm","array","countNonZeroes","prunedPermutations","stack","flooded","visits","currentArgs","flood","boundaries","job","getArgs","prevArgs","previousArgs","markAsVisited","node","safely","member","markAsFlooded","nextArgs","pushAdjacent","markAsBoundary","f","error","isEqual","PaintFillTool","fixedDimension","getFixedDimension","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","floodFillResult","scalarDataPosition","getFramesModified","minJ","maxJ","framesModified","seedIndex3D","getScalarDataPosition","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","xDirection","yDirection","zDirection","absoluteOfViewPlaneNormal","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","referenceVolume","AllBoundsIJK","pointsToUse","accumulator","annotationUIDs","validToolNames","_validateAnnotations","labelmaps","origin","labelmap","outputData","arrayType","volumeLoader","isValidRepresentationConfig","isValidLabelmapConfig","getDefaultRepresentationConfig","createLabelmapVolumeForViewport","input","_cloneDeep","setBrushSizeForToolGroup","viewportsInfoArray","getBrushSizeForToolGroup","brushToolInstance","setBrushThresholdForToolGroup","getBrushThresholdForToolGroup","segmentationIndex","_handleSameSizeVolume","getPoint","callbackOverlap","_handleDifferentSizeVolume","getOrientationStringLPS","orientationX","orientationY","orientationZ","MIN","invertOrientationStringLPS","orientationString","inverted","toUpperCase","addToolState","getToolState","dynamicVolumesPlayingMap","playClip","playClipOptions","playClipTimeouts","playClipIsTimeVarying","dynamicCineEnabled","_getVolumeFromViewport","playClipContext","frameTimeVectorEnabled","_createStackViewportCinePlayContext","isDynamicVolume","numTimePoints","timePointIndex","_createDynamicVolumeViewportCinePlayContext","cachedScrollInfo","scrollInfo","getScrollInfo","volumeViewPlaneNormal","_createVolumeViewportCinePlayContext","_createCinePlayContext","playClipData","isDynamicCinePlaying","_stopDynamicVolumeCine","_stopClip","intervalId","framesPerSecond","lastFrameTimeStamp","ignoreFrameTimeVector","usingFrameTimeVector","frameTimeVector","speed","frameTimeVectorSpeedMultiplier","timeouts","isTimeVarying","sample","delay","limit","_getPlayClipTimeouts","playClipAction","newStepIndex","CLIP_STOPPED","playClipTimeoutHandler","setInterval","CLIP_STARTED","stopClip","stopDynamicCine","cineToolData","clearInterval","_stopClipWithData","dynamicCineElement","volumes","_getVolumesFromViewport","interpolateAnnotation","shouldPreventInterpolation","interpolatedCanvasPoints","requestType","Prefetch","priority","resetPrefetchTimeout","maxImagesToPrefetch","preserveExistingPool","resetPrefetchDelay","lowEnd","highEnd","arr","getStackData","currentImageIdIndex","prefetch","stackPrefetchData","stackPrefetch","indicesToRequest","removeFromList","getImageLoadObject","imageLoadPoolManager","clearRequestStack","nearest","idx","nearestIndex","nextImageIdIndex","lowerIndex","higherIndex","imageIdsToPrefetch","currentIndex","shouldLoadLower","shouldLoadHigher","requestFn","imageLoader","useNorm16Texture","rendering","targetBuffer","addRequest","getPromiseRemovedHandler","stackData","onImageUpdated","target","indexOfCurrentImage","STACK_NEW_IMAGE","promiseRemovedHandler","IMAGE_CACHE_IMAGE_REMOVED","getConfiguration","dynamicVolume","frames","frameNumbers","maskVolumeId","imageCoordinate","dataInTime","indexArray","allScalarData","getScalarDataArrays","indexValues","activeScalarData","_getTimePointDataMask","coordinate","worldToIndex","_getTimePointDataCoordinate","operation","numFrames","typedArrays","arrayLength","finalArray","SUM","currentArray","SUBTRACT","AVERAGE","onImageRendered","customCallbackHandler","handlerType","customFunction","activeTool","filterToolsWithMoveableHandles","ToolAndAnnotations","toolsWithMoveableHandles","filterMoveableAnnotationTools","moveableAnnotationTools","shiftKey","ctrlKey","ShiftCtrl","altKey","ShiftAlt","metaKey","ShiftMeta","Shift","CtrlAlt","CtrlMeta","Ctrl","AltMeta","Alt","Meta","getActiveToolForMouseEvent","mouseEvent","modifierKey","getMouseModifier","defaultMousePrimary","getDefaultMousePrimary","correctBinding","bindings","binding","getToolsWithModesForMouseEvent","evtButton","mouseDown","isPrimaryClick","applicableTools","annotationToolsWithAnnotations","annotationToolsWithMoveableHandles","isMultiSelect","getAnnotationForSelection","toggleAnnotationSelection","toolsWithMovableHandles","mouseDownActivate","mouseDrag","mouseMove","activeAndPassiveTools","toolsWithAnnotations","toolsWithoutAnnotations","toolAndAnnotation","getActiveToolForKeyboardEvent","keyDown","setViewportsCursorByToolName","keyUp","CAMERA_MODIFIED","IMAGE_SPACING_CALIBRATED","getActiveToolForTouchEvent","touchEvent","numTouchPoints","getToolsWithModesForTouchEvent","touchStart","touchStartActivate","touchDrag","addEnabledElement","svgLayer","svgLayerId","pointerEvents","defs","feOffset","feColorMatrix","feBlend","_createSvgAnnotationLayer","newNode","viewportUid","renderingEngineUid","dataset","elementHash","_setSvgNodeCache","imageRenderedEventDispatcher","cameraModifiedEventDispatcher","imageSpacingCalibratedEventDispatcher","synchronizersFilteredByIds","synchronizer","notDisabled","isDisabled","hasSourceViewport","hasTargetViewport","toolGroupFilteredByIds","tg","_removeViewportFromSynchronizers","sync","remove","_removeViewportFromToolGroup","removeViewports","_removeEnabledElement","foundElementIndex","el","elementDisabledEvt","_resetSvgNodeCache","internalViewportNode","_removeSvgNode","cancelActiveManipulations","toolsWithData","_getViewportIndex","ar","_containsViewport","synchronizerId","eventHandler","_viewportOptions","_onEvent","_ignoreFiredEvents","_targetViewports","_sourceViewports","s","fireEvent","_enabled","_eventName","_eventHandler","_hasSourceElements","setOptions","getOptions","addTarget","addSource","_updateDisableHandlers","getSourceViewports","getTargetViewports","destroy","removeSource","removeTarget","_getViewportElement","sourceEvent","ex","vp1","vp2","unique","vps","u","_getUniqueViewports","_remove","disableHandler","elementDisabledEvent","vUid","ELEMENT_DISABLED","synchronizerIndex","ToolGroup","toolInstanceName","toolDefinition","hasToolName","localToolInstance","instantiatedTool","addToolInstance","parentClassName","ToolClassToUse","ParentClass","ToolInstance","addViewport","renderingEngines","renderingEngineUIDToUse","vpId","getActivePrimaryMouseButtonTool","vpInfo","setToolMode","setToolDisabled","setToolEnabled","setToolPassive","setToolActive","toolBindingsOptions","TouchBinding","MouseBinding","obj","binding1","binding2","hasSameBinding","useCursor","_hasMousePrimaryButtonBinding","_setCursorForViewports","_renderViewports","prevToolOptions","getToolOptions","toolOptionsForTool","_getCursor","setToolConfiguration","_configuration","Primary","getToolConfiguration","configurationPath","toolGroupIndex","MODES","defaultManager","setAnnotationManager","resetAnnotationManager","manager","HTMLDivElement","ANNOTATION_ADDED","triggerAnnotationAddedForElement","viewportsToRender","triggerAnnotationAddedForFOR","ANNOTATION_REMOVED","annotationManagerUID","csToolsInitialized","init","defaultConfiguration","_removeCornerstoneEventListeners","elementEnabledEvent","ELEMENT_ENABLED","_addCornerstoneEventListeners","_removeCornerstoneToolsEventListeners","segmentationDataModifiedEventListener","segmentationRepresentationModifiedEventListener","cameraSyncCallback","synchronizerInstance","cameraModifiedEvent","tViewport","createCameraPositionSynchronizer","synchronizerName","voiSyncCallback","voiModifiedEvent","invertStateChanged","tProperties","createVOISynchronizer","VOI_MODIFIED","zoomPanSyncCallback","sViewport","syncZoom","srcZoom","getZoom","setZoom","syncPan","srcPan","getPan","setPan","createZoomPanSynchronizer","stackImageSyncCallback","frameOfReferenceUID1","frameOfReferenceUID2","imageId1","sourceImagePositionPatient","targetImageIds","viewport1","viewport2","viewPlaneNormal1","viewPlaneNormal2","dotProducts","areViewportsCoplanar","closestImageIdIndex","_getClosestImageIdIndex","registrationMatrixMat4","closestImageIdIndex2","createStackImageSynchronizer","HASH_UNDEFINED","INFINITY","funcTag","genTag","symbolTag","reIsDeepProp","reIsPlainProp","reLeadingDot","rePropName","reEscapeChar","reIsHostCtor","freeGlobal","g","freeSelf","self","root","Function","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","getNative","nativeCreate","symbolProto","symbolToString","Hash","entries","entry","ListCache","MapCache","assocIndexOf","other","baseGet","object","path","isSymbol","test","isKey","stringToPath","toKey","baseIsNative","isObject","pattern","tag","isFunction","isHostObject","toSource","getMapData","__data__","getValue","memoize","baseToString","number","quote","resolver","memoized","Cache","isObjectLike","module","exports","defaultValue"],"sourceRoot":""}